<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[转] Decorator 装饰器的实现原理及实践</title>
      <link href="/notes/decorator/"/>
      <url>/notes/decorator/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/63414586"><img src="/images/notes/decorator/p1.png" alt="&#39;decorator-p1&#39;" loading="lazy"></a></p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 土豆の学习笔记 </category>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> decorator </tag>
            
            <tag> 装饰器 </tag>
            
            <tag> javascript </tag>
            
            <tag> es7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth2.0 的四种授权方式</title>
      <link href="/notes/oauth/"/>
      <url>/notes/oauth/</url>
      
        <content type="html"><![CDATA[<h3 id="Before…"><a href="#Before…" class="headerlink" title="Before…"></a>Before…</h3><blockquote><p><code>OAuth 2.0</code> 通过授权机制，让第三方应用可以获取用户或者系统数据。</p></blockquote><p>前后端在进行通信(或者称之为数据请求)时，需要在请求时携带用户 <code>token</code>，用来验证用户的登录情况减轻服务器压力。</p><p><code>OAuth</code> 的核心作用就是向客户端颁发令牌(<code>token</code>)。</p><p>通常所说的令牌<code>token</code>，分为两种：客户端令牌(任何时候都能访问资源的凭证，通常由 <code>client_id(身份id)/client_secret(密钥：只能保存到后端)</code> 生成)、用户令牌(完成登录后生成)。</p><span id="more"></span><h3 id="授权方式"><a href="#授权方式" class="headerlink" title="授权方式"></a>授权方式</h3><h4 id="授权码"><a href="#授权码" class="headerlink" title="授权码"></a>授权码</h4><blockquote><p>适用于有中间层的 <code>web</code> 项目,并将生成的 <code>token</code> 存到 <code>node</code> 后端，避免令牌泄露。这种方式安全性最高，也是我最近项目用到的鉴权方式。</p></blockquote><ul><li><p>步骤一：网站<code>A(client)</code>点击登录(或者其他链接)，跳转至网站<code>B(JAVA或者其他后端)：https://b.com/oauth/authorize?query</code>,<code>query</code>参数如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"response_type"</span><span class="token operator">:</span> <span class="token string">"code"</span><span class="token punctuation">,</span> <span class="token comment">// 表示要求返回授权码</span>  <span class="token property">"client_id"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment">// 应用标识 告诉 B 是哪个站点应用在请求</span>  <span class="token property">"redirect_uri"</span><span class="token operator">:</span> <span class="token string">""</span> <span class="token comment">// 参数表示 B 完成完成授权过程后重定向的链接地址</span>  <span class="token comment">// "scope": ""  // 参数表示要求的授权范围，可不设</span><span class="token punctuation">&#125;</span></code></pre><ul><li><p>登录逻辑放到了前端<code>A</code>，那么由前端<code>A</code>完成账号密码录入，发起登录请求<code>https://b.com/oauth/login(提供登录成功后的重定向地址 successRedirect... 注意区分 redirect_uri)</code>，由网站<code>B</code>重定向到<code>A(node)：/a.com/oauth/successRedirect(中间层获取授权码)</code>，由<code>A(node: /successRedirect)</code>拿到授权码进行重定向<code>(redirect_uri)</code>…</p></li><li><p>登录逻辑放到了后端<code>B</code>，那么在点击了<code>A</code>提供的链接后，会在<code>B</code>网站登录页完成登录并提示接受<code>A</code>授权，完成登录过程,并生成授权码，然后重定向…</p></li></ul><p>基于两种不同场景下的登录，最终都将生成授权码，并作为<code>query</code>携带，重定向回<code>A(node的一个接口，eg. https://a.com/SSOCheckUser?code=xxx)</code></p></li><li><p>步骤二：网站<code>A(node)</code>拿到授权码(<code>code</code>)后，就可以向<code>B</code>请求令牌 <code>https://b.com/oauth/token?query</code>，<code>query</code>参数如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"client_id"</span><span class="token operator">:</span> <span class="token string">"CLIENT_ID"</span><span class="token punctuation">,</span> <span class="token comment">// 应用标识</span>  <span class="token property">"client_secret"</span><span class="token operator">:</span> <span class="token string">"CLIENT_SECRET"</span><span class="token punctuation">,</span> <span class="token comment">// 密钥，只能存储在 A(node) 层</span>  <span class="token comment">// B 通过 A 提供 client_id client_secret 来判定 A 的身份 (身份识别码，这个通常是会备案到网站 B)</span>  <span class="token property">"grant_type"</span><span class="token operator">:</span> <span class="token string">"authorization_code"</span><span class="token punctuation">,</span> <span class="token comment">// 标识授权方式是授权码</span>  <span class="token property">"code"</span><span class="token operator">:</span> <span class="token string">"xxx"</span> <span class="token comment">// 第一步拿到的授权码</span>  <span class="token comment">// "redirect_uri": "WEB_REDIRECT_URL" // 可以是 A(node) 的一个配置，比如跳转到 A(client) 的首页</span><span class="token punctuation">&#125;</span></code></pre><p>该请求会返回令牌信息：包含<code>access_token(令牌)/refresh_token(用于更新令牌)/expires_in(过期时间)...</code></p><p>同时，你可以通过拿到的令牌信息获取当前登录用户的详细个人信息，并将用户信息及<code>refresh_token</code>存储到<code>node:session</code>。<del>还可以把用户 access_token 存到 redis，key 即为 sessionId</del></p><p>最终重定向回<code>A(client)</code>配置的一个地址。</p><p>前端访问后端服务时，通过中间层代理，追加<code>token</code>信息到<code>header</code>中，如果<code>token</code>过期，则通过<code>refresh_token</code>更新令牌，如果登录过期，则重定向到登录地址。</p></li></ul><p><code>基于这种方式认证，A(client)请求任何接口都将通过 A(node) 进行转发，在 A(client) 仅保存回话id(sessionId)，该 sessionId 由 A(node) 保存设置至 cookie 中(会话期间有效)，前端 A(client) 在发起 http 请求时会自动携带，A(node) 从 req.session 中解析前面步骤存入的 refresh_token 获取当前的 access_token(出于性能考虑，可以将 ak 存入 redis) 保存到 res.locals，设置 proxyMiddleWare 添加代理请求的 headers: proxyReq.setHeader(&#39;Authorization&#39;, token)</code></p><blockquote><p><code>res.locals</code> 是一个对象，包含用于渲染视图的上下文。作用：在模板中直接使用、用来存储一些全局变量</p></blockquote><h4 id="凭证式"><a href="#凭证式" class="headerlink" title="凭证式"></a>凭证式</h4><blockquote><p>适用于有后端(<code>node</code>)的<code>web</code>应用，在中间层通过客户端令牌完成一些需要登录（但并没有登录）才能获取资源的请求。</p></blockquote><blockquote><p>同时适用于命令行&#x2F;<code>postman</code>接口测试使用。</p></blockquote><p>这种方式获取的令牌并不是针对用户使用的，因为生成的令牌可以多个用户共享。<del>当然后端可以通过判断 session 的用户信息，标记当前使用客户端令牌的资源请求范围</del></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://b.com/oauth/token</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">grant_type</span><span class="token operator">:</span> <span class="token string">'client_credentials'</span><span class="token punctuation">,</span> <span class="token comment">// 采用凭证式</span>    <span class="token literal-property property">client_id</span><span class="token operator">:</span> <span class="token constant">CLIENT_ID</span><span class="token punctuation">,</span> <span class="token comment">// 应用标识</span>    <span class="token literal-property property">client_secret</span><span class="token operator">:</span> <span class="token constant">CLIENT_SECRET</span><span class="token punctuation">,</span> <span class="token comment">// 密钥</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="密码式"><a href="#密码式" class="headerlink" title="密码式"></a>密码式</h4><blockquote><p>适用范围小。为了确保安全性，一般是在中间层使用，或者在接口调试的时候使用</p></blockquote><p>这种方式需要用户给出自己的账号密码，风险大，需要高度信任网站<code>B</code>，不建议使用。获取方式：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://b.com/oauth/token</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">grant_type</span><span class="token operator">:</span> <span class="token string">'password'</span><span class="token punctuation">,</span> <span class="token comment">// 表示密码式</span>    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token constant">USERNAME</span><span class="token punctuation">,</span> <span class="token comment">// 账号</span>    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token constant">PASSWORD</span><span class="token punctuation">,</span> <span class="token comment">// 密码</span>    <span class="token literal-property property">client_id</span><span class="token operator">:</span> <span class="token constant">CLIENT_ID</span><span class="token punctuation">,</span> <span class="token comment">// 应用标识</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该方式是将令牌放到 <code>response</code> 中作为 <code>json</code> 数据进行返回的，不进行重定向。</p><h4 id="隐藏式"><a href="#隐藏式" class="headerlink" title="隐藏式"></a>隐藏式</h4><blockquote><p>适用于前后端分离，且没有<code>node</code>中间层服务的<code>web</code>应用。</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://b.com/oauth/authorize</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">response_type</span><span class="token operator">:</span> <span class="token string">'token'</span><span class="token punctuation">,</span> <span class="token comment">// 表示要求直接返回令牌</span>    <span class="token literal-property property">client_id</span><span class="token operator">:</span> <span class="token constant">CLIENT_ID</span><span class="token punctuation">,</span> <span class="token comment">// 应用标识</span>    <span class="token literal-property property">redirect_uri</span><span class="token operator">:</span> <span class="token constant">REDIRECT_URL</span><span class="token punctuation">,</span> <span class="token comment">// 完成认证后的重定向地址</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这种方式虽然使用面最广，但是也很不安全，因为<code>token</code>是直接传递给前端的，只适合安全要求不高的场景，同时有效期通常为会话期间(<code>session</code>).</p>]]></content>
      
      
      <categories>
          
          <category> 土豆の学习笔记 </category>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oauth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v-for在特定场景下会失去响应式</title>
      <link href="/bugs/v-for-unresponsive/"/>
      <url>/bugs/v-for-unresponsive/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>前段时间，实现一个表单字段提交校验功能时碰到的一个有趣的问题…<code>v-for</code>的元素居然失去响应式了？<code>what...</code><del>开始怀疑人生 🙄🙄🙄</del></p><p>代码大致如下：</p><span id="more"></span><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>actionNodeValidate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-edit<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addFieldCheckCondition<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加字段校验<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, idx) in checkConditions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>idx<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex<span class="token punctuation">"</span></span> <span class="token attr-name">justify</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>space-between<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mt-5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>21<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">readonly</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.conditions<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-edit<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>editFieldConditions(idx)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>danger<span class="token punctuation">"</span></span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-delete<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delFieldConditions(idx)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>校验通过条件配置<span class="token punctuation">"</span></span> <span class="token attr-name">append-to-body</span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>visible<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FormularPattern</span>        <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentConf.conditions<span class="token punctuation">"</span></span>        <span class="token attr-name">@close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>visible = false<span class="token punctuation">"</span></span>        <span class="token attr-name">@confirm</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>setFieldCondition<span class="token punctuation">"</span></span>      <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Component<span class="token punctuation">,</span> PropSync<span class="token punctuation">,</span> Vue <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-property-decorator'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> FieldCheckConditions <span class="token keyword">from</span> <span class="token string">'./FieldCheckConditions'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> FormularPattern <span class="token keyword">from</span> <span class="token string">'./FormularPattern/index.vue'</span><span class="token punctuation">;</span>  @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'ActionNodeValidate'</span><span class="token punctuation">,</span> <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> FormularPattern <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ActionNodeValidate</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>    @<span class="token function">PropSync</span><span class="token punctuation">(</span><span class="token string">'conditions'</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> checkConditions<span class="token operator">!</span><span class="token operator">:</span> FieldCheckConditions<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> visible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> conditionIdx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 标记当前的配置项索引</span>    <span class="token keyword">public</span> <span class="token literal-property property">currentConf</span><span class="token operator">:</span> FieldCheckConditions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FieldCheckConditions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">addFieldCheckCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>currentConf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FieldCheckConditions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>conditionIdx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>visible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">delFieldConditions</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">idx</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>checkConditions<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">editFieldConditions</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">idx</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>conditionIdx <span class="token operator">=</span> idx<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>currentConf <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>checkConditions<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>visible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">setFieldCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>conditionIdx <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>checkConditions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentConf <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>checkConditions<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>conditionIdx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentConf <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>visible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><blockquote><p>对于数组类型值的修改使用的<code>push、splice</code>，<del>当然也可以是<code>$set</code></del>。看起来似乎并没有什么毛病…</p></blockquote><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>通过<code>dev-tools</code>分析，发现<code>v-for</code>绑定的值是实时变更了，且组件也监听到变化了，但界面就是没渲染…</p><p><a href="/images/bugs/v-for-unresponsive/p1.png"><img src="/images/bugs/v-for-unresponsive/p1.png" alt="v-for-unresponsive-p1" loading="lazy"></a><br><a href="/images/bugs/v-for-unresponsive/p2.png"><img src="/images/bugs/v-for-unresponsive/p2.png" alt="v-for-unresponsive-p2" loading="lazy"></a></p><p>那就从源码分析…<code>vue</code>在更新<code>dom</code>元素时,会调用<code>updateChildren</code>方法：</p><p><a href="/images/bugs/v-for-unresponsive/p3.png"><img src="/images/bugs/v-for-unresponsive/p3.png" alt="v-for-unresponsive-p3" loading="lazy"></a><br><a href="/images/bugs/v-for-unresponsive/p4.png"><img src="/images/bugs/v-for-unresponsive/p4.png" alt="v-for-unresponsive-p4" loading="lazy"></a></p><blockquote><p>进行 <code>diff</code> 比对，采用’就地复用’原则，减小开销，<code>eg. data数据 从 [1] -&gt; [0,2,3,1,4,5] 过程中，进过比对，需要在1这个dom之前插入 0,2,3</code>，比对完成执行<code>addVnodes</code>函数。</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addVnodes</span><span class="token punctuation">(</span><span class="token parameter">parentElm<span class="token punctuation">,</span> refElm<span class="token punctuation">,</span> vnodes<span class="token punctuation">,</span> startIdx<span class="token punctuation">,</span> endIdx<span class="token punctuation">,</span> insertedVnodeQueue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> startIdx <span class="token operator">&lt;=</span> endIdx<span class="token punctuation">;</span> <span class="token operator">++</span>startIdx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">createElm</span><span class="token punctuation">(</span>vnodes<span class="token punctuation">[</span>startIdx<span class="token punctuation">]</span><span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> refElm<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> vnodes<span class="token punctuation">,</span> startIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>我这调试的是<code>push</code>追加<code>currentConf</code>功能，<code>debug startIdx/endIdx（parentEle的childrenIndex）</code>均为 1.(不难发现，在上述例子中，<code>v-for 的父元素同 el-button&lt;添加字段校验&gt;（index = 0），均为 div.actionNodeValidate</code>，故<code>startIdx</code>为 1).</p><p>继续看<code>createElm</code>函数执行过程中发生了什么…</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createElm</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> refElm<span class="token punctuation">,</span> nested<span class="token punctuation">,</span> ownerArray<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>ownerArray<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// This vnode was used in a previous render!</span>    <span class="token comment">// now it's used as a new node, overwriting its elm would cause</span>    <span class="token comment">// potential patch errors down the road when it's used as an insertion</span>    <span class="token comment">// reference node. Instead, we clone the node on-demand before creating</span>    <span class="token comment">// associated DOM element for it.</span>    vnode <span class="token operator">=</span> ownerArray<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneVNode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拷贝当前需要添加的 vNode</span>  <span class="token punctuation">&#125;</span>  vnode<span class="token punctuation">.</span>isRootInsert <span class="token operator">=</span> <span class="token operator">!</span>nested<span class="token punctuation">;</span> <span class="token comment">// for transition enter check</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">createComponent</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 添加的vnode子组件创建，这里是 null，返回undefined</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> data <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token keyword">var</span> children <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children<span class="token punctuation">;</span> <span class="token comment">// []</span>  <span class="token keyword">var</span> tag <span class="token operator">=</span> vnode<span class="token punctuation">.</span>tag<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// vue-component-48-ElRow</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>pre<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        creatingElmInVPre<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUnknownElement$$1</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> creatingElmInVPre<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token string">'Unknown custom element: &lt;'</span> <span class="token operator">+</span>            tag <span class="token operator">+</span>            <span class="token string">'> - did you '</span> <span class="token operator">+</span>            <span class="token string">'register the component correctly? For recursive components, '</span> <span class="token operator">+</span>            <span class="token string">'make sure to provide the "name" option.'</span><span class="token punctuation">,</span>          vnode<span class="token punctuation">.</span>context<span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> vnode<span class="token punctuation">.</span>ns      <span class="token operator">?</span> nodeOps<span class="token punctuation">.</span><span class="token function">createElementNS</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>ns<span class="token punctuation">,</span> tag<span class="token punctuation">)</span>      <span class="token operator">:</span> nodeOps<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// document.createElement</span>    <span class="token function">setScope</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* istanbul ignore if */</span>    <span class="token punctuation">&#123;</span>      <span class="token function">createChildren</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> children<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// children is [].</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">invokeCreateHooks</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建相关 hooks</span>      <span class="token punctuation">&#125;</span>      <span class="token function">insert</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行 insert</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>pre<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      creatingElmInVPre<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>isComment<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> nodeOps<span class="token punctuation">.</span><span class="token function">createComment</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">insert</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> nodeOps<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">insert</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>可以看到，在<code>createElm</code>函数中，执行了<code>拷贝vNode -&gt; createComponent -&gt; document.createElement -&gt; createChildren -&gt; hooks挂载 -&gt; 最终执行insert函数</code>…</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">parent<span class="token punctuation">,</span> elm<span class="token punctuation">,</span> ref$$1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// div.actionNodeValidate</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>ref$$1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// el-dialog__wrapper.node-validate-dialog ---> v-for 的相邻元素(插入位置index+1) ---> (因为v-for没有wrapper，所以这里是 .node-validate-dialog)</span>      <span class="token comment">// parent(div.actionNodeValidate) !== body</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>nodeOps<span class="token punctuation">.</span><span class="token function">parentNode</span><span class="token punctuation">(</span>ref$$1<span class="token punctuation">)</span> <span class="token operator">===</span> parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 比对插入位置节点与其相邻元素的父节点是否一致，一致则直接在相邻元素前插入新节点，不一致时没有做任何处理</span>        nodeOps<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> elm<span class="token punctuation">,</span> ref$$1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 不一致... 我们的代码执行到这  G了...</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 没有相邻vNode，直接在 parentEle 追加 children</span>      nodeOps<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> elm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p><code>insert</code>函数比对了’插入位置’与其’相邻<code>vNode</code>‘(<strong>插入位置<code>index+1</code>的<code>vNode</code>节点</strong>)的父节点是否一致，一致则在其’相邻节点’前插入新的节点(<code>insertBefore</code>)。<del>值得注意的是，如果相邻<code>vNode</code>的父节点与当前<code>parentEle</code>不相同时，没有做任何处理…😮😮😮</del><br>如果相邻元素不存在，那么就直接追加(<code>appendChild</code>).</p></blockquote><p>最终发现<code>nodeOps.parentNode(ref$$1) === parent</code>条件为<code>false</code>，所以页面并没有渲染.<code>why？</code>为什么父节点会不一致呢？</p><p><code>el-dialog</code>添加了<code>append-to-body</code>属性后，其父节点变成了<code>body</code>，所以代码执行到<code>insert，parentNode(div.actionNodeValidate) !== body</code>，比对后发现<code>parent</code>发生变更，不执行更新。导致页面上呈现的效果是<code>dom</code>没渲染，而响应式数据已经更新。<del>这也是为什么调试时<code>nextTick</code>内执行<code>forceUpdate</code>也无法重新渲染的根本原因</del></p><p>找到了原因，那么解决方案自然也就有了（<strong>避免插入的位置相邻<code>vNode</code>的<code>parent</code>不会变更</strong>就<code>ok</code>啦 😁😁😁）</p><h3 id="hack解决方案"><a href="#hack解决方案" class="headerlink" title="hack解决方案"></a><code>hack</code>解决方案</h3><h4 id="给绑定了v-for的元素添加一层父级的wrapper节点"><a href="#给绑定了v-for的元素添加一层父级的wrapper节点" class="headerlink" title="给绑定了v-for的元素添加一层父级的wrapper节点"></a>给绑定了<code>v-for</code>的元素添加一层父级的<code>wrapper</code>节点</h4><p><code>eg.</code></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>actionNodeValidate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, idx) in checkConditions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">append-to-body</span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>visible<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h4 id="调整绑定了append-to-body属性的dom位置，避免与v-for元素直接相邻"><a href="#调整绑定了append-to-body属性的dom位置，避免与v-for元素直接相邻" class="headerlink" title="调整绑定了append-to-body属性的dom位置，避免与v-for元素直接相邻"></a>调整绑定了<code>append-to-body</code>属性的<code>dom</code>位置，避免与<code>v-for</code>元素直接相邻</h4><p><code>eg.</code></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>actionNodeValidate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, idx) in checkConditions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">append-to-body</span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>visible<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h4 id="移除append-to-body属性"><a href="#移除append-to-body属性" class="headerlink" title="移除append-to-body属性"></a>移除<code>append-to-body</code>属性</h4><p><code>eg.</code></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>actionNodeValidate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, idx) in checkConditions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>visible<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 土豆の踩坑之路 </category>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> vue </tag>
            
            <tag> unresponsive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>界面化配置自定义的组件css样式</title>
      <link href="/notes/css-config/"/>
      <url>/notes/css-config/</url>
      
        <content type="html"><![CDATA[<h3 id="了解css-tree"><a href="#了解css-tree" class="headerlink" title="了解css-tree"></a>了解<a href="https://github.com/csstree/csstree">css-tree</a></h3><p><code>CSSTree is a tool set for CSS: fast detailed parser (CSS → AST), walker (AST traversal), generator (AST → CSS) and lexer (validation and matching) based on specs and browser implementations. The main goal is to be efficient and W3C spec compliant, with focus on CSS analyzing and source-to-source transforming tasks.</code></p><h3 id="为什么使用它？"><a href="#为什么使用它？" class="headerlink" title="为什么使用它？"></a>为什么使用它？</h3><p>最近项目上有个需求：提供一个界面化的<code>css</code>代码编辑器，管理员可以输入<code>css</code>代码配置修改表单&#x2F;组件的一些默认样式，从而针对不同业务需求实现不同的界面呈现效果。</p><p>为了避免样式的全局污染，需要对配置的样式添加默认前置导航，通过属性选择器约束样式的生效范围。如果通过<code>string</code>的一些方法粗暴的对样式进行替换<code>or</code>正则匹配，有很大的局限性，同时也不符合规范。</p><p>思考再三，找到了<code>css -&gt; ast -&gt; css.</code>方案，并通过<code>css-tree</code>的<code>API</code>实现。</p><p><del>根据产品业务的区别，如果只是想实现样式自定义，不需要通过代码配置达到更强的交互，那么可以内置<code>class</code>，编写默认的一些<code>style</code>，用户通过在界面选择主题来实现该效果。参考百度<a href="https://github.com/baidu/amis">amis</a></del></p><span id="more"></span><h3 id="源码实现"><a href="#源码实现" class="headerlink" title="源码实现"></a>源码实现</h3><h4 id="给组件唯一标识"><a href="#给组件唯一标识" class="headerlink" title="给组件唯一标识"></a>给组件唯一标识</h4><blockquote><p>可以给组件的<code>wrapper-dom</code>添加具有唯一标志性的属性，用于约束自定义样式生效的区间范围.</p></blockquote><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 给组件 wrapper 绑定具有唯一标识的 id --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-item_container<span class="token punctuation">"</span></span> <span class="token attr-name">:id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field.__vModel__<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RenderWrapper</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$attrs<span class="token punctuation">"</span></span> <span class="token attr-name">v-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$listeners<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h4 id="helper实现"><a href="#helper实现" class="headerlink" title="helper实现"></a><code>helper</code>实现</h4><blockquote><p>编写用于操作<code>css-code</code>的工具函数，给自定义的<code>css-code</code>添加内置的属性选择器前缀。</p></blockquote><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> clone<span class="token punctuation">,</span> generate<span class="token punctuation">,</span> parse<span class="token punctuation">,</span> walk <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'css-tree'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> styleHelper <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">addClassPrefix</span><span class="token punctuation">(</span>prefix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> context<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> orig <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// css -> ast</span>    <span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>orig<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// clone ast node.</span>    <span class="token function">walk</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 仅对选择器的首个 selector 节点添加前缀  eg.  .form .item &#123;&#125; -> .prefix .form .item &#123;&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token operator">?.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'TypeSelector'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// eg. input div li...</span>          node<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'ClassSelector'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// eg. .el-input .customCls...</span>          node<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> .</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// other process...</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ast -> css</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">loadCss</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> cssContent<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> styleEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">style_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    styleEle<span class="token operator">?.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 热更新，避免重复性追加 style 节点.</span>    <span class="token comment">// or if (styleEle) return;</span>    <span class="token keyword">const</span> style <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> head <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    style<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">style_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token keyword">const</span> styleCode <span class="token operator">=</span> styleHelper<span class="token punctuation">.</span><span class="token function">addClassPrefix</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">form-item_container[id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> cssContent<span class="token punctuation">)</span><span class="token punctuation">;</span>    style<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>styleCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="config-editor实现"><a href="#config-editor实现" class="headerlink" title="config-editor实现"></a><code>config-editor</code>实现</h4><blockquote><p>用于配置<code>css</code>的编辑器组件.<del>偷了个懒，如果你需要更友好的实现，可以添加<code>css</code>语法提示</del></p></blockquote><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span>    <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>自定义样式<span class="token punctuation">"</span></span>    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>codemirror_dialog<span class="token punctuation">"</span></span>    <span class="token attr-name">:destroy-on-close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>    <span class="token attr-name">:close-on-click-modal</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>    <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>customStyleVisible<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VueCodemirror</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>innerValue<span class="token punctuation">"</span></span> <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>options<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>footer</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>customStyleVisible = false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>取 消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onConfirmHandle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>确 定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Component<span class="token punctuation">,</span> ModelSync<span class="token punctuation">,</span> PropSync<span class="token punctuation">,</span> Vue<span class="token punctuation">,</span> Watch <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-property-decorator'</span><span class="token punctuation">;</span>  @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'StyleConfig'</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">VueCodemirror</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> codemirror <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "codeMirror" */</span> <span class="token string">'vue-codemirror'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> codemirror<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">StyleConfig</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>    @<span class="token function">PropSync</span><span class="token punctuation">(</span><span class="token string">'visible'</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> customStyleVisible<span class="token operator">!</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>    @<span class="token function">ModelSync</span><span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">,</span> <span class="token string">'input'</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> customStyle<span class="token operator">!</span><span class="token operator">:</span> string<span class="token punctuation">;</span>    <span class="token keyword">public</span> innerValue <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">tabSize</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'text/css'</span><span class="token punctuation">,</span>      <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token string">'default'</span><span class="token punctuation">,</span>      <span class="token literal-property property">styleActiveLine</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token literal-property property">matchBrackets</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token literal-property property">placeholder</span><span class="token operator">:</span>        <span class="token string">'请输入组件自定义css样式... eg.\n\n.el-input &#123; color: #f00; &#125; \n\n input &#123; border: none; &#125;'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    @<span class="token function">Watch</span><span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token function">setContentValue</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">v</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>innerValue <span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initCodemirror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">initCodemirror</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "codeMirror" */</span> <span class="token string">'codemirror/mode/css/css.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "codeMirror" */</span> <span class="token string">'codemirror/addon/display/placeholder.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span>        <span class="token comment">/* webpackChunkName: "codeMirror" */</span> <span class="token string">'codemirror/addon/selection/active-line.js'</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "codeMirror" */</span> <span class="token string">'codemirror/addon/edit/matchbrackets.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "codeMirror" */</span> <span class="token string">'codemirror/lib/codemirror.css'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">onConfirmHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>customStyleVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>customStyle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>innerValue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="parser实现"><a href="#parser实现" class="headerlink" title="parser实现"></a><code>parser</code>实现</h4><blockquote><p>在表单<code>parser</code>组件<code>created</code>钩子<code>loadCss</code>，将自定义的样式代码加载到<code>html</code>.</p></blockquote><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> styleHelper <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./util/index'</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> code<span class="token punctuation">,</span> css <span class="token punctuation">&#125;</span> <span class="token operator">=</span> field<span class="token punctuation">.</span>__config__<span class="token punctuation">;</span>  styleHelper<span class="token punctuation">.</span><span class="token function">loadCss</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> css<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 土豆の学习笔记 </category>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cssTree </tag>
            
            <tag> 自定义样式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript 中的符号集合</title>
      <link href="/notes/typescript-symbol/"/>
      <url>/notes/typescript-symbol/</url>
      
        <content type="html"><![CDATA[<h3 id="索引类型查询操作符"><a href="#索引类型查询操作符" class="headerlink" title="索引类型查询操作符"></a>索引类型查询操作符</h3><p><code>keyof T； [索引类型查询操作符] 结果为 T 上已知的 公共属性名的 联合。 &#39;XXX&#39; | &#39;YYY&#39;...</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 例：枚举已知属性的集合</span><span class="token keyword">type</span> <span class="token class-name">Keys</span> <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">|</span> <span class="token string">'B'</span> <span class="token operator">|</span> <span class="token string">'C'</span><span class="token punctuation">;</span>or<span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">KeysProps</span> <span class="token punctuation">&#123;</span>  <span class="token constant">A</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token constant">B</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token constant">C</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">Keys</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> KeysProps<span class="token punctuation">;</span></code></pre><h3 id="索引访问操作符"><a href="#索引访问操作符" class="headerlink" title="索引访问操作符"></a>索引访问操作符</h3><p><code>T[K]; [索引访问操作符] 可以通过索引的方式 取到 T上属性为 K 的 Type</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 例：</span><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span>  b<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  c<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></code></pre><h3 id="映射类型操作符"><a href="#映射类型操作符" class="headerlink" title="映射类型操作符"></a>映射类型操作符</h3><p><code>in T 以及 in keyof T [映射类型]</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 例1  in T   [此时的 T 应该为联合类型] 当需要为指定的 key 集合约束类型时 很有用</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> <span class="token string">'aa'</span> <span class="token operator">|</span> <span class="token string">'bb'</span> <span class="token operator">|</span> <span class="token string">'cc'</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D</span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>k <span class="token keyword">in</span> <span class="token constant">C</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//↓ 得到的结果</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D</span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  aa<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  bb<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  cc<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 例2 in keyof T [此时的 T 为 interface 对象类型] 在已知 key集合的情况下 重约束 key的类型</span><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span>  aa<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  bb<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  cc<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>k <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">A</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//↓ 得到的结果</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  aa<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  bb<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  cc<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="非空断言操作符"><a href="#非空断言操作符" class="headerlink" title="!非空断言操作符"></a><code>!</code>非空断言操作符</h3><p><code>！断言只是忽略TS检查，实际运行过程中， 该报错还是会报错, 此外 !是放在变量后的，注意非运算符区别</code></p><ul><li>忽略<code>undefined</code>和<code>null</code>类型 （ 比如：<strong>x! 将从 x 值域中排除 null 和 undefined</strong> ）</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>maybeString<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> onlyString<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> maybeString<span class="token punctuation">;</span> <span class="token comment">// Error</span>  <span class="token keyword">const</span> ignoreUndefinedAndNull<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> maybeString<span class="token operator">!</span><span class="token punctuation">;</span> <span class="token comment">// Ok</span><span class="token punctuation">&#125;</span></code></pre><ul><li>调用函数时忽略<code>undefined</code></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">NumGenerator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>numGenerator<span class="token operator">:</span> NumGenerator <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token function">numGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>  <span class="token keyword">const</span> num2 <span class="token operator">=</span> numGenerator<span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//OK</span><span class="token punctuation">&#125;</span></code></pre><h3 id="可选属性"><a href="#可选属性" class="headerlink" title="?:可选属性"></a><code>?:</code>可选属性</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> a<span class="token operator">:</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'张三'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// age 可选</span></code></pre><h3 id="类型运算符-amp-、"><a href="#类型运算符-amp-、" class="headerlink" title="类型运算符&amp;、 |"></a>类型运算符<code>&amp;、 |</code></h3><p><code>用于类型运算： &amp; 将多个类型合并为一个类型， | 取值可以为多种类型中的一种 </code></p><blockquote><p>type A &#x3D; xx &amp; xxx 交叉类型</p></blockquote><blockquote><p>type B &#x3D; xx | xxx 联合类型</p></blockquote><h3 id="数字分隔符"><a href="#数字分隔符" class="headerlink" title="_数字分隔符"></a><code>_</code>数字分隔符</h3><p>你可以把一个下划线作为数字内部的分隔符来分组数字， 比如</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> inhabitantsOfMunich <span class="token operator">=</span> <span class="token number">1_464_301</span><span class="token punctuation">;</span><span class="token keyword">const</span> distanceEarthSunInKm <span class="token operator">=</span> <span class="token number">149_600_000</span><span class="token punctuation">;</span><span class="token keyword">const</span> fileSystemPermission <span class="token operator">=</span> <span class="token number">0b111_111_000</span><span class="token punctuation">;</span><span class="token keyword">const</span> bytes <span class="token operator">=</span> <span class="token number">0b1111_10101011_11110000_00001101</span><span class="token punctuation">;</span></code></pre><p>编译后，会生成以下 ES5 代码：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">var</span> inhabitantsOfMunich <span class="token operator">=</span> <span class="token number">1464301</span><span class="token punctuation">;</span><span class="token keyword">var</span> distanceEarthSunInKm <span class="token operator">=</span> <span class="token number">149600000</span><span class="token punctuation">;</span><span class="token keyword">var</span> fileSystemPermission <span class="token operator">=</span> <span class="token number">504</span><span class="token punctuation">;</span><span class="token keyword">var</span> bytes <span class="token operator">=</span> <span class="token number">262926349</span><span class="token punctuation">;</span></code></pre><p><code>注意： 只能在两个数字之间添加_分割符，不能连续使用多个 </code>_<code>分隔符</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// Numeric separators are not allowed here.(6188)</span>3_<span class="token punctuation">.</span><span class="token number">141592</span> <span class="token comment">// Error</span><span class="token number">3</span><span class="token punctuation">.</span>_141592 <span class="token comment">// Error</span><span class="token comment">// Numeric separators are not allowed here.(6188)</span>1_e10 <span class="token comment">// Error</span>1e_10 <span class="token comment">// Error</span><span class="token comment">// Cannot find name '_126301'.(2304)</span>_126301  <span class="token comment">// Error</span><span class="token comment">// Numeric separators are not allowed here.(6188)</span>126301_ <span class="token comment">// Error</span><span class="token comment">// Cannot find name 'b111111000'.(2304)</span><span class="token comment">// An identifier or keyword cannot immediately follow a numeric literal.(1351)</span>0_b111111000 <span class="token comment">// Error</span><span class="token comment">// Numeric separators are not allowed here.(6188)</span>0b_111111000 <span class="token comment">// Error</span><span class="token comment">// Multiple consecutive numeric separators are not permitted.(6189)</span>123__456 <span class="token comment">// Error</span></code></pre><ul><li>数字分隔符的解析：</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 不能使用 Number() parseInt() parseFloat() 解析</span><span class="token comment">// 自定义转换函数解析出实际数字</span><span class="token comment">// 如  str.replace 方法 替换掉 _</span></code></pre><h3 id="lt-Type-gt-及-as-断言"><a href="#lt-Type-gt-及-as-断言" class="headerlink" title="&lt;Type&gt; 及 as 断言"></a><code>&lt;Type&gt; 及 as</code> 断言</h3><ul><li>尖括号语法(<code>React</code>中不支持)</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> a<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">'asf'</span><span class="token punctuation">;</span><span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span></code></pre><ul><li><code>as</code>语法</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> a<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">'asf'</span><span class="token punctuation">;</span><span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 土豆の学习笔记 </category>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript 中的符号集合</title>
      <link href="/notes/javascript-symbol/"/>
      <url>/notes/javascript-symbol/</url>
      
        <content type="html"><![CDATA[<p>逆水行舟，不进则退。</p><p>随着<code>ECMAScript</code>标准的不断更新迭代，你会发现在<code>js</code>代码中，符号越来越多，稍不学习就会不懂其含义，更别谈使用了。</p><p>本文就个人在项目中使用到的符号结合代码进行介绍 😮‍💨😮‍💨😮‍💨<del>当然类似基础运算、幂运算、自增自减、大小比较、三目运算符等等就忽略了</del>…</p><span id="more"></span><h3 id="逻辑位运算-、-amp-、-、-、-lt-lt-、-gt-gt"><a href="#逻辑位运算-、-amp-、-、-、-lt-lt-、-gt-gt" class="headerlink" title="逻辑位运算|、&amp;、~、^、&lt;&lt;、&gt;&gt;"></a>逻辑位运算<code>|、&amp;、~、^、&lt;&lt;、&gt;&gt;</code></h3><p>将需要运算的两个值转为二进制数，进行位<strong>或、与、非、异或、左移、右移</strong>运算。 对应衍生的有<code>~=、&amp;=、|=、^=、&lt;&lt;=、&gt;&gt;=</code>。🙄🙄<br>🙄<del>这个相对来说用的很少，但你必须要了解。</del></p><p><code>eg.</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>a <span class="token operator">&amp;=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// a = a &amp; 3 = 5 &amp; 3 = 1;</span></code></pre><blockquote><p><code>&gt;&gt;</code> 和 <code>&lt;&lt;</code> 右移左移运算，将操作数转为二进制后，返回移动对应位数后的新值，移动过程中，超出部分去除，补充部分补 0</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">//  00000000000000000000000000000101</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//  00000000000000000000000000000010</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">>></span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  00000000000000000000000000000001</span></code></pre><p>除此之外还有无符号右位移 <code>&gt;&gt;&gt;</code>，与右位移 <code>&gt;&gt;</code>的区别就是前者的符号位始终为 0，即正数。</p><h3 id="逗号操作符"><a href="#逗号操作符" class="headerlink" title="逗号操作符"></a>逗号操作符</h3><p>对逗号表达式进行求值，并返回最后一项的值。<del>这个目前也不是特别常见</del></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a = 2</span></code></pre><h3 id="解构赋值运算符"><a href="#解构赋值运算符" class="headerlink" title="解构赋值运算符..."></a>解构赋值运算符<code>...</code></h3><p>比较常见的一个需求，同时在面试的时候也有可能会被问到。<strong>如何对未知 keys 的对象解构，拿到除属性 xx 外的其他属性集合？</strong></p><p>有的童鞋可能马上就想到<code>copy 再 delete obj.xx</code>…<del>当然我不建议这么干</del></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> <span class="token operator">...</span>other <span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; b: 'b', c: false &#125;</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>arr0<span class="token punctuation">,</span> <span class="token operator">...</span>arrOther<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrOther<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3, 4, 5]</span></code></pre><h3 id="可选链操作符"><a href="#可选链操作符" class="headerlink" title="可选链操作符?."></a>可选链操作符<code>?.</code></h3><p><strong>很常用，必须掌握</strong>。允许读取位于连接对象链深处的属性的值，作用类似<code>.</code>区别就是前者<code>?.</code>允许对象为<code>null/undefined</code>，当访问的对象为<code>null/undefined</code>时，不会执行<code>.</code>后面的逻辑，且不会抛出异常（此时返回<code>undefined</code>）。除此外，<code>?.</code>也可作用于数组、函数…<code>eg.</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 假设 obj 存在一个 子属性 hh: &#123; a: 11 &#125; （比如通过接口返回的一个字段属性，可能有值，可能没有）</span><span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 假设这个函数是 undefined，（比如某些通过 props 传递 fn 场景，可能为 undefined）</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>hh<span class="token operator">?.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此处 hh 没有值，返回一个 undefined， 如果不写 ?. 直接 obj.hh.a 会抛异常 a of undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token operator">?.</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 函数调用，fn 为空，返回一个 undefined，（）内传入函数实参 args</span><span class="token comment">// 数组值访问 (数组可能为 null 或 undefined) 同上</span><span class="token comment">// arr?.[index]?.xxx;</span><span class="token comment">// 支持链式操作</span><span class="token comment">// obj?.xx?.xx?.xxx</span></code></pre><h3 id="空值合并运算符"><a href="#空值合并运算符" class="headerlink" title="??空值合并运算符"></a><code>??</code>空值合并运算符</h3><p>当左侧操作数为<code>null</code>或<code>undefined</code>时，其返回右侧的操作数，否则返回左侧的操作数 <strong>(注意<code>&quot;&quot;、0、false、NaN</code>等值会返回左侧值)</strong></p><ul><li>短路运算</li></ul><p>与逻辑或<code>||</code>运算符不同，逻辑或会在左操作数为<code>false</code>值时返回右侧操作数。也就是说，如果你使用<code>||</code>来为某些变量设置默认的值时，你可能会遇到意料之外的行为。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token string">'saasf'</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// saasf</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">??</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span></code></pre><ul><li>与<code>&amp;&amp;</code>或<code>||</code>操作符共用</li></ul><p>若空值合并运算符<code>??</code>直接与 <code>AND（&amp;&amp;）</code>和<code>OR（||）</code>操作符组合使用<code>??</code>是不行的。这种情况下会抛出<code>SyntaxError</code>, 所以在使用时需要显示表明优先级。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">'foo'</span><span class="token punctuation">;</span> <span class="token comment">// 返回 "foo"</span></code></pre><ul><li>与<code>?.</code>联动</li></ul><p>一般用于接口数据使用或者<code>props</code>传递等场景</p><pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">PageAProps</span> <span class="token punctuation">&#123;</span>  title<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">PageA</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token operator">:</span> PageAProps<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>props<span class="token operator">?.</span>title <span class="token operator">??</span> <span class="token string">'页面A'</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// props?.title ?? '页面A' 联动设置默认的值</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 土豆の学习笔记 </category>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript 高级类型介绍</title>
      <link href="/notes/typescript-types/"/>
      <url>/notes/typescript-types/</url>
      
        <content type="html"><![CDATA[<p><code>typescript</code>支持与<code>javascript</code>几乎相同的数据类型，此外还提供了其他实用的类型方便我们使用。</p><span id="more"></span><h3 id="基础类型回顾"><a href="#基础类型回顾" class="headerlink" title="基础类型回顾"></a>基础类型回顾</h3><ul><li>数字：<code>number</code>；</li><li>字符串：<code>string</code>；</li><li>布尔类型：<code>boolean</code>；</li><li>数组类型：元素类型后跟 <code>number[]</code>；或者使用数组泛型 <code>Array&lt;number&gt;</code>;</li><li>元组类型： 允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。如：<code>[string, number]</code>;</li><li>枚举类型：用于定义数值集合</li><li><code>any</code>类型：任意类型，可以赋予任意类型的值；</li><li><code>void</code>类型：与<code>any</code>相反，表示没有任何类型；</li><li><code>null</code>和<code>undefined</code>类型：只能指<code>null</code>与<code>undefined</code>元素本身；</li><li><code>never</code>类型：<code>never</code>是其它类型（包括<code>null 和 undefined</code>）的子类型，代表从不会出现的值</li></ul><h3 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h3><p><code>type C = A &amp; B; 类型 C 为同时包含类型 A、B 的新类型</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token punctuation">&#123;</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>  say<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 交叉类型实现方式 1： 继承</span><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 交叉类型实现方式 2： &amp; (正常情况下)</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token operator">&amp;</span> <span class="token constant">B</span><span class="token punctuation">;</span><span class="token comment">// 交叉类型实现方式 3：映射(类似遍历赋值...不推荐)</span></code></pre><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><p><code>type C = A | B; 类型 C 为 A 或 B 其中一种类型</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 定义如上</span><span class="token comment">// ....</span><span class="token comment">// 正常使用：</span><span class="token keyword">const</span> c<span class="token operator">:</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'张三'</span> <span class="token punctuation">&#125;</span> <span class="token keyword">as</span> <span class="token constant">A</span><span class="token punctuation">;</span><span class="token comment">// or</span><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 通过访问 arg.name 属性，隐式判断当前 type 类型。A 中 name 为必选项</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arg<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    arg<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="联合类型之类型保护"><a href="#联合类型之类型保护" class="headerlink" title="联合类型之类型保护"></a>联合类型之类型保护</h3><ul><li>in 关键字</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  date<span class="token operator">:</span> Date<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">UnknownT</span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token operator">|</span> <span class="token constant">B</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">printT</span><span class="token punctuation">(</span>ar<span class="token operator">:</span> UnknownT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Name: '</span> <span class="token operator">+</span> ar<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'age'</span> <span class="token keyword">in</span> ar<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'age: '</span> <span class="token operator">+</span> ar<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'date'</span> <span class="token keyword">in</span> ar<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'date: '</span> <span class="token operator">+</span> ar<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>typeof 关键字</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> arg <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'是类型 number'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> arg <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'是类型 string'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><ul><li>instanceof 关键字</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span>  <span class="token function">gitValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Aa</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> val<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token function">gitValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Ab</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> val<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token function">gitValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Aa</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Aa</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><ul><li>字面量类型保护</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Foo</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  kind<span class="token operator">:</span> <span class="token string">'foo'</span><span class="token punctuation">;</span> <span class="token comment">// 字面量类型</span>  foo<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">Bar</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  kind<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">;</span> <span class="token comment">// 字面量类型</span>  bar<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">doStuff</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> Foo <span class="token operator">|</span> Bar<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arg<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">'foo'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 一定是 Bar</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>自定义类型保护的类型谓词</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">isNumber</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> x <span class="token keyword">is</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="通用类型"><a href="#通用类型" class="headerlink" title="通用类型"></a>通用类型</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 接口通用</span><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>k<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// color 的值只可以是字符串 red、blue、yellow</span><span class="token keyword">type</span> <span class="token class-name">color</span> <span class="token operator">=</span> <span class="token string">'red'</span> <span class="token operator">|</span> <span class="token string">'blue'</span> <span class="token operator">|</span> <span class="token string">'yellow'</span><span class="token punctuation">;</span></code></pre><h3 id="接口数据类型"><a href="#接口数据类型" class="headerlink" title="接口数据类型"></a>接口数据类型</h3><p>任何一个项目都离不开对数据和接口的处理，拼接数据和接口是形成业务逻辑也是前端的主要工作之一，将接口返回的数据定义 TypeScript 类型可以减少很多维护成本和查询 api 的时间 。</p><p><code>API.d.ts</code> <code>d.ts</code> 结尾的文件会被 TypeScript 默认导入到全局 , 无需再手动导出。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 不能使用 import 语法，如果需要引用需要使用三斜杠</span><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token constant">API</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// or</span><span class="token keyword">declare</span> <span class="token keyword">namespace</span> <span class="token constant">CAPI</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">interface</span> <span class="token class-name">CurrentUser</span> <span class="token punctuation">&#123;</span>    avatar<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    title<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用 API.A | API.B |  CAPI.CurrentUser</span></code></pre><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>类型变量<code>T</code> 。通过类型变量来帮助捕获用户传入的类型 ，以此来适配多个类型使用。</p><p>你可以这样：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">uniquefn</span><span class="token punctuation">(</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...   大可不必</span><span class="token punctuation">&#125;</span></code></pre><p>很明显，去重函数的参数可以是任意的类型，使用<code>any</code>类型会导致这个函数可以接收任何类型的<code>arg</code>参数，这样就丢失了一些信息 。因此，我们需要一种方法使返回值的类型与传入参数的类型是相同的。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 举栗 数组去重</span><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">uniquefn</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>args<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用</span><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">uniquefn</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// or 利用了类型推论 —— 即编译器会根据传入的参数自动地帮助我们确定T的类型</span><span class="token function">uniquefn</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="预定义类型"><a href="#预定义类型" class="headerlink" title="预定义类型"></a>预定义类型</h3><p><code>TypeScript 2.8在lib.d.ts里增加了一些预定义的有条件类型：</code></p><ul><li><code>NonNullable&lt;T&gt;</code> – 从 T 中剔除 null 和 undefined。</li><li><code>ReturnType&lt;T&gt;</code> – 获取函数返回值类型。</li><li><code>InstanceType&lt;T&gt;</code> – 获取构造函数类型的实例类型。</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// typescript 标准库内的一些实现</span><span class="token keyword">type</span> <span class="token class-name">Proxy<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>  <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="其他内置类型"><a href="#其他内置类型" class="headerlink" title="其他内置类型"></a>其他内置类型</h3><ul><li><code>Required</code> 。与 <code>Partial</code> 相反</li></ul><p><code>-?</code> 的功能就是把可选属性的 <code>?</code> 去掉，使该属性变成必选项，对应的还有 <code>+?</code> ，作用与 <code>-?</code> 相反，是把属性变为可选项。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">Required<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><ul><li><p>Exclude&lt;T,U&gt;</p><p>从 <code>T</code> 中排除那些可以赋值给 <code>U</code> 的类型。 (T ∩ U) 在 T 的 补集</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// T = 1|2|5</span></code></pre><ul><li><p>Extract&lt;T,U&gt;</p><p>从 <code>T</code> 中提取那些可以赋值给 <code>U</code> 的类型。 类型 T ∩ U</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Extract<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// T = 3|4</span></code></pre><ul><li><p>Pick&lt;T, K&gt;</p><p>从 对象<code>T</code> 中取出一系列 <code>K</code> 的属性</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  sex<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> person<span class="token operator">:</span> Pick<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> <span class="token string">'name'</span> <span class="token operator">|</span> <span class="token string">'age'</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'小王'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><ul><li><p>Record&lt;K, T&gt;</p><p>将 <code>K</code> 中所有的属性的值转化为 <code>T</code> 类型。</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> person<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token keyword">keyof</span> Person<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'小王'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token string">'12'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><ul><li>更多的内置——&gt; typescript 操作符及元素类型</li></ul><h3 id="Omit-lt-T-K-gt-（没有内置）"><a href="#Omit-lt-T-K-gt-（没有内置）" class="headerlink" title="Omit&lt;T,K&gt;（没有内置）"></a>Omit&lt;T,K&gt;（没有内置）</h3><p>从对象 <code>T</code> 中排除 <code>key</code> 是 <code>K</code> 的属性 。 与 Pick 相反</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">></span></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">>></span><span class="token punctuation">;</span></code></pre><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  sex<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> person<span class="token operator">:</span> Omit<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  age<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  sex<span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 土豆の学习笔记 </category>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>需要了解的 typescript 知识点</title>
      <link href="/notes/typescript-declare/"/>
      <url>/notes/typescript-declare/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前段时间项目忙，加之疫情原因，就没有更新。😊😊😊</p></blockquote><blockquote><p>这篇文章主要是类型声明过程中遇到的需求和问题做的记录。</p></blockquote><blockquote><p>持续更新中…</p></blockquote><span id="more"></span><h3 id="如何编写-d-ts声明文件？"><a href="#如何编写-d-ts声明文件？" class="headerlink" title="如何编写.d.ts声明文件？"></a>如何编写<code>.d.ts</code>声明文件？</h3><p><code>.d.ts</code>文件是在编写<code>typescript</code>项目中必不可少的，它是让我们能在<code>ts</code>中调用的<code>js</code>的声明文件。比如有很多主流的<code>npm库</code>都是基于<code>js</code>编写的，那么在你的<code>ts</code>项目中引用时，会提示你找不到对应包或函数的声明，此时并不需要我们用<code>ts</code>对组件重写，只需在你的项目中编写包含该库类型声明的<code>.d.ts</code>文件即可。</p><p>通常在定制化编写组件时，<code>.d.ts</code>会统一放到<code>@types</code>或者<code>typings</code>文件夹下，当然你也可以不写<code>.d.ts</code>，而通过<code>tsc</code>对<code>ts</code>文件做编译生成对应文件的<code>.d.ts</code>。</p><ul><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#declare-var"><code>declare var</code></a> 声明全局变量</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#declare-function"><code>declare function</code></a> 声明全局方法</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#declare-class"><code>declare class</code></a> 声明全局类</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#declare-enum"><code>declare enum</code></a> 声明全局枚举类型</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#declare-namespace"><code>declare namespace</code></a> 声明（含有子属性的）全局对象</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#interface-%E5%92%8C-type"><code>interface</code> 和 <code>type</code></a> 声明全局类型</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#export"><code>export</code></a> 导出变量</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#export-namespace"><code>export namespace</code></a> 导出（含有子属性的）对象</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#export-default"><code>export default</code></a> ES6 默认导出</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#export-1"><code>export =</code></a> commonjs 导出模块</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#export-as-namespace"><code>export as namespace</code></a> UMD 库声明全局变量</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#declare-global"><code>declare global</code></a> 扩展全局变量</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#declare-module"><code>declare module</code></a> 扩展模块</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#san-xie-xian-zhi-ling"><code>/// </code></a> 三斜线指令</li></ul><p><code>eg. 扩展 axios 模块请求的 config 配置。</code> <del>axios.interceptors.response. errors.config 亦可拿到</del></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">'axios'</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">AxiosRequestConfig</span> <span class="token punctuation">&#123;</span>    metadata<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      start<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">/**     *  用于控制该请求出现错误时， 是否由默认message显示错误信息     *     * @type &#123;boolean&#125;     * @memberof AxiosRequestConfig     */</span>    suppressError<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 用于请求在401状态码时， 是否自动重定向到登陆页。     *     * @type &#123;boolean&#125;     * @memberof AxiosRequestConfig     */</span>    suppressUnauthRedirect<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><div class="warning"><blockquote><p>声明语句中只能定义类型，切勿在声明语句中定义具体的实现</p></blockquote></div><h4 id="三斜线指令"><a href="#三斜线指令" class="headerlink" title="///三斜线指令"></a><code>///</code>三斜线指令</h4><blockquote><p>&#x2F;&#x2F;&#x2F; &lt;reference path&#x3D;”…” /&gt;</p></blockquote><p>三斜线引用告诉编译器在编译过程中要引入的额外的文件。<strong>三斜线指令仅可放在包含它的文件的最顶端。 一个三斜线指令的前面只能出现单行或多行注释。</strong></p><h4 id="declare-namespace详解"><a href="#declare-namespace详解" class="headerlink" title="declare namespace详解"></a><code>declare namespace</code>详解</h4><p><code>namespace</code>中文称命名空间，现在已经不建议再使用<code>ts</code>中的<code>namespace</code>，而推荐使用<code>ES6</code>的模块化方案了，<del>虽然目前仍能使用</del>。</p><p><code>eg. jQuery</code>提供了一个<code>jQuery.ajax</code>方法可以调用，那么我们就应该使用<code>declare namespace jQuery</code>来声明这个拥有多个子属性的全局变量。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">namespace</span> jQuery <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> settings<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> version<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  <span class="token keyword">class</span> <span class="token class-name">Event</span> <span class="token punctuation">&#123;</span>    <span class="token function">blur</span><span class="token punctuation">(</span>eventType<span class="token operator">:</span> EventType<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">enum</span> EventType <span class="token punctuation">&#123;</span>    CustomClick<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>注意，在<code>declare namespace</code>内部，我们直接使用<code>function ajax</code>来声明函数，而不是使用<code>declare function ajax</code>。类似的，也可以使用 <code>const</code>, <code>class</code>, <code>enum</code>等语句&#96;</p><ul><li>嵌套的命名空间</li></ul><p>使用场景： 诸如 jQuery.fn.extend({})</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">namespace</span> jQuery <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> settings<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>  <span class="token keyword">namespace</span> fn <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span>object<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>当然你也可以这样写：</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 这样写有很多局限性， 比如 jQuery不仅仅有 fn属性的时候</span><span class="token keyword">declare</span> <span class="token keyword">namespace</span> jQuery<span class="token punctuation">.</span>fn <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span>object<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="type和interface如何抉择？"><a href="#type和interface如何抉择？" class="headerlink" title="type和interface如何抉择？"></a><code>type</code>和<code>interface</code>如何抉择？</h3><p>推荐任何时候都是用<code>type</code>，<code>type</code>使用起来更像一个变量，与<code>interface</code>相比，<code>type</code>的特点如下：</p><ul><li>表达功能更强大，不局限于<code>object/class/function</code></li><li>要扩展已有<code>type</code>需要创建新<code>type</code>，不可以重名</li><li>支持更复杂的类型操作</li></ul><p>基本上所有用<code>interface</code>表达的类型都有其等价的<code>type</code>表达。</p><h3 id="给函数添加属性申明"><a href="#给函数添加属性申明" class="headerlink" title="给函数添加属性申明"></a>给函数添加属性申明</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">FuncWithAttachment</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">(</span>param<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  someProperty<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> testFunc<span class="token operator">:</span> <span class="token function-variable function">FuncWithAttachment</span> <span class="token operator">=</span> <span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">testFunc</span><span class="token punctuation">(</span><span class="token string">'mike'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 有类型提醒</span>testFunc<span class="token punctuation">.</span>someProperty <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 有类型提醒</span></code></pre><p>等价的<strong>声明合并</strong>写法:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 组合多个声明语句，它们不会产生冲突</span><span class="token keyword">type</span> <span class="token class-name">FuncWithAttachment</span> <span class="token operator">=</span> <span class="token punctuation">(</span>param<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">boolean</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">FuncWithAttachment</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  someProperty<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="枚举类型声明及类型使用"><a href="#枚举类型声明及类型使用" class="headerlink" title="枚举类型声明及类型使用"></a>枚举类型声明及类型使用</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 联合类型</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">|</span> <span class="token string">'b'</span> <span class="token operator">|</span> <span class="token string">'c'</span><span class="token punctuation">;</span><span class="token comment">// 枚举类型</span><span class="token keyword">enum</span> <span class="token constant">A</span> <span class="token punctuation">&#123;</span>  <span class="token string">'a'</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">,</span>  <span class="token string">'b'</span> <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">,</span>  <span class="token string">'c'</span> <span class="token operator">=</span> <span class="token string">'c'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p><strong>注意 (type)A 等价 keyof typeof (enum 的 keys)A，如果想使用 (enum 的 values 的联合类型) 直接使用 A 即可</strong></p></blockquote><h3 id="泛型的其他使用场景"><a href="#泛型的其他使用场景" class="headerlink" title="泛型的其他使用场景"></a>泛型的其他使用场景</h3><p><code>列举除了泛型函数外的一些常见使用场景：</code></p><ul><li>接口返回数据类型约束</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 有这么一个 interface ,显然， 很多接口返回数据都是这种结构，所以这里使用了 泛型约束</span><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>  page<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  size<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  results<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  total<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token generic-function"><span class="token function">request</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">>></span></span></span><span class="token punctuation">(</span><span class="token string">'/api/xx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>Promise</code> 类型</li></ul><p>在做异步操作时我们经常使用 <code>async</code> 函数，函数调用时会 <code>return</code> 一个 <code>Promise</code> 对象，可以使用 <code>then</code> 方法添加回调函数。</p><p><code>Promise</code> 是一个泛型类型，<code>T</code> 泛型变量用于确定使用 <code>then</code> 方法时接收的第一个回调函数（<code>onfulfilled</code>）的参数类型。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 某 props 接收异步处理函数</span>onTaskRequest<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>args<span class="token operator">:</span> <span class="token constant">API</span><span class="token punctuation">.</span><span class="token constant">X</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">API</span><span class="token punctuation">.</span><span class="token constant">X</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre><ul><li><code>event</code> 事件类型</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// click 使用 React.MouseEvent 加 dom 类型的泛型</span><span class="token comment">// HTMLInputElement 代表 input标签 另外一个常用的是 HTMLDivElement</span><span class="token keyword">const</span> <span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> React<span class="token punctuation">.</span>MouseEvent<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><ul><li>作为组件 <code>Props</code> 及 <code>hooks</code> 参数</li></ul><pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">FnComProps</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> FnCom<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>FnComProps<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>…</p><h3 id="动态更新-Object-的-key"><a href="#动态更新-Object-的-key" class="headerlink" title="动态更新 Object 的 key"></a>动态更新 <code>Object</code> 的 <code>key</code></h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  <span class="token punctuation">[</span>k<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span> <span class="token comment">// 指定 k 可以为任意的 string</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="反向使用-typeof"><a href="#反向使用-typeof" class="headerlink" title="反向使用 typeof"></a>反向使用 typeof</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// NewsCard 组件接收的 props 类型</span><span class="token keyword">interface</span> <span class="token class-name">NewsCardProps</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ficusService.getNews: (params: API.NewsQuery) => Promise&lt;API.PaginationNewsResult&lt;API.News>></span>  <span class="token comment">// 通过 typeof 反向获取类型</span>  provider<span class="token operator">:</span> <span class="token keyword">typeof</span> ficusService<span class="token punctuation">.</span>getNews<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="巧用Partial"><a href="#巧用Partial" class="headerlink" title="巧用Partial"></a>巧用<code>Partial</code></h3><p>使用 <code>Partial</code> 将所有的 <code>props</code> 属性都变为可选值。—— 这对我们在接口定义时很有用</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 在 A 接口中, 我们使用 interface X 完成了对某数据的返回类型定义。</span><span class="token comment">// 在 B 接口中, 我们可能会对 X 中定义的字段的部分字段进行更新， 但在 A 接口 为必选字段， B 接口为可选</span><span class="token keyword">export</span> <span class="token keyword">const</span> conditionService <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">async</span> <span class="token function">query</span><span class="token punctuation">(</span>query<span class="token operator">:</span> Query<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>PageResult<span class="token operator">&lt;</span>ConditionTemp<span class="token operator">>></span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/v1.0/condition</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      params<span class="token operator">:</span> query<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">async</span> <span class="token function">update</span><span class="token punctuation">(</span>data<span class="token operator">:</span> Partial<span class="token operator">&lt;</span>ConditionTemp<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/v1.0/condition</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="为-Window-添加参数"><a href="#为-Window-添加参数" class="headerlink" title="为 Window 添加参数"></a>为 Window 添加参数</h3><p>使用第三方库时（ga）,ga 是全局方法，在使用时会提示” 类型“Window”上不存在属性“ga”</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Window</span> <span class="token punctuation">&#123;</span>  ga<span class="token operator">:</span> <span class="token punctuation">(</span>    command<span class="token operator">:</span> <span class="token string">'send'</span><span class="token punctuation">,</span>    hitType<span class="token operator">:</span> <span class="token string">'event'</span> <span class="token operator">|</span> <span class="token string">'pageview'</span><span class="token punctuation">,</span>    fieldsObject<span class="token operator">:</span> GAFieldsObject <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>  <span class="token function-variable function">reloadAuthorized</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>不想在 Window 中增加，但是想要全局使用，比如通过 define 注入的参数，我们通过 <code>declare</code> 关键字在 <code>/src/typings.d.ts</code> 注入。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">const</span> <span class="token constant">REACT_APP_ENV</span><span class="token operator">:</span> <span class="token string">'test'</span> <span class="token operator">|</span> <span class="token string">'dev'</span> <span class="token operator">|</span> <span class="token string">'pre'</span> <span class="token operator">|</span> <span class="token boolean">false</span><span class="token punctuation">;</span></code></pre><h3 id="装包没有相对应的-types"><a href="#装包没有相对应的-types" class="headerlink" title="装包没有相对应的 @types"></a>装包没有相对应的 <code>@types</code></h3><ul><li><p>安装包对应的<code>@types</code>文件包，如<code>@types/react</code>、<code>@types/react-dom</code></p></li><li><p>自定义其为<code>any</code>。</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">'xxx'</span><span class="token punctuation">;</span> <span class="token comment">// d.ts</span><span class="token keyword">import</span> xxx <span class="token keyword">from</span> <span class="token string">'xxx'</span><span class="token punctuation">;</span> <span class="token comment">// tsx</span></code></pre><h3 id="ts-ignore"><a href="#ts-ignore" class="headerlink" title="@ts-ignore"></a>@ts-ignore</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// @ts-ignore</span>xxx<span class="token punctuation">;</span></code></pre><p>遇到动态性比较强的代码，不妨使用 <code>as unknown as XXX</code></p><h3 id="typescript-其他使用姿势"><a href="#typescript-其他使用姿势" class="headerlink" title="typescript 其他使用姿势"></a><a href="https://ts.xcatliu.com/basics/declaration-files.html">typescript 其他使用姿势</a></h3>]]></content>
      
      
      <categories>
          
          <category> 土豆の学习笔记 </category>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用alias别名配置</title>
      <link href="/posts/git-alias/"/>
      <url>/posts/git-alias/</url>
      
        <content type="html"><![CDATA[<h3 id="点亮你的技巧点"><a href="#点亮你的技巧点" class="headerlink" title="点亮你的技巧点"></a>点亮你的技巧点</h3><p>通过更加简洁易记的单词或者短语来标记常用的指令–别名<code>alias</code>。它的另外一个不容忽视的好处就是可以尽可能的避免指令输出错误~~</p><span id="more"></span><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><code>eg.</code>配置<code>git status</code>的<code>status</code>别名为<code>st</code>：</p><blockquote><p>git config –global alias.st status</p></blockquote><p>添加<code>--global</code>针对用户级起作用，如果不加，则只会在当前仓库起作用</p><p>除了通过指令进行设置以外，你可以打开<code>~/.globalConfig</code>文件，然后编辑录入你想要的<code>alias</code>…语法如下：</p><pre class="language-none"><code class="language-none">[alias]  st &#x3D; status  xx &#x3D; xxxx</code></pre><p>这样就配置好了，例如上面配置的<code>status</code>，当你从<code>terminal</code>录入<code>git s</code>的指令时，会自动使用<code>git status</code>来替换当前指令。</p><p>有的童鞋要说了，那都这样了 我<code>git</code>也想简写，行否？当然是可以滴~~😋😋😋</p><p>例如我平时提交代码的<code>terminal</code>是<code>git bash</code>，我们可以为<code>git bash</code>添加<code>alias</code>的配置项，辅助识别指令：找到<code>~/.bash_profile</code>或者是<code>prefix/etc/bash.bashrc</code>，末尾追加：</p><blockquote><p><code>alias g=&#39;git&#39;</code></p></blockquote><p>现在<code>g st</code>就等价<code>git status</code>…有木有感觉很爽？既然知道了怎么配，大家根据自己的日常习惯和需要，进行配置即可…</p><p>写下我常用的一些<code>alias</code>配置，其中有一部分也是官方推荐的配置项： -&gt; <a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-Git-%E5%88%AB%E5%90%8D">这里</a></p><table><thead><tr><th align="center">别名<code>alias</code></th><th align="left">原指</th></tr></thead><tbody><tr><td align="center"><code>a</code></td><td align="left"><code>add .</code></td></tr><tr><td align="center"><code>cm</code></td><td align="left"><code>commit -m</code></td></tr><tr><td align="center"><code>st</code></td><td align="left"><code>status</code></td></tr><tr><td align="center"><code>co</code></td><td align="left"><code>checkout</code></td></tr><tr><td align="center"><code>ci</code></td><td align="left"><code>commit</code></td></tr><tr><td align="center"><code>rci</code></td><td align="left"><code>commit --amend --no-edit</code></td></tr><tr><td align="center"><code>br</code></td><td align="left"><code>branch</code></td></tr><tr><td align="center"><code>unstage</code></td><td align="left"><code>reset HEAD</code></td></tr><tr><td align="center"><code>last</code></td><td align="left"><code> log -1</code></td></tr><tr><td align="center"><code>lg</code></td><td align="left"><code>log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit</code></td></tr><tr><td align="center"><code>pr</code></td><td align="left"><code>pull --rebase</code></td></tr><tr><td align="center"><code>pl</code></td><td align="left"><code>pull</code></td></tr></tbody></table><p>例如：<code>g last</code> 可以查看最近一条的<code>git</code>提交记录，<code>g rci</code>可以将暂存区内的文件改动合并至上一次提交，且不生成新的提交记录 <del>有时候修改了内容提交了才发现，可能忘记 format ？ 或者是变量名拼写错误？等等需要重新编辑提交的，但又不想在日志中再生成一条提交记录，就可以使用 rci 并入提交</del>，<code>g unstage</code>可以取消<code>add</code>到暂存区的文件，<code>lg</code>可以查看<code>git</code>提交日志。</p>]]></content>
      
      
      <categories>
          
          <category> 土豆の收藏安利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git-alias </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜狗输入法自定义时间代码片段</title>
      <link href="/posts/keyboard-input-snippet/"/>
      <url>/posts/keyboard-input-snippet/</url>
      
        <content type="html"><![CDATA[<h3 id="浅谈"><a href="#浅谈" class="headerlink" title="浅谈"></a>浅谈</h3><p>什么是输入法片段？旨在通过特殊的字符串来输出自定义好的文本，达到便捷输出的目的。<a href="https://pinyin.sogou.com/help.php?list=1&q=9">https://pinyin.sogou.com/help.php?list=1&q=9</a></p><p>当然除了自己定义外，还有一些内置的短语片段，例如<code>sj</code>会输出时间，<code>xq</code>会输出星期内容，<code>rq</code>会输出具体日期..如图：</p><p><a href="/images/posts/keyboard-input-snippet/p1.png"><img src="/images/posts/keyboard-input-snippet/p1.png" alt="keyboard-input-snippet-p1" loading="lazy"></a></p><p>然后来说说怎么自定义，就拿时间举例…<del>因为我觉得内置的<code>sj</code>短语不太能满足我的格式需求</del></p><span id="more"></span><h3 id="添加时间短语"><a href="#添加时间短语" class="headerlink" title="添加时间短语"></a>添加时间短语</h3><blockquote><p>输入法-&gt; 属性设置 -&gt; 高级 -&gt; 候选扩展 -&gt; 自定义短语设置 -&gt; 添加新短语</p></blockquote><p>短语除了固定性的内容以外，还可以是模板… <code>#开头</code>形如<code>#xxxxxx</code>,了解模板的关键字函数：</p><h3 id="函数公式"><a href="#函数公式" class="headerlink" title="函数公式"></a>函数公式</h3><table><thead><tr><th align="left">函数</th><th align="center">含义</th><th align="right">举例</th></tr></thead><tbody><tr><td align="left">$year</td><td align="center">年(4 位)</td><td align="right">2006、2008</td></tr><tr><td align="left">$year_yy</td><td align="center">年(2 位)</td><td align="right">06、08</td></tr><tr><td align="left">$month</td><td align="center">月</td><td align="right">12、8、3</td></tr><tr><td align="left">$month_mm</td><td align="center">月</td><td align="right">12、08、03 此函数在输入法 3.1 版之后（含）有效</td></tr><tr><td align="left">$day</td><td align="center">日</td><td align="right">3、13、22</td></tr><tr><td align="left">$day_dd</td><td align="center">日</td><td align="right">03、13、22 此函数在输入法 3.1 版之后（含）有效</td></tr><tr><td align="left">$weekday</td><td align="center">星期</td><td align="right">0、1、2、5、6</td></tr><tr><td align="left">$fullhour</td><td align="center">时(24 小时制)</td><td align="right">02、08、13、23</td></tr><tr><td align="left">$halfhour</td><td align="center">(12 小时制)</td><td align="right">02、08、01、11</td></tr><tr><td align="left">$ampm</td><td align="center">AM、PM(英)</td><td align="right">AM、PM（大写）</td></tr><tr><td align="left">$minute</td><td align="center">分</td><td align="right">02、08、15、28</td></tr><tr><td align="left">$second</td><td align="center">秒</td><td align="right">02、08、15、28</td></tr><tr><td align="left">$year_cn</td><td align="center">年(中文 4 位)</td><td align="right">二〇〇六</td></tr><tr><td align="left">$year_yy_cn</td><td align="center">年(中文 2 位)</td><td align="right">〇六</td></tr><tr><td align="left">$month_cn</td><td align="center">月(中文)</td><td align="right">十二、八、三</td></tr><tr><td align="left">$day_cn</td><td align="center">日(中文)</td><td align="right">三、十三、二十二</td></tr><tr><td align="left">$weekday_cn</td><td align="center">星期(中文)</td><td align="right">日、一、二、五、六</td></tr><tr><td align="left">$fullhour_cn</td><td align="center">时(中文 24 时制)</td><td align="right">二、八、十三、二十三</td></tr><tr><td align="left">$halfhour_cn</td><td align="center">时(中文 12 时制)</td><td align="right">二、八、一、十一</td></tr><tr><td align="left">$ampm_cn</td><td align="center">上午下午(中文)</td><td align="right">上午、下午</td></tr><tr><td align="left">$minute_cn</td><td align="center">分(中文)</td><td align="right">零二、零八、十五、二十八</td></tr><tr><td align="left">$second_cn</td><td align="center">秒(中文)</td><td align="right">零二、零八、十五、二十八</td></tr></tbody></table><p><code>eg.</code>设置形如<code>2022-08-17 11:31:14</code>格式的短语：</p><blockquote><p><code>#$year-$month_mm-$day_dd $fullhour:$minute:$second</code></p></blockquote><p>效果如下：</p><p><a href="/images/posts/keyboard-input-snippet/p2.png"><img src="/images/posts/keyboard-input-snippet/p2.png" alt="keyboard-input-snippet-p2" loading="lazy"></a></p>]]></content>
      
      
      <categories>
          
          <category> 土豆の收藏安利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 输入法 </tag>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何构建你想要的正则表达式?</title>
      <link href="/notes/regular-expression/"/>
      <url>/notes/regular-expression/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h3><p>正则表达式<code>(regular expression)</code>描述了一种字符串匹配的模式<code>(pattern)</code>，可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p><blockquote><p>正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为”元字符”）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。</p></blockquote><span id="more"></span><h3 id="正则表达式的创建"><a href="#正则表达式的创建" class="headerlink" title="正则表达式的创建"></a>正则表达式的创建</h3><p>正则表达式是引用数据类型，又称规则表达式。可以通过内置构造函数创建，亦可以通过字面量方式创建。</p><h4 id="字面量方式创建"><a href="#字面量方式创建" class="headerlink" title="字面量方式创建"></a>字面量方式创建</h4><blockquote><p>语法：<code>const reg = /xxx/</code>双斜杠包夹的内容就是正则表达式。</p></blockquote><h4 id="内置构造函数创建"><a href="#内置构造函数创建" class="headerlink" title="内置构造函数创建"></a>内置构造函数创建</h4><blockquote><p>语法：<code>const reg = new RegExp(&#39;xxx&#39;)</code> 通过<code>new</code>关键字创建正则实例。</p></blockquote><p><code>so：</code>如果写一个正则表达式<code>xxx</code>，来先了解正则表达式的一些比较特殊的符号意义所在？</p><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><h4 id="d出现一个数字"><a href="#d出现一个数字" class="headerlink" title="\d出现一个数字"></a><code>\d</code>出现一个数字</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'sdasdna126sdfd6550sad'</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><p>其他字符同理，就不单独写例子了，通过<code>test</code>则返回<code>true</code>.</p><h4 id="D出现一个非数字"><a href="#D出现一个非数字" class="headerlink" title="\D出现一个非数字"></a><code>\D</code>出现一个非数字</h4><h4 id="s出现一个空格"><a href="#s出现一个空格" class="headerlink" title="\s出现一个空格"></a><code>\s</code>出现一个空格</h4><h4 id="S出现一个非空格"><a href="#S出现一个非空格" class="headerlink" title="\S出现一个非空格"></a><code>\S</code>出现一个非空格</h4><h4 id="w出现一个数字字母下划线"><a href="#w出现一个数字字母下划线" class="headerlink" title="\w出现一个数字字母下划线"></a><code>\w</code>出现一个数字字母下划线</h4><h4 id="W出现一个非数字字母下划线"><a href="#W出现一个非数字字母下划线" class="headerlink" title="\W出现一个非数字字母下划线"></a><code>\W</code>出现一个非数字字母下划线</h4><h4 id="出现一个除了换行以外的字符"><a href="#出现一个除了换行以外的字符" class="headerlink" title=".出现一个除了换行以外的字符"></a><code>.</code>出现一个除了换行以外的字符</h4><p>实际使用过程中，称之为任意字符也不为过。</p><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><h4 id=""><a href="#" class="headerlink" title="*"></a><code>*</code></h4><blockquote><p>出现的次数为<code>0 - infinite</code>(正无穷)，<code>eg.</code> <code>/a*/</code>表示出现 0 - 无穷次<del>（因为限定的次数最低可以是 0，所以理解为所有字符亦可）😂😂😂</del></p></blockquote><h4 id="-1"><a href="#-1" class="headerlink" title="+"></a><code>+</code></h4><blockquote><p>出现的次数为<code>1 - infinite</code>(正无穷)，<code>eg.</code> <code>/\d+/</code>表示数字出现一次以上</p></blockquote><h4 id="-2"><a href="#-2" class="headerlink" title="?"></a><code>?</code></h4><blockquote><p>出现的次数为<code>0 - 1</code>，<code>eg:</code> <code>/\d?/</code>可以不出现数字，也可以出现数字（仅匹配出现的第一次）</p></blockquote><h4 id="n-和-n"><a href="#n-和-n" class="headerlink" title="{n} 和 {n,}"></a><code>&#123;n&#125; 和 &#123;n,&#125;</code></h4><blockquote><p>单类型字符连续出现<code>n</code>个，<code>eg.</code> <code>/\d&#123;3&#125;/</code>表示连续三个或三个以上数字在一块 ，只要出现一次即为<code>true</code>.</p></blockquote><h4 id="n-m"><a href="#n-m" class="headerlink" title="{n,m}"></a><code>&#123;n,m&#125;</code></h4><blockquote><p>单类型字符连续出现<strong>至少</strong><code>n - m</code>次（意味着也可以超过），<code>eg.</code></p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'s354ada1sdf22515553sg4d5sf'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d&#123;5,7&#125;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><p>估计有些童鞋已经蒙圈了，既然都是至少这么多次，那它们直接有啥区别？比如<code>&#123;n,&#125; &#123;n,m&#125;</code>，又该怎么使用？，别急来先看<strong>边界符</strong>：</p><h3 id="边界符"><a href="#边界符" class="headerlink" title="边界符"></a>边界符</h3><p>写了边界符后，在使用<code>test</code>检测时，搭配限定符，就可实现区分<code>&#123;n, m&#125; 和 &#123;n, &#125;</code>，前者代表整个长度只能在<code>n - m</code>，后者是长度至少为<code>n</code>.</p><h4 id="以-开头"><a href="#以-开头" class="headerlink" title="^ 以...开头"></a><code>^ 以...开头</code></h4><h4 id="以-结尾"><a href="#以-结尾" class="headerlink" title="$ 以...结尾"></a><code>$ 以...结尾</code></h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reg1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span><span class="token keyword">const</span> str2 <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false（\d只能出现一个）</span><span class="token keyword">const</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\w&#123;4,9&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> str3 <span class="token operator">=</span> <span class="token string">'_as123'</span><span class="token punctuation">;</span><span class="token keyword">const</span> str4 <span class="token operator">=</span> <span class="token string">'_as1234567'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false（指定了\w 出现4-9次 长度  字符串长度不能超过 9，同时 只能是\w字符）</span></code></pre><h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><h4 id="转译符"><a href="#转译符" class="headerlink" title="\转译符"></a><code>\</code>转译符</h4><p>意指把 <strong>原本没有特殊含义的东西 加上 \就没了特殊含义</strong>；<del>把原本就有特殊含义的东西加上<code>\</code>就没有特殊含义了</del></p><h4 id="把一块东西当成整体"><a href="#把一块东西当成整体" class="headerlink" title="()把一块东西当成整体"></a><code>()</code>把一块东西当成整体</h4><h4 id="或"><a href="#或" class="headerlink" title="|或"></a><code>|</code>或</h4><blockquote><p>注意：<code>||</code>逻辑或 <code>|</code>占位或 两者的区别</p></blockquote><p><code>eg.</code> 简版邮箱<code>/^\w&#123;6,12&#125;@(qq|163|sina)\.(com|cn|net)/</code></p><h4 id="取中间任意一个"><a href="#取中间任意一个" class="headerlink" title="[]取中间任意一个"></a><code>[]</code>取中间任意<strong>一个</strong></h4><p>只能取中括号内的一个字符，注意字符长度，<code>eg.</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[abcd]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span class="token keyword">const</span> str2 <span class="token operator">=</span> <span class="token string">'abcd'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></code></pre><h4 id="到-至"><a href="#到-至" class="headerlink" title="-到..至.."></a><code>-</code>到..至..</h4><p><code>eg. </code> 对于正则 <code>/^[a-zA-Z0-9_]$/</code>，字符<code>M</code>就符合.</p><h4 id="非"><a href="#非" class="headerlink" title="[^]非"></a><code>[^]</code>非</h4><p>对<code>[]</code>的正则取非，<code>eg. /^[^a-z]$/</code>，指非<code>a-z</code>的字符，长度为 1.</p><p>再然后要说的就是标识符了，它写在<code>//</code>的后面，具体使用如下：</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p><code>g</code>全局匹配，<code>i</code>忽略大小写，<code>eg.</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">m</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">;</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'MasnonasmsdfMasm'</span><span class="token punctuation">;</span>str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// *asnonas*sdf*as*</span></code></pre><p>当然标识符不仅仅是上面介绍的这两个，<a href="https://regex101.com/">https://regex101.com/</a>可以在这个网站上测试及学习…</p><h3 id="正则表达式原型上的方法"><a href="#正则表达式原型上的方法" class="headerlink" title="正则表达式原型上的方法"></a>正则表达式原型上的方法</h3><p><code>eg.</code>正则表达式<code>reg = /xxx/</code>.</p><h4 id="对字符串进行验证"><a href="#对字符串进行验证" class="headerlink" title="对字符串进行验证"></a>对字符串进行验证</h4><p><code>reg.test(str)</code>. 符合规则就返回<code>true</code>否则返回<code>false</code>.</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'ahsjdhaabbc'</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></code></pre><h4 id="捕获字符串里面符合规则的内容"><a href="#捕获字符串里面符合规则的内容" class="headerlink" title="捕获字符串里面符合规则的内容"></a>捕获字符串里面符合规则的内容</h4><p><code>reg.exec(str)</code>第一次是从头开始匹配，如果找到符合规则的字符，那么返回一个数组，数组的第 0 项就是捕获到的符合规则的字符，第二次应该从第一次结束的位置开始捕获，如果找到也是返回一个数组，如果没有找到符合规则的字符，就返回一个<code>null</code>，下次执行又是从头开始重新捕获.<del>（用的很少）</del></p><h4 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h4><p><code>reg.toString()</code>将正则表达式转换为字符串。</p><h3 id="字符串与正则相关方法"><a href="#字符串与正则相关方法" class="headerlink" title="字符串与正则相关方法"></a>字符串与正则相关方法</h3><h4 id="字符串基于正则完成替换"><a href="#字符串基于正则完成替换" class="headerlink" title="字符串基于正则完成替换"></a>字符串基于正则完成替换</h4><p><code>str.replace(regexp|substr, newSubStr|function)</code>. <code>reg：</code>一个<code>RegExp</code>对象或者其字面量，该正则所匹配的内容会被第二个参数的返回值替换掉<del>（该方法的具体参数使用请参阅文档，这里仅介绍正则相关）</del></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">m</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">;</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'MasnonasmsdfMasm'</span><span class="token punctuation">;</span>str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// *asnonas*sdf*as*</span></code></pre><p>和<code>replace</code>相近的还有<code>replaceAll</code>，与前者差别就是后者匹配所有符合正则的子串并替换，而前者则需要通过指定<code>g</code>参数实现。</p><h4 id="提取字符串中符合正则的匹配项"><a href="#提取字符串中符合正则的匹配项" class="headerlink" title="提取字符串中符合正则的匹配项"></a>提取字符串中符合正则的匹配项</h4><p><code>str.match(reg)</code>返回一个数组，将所有符合的子串提取出来。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'Ma123sdf4565dsfsdf789sdf35'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d&#123;2&#125;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ["12", "45", "65", "78", "35"]</span></code></pre><h4 id="查找符合规则的字符串子串"><a href="#查找符合规则的字符串子串" class="headerlink" title="查找符合规则的字符串子串"></a>查找符合规则的字符串子串</h4><p><code>str.search(reg)</code>查找符合规则的字符，返回相对应的下标，如果有多个符合，那么就返回第一个，作用同<code>indexOf</code>，不过后者无法传入<code>reg</code>正则查找.</p><h3 id="贪婪模式和非贪婪模式"><a href="#贪婪模式和非贪婪模式" class="headerlink" title="贪婪模式和非贪婪模式"></a>贪婪模式和非贪婪模式</h3><p>在<code>javascript</code>中的正则表达式的匹配方式默认是贪婪模式。</p><p><code>eg. </code></p><h4 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 指匹配 b 开头，后续出现 0 -任意次数的 a 的子串</span><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ba*</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'baaaabab'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['baaaa', 'ba', 'b']</span></code></pre><p>正是因为贪婪匹配（尽可能多的匹配符号条件的子串），导致了匹配出的第一项是<code>baaaa</code>（从前向后匹配，一直到匹配到的字符串不符合条件时停止）, 而非<code>b</code>.</p><h4 id="非贪婪模式"><a href="#非贪婪模式" class="headerlink" title="非贪婪模式"></a>非贪婪模式</h4><p>当然有贪婪也就有非贪婪，如何指定？</p><blockquote><p>使用字符<code>?</code>标识正则使用非贪婪模式进行匹配(这是<code>?</code>的另外一种用法含义) <del>看你怎么理解</del></p></blockquote><p>对上面例子的正则改造一下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ba*?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'baaaabab'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['b', 'b', 'b']</span></code></pre><p><code>/ba*</code>为原有的正则表达式，在其后添加<code>?</code>指明非贪婪，匹配到的结果自然就是<code>[&#39;b&#39;, &#39;b&#39;, &#39;b&#39;]</code>.</p><p>以为这样就结束了？<code>no no no...</code> 正则在匹配时还有另外一条规则…<strong>比贪婪规则的优先级更高</strong>，<code>so</code>在你使用时,如果不注意…你会怀疑自己的…</p><h4 id="匹配的优先级"><a href="#匹配的优先级" class="headerlink" title="匹配的优先级"></a>匹配的优先级</h4><blockquote><p>最先开始的匹配拥有最高的优先权 —— The match that begins earliest wins。</p></blockquote><p>怎么解释，匹配优先匹配左边的<strong>第一个字符</strong>，然后尽可能少的去匹配后续字符，而不是忽略第一个字符，去找第二个…😋😋😋 <del>匹配结果不会从左侧缩减字符，而只会进行右侧的懒惰匹配</del> <code>eg.</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a*?b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'baaaabab'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['b', 'aaaab', 'ab']</span></code></pre><p>如果你未理解该规则，那么按照非贪婪的理解，打印的结果应该是<code>[&#39;b&#39;, &#39;b&#39;, &#39;b&#39;]</code>，<strong>这是错误的</strong>.</p><p><strong>正确结果</strong>应该是<code>[&#39;b&#39;, &#39;aaaab&#39;, &#39;ab&#39;]</code>.</p>]]></content>
      
      
      <categories>
          
          <category> 土豆の学习笔记 </category>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 typescript 项目中使用 eslint 和 prettier</title>
      <link href="/share/eslint-and-prettier-in-ts-project/"/>
      <url>/share/eslint-and-prettier-in-ts-project/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么是eslint和prettier？"><a href="#为什么是eslint和prettier？" class="headerlink" title="为什么是eslint和prettier？"></a>为什么是<code>eslint</code>和<code>prettier</code>？</h3><blockquote><p>在<code>ESlint</code>推出<code>--fix</code>参数前<code>ESLint</code>并没有自动化格式代码的功能，要对一些格式问题做批量格式化只能用<code>Prettier</code>这样的工具。并且<code>Prettier</code>在代码风格的检测上比<code>ESlint</code>更全面，所以两者通常是结合在一起使用的。</p></blockquote><blockquote><p>对<code>typescript</code>代码进行<code>linting</code>时，有两个主要的<code>linting</code>工具可供选择：<code>tslint、eslint</code>，<code>tslint</code>是一个只能用于<code>typescript</code>项目的<code>linter</code>，而<code>eslint</code>同时支持<code>typescript、javascript</code>.</p></blockquote><blockquote><p>据<code>typescript</code>核心团队解释：<code>ESLint 具有比 TSLint 更高性能的架构</code>，并且后续在为<code>typescript</code>中<code>linting</code>集成时，<code>只会关注eslint</code>，另外官方自<code>2019</code>起已经弃用<code>tslint</code>，**<a href="https://palantir.github.io/tslint/">TSLint has been deprecated as of 2019</a>**</p></blockquote><span id="more"></span><h3 id="在typescript项目中搭建eslint"><a href="#在typescript项目中搭建eslint" class="headerlink" title="在typescript项目中搭建eslint"></a>在<code>typescript</code>项目中搭建<code>eslint</code></h3><blockquote><p><code>tips</code>：如果是<code>create-react-app</code>创建的项目，<code>eslint</code>已经被作为依赖项集成，无需另外安装.</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># @typescript-eslint/parser 允许 ESLint 对 TypeScript 代码进行 lint 解析</span><span class="token comment"># @typescript-eslint/eslint-plugin 包含一堆特定于 TypeScript 的 ESLint 规则</span><span class="token function">yarn</span> <span class="token function">add</span> -D eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin</code></pre><p><code>then..</code>在项目根目录添加<code>.eslintrc.js</code>的配置文件，<code>eg</code>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">'@typescript-eslint/parser'</span><span class="token punctuation">,</span> <span class="token comment">// Specifies the ESLint parser</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'plugin:@typescript-eslint/recommended'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token number">2020</span><span class="token punctuation">,</span> <span class="token comment">// Allows for the parsing of modern ECMAScript features</span>    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">'module'</span><span class="token punctuation">,</span> <span class="token comment">// Allows for the use of imports</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">'plugin:@typescript-eslint/recommended'</span><span class="token punctuation">,</span> <span class="token comment">// Uses the recommended rules from the @typescript-eslint/eslint-plugin</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Place to specify ESLint rules. Can be used to overwrite rules specified from the extended configs</span>    <span class="token string-property property">'no-console'</span><span class="token operator">:</span>      process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span>        <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">allow</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'warn'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">allow</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">'no-debugger'</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token string">'warn'</span> <span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token comment">// -----</span>    <span class="token comment">// 配置 unused-imports 规则需要单独安装插件 yarn add -D eslint-plugin-unused-imports 然后在最外层添加配置项 plugins: ['unused-imports']</span>    <span class="token comment">// 'unused-imports/no-unused-imports': 'error',</span>    <span class="token comment">// -----</span>    <span class="token comment">// typescript configs e.g.</span>    <span class="token string-property property">'@typescript-eslint/no-unused-vars'</span><span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string-property property">'@typescript-eslint/explicit-function-return-type'</span><span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string-property property">'@typescript-eslint/no-explicit-any'</span><span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string-property property">'@typescript-eslint/consistent-type-imports'</span><span class="token operator">:</span> <span class="token string">'warn'</span><span class="token punctuation">,</span>    <span class="token string-property property">'@typescript-eslint/explicit-module-boundary-types'</span><span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string-property property">'@typescript-eslint/no-empty-function'</span><span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string-property property">'@typescript-eslint/no-non-null-assertion'</span><span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string-property property">'@typescript-eslint/no-this-alias'</span><span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><blockquote><p>如果在<code>react的ts</code>項目中使用，另外安装 <code>eslint-plugin-react dev</code>依赖项，并在上面配置的<code>.eslintrc</code>中添加配置：</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ... others</span>  <span class="token literal-property property">settings</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">react</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">'detect'</span><span class="token punctuation">,</span> <span class="token comment">// Tells eslint-plugin-react to automatically detect the version of React to use</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ... others</span>    <span class="token literal-property property">ecmaFeatures</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">jsx</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Allows for the parsing of JSX</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// ... others</span>    <span class="token string">'plugin:react/recommended'</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>当然你也可以配置<code>eslint</code>的<code>ignore</code>文件<code>.eslintignore</code>，符合其配置规则（语法同其他的<code>ignore</code>配置，如<code>.gitignore</code>）的文件将忽略<code>lint</code>检测。</p><p>😍😍😍<a href="https://eslint.org/docs/latest/">查看更多的配置项及规则</a> -&gt; <a href="http://eslint.cn/docs/rules/">中文文档</a></p><h3 id="混入prettier配置"><a href="#混入prettier配置" class="headerlink" title="混入prettier配置"></a>混入<code>prettier</code>配置</h3><blockquote><p>混用后，就可以通过 eslint –fix 来自动修复不符合 prettier 规则的代码</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># eslint-config-prettier 禁用可能与 prettier 冲突的 ESLint 规则</span><span class="token comment"># eslint-plugin-prettier 将 prettier 作为 eslint 规则运行</span><span class="token function">yarn</span> <span class="token function">add</span> -D prettier eslint-config-prettier eslint-plugin-prettier</code></pre><p>接下来在项目的根目录下添加一个<code>.prettierrc</code>文件，用以配置<code>prettier</code>，<code>eg:</code></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"trailingComma"</span><span class="token operator">:</span> <span class="token string">"all"</span><span class="token punctuation">,</span>  <span class="token property">"printWidth"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>  <span class="token property">"arrowParens"</span><span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">&#125;</span></code></pre><p>继续…在原有的配置基础上，更新<code>.eslintrc.js</code>配置，用以支持混用：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ... others</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// ... others</span>    <span class="token comment">// 确保添加的 'plugin:prettier/recommended' 在 extends 配置的最后一项</span>    <span class="token string">'plugin:prettier/recommended'</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 土豆の教程分享 </category>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> eslint </tag>
            
            <tag> prettier </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于husky和commitlint实现git提交规范校验</title>
      <link href="/share/git-precommit-and-commitmsg-hooks/"/>
      <url>/share/git-precommit-and-commitmsg-hooks/</url>
      
        <content type="html"><![CDATA[<h3 id="Before…"><a href="#Before…" class="headerlink" title="Before…"></a>Before…</h3><p><code>husky</code>在前端工程化的过程中可以说是必不可少，<code>why?</code> 它可以让我们在项目中更加方便的去使用<code>git hooks</code>，而非传统意义上的<code>.git/hooks</code>下编辑修改。</p><p><code>git hooks</code>则是<code>git</code>在触发某个重要操作时自动执行的脚本，本文主要围绕<code>commit-msg and pre-commit</code>介绍。<a href="https://git-scm.com/docs/githooks">了解更多</a></p><span id="more"></span><h3 id="husky-6↑工作原理"><a href="#husky-6↑工作原理" class="headerlink" title="husky@6↑工作原理"></a><code>husky@6↑</code>工作原理</h3><blockquote><p><code>husky@6</code>放弃了原有的配置方式（创建所有类型的<code>git hooks</code>，方便用户设置任何类型钩子都能正常工作）。新版本放弃了使用默认的<code>.git/hooks</code>，而是根据<code>git@2.9</code>提供的新特性<code>core.hooksPath</code>指定了<code>hooks</code>所在的目录<code>.husky/</code>，实现只添加用户想要的<code>hooks</code></p></blockquote><blockquote><p><del>既然知道了新版本的破坏性变更，以及其原理，那肯定选择用新版本。目前最新版已经到<code>8.0.1</code>了.</del></p></blockquote><h3 id="新版husky使用"><a href="#新版husky使用" class="headerlink" title="新版husky使用"></a><strong>新版<code>husky</code>使用</strong></h3><h4 id="安装husky"><a href="#安装husky" class="headerlink" title="安装husky"></a>安装<code>husky</code></h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> -D husky</code></pre><h4 id="卸载husky"><a href="#卸载husky" class="headerlink" title="卸载husky"></a>卸载<code>husky</code></h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> remove husky<span class="token function">git</span> config --unset core.hooksPath</code></pre><h4 id="初始化husky"><a href="#初始化husky" class="headerlink" title="初始化husky"></a>初始化<code>husky</code></h4><pre class="language-bash" data-language="bash"><code class="language-bash">npx husky <span class="token function">install</span><span class="token comment"># 或者添加 prepare 脚本命令</span><span class="token function">npm</span> set-script prepare <span class="token string">"husky install"</span><span class="token function">yarn</span> prepare<span class="token comment"># install 到指定的目录</span>npx husky <span class="token function">install</span> .config/husky</code></pre><h4 id="创建hooks"><a href="#创建hooks" class="headerlink" title="创建hooks"></a>创建<code>hooks</code></h4><blockquote><p>语法：<code>husky add &lt;file&gt; [cmd]</code></p></blockquote><p><code>eg.</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">husky <span class="token function">add</span> .husky/pre-commit <span class="token string">'eslint'</span></code></pre><h4 id="绕过钩子"><a href="#绕过钩子" class="headerlink" title="绕过钩子"></a>绕过钩子</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加 --no-verify eg.</span><span class="token function">git</span> commit -m <span class="token string">"test"</span> --no-verify</code></pre><h4 id="简单举例"><a href="#简单举例" class="headerlink" title="简单举例"></a>简单举例</h4><h5 id="添加pre-commit钩子："><a href="#添加pre-commit钩子：" class="headerlink" title="添加pre-commit钩子："></a>添加<code>pre-commit</code>钩子：</h5><p>通过<code>husky add</code>钩子添加的<code>cmd</code>在创建后作为初始的脚本命令，你可以对其做任何修改。<del>意味着创建的时候可以不加 😊😊😊</del></p><p><code>eg.</code>当触发<code>pre-commit</code>的时候，对代码执行<code>lint</code>脚本检查：</p><pre class="language-bash" data-language="bash"><code class="language-bash">npx husky <span class="token function">add</span> .husky/pre-commit <span class="token string">'npm run lint'</span><span class="token comment"># or 如果你的项目使用了脚手架的 lint，例如 vue-cli-service...</span><span class="token function">npm</span> set-script lint <span class="token string">"vue-cli-service lint"</span></code></pre><blockquote><p>钩子里配置的<code>npm run lint</code>，请确认你的项目已经包含了<code>lint</code>校验配置，并自行安装<code>devDependencies</code>。<del>只是个栗子，不一定就是做<code>lint</code>校验 ❤❤❤</del> 效果图如下：</p></blockquote><p><a href="/images/share/git-precommit-and-commitmsg-hooks/p1.png"><img src="/images/share/git-precommit-and-commitmsg-hooks/p1.png" alt="git-precommit-and-commitmsg-hooks-p1" loading="lazy"></a><br><a href="/images/share/git-precommit-and-commitmsg-hooks/p2.png"><img src="/images/share/git-precommit-and-commitmsg-hooks/p2.png" alt="git-precommit-and-commitmsg-hooks-p2" loading="lazy"></a></p><h3 id="pre-commit搭配lint-staged"><a href="#pre-commit搭配lint-staged" class="headerlink" title="pre-commit搭配lint-staged"></a><code>pre-commit</code>搭配<code>lint-staged</code></h3><p>上面只是举了一个栗子…<code>pre-commit</code>的时候，还可以做得到事情有很多，例如执行测试脚本…</p><p><strong>But…每次触发 pre-commit 都对所有的文件执行 lint，属实是有一点点恶趣味了，这里使用 lint-staged 工具做一点优化.</strong> <del>如果你不介意…可以跳过下面的<code>lint-staged</code>😢😢😢</del></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> -D lint-staged</code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在项目的<code>package.json</code>中添加：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token comment">// 配置是一个对象，其中每个值都是要运行的命令，其键要用于此命令的 glob 模式，值（cmd）可以是数组，如果是数组，则按顺序运行命令。</span>  <span class="token comment">// 甚至支持配置成函数：(filenames: string[]) => string | string[] | Promise&lt;string | string[]></span>  <span class="token comment">// eg. '**/*.js?(x)': filenames => filenames.map(filename => `prettier --write '$&#123;filename&#125;'`)</span>  <span class="token property">"lint-staged"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 例如此配置：通过 eslint 工具检测 修复提交的 .js .vue .ts 的错误项，然后添加到暂存区</span>    <span class="token property">"**/*.&#123;js,vue,ts&#125;"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"eslint --fix"</span><span class="token punctuation">,</span> <span class="token string">"git add ."</span><span class="token punctuation">]</span>    <span class="token comment">// 你也可以只是提交前检测</span>    <span class="token comment">// "**/*.&#123;js,vue,ts&#125;": "eslint"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>提交前会自动顺序执行<code>cmd</code>。例如上面配置，会先<code>eslint --fix</code>尝试修复，修复成功执行<code>add</code>操作，修复失败抛出异常，此时需要手动修复，然后再提交。</p></blockquote><p>修改<code>.husky/pre-commit</code>钩子，改用<code>lint-staged</code>：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 打开 .husky/pre-commit 文件，修改之前生成的 cmd</span>npx lint-staged<span class="token comment"># or 配置 lint-staged 脚本</span><span class="token function">npm</span> run lint-staged<span class="token comment"># &#123;</span><span class="token comment">#   "scripts": &#123;</span><span class="token comment">#     "lint-staged": "lint-staged"</span><span class="token comment">#   &#125;</span><span class="token comment"># &#125;</span></code></pre><p><a href="https://github.com/okonet/lint-staged">了解更多<code>lint-staged</code></a></p><p>除了在<code>commit</code>之前添加代码校验外，我们也可以对提交的<code>message(-m)</code>作规范约束。如何做？往下看 ↓</p><h3 id="commit-msg搭配commitlint"><a href="#commit-msg搭配commitlint" class="headerlink" title="commit-msg搭配commitlint"></a><code>commit-msg</code>搭配<code>commitlint</code></h3><p><code>commit-msg</code>是<code>git</code>提交时校验提交信息的钩子（此时由<code>husky</code>来指定），当触发时便会使用<code>commitlit</code>来校验。安装配置完成后，想通过<code>git commit</code>或者其它第三方工具提交时，只要提交信息（<code>-m</code>指定的<code>message</code>）不符合规范就无法提交，并提示。</p><blockquote><p>约定格式： git commit -m &lt;type&gt;[optional scope]: &lt;description&gt;</p></blockquote><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> -D @commitlint/cli @commitlint/config-conventional</code></pre><h4 id="配置commmitlint"><a href="#配置commmitlint" class="headerlink" title="配置commmitlint"></a>配置<code>commmitlint</code></h4><p><a href="https://github.com/conventional-changelog/commitlint/blob/master/%40commitlint/config-conventional/index.js">更多配置项参考</a></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// commmitlint.config.js or .commmitlintrc.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'@commitlint/config-conventional'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// rules：kv组成的对象，eg. 'name:[0, 'always', 72]'</span>  <span class="token comment">// 数组中第一位为 level，可选0,1,2，0为disable，1为warning，2为error</span>  <span class="token comment">// 第二位为应用与否，可选 always|never</span>  <span class="token comment">// 第三位该 rule 的值</span>  <span class="token comment">// rules: &#123;&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>然后添加<code>husky</code>的<code>commit-msg</code>钩子：</p><pre class="language-bash" data-language="bash"><code class="language-bash">npx husky <span class="token function">add</span> .husky/commit-msg <span class="token string">'npx --no-install commitlint -e'</span></code></pre><p>貌似已经很完美了，<code>emmm~~</code>但开始对规范使用不熟悉的童鞋，可能不太友好…我下面添加了<code>commitizen</code>优化方案使用，不需要可以跳过 😌😌😌</p><h4 id="配置commitizen"><a href="#配置commitizen" class="headerlink" title="配置commitizen"></a>配置<code>commitizen</code></h4><p><code>commitizen</code>可以让用户通过界面化问答的方式完成提交信息的录入，并由用户决定是否推送（这个过程仅相当于命令<code>git commit -m &#39;xxx&#39;</code>）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> -D commitizen cz-conventional-changelog</code></pre><p>配置<code>commitizen</code>并添加<code>commit</code>为<code>npm script</code>：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// cz 本质就是 commitizen 一段短命令，代替 git commit 生成专业的 commit-message</span>    <span class="token property">"commit"</span><span class="token operator">:</span> <span class="token string">"git-cz"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"config"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"commitizen"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"cz-conventional-changelog"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>后续<code>commit</code>，就可以使用<code>yarn commit</code>进行<code>commit</code>，其会自动做出如下提示：</p><p><a href="/images/share/git-precommit-and-commitmsg-hooks/p3.png"><img src="/images/share/git-precommit-and-commitmsg-hooks/p3.png" alt="git-precommit-and-commitmsg-hooks-p3" loading="lazy"></a></p><div class="warning"><blockquote><p>因为你，我的心脏总是忙个不停</p></blockquote></div>]]></content>
      
      
      <categories>
          
          <category> 土豆の教程分享 </category>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> husky </tag>
            
            <tag> git-hooks </tag>
            
            <tag> commitlint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在浏览器上更轻松的阅读 github 源码</title>
      <link href="/posts/github-code-read/"/>
      <url>/posts/github-code-read/</url>
      
        <content type="html"><![CDATA[<blockquote><p>号称只需要<code>1s</code>，就可以在浏览器上使用<code>vscode</code>阅读<code>Github</code>代码. <del>当然<code>vscode</code>的快捷键也是支持的.</del></p></blockquote><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><a href="/images/posts/github-code-read/p1.png"><img src="/images/posts/github-code-read/p1.png" alt="github-code-read-p1" loading="lazy"></a></p><span id="more"></span><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><h4 id="在github-com的github后添加1s，然后回车"><a href="#在github-com的github后添加1s，然后回车" class="headerlink" title="在github.com的github后添加1s，然后回车"></a>在<code>github.com</code>的<code>github</code>后添加<code>1s</code>，然后回车</h4><p><code>eg. https://github1s.com/conwnet/github1s/blob/HEAD/extensions/vlang-web/snippets/snippets.json</code></p><p>项目源码地址：<a href="https://github.com/conwnet/github1s">https://github.com/conwnet/github1s</a></p><h4 id="将github-com的com改为dev，然后回车"><a href="#将github-com的com改为dev，然后回车" class="headerlink" title="将github.com的com改为dev，然后回车"></a>将<code>github.com</code>的<code>com</code>改为<code>dev</code>，然后回车</h4><blockquote><p>或者你可以直接使用快捷键 . 完成替换并打开 <code>eg. https://github.dev/vuejs/vue</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 土豆の收藏安利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-commit 添加emoji的message显示</title>
      <link href="/posts/git-commit-emoji/"/>
      <url>/posts/git-commit-emoji/</url>
      
        <content type="html"><![CDATA[<h3 id="先看效果"><a href="#先看效果" class="headerlink" title="先看效果"></a>先看效果</h3><p><a href="/images/posts/git-commit-emoji/p1.png"><img src="/images/posts/git-commit-emoji/p1.png" alt="git-commit-emoji-p1" loading="lazy"></a></p><span id="more"></span><blockquote><p>在执行<code>git commit</code>的时候，为这次内容提交打上标记（仅 emoji 显示）,凸显此次提交的内容主体类型，也使得在整个历史提交中易于区分查找。</p></blockquote><blockquote><p>当然，这种<code>emoji</code>的代码并不强制使用 <del>可以不用，但不能不知道</del></p></blockquote><h3 id="格式规范"><a href="#格式规范" class="headerlink" title="格式规范"></a>格式规范</h3><p><code>:code:</code><strong>注意这里的冒号是英文，且与 code 之间没有空格</strong>.</p><p><code>eg.</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">':bug: 修复了xxx功能'</span><span class="token function">git</span> commit -m <span class="token string">':xxx: :xxx: 完成了一系列功能'</span></code></pre><h3 id="emoji代码"><a href="#emoji代码" class="headerlink" title="emoji代码"></a><code>emoji</code>代码</h3><table><thead><tr><th>emoji</th><th>emoji 代码</th><th>说明</th></tr></thead><tbody><tr><td><code>:art:</code> (调色板)</td><td><code>:art:</code></td><td>改进代码结构&#x2F;代码格式</td></tr><tr><td><code>:zap:</code> (闪电) <code>:racehorse:</code> (赛马)</td><td><code>:zap :racehorse:</code></td><td>提升性能</td></tr><tr><td><code>:fire:</code> (火焰)</td><td><code>:fire:</code></td><td>移除代码或文件</td></tr><tr><td><code>:bug:</code> (bug)</td><td><code>:bug:</code></td><td>修复 bug</td></tr><tr><td><code>:ambulance:</code> (急救车)</td><td><code>:ambulance:</code></td><td>重要补丁</td></tr><tr><td><code>:sparkles:</code> (火花)</td><td><code>:sparkles:</code></td><td>引入新功能</td></tr><tr><td><code>:memo:</code> (备忘录)</td><td><code>:memo:</code></td><td>撰写文档</td></tr><tr><td><code>:rocket:</code> (火箭)</td><td><code>:rocket:</code></td><td>部署功能</td></tr><tr><td><code>:lipstick:</code> (口红)</td><td><code>:lipstick:</code></td><td>更新 UI 和样式文件</td></tr><tr><td><code>:tada:</code> (庆祝)</td><td><code>:tada:</code></td><td>初次提交</td></tr><tr><td><code>:white_check_mark:</code> (白色复选框)</td><td><code>:white_check_mark:</code></td><td>增加测试</td></tr><tr><td><code>:lock:</code> (锁)</td><td><code>:lock:</code></td><td>修复安全问题</td></tr><tr><td><code>:apple:</code> (苹果)</td><td><code>:apple:</code></td><td>修复 macOS 下的问题</td></tr><tr><td><code>:penguin:</code> (企鹅)</td><td><code>:penguin:</code></td><td>修复 Linux 下的问题</td></tr><tr><td><code>:checkered_flag:</code> (旗帜)</td><td><code>:checked_flag:</code></td><td>修复 Windows 下的问题</td></tr><tr><td><code>:bookmark:</code> (书签)</td><td><code>:bookmark:</code></td><td>发行&#x2F;版本标签</td></tr><tr><td><code>:rotating_light:</code> (警车灯)</td><td><code>:rotating_light:</code></td><td>移除 linter 警告</td></tr><tr><td><code>:construction:</code> (施工)</td><td><code>:construction:</code></td><td>工作进行中</td></tr><tr><td><code>:green_heart:</code> (绿心)</td><td><code>:green_heart:</code></td><td>修复 CI 构建问题</td></tr><tr><td><code>:arrow_down:</code> (下降箭头)</td><td><code>:arrow_down:</code></td><td>降级依赖</td></tr><tr><td><code>:arrow_up:</code> (上升箭头)</td><td><code>:arrow_up:</code></td><td>升级依赖</td></tr><tr><td><code>:construction_worker:</code> (工人)</td><td><code>:construction_worker:</code></td><td>添加 CI 构建系统</td></tr><tr><td><code>:chart_with_upwards_trend:</code> (上升趋势图)</td><td><code>:chart_with_upwards_trend:</code></td><td>添加分析或跟踪代码</td></tr><tr><td><code>:hammer:</code> (锤子)</td><td><code>:hammer:</code></td><td>重大重构</td></tr><tr><td><code>:heavy_minus_sign:</code> (减号)</td><td><code>:heavy_minus_sign:</code></td><td>减少一个依赖</td></tr><tr><td><code>:heavy_plus_sign:</code> (加号)</td><td><code>:heavy_plug_sign:</code></td><td>增加一个依赖</td></tr><tr><td><code>:whale:</code> (鲸鱼)</td><td><code>:whale:</code></td><td>Docker 相关工作</td></tr><tr><td><code>:wrench:</code> (扳手)</td><td><code>:wrench:</code></td><td>修改配置文件</td></tr><tr><td><code>:globe_with_meridians:</code> (地球)</td><td><code>:globe_with_meridians:</code></td><td>国际化与本地化</td></tr><tr><td><code>:pencil2:</code> (铅笔)</td><td><code>:pencil2:</code></td><td>修复 typo</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 土豆の收藏安利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emoji </tag>
            
            <tag> git-commit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 使用过程中的踩坑记录</title>
      <link href="/bugs/git-errors/"/>
      <url>/bugs/git-errors/</url>
      
        <content type="html"><![CDATA[<blockquote><p>用于记录由于<code>git</code>的不规范使用<code>or</code>其他问题导致的<strong>错误和奇怪现象</strong>，及其实际解决方案汇总。</p></blockquote><span id="more"></span><h3 id="分支信息不同步"><a href="#分支信息不同步" class="headerlink" title="分支信息不同步"></a>分支信息不同步</h3><blockquote><p>用户<code>A</code>删除了本地及远程的某分支<code>fz</code>后，用户<code>B</code>执行<code>git branch -a</code>依旧能够看到该分支.</p></blockquote><p>尽管用户<code>B</code>执行<code>git pull</code>拉取并合并修改，用户<code>B</code>仍然能够看到被删除<code>origin/fz</code>分支.那么此时应该怎么解决？</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 执行下面命令 --- 删除远程不存在，但本地通过指令仍能看到的某 origin/xxx 分支</span><span class="token function">git</span> remote prune origin<span class="token comment"># 如果用户 B 显示本地也还存在 fz 分支，需要再删除本地的 fz（先切到另外一个非 fz 分支，当然不删除也不影响）</span><span class="token function">git</span> branch -d fz</code></pre><h3 id="拒绝合并不相关的历史"><a href="#拒绝合并不相关的历史" class="headerlink" title="拒绝合并不相关的历史"></a>拒绝合并不相关的历史</h3><p><code>refusing to merge unrelated histories: </code>出现这个问题的最主要原因还是在于本地仓库和远程仓库实际上是独立的两个仓库。（例如你在本地初始化了一个仓库，并提交了一些东西，然后与远程仓库建立关联，此时推送就会抛这个异常）直接<code>clone</code>的方式在本地建立起远程<code>github</code>仓库的克隆本地仓库就不会有这个问题。解决办法：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin master --allow-unrelated-histories</code></pre><h3 id="新建分支首次提交错误"><a href="#新建分支首次提交错误" class="headerlink" title="新建分支首次提交错误"></a>新建分支首次提交错误</h3><p><code>There is no tracking information for the current branch</code>，此时需要在推送的时候建立关联，根据提示完成即可：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># (分支名称)，建立关联关系即可</span><span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/xxx</code></pre><h3 id="推送被拒绝"><a href="#推送被拒绝" class="headerlink" title="推送被拒绝"></a>推送被拒绝</h3><p><code>Updates were rejected because a pushed branch tip is behind its remote.</code>推送的分支提示位于其远程提交的后面。比如别人提交了，你并没有拉取最新代码，直接<code>push</code>就会存在该提示。</p><blockquote><p>建议：每次<code>push</code>之前最好先<code>pull</code>拉取并合并代码，如果有冲突就解决冲突，然后再执行<code>push</code>，可以避免很多问题。</p></blockquote><blockquote><p>解决办法：先<code>pull</code>拉取最新代码合并，然后再提交。<strong>或者</strong>: 添加 <code>-f</code> 参数强制推送。</p></blockquote><h3 id="文件名大小写不敏感"><a href="#文件名大小写不敏感" class="headerlink" title="文件名大小写不敏感"></a>文件名大小写不敏感</h3><p>这个在另外一篇<code>git指令使用</code>中也提到过，<code>windows</code>环境下<code>git</code>对大小写识别不敏感，解决办法：</p><blockquote><p>方案一：重命名为另外一个名字，然后提交（一定要提交），然后再改回你要修改的大、小写名称。（不仅麻烦，而且还会多产生一条无关的提交）</p></blockquote><blockquote><p>方案二：使用<code>git mv [file] [newfile]</code>指令修改。</p></blockquote><h3 id="行尾结束符统一"><a href="#行尾结束符统一" class="headerlink" title="行尾结束符统一"></a>行尾结束符统一</h3><p>问题描述及解决方案详见<a href="/share/git-install-and-terminal-config">-&gt; git 环境搭建</a></p><h3 id="HttpRequestException-encountered"><a href="#HttpRequestException-encountered" class="headerlink" title="HttpRequestException encountered"></a>HttpRequestException encountered</h3><p>使用<code>Git</code>下载或者更新代码时出现<code>fatal：HttpRequestException encountered</code>提示信息，但是它又不会影响 Git 的正常使用</p><blockquote><p>解决办法：更新<code>Windows</code>的<code>git</code>凭证管理器，打开链接，下载安装即可 <a href="https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/tag/v1.14.0">https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/tag/v1.14.0</a></p></blockquote><h3 id="持续更新中…"><a href="#持续更新中…" class="headerlink" title="持续更新中…"></a>持续更新中…</h3>]]></content>
      
      
      <categories>
          
          <category> 土豆の踩坑之路 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 lerna 管理 monorepo 的一次实践记录</title>
      <link href="/share/lerna/"/>
      <url>/share/lerna/</url>
      
        <content type="html"><![CDATA[<h3 id="lerna是什么？"><a href="#lerna是什么？" class="headerlink" title="lerna是什么？"></a><code>lerna</code>是什么？</h3><blockquote><p>Lerna is a fast modern build system for managing and publishing multiple JavaScript&#x2F;TypeScript packages from the same repository.</p></blockquote><p><a href="https://blog.nrwl.io/nx/home"><code>lerna and nx</code>的其他博客文章</a></p><h3 id="为什么要用lerna"><a href="#为什么要用lerna" class="headerlink" title="为什么要用lerna?"></a>为什么要用<code>lerna</code>?</h3><p><code>官方解释：</code></p><blockquote><p>Lerna 在 repo 中链接不同的项目，因此它们可以相互导入，而无需向 NPM 发布任何内容</p></blockquote><blockquote><p>Lerna 对任意数量的项目运行命令，它以最有效的方式、以正确的顺序执行它，并且可以将其分布在多台机器上</p></blockquote><blockquote><p>Lerna 管理您的发布流程，从版本管理到发布再到 NPM，它提供了多种选项来确保可以适应任何工作流程</p></blockquote><p>结合工作中的实际体验，谈谈我的看法：</p><blockquote><p>公司一般都有自己的 npm 私库，有很多的 package 相互之间存在或多或少的关联。随着业务需求的不断升级，我在维护这些 package 的时候就碰到了一个很操蛋的问题：比如我改了 packageA 然后发布，那么所有用到了 packageA 的其他 package，也要跟着升级 packageA 的依赖，然后再发布，过程显得很是繁琐，此时如果你的 package 是通过 lerna 管理，就可以很好的避免这个问题。</p></blockquote><span id="more"></span><hr><h3 id="全局安装lerna"><a href="#全局安装lerna" class="headerlink" title="全局安装lerna"></a>全局安装<code>lerna</code></h3><p><code>tips: 注意 lerna@5.1.0 前后区别.</code></p><blockquote><p>npm i -g <a href="mailto:&#x6c;&#x65;&#x72;&#110;&#97;&#x40;&#52;&#x2e;&#x30;&#x2e;&#x30;">&#x6c;&#x65;&#x72;&#110;&#97;&#x40;&#52;&#x2e;&#x30;&#x2e;&#x30;</a></p></blockquote><h3 id="lerna使用实践"><a href="#lerna使用实践" class="headerlink" title="lerna使用实践"></a><code>lerna</code>使用实践</h3><h4 id="初始化git仓库"><a href="#初始化git仓库" class="headerlink" title="初始化git仓库"></a>初始化<code>git</code>仓库</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 初始化一个 utils 的 lerna 项目</span><span class="token function">mkdir</span> utils <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> utils<span class="token function">git</span> init<span class="token function">git</span> remote <span class="token function">add</span> origin <span class="token punctuation">[</span>xxx<span class="token punctuation">]</span></code></pre><p>配置<code>.gitignore</code></p><pre class="language-none"><code class="language-none">node_moduleslibdistlogscoverage*&#x2F;.config&#x2F;*</code></pre><h4 id="lerna初始化"><a href="#lerna初始化" class="headerlink" title="lerna初始化"></a><code>lerna</code>初始化</h4><p><code>lerna</code>有两种发布模式，固定模式<code>fixed</code>（默认）、独立模式<code>independent</code>。两者的区别：</p><blockquote><p>固定模式：lerna init 通过 lerna.json 里的版本进行统一的版本管理。其中的任何一个包的改动都会导致所有的 packages 的版本号进行升级。</p></blockquote><blockquote><p>独立模式：lerna init --independent 允许使用者对每个包单独改变版本号。每次发布的时候，针对所有有更新的 package 询问需要升级的版本号。（基于自身的 package.json 版本号）这种情况下，lerna.json 的版本号不会变化， 默认为 independent</p></blockquote><p><del>建议使用独立模式…</del> 下面开始初始化过程（附效果图）：</p><blockquote><p>lerna init --independent</p></blockquote><p><a href="/images/share/lerna/p1.png"><img src="/images/share/lerna/p1.png" alt="lerna-p1" loading="lazy"></a></p><h4 id="完善lerna-json配置"><a href="#完善lerna-json配置" class="headerlink" title="完善lerna.json配置"></a>完善<code>lerna.json</code>配置</h4><p>指定命令使用的<code>client</code>，默认是<code>npm</code>，可以是<code>yarn</code>.修改<code>lerna.json</code>，添加：</p><blockquote><p>“npmClient”: “yarn”</p></blockquote><p>指定使用<code>yarn workspaces</code>模式，并在<code>lerna</code>中开启，同时在根目录下的<code>package.json</code>中添加<code>workspaces</code>：（开启后<code>lerna bootstrap</code>命令由<code>yarn install</code>代理，等价于在<code>workspace</code>的根目录下执行<code>yarn install</code>，只有顶层有一个<code>node_modules</code>），<strong>这么做是因为 yarn 本身提供了较 lerna 更好的依赖分析与 hoisting 的功能</strong>：</p><blockquote><p>“useWorkspaces”: true</p></blockquote><blockquote><p>“workspaces”: [“packages&#x2F;*“]</p></blockquote><p>指定忽略发布的不必要的更新（比如<code>readme.md</code>）：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token comment">// 方式一：在`lerna.json`中添加：</span><span class="token property">"ignoreChanges"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"**/*.md"</span><span class="token punctuation">,</span> <span class="token string">"**/*.test.ts"</span><span class="token punctuation">,</span> <span class="token string">"**/*.e2e.ts"</span><span class="token punctuation">,</span> <span class="token string">"**/fixtures/**"</span><span class="token punctuation">,</span> <span class="token string">"**/test/**"</span><span class="token punctuation">,</span> <span class="token string">"**/__test__/**"</span><span class="token punctuation">]</span><span class="token comment">// 方式二：在指定的命令下添加：</span><span class="token property">"command"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"publish"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"ignoreChanges"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"ignored-file"</span><span class="token punctuation">,</span> <span class="token string">"*.md"</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"bootstrap"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"ignore"</span><span class="token operator">:</span> <span class="token string">"component-*"</span><span class="token punctuation">,</span>    <span class="token property">"npmClientArgs"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"--no-package-lock"</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="lerna-json的配置参数说明"><a href="#lerna-json的配置参数说明" class="headerlink" title="lerna.json的配置参数说明"></a><code>lerna.json</code>的配置参数说明</h5><pre class="language-json" data-language="json"><code class="language-json"><span class="token comment">// version：当前库的版本</span><span class="token comment">// npmClient：允许指定命令使用的client， 默认是 npm， 可以设置成 yarn</span><span class="token comment">// useWorkspaces：使用 yarn workspaces 模式</span><span class="token comment">// ignoreChanges：一个不包含在 lerna changed/publish 的 glob 数组。使用这个去阻止发布不必要的更新，比如修复 README.md</span><span class="token comment">// command.publish.ignoreChanges：可以指定那些目录或者文件的变更不会被 publish</span><span class="token comment">// command.publish.registry：设置自定义的 npm 代理（比如使用公司自己搭建的私服）</span><span class="token comment">// command.publish.conventionalCommits：lerna version 会自动决定 version bump 和生成 CHANGELOG 文件</span><span class="token comment">// command.publish.message：一个 publish 时的自定义 commit 信息</span><span class="token comment">// command.bootstrap.ignore：指定不受 bootstrap 命令影响的包</span><span class="token comment">// command.bootstrap.npmClientArgs：指定默认传给 lerna bootstrap 命令的参数</span><span class="token comment">// command.bootstrap.scope：指定那些包会受 lerna bootstrap 命令影响</span><span class="token comment">// packages：指定包所在的目录</span></code></pre><p><del><code>ok</code>，准备工作做完了 😃😃😃</del></p><hr><h4 id="创建package"><a href="#创建package" class="headerlink" title="创建package"></a>创建<code>package</code></h4><p>这个过程可以通过手动创建，也可以通过命令生成：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ./packages<span class="token function">mkdir</span> package-a package-b package-c<span class="token comment"># 分别进入这三个目录初始化成包 ...</span><span class="token builtin class-name">cd</span> package-a <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> init -y</code></pre><p><code>or</code>：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># name：包名，loc 位置 [可选，不指定时默认就是 workspaces[0] 所指位置]</span>lerna create <span class="token operator">&lt;</span> name <span class="token operator">></span> <span class="token punctuation">[</span>loc<span class="token punctuation">]</span><span class="token comment"># 例如：</span>lerna create package-a</code></pre><p>目录结构：</p><pre class="language-none"><code class="language-none">├── lerna.json├── package.json└── packages    ├── packageA    │   ├── index.js    │   └── package.json</code></pre><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><h5 id="安装共用的dependencicesordevDependencices"><a href="#安装共用的dependencicesordevDependencices" class="headerlink" title="安装共用的dependencicesordevDependencices"></a>安装共用的<code>dependencices</code>or<code>devDependencices</code></h5><p>设置<code>root</code>的依赖，通常为一些开发工具. <code>eg: typescript、eslint、babel...</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> -W -D typescript <span class="token punctuation">[</span>-W -D <span class="token operator">==</span> --ignore-workspace-root-check --dev<span class="token punctuation">]</span><span class="token comment"># 卸载</span><span class="token function">yarn</span> remove -W typescript</code></pre><p>添加所有的<code>package</code>依赖（不包含<code>root</code>，而是在各自的<code>package.json</code>）：</p><pre class="language-bash" data-language="bash"><code class="language-bash">lerna <span class="token function">add</span> lodash -D</code></pre><h5 id="给指定的-packageA-安装依赖A模块"><a href="#给指定的-packageA-安装依赖A模块" class="headerlink" title="给指定的 packageA 安装依赖A模块"></a>给指定的 packageA 安装依赖<code>A</code>模块</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 推荐</span>lerna <span class="token function">add</span> A packages/packageA<span class="token comment"># 或者指定 --scope</span>lerna <span class="token function">add</span> A --scope<span class="token operator">=</span>packageAlerna <span class="token function">add</span> A --scope<span class="token operator">=</span>packageA --dev<span class="token comment"># 或（这种方式安装的 A 如果是当前工作区的开发模块，需要带上版本号）</span><span class="token function">yarn</span> workspace packageA <span class="token function">add</span> A<span class="token comment"># 安装 A 到指定前缀为 prefix- 的包</span>lerna <span class="token function">add</span> A packages/prefix-*<span class="token comment"># 安装 A 到所有名为 packageA 包中</span>lerna <span class="token function">add</span> A **/packageA</code></pre><h5 id="workspace各package之间的依赖"><a href="#workspace各package之间的依赖" class="headerlink" title="workspace各package之间的依赖"></a><code>workspace</code>各<code>package</code>之间的依赖</h5><p><code>packages</code>下的各个包之间，也可以相互依赖，例如<code>moduleA</code>依赖了<code>moduleB</code>，而<code>moduleB</code>又依赖了<code>moduleC</code>。使用的方式同上，相差不大（基于软链接<code>symlink</code>实现）：</p><pre class="language-bash" data-language="bash"><code class="language-bash">lerna <span class="token function">add</span> moduleB packages/moduleAlerna <span class="token function">add</span> moduleC --scope moduleB</code></pre><h4 id="lerna-bootstrap安装所有包的依赖"><a href="#lerna-bootstrap安装所有包的依赖" class="headerlink" title="lerna bootstrap安装所有包的依赖"></a><code>lerna bootstrap</code>安装所有包的依赖</h4><p>在<code>lerna</code>中，执行<strong>默认的<code>bootstrap</code>命令</strong>会在每个<code>package</code>下安装各自<code>package.json</code>中的依赖。</p><p>当你使用<code>yarn workspace，并在lerna中开启该功能时</code>，<code>lerna bootstrap</code>将由<code>yarn install</code>代理，等价体现为在<code>workspace</code>的根目录下执行<code>yarn install</code>.</p><pre class="language-bash" data-language="bash"><code class="language-bash">lerna bootstrap<span class="token comment"># 效果等价于</span>lerna <span class="token function">link</span> + <span class="token function">yarn</span> <span class="token function">install</span></code></pre><h5 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h5><blockquote><p>工作区的模块包之间可以相互依赖，并在你发布升级对应包的时候，自动检测其他依赖该模块的包。</p></blockquote><blockquote><p>相比 yarn link，这种方式只影响你工作区的依赖树，而不会污染全局。</p></blockquote><blockquote><p>node_modules 统一安装，生成单一 lock 文件，方便 yarn 更好的管理并构建依赖。</p></blockquote><h4 id="卸载依赖"><a href="#卸载依赖" class="headerlink" title="卸载依赖"></a>卸载依赖</h4><blockquote><p>lerna exec – <command> [..args] # 在所有包中运行该命令</p></blockquote><p>可以依据这个命令来实现指定模块的包卸载，<code>eg</code>：</p><pre class="language-bash" data-language="bash"><code class="language-bash">lerna <span class="token builtin class-name">exec</span> --scope<span class="token operator">=</span>packageA  <span class="token function">yarn</span> remove A <span class="token comment"># 将 packageA 包下的 A 卸载</span>lerna <span class="token builtin class-name">exec</span> -- <span class="token function">yarn</span> remove A <span class="token comment"># 将所有包下的 A 卸载</span></code></pre><h4 id="清理依赖包"><a href="#清理依赖包" class="headerlink" title="清理依赖包"></a>清理依赖包</h4><p>快速删除所有模块中的<code>node_modules</code>文件夹。</p><pre class="language-bash" data-language="bash"><code class="language-bash">lerna clean</code></pre><p><a href="https://lerna.js.org/docs/features/bootstrap">更多的 <code>bootstrap</code>细节</a></p><h4 id="列出工作区所有的package"><a href="#列出工作区所有的package" class="headerlink" title="列出工作区所有的package"></a>列出工作区所有的<code>package</code></h4><p>如果与你文夹里面的不符，进入那个包运行<code>yarn init -y</code>解决.</p><pre class="language-bash" data-language="bash"><code class="language-bash">lerna list<span class="token comment"># or</span>lerna <span class="token function">ls</span></code></pre><h4 id="列出需要publish更新的包"><a href="#列出需要publish更新的包" class="headerlink" title="列出需要publish更新的包"></a>列出需要<code>publish</code>更新的包</h4><pre class="language-bash" data-language="bash"><code class="language-bash">lerna changed</code></pre><blockquote><p>lerna 每次发布都会为对应的版本打 TAG，变动检测其实是依据 <code>git diff --name-only v版本</code>收集变动信息.</p></blockquote><blockquote><p><code>lerna diff</code>查看自上次发布以来的所有包或者指定包的 git diff 变化。</p></blockquote><h4 id="lerna-run执行脚本"><a href="#lerna-run执行脚本" class="headerlink" title="lerna run执行脚本"></a><code>lerna run</code>执行脚本</h4><p>通过<code>lerna run xx</code>执行脚本时，<code>lerna</code>会先检测符合条件（含有<code>xx</code>命令）的<code>package</code>，然后再各自内部执行<code>npm run xx</code>.</p><pre class="language-bash" data-language="bash"><code class="language-bash">lerna run <span class="token builtin class-name">test</span><span class="token comment"># 区别于普通项目之处在于各个package之间存在相互依赖，如packageB只有在packageA构建完之后才能进行构建，否则就会出错，这实际上要求我们以一种拓扑排序的规则进行构建。</span>lerna run --stream --sort build</code></pre><p>区别于<code>yarn workspaces run</code>：</p><blockquote><p>yarn workspaces run 执行 xx 指令时，必须所有的包都含有该 xx 命令，否则在执行过程中会抛出异常.</p></blockquote><h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 执行该命令后，会根据检测出的有变动的 package 提示你选择对应要升级到的新版本号</span>lerna publish<span class="token comment"># 或者默认选项全部选择 Yes，并根据 commit 信息自动升级版本号</span>lerna publish -y</code></pre><h5 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h5><blockquote><p>不要自己手动为<code>lerna</code>管理的仓库添加<code>tag</code>，防止 <code>package</code>变更检测异常，导致无法正常升级发布</p></blockquote><blockquote><p>尽量只在一个分支上发布，避免多个分支同时进行且生成相同版本</p></blockquote><blockquote><p>每次<code>publish</code>之前，先<code>commit</code>代码，保证工作区是干净的</p></blockquote><blockquote><p>确保你的<code>npm</code>账号是登录状态，否则会发布失败。<code>npm whoami</code>查看状态，可以指定<code>registry</code></p></blockquote><blockquote><p>确保你的<code>package</code>设置了正确的<code>npm registry</code>地址，且发布的包与已存在的包之间不会存在冲突</p></blockquote><blockquote><p>按顺序执行<code>lerna bootstrap -&gt; lerna run --stream --sort build（我在单个 package 中定义了一些 npm scripts，例如 prepublishOnly 钩子来执行 build，然而 npm-client 使用 yarn 后，这些钩子似乎并没有按预期进行工作，导致最终 publish 失败。通过 lerna run build 可以触发所有 package 执行 build，如果无此需求可以跳过该步骤）-&gt; lerna publish.</code></p></blockquote><h3 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h3><h4 id="关于-scope的说明"><a href="#关于-scope的说明" class="headerlink" title="关于--scope的说明"></a>关于<code>--scope</code>的说明</h4><blockquote><p>不管是安装还是卸载，<code>--scope=packageA</code>中的<code>packageA</code>均是指的具体包名，而非<code>path</code>，而另外一种方式<code>packages/packageA</code>则是指具体路径.</p></blockquote><h4 id="包名带有scope的发布"><a href="#包名带有scope的发布" class="headerlink" title="包名带有scope的发布?"></a>包名带有<code>scope</code>的发布?</h4><p>形如<code>@xxx/xx</code>，在你的子包（具体要发布的那个包）的<code>package.json</code>中添加<code>publishConfig.access</code>字段：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token property">"publishConfig"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token property">"access"</span><span class="token operator">:</span> <span class="token string">"public"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="为什么-前缀包添加了access仍然抛出了403异常"><a href="#为什么-前缀包添加了access仍然抛出了403异常" class="headerlink" title="为什么@前缀包添加了access仍然抛出了403异常?"></a>为什么<code>@</code>前缀包添加了<code>access</code>仍然抛出了<code>403</code>异常?</h5><p><code>@</code>符号后面的是你注册<code>npm</code>账户时的<code>username</code>，请确保该<code>scope</code>与你账户一致. <del>（前往官网注册你的账户，可以看到更加明确的错误提示）😂😂😂</del></p><h4 id="如何生成changeLog-md文件"><a href="#如何生成changeLog-md文件" class="headerlink" title="如何生成changeLog.md文件?"></a>如何生成<code>changeLog.md</code>文件?</h4><p><code>lerna.json</code>中添加：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token property">"command"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token property">"publish"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// ...</span>      <span class="token property">"allowBranch"</span><span class="token operator">:</span> <span class="token string">"master"</span><span class="token punctuation">,</span> <span class="token comment">// 只在 master 分支执行 publish</span>      <span class="token property">"conventionalCommits"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 生成 changelog 文件</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="如何只发布指定文件至npm"><a href="#如何只发布指定文件至npm" class="headerlink" title="如何只发布指定文件至npm?"></a>如何只发布指定文件至<code>npm</code>?</h4><blockquote><p>添加 .npmignore 规则同 .gitignore，添加 .gitignore 也是可以的</p></blockquote><blockquote><p>或者配置当前包的 package.json 的 files 字段指定</p></blockquote><h4 id="如何将预先存在的独立包收集到lerna管理的仓库中"><a href="#如何将预先存在的独立包收集到lerna管理的仓库中" class="headerlink" title="如何将预先存在的独立包收集到lerna管理的仓库中?"></a>如何将预先存在的独立包收集到<code>lerna</code>管理的仓库中?</h4><p>将带有提交历史记录的包导入 <code>packages/&lt;directory-name&gt;</code>. 保留原始提交作者、日期和消息。另外：如果您要在新的 lerna 存储库上导入外部存储库，请记住至少有一次提交。<a href="https://github.com/lerna/lerna/tree/main/commands/import#readme">-&gt; 戳这里</a></p><pre class="language-bash" data-language="bash"><code class="language-bash">lerna <span class="token function">import</span> <span class="token operator">&lt;</span>path-to-external-repository<span class="token operator">></span></code></pre><h4 id="发布失败后怎么重新发布"><a href="#发布失败后怎么重新发布" class="headerlink" title="发布失败后怎么重新发布?"></a>发布失败后怎么重新发布?</h4><p>运行<code>lerna publish</code>如果中途有包发布失败，再运行<code>lerna publish</code>的时候，因为<code>Tag</code>已经打上去了，所以不会再重新发布包到<code>NPM</code>.</p><p>先清空当前工作区的文件修改（主要是上一次发布时，每个<code>package</code>自身的<code>package.json</code>会修改<code>gitHead</code>，发布成功会被重置，失败后无法正常重置，需要手动放弃修改），然后：</p><blockquote><p>运行 <code>lerna publish from-git</code>，会把当前标签中涉及的<code>NPM</code>包再发布一次，PS：不会再更新<code>package.json</code>，只是执行<code>npm publish</code></p></blockquote><p><code>or</code>：</p><blockquote><p>运行 <code>lerna publish from-package</code>，会把当前所有本地包中的<code>package.json</code>和远端<code>NPM</code>比对，如果是 NPM 上不存在的包版本，都执行一次<code>npm publish</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 土豆の教程分享 </category>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lerna </tag>
            
            <tag> monorepo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github 上如何为开源项目提交 pr?</title>
      <link href="/posts/github-create-pr/"/>
      <url>/posts/github-create-pr/</url>
      
        <content type="html"><![CDATA[<p>本文主要是根据自己在摸索提交<code>pr (pull-request)</code>过程程的一些总结。</p><p>为了方便描述，约定本文需要<code>fork</code>的项目为<code>test-project</code>，源仓库地址<code>regionUser/test-project</code>，你（提<code>pr</code>的用户）的用户名为<code>userA</code>。</p><span id="more"></span><h3 id="fork原项目"><a href="#fork原项目" class="headerlink" title="fork原项目"></a><code>fork</code>原项目</h3><p>登入自己的<code>github</code>账号，进入你需要提<code>pr</code>的那个项目下，点击左上角的<code>fork</code>。</p><p>然后进入你的<code>Repositories</code>列表，你会发现名为<code>test-project</code>仓库。</p><h3 id="clone-这个-fork项目"><a href="#clone-这个-fork项目" class="headerlink" title="clone 这个 fork项目"></a><code>clone 这个 fork</code>项目</h3><p>打开<code>userA/test-project</code>（即你<code>fork</code>的项目下），<code>clone</code>到本地。</p><blockquote><p>git clone <a href="https://github.com/userA/test-project.git">https://github.com/userA/test-project.git</a></p></blockquote><h3 id="建立upstream上游链接"><a href="#建立upstream上游链接" class="headerlink" title="建立upstream上游链接"></a>建立<code>upstream</code>上游链接</h3><p>这里上游指的是一开始<code>fork</code>的那个项目源。</p><blockquote><p>git remote add upstream <a href="https://github.com/regionUser/test-project.git">https://github.com/regionUser/test-project.git</a></p></blockquote><p>查看远程仓库信息：</p><blockquote><p>git remote -v</p></blockquote><div class="error"><blockquote><p>一定确定<code>origin</code>是你自己的地址，<code>upstream</code>是远程的地址。</p></blockquote></div><h3 id="新增、提交变动"><a href="#新增、提交变动" class="headerlink" title="新增、提交变动"></a>新增、提交变动</h3><p>这里修改的是你<code>clone</code>下来的项目，列举了两种方式。</p><h4 id="在main分支修改"><a href="#在main分支修改" class="headerlink" title="在main分支修改"></a>在<code>main</code>分支修改</h4><p>我这里为了测试，选择就在<code>main</code>上修改，且模拟了源项目<code>main</code>变更，以及<code>userA</code>的多次提交。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">'userA的第一次提交'</span><span class="token function">git</span> commit -m <span class="token string">'userA的第二次提交'</span><span class="token function">git</span> push origin main</code></pre><h4 id="基于新的分支"><a href="#基于新的分支" class="headerlink" title="基于新的分支"></a>基于新的分支</h4><p>创建了一个新的<code>fix/fs-fix</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b fix/fs-fix<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">'userA的第一次提交'</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">'userA的第二次提交'</span><span class="token function">git</span> push origin fix/fs-fix</code></pre><p>写完后合并到主分支<code>main</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge fix/fs-fix<span class="token function">git</span> push origin main</code></pre><h3 id="新建pull-request"><a href="#新建pull-request" class="headerlink" title="新建pull-request"></a>新建<code>pull-request</code></h3><p>在<code>github</code>打开你<code>fork</code>的项目。<code>userA/test-project</code>，点击<code>Pull requests</code> -&gt; <code>New pul request</code>新建<code>pr</code>，会自动跳转至<code>regionUser/test-project</code>下的<code>compare</code>，出现下面界面：</p><p><a href="/images/posts/github-create-pr/p1.png"><img src="/images/posts/github-create-pr/p1.png" alt="github-create-pr-p1" loading="lazy"></a></p><blockquote><p><code>base repositories</code>源项目仓库，<code>head repositories</code>是<code>fork</code>的项目仓库(<code>userA</code>).</p></blockquote><p>我这里创建的时候出现<code>check</code>不通过的提示（如果你没有遇到，就跳过）：</p><blockquote><p>Can’t automatically merge. Don’t worry, you can still create the pull request.</p></blockquote><p>可以预料到，因为原项目的作者在我们之前<code>fork</code>以后，又新增了功能提交。 <del>虽然仍然可以创建成功，但不建议，也不一定会被采纳</del></p><p>此时，需要我们对<code>fork</code>的项目源码做代码同步。如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 拉取 upstream 最新代码</span><span class="token function">git</span> fetch upstream<span class="token comment"># (这里不一定是使用 rebase，merge 同样可以，只是一个同步最新代码的一个方式而已)</span><span class="token comment"># 再 rebase，main 是分支名，我这偷了个懒</span><span class="token comment"># 此过程可能会遇到冲突，解决冲突</span><span class="token function">git</span> rebase upstream/main<span class="token comment"># 当然直接使用 git pull upstream branch 也是可以的 === fetch + merge</span><span class="token comment"># 此过程可能会遇到冲突，解决冲突再次 rebase</span><span class="token function">git</span> status<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> rebase --continue<span class="token comment"># rebase （变基）是合并的另外一种方式，不同于merge的是，不会产生旁支和冗余的提交记录。</span><span class="token comment"># 执行后会在 terminal 中打开编辑器交互，完成变基操作（不知道怎么在这个界面操作的，可以看我的另外一篇文章'vi 编辑器学习'）</span><span class="token comment"># 在界面上方列出了需要编辑的所有提交，在每个commit id前的是指令类型(pick)，在Commands中有相关的指令说明。</span><span class="token comment"># p, pick = 保留该commit</span><span class="token comment"># r, reword = 保留该commit，但修改它的提交信息</span><span class="token comment"># e, edit = 保留该commit，在合并该请求时暂停</span><span class="token comment"># s, squash = 保留该commit，合并到前一个提交中</span><span class="token comment"># f, fixup = 类似于squash，但抛弃提交它的提交信息</span><span class="token comment"># x, exec = 执行shell命令</span><span class="token comment"># d, drop = 丢弃该commit</span><span class="token comment"># 解决掉所有冲突 推送此次合并，添加 -f 强制推送</span><span class="token function">git</span> push -f origin main</code></pre><p>按上面流程操作完了以后，重新创建<code>pull-request</code>，<code>check</code>错误已经消失：</p><p><a href="/images/posts/github-create-pr/p2.png"><img src="/images/posts/github-create-pr/p2.png" alt="github-create-pr-p2" loading="lazy"></a></p><p><code>填写pull-request 的 title，你也可以添加 comment</code>，完成后，你可以在<code>regionUser/test-project</code>的<code>Pull requests</code>下看到你新提交的<code>pr</code>.效果如下：</p><p><a href="/images/posts/github-create-pr/p3.png"><img src="/images/posts/github-create-pr/p3.png" alt="github-create-pr-p3" loading="lazy"></a></p><p>至此，<code>pr</code>创建就完成了，等待原项目作者审核后合并。</p><h3 id="原仓库作者视角"><a href="#原仓库作者视角" class="headerlink" title="原仓库作者视角"></a>原仓库作者视角</h3><p><a href="/images/posts/github-create-pr/p4.png"><img src="/images/posts/github-create-pr/p4.png" alt="github-create-pr-p4" loading="lazy"></a></p><p>选择合并的方式，再次点击确认即可完成合并。</p><h3 id="更新fork项目"><a href="#更新fork项目" class="headerlink" title="更新fork项目"></a>更新<code>fork</code>项目</h3><p>当你的提交被采纳以后，原项目<code>regionUser/test-project</code>会新增一个合并的提交记录，为了保持一致，需要在<code>fork</code>的本地仓库进行更新：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull --rebase upstream <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment"># 或者</span><span class="token function">git</span> fetch upstream<span class="token function">git</span> merge upstream/main<span class="token comment"># 更新推送至远程</span><span class="token function">git</span> push origin main</code></pre><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><h4 id="如何再次提交pr"><a href="#如何再次提交pr" class="headerlink" title="如何再次提交pr?"></a>如何再次提交<code>pr</code>?</h4><p><code>answer</code>：重复上面新建<code>pull-request</code>的流程，值得注意的是：记得先同步主分支代码，保证与<code>fork</code>的原项目代码一致，否则你会继续遇到冲突。</p><h4 id="提交pr后，我fork的仓库可以删除吗"><a href="#提交pr后，我fork的仓库可以删除吗" class="headerlink" title="提交pr后，我fork的仓库可以删除吗?"></a>提交<code>pr</code>后，我<code>fork</code>的仓库可以删除吗?</h4><p><code>answer</code>：在<code>pr</code>被采纳前，不能删除，否则该<code>pr</code>会自动关闭；在采纳后是可以删除掉的，因为代码已经被合并至主项目里了（存在于主仓库的<code>Pull requests</code>记录也会被删除）。</p><div class="success"><blockquote><p>世事千帆过，前方终会是温柔和月光。</p></blockquote></div>]]></content>
      
      
      <categories>
          
          <category> 土豆の收藏安利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 的基本使用</title>
      <link href="/share/git/"/>
      <url>/share/git/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Git is a free and open source distributed version control system</p></blockquote><h3 id="Git是用来做什么的"><a href="#Git是用来做什么的" class="headerlink" title="Git是用来做什么的?"></a><code>Git</code>是用来做什么的?</h3><ul><li><p>托管代码到远程，分布式托管，避免本机磁盘损坏造成不可挽回的局面。</p></li><li><p>版本控制，可以发布多个版本并且实现在各个版本之间来回穿梭（实现原理：文件快照，每个版本都会有一个文件快照，比直接备份文件快速便捷。因此，Git 仓库又被称为版本库）。</p></li><li><p>团队协作，强大的分支功能，可以快速实现团队协作</p></li></ul><span id="more"></span><p>环境搭建：<a href="/share/git-install-and-terminal-config">-&gt; 戳这里</a></p><hr><h3 id="指令使用"><a href="#指令使用" class="headerlink" title="指令使用"></a>指令使用</h3><h4 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token operator">&lt;</span>scope<span class="token operator">></span> <span class="token operator">&lt;</span>key<span class="token operator">></span> <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token comment"># 列出用户级的所有配置信息</span><span class="token function">git</span> config --global -l<span class="token comment"># 增加配置项 默认是获取local配置中内容</span><span class="token function">git</span> config <span class="token punctuation">[</span>--local<span class="token operator">|</span>--global<span class="token operator">|</span>--system<span class="token punctuation">]</span> --get section.key<span class="token comment"># 获取一个配置项</span><span class="token function">git</span> config <span class="token punctuation">[</span>--local<span class="token operator">|</span>--global<span class="token operator">|</span>--system<span class="token punctuation">]</span> --get section.key<span class="token comment"># 删除一个配置项</span><span class="token function">git</span> config <span class="token punctuation">[</span>--local<span class="token operator">|</span>--global<span class="token operator">|</span>--system<span class="token punctuation">]</span> --unset section.key</code></pre><p><code>git</code>的配置级别主要有三类，按优先级顺序分为：<code>local(仓库级)、global(用户级)、system(系统级)</code>：</p><blockquote><p><code>local</code>(仓库级)：对应的配置文件是当前仓库下的<code>.git/config</code> （默认是隐藏的）</p></blockquote><blockquote><p><code>global</code>(用户级)：对应的配置文件是用户宿主目录下的<code>~/.gitconfig</code></p></blockquote><blockquote><p><code>system</code>(系统级)：对应的配置文件是<code>git</code>安装目录下的<code>/etc/gitconfig</code></p></blockquote><h4 id="初始化项目仓库"><a href="#初始化项目仓库" class="headerlink" title="初始化项目仓库"></a>初始化项目仓库</h4><p>区别于克隆，初始化仓库通常是在新建项目时使用。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 第一步：初始化仓库</span><span class="token function">git</span> init<span class="token comment"># 第二步：建立本地仓库与远程仓库的关联</span><span class="token function">git</span> remote <span class="token function">add</span> origin <span class="token punctuation">[</span>线上仓库地址<span class="token punctuation">]</span><span class="token comment"># 如果此命令抛出 fatal: remote origin already exists. 异常，那么继续执行：</span><span class="token function">git</span> remote <span class="token function">rm</span> origin<span class="token function">git</span> remote <span class="token function">add</span> origin <span class="token punctuation">[</span>线上仓库的SSH地址<span class="token punctuation">]</span></code></pre><p><code>注意：.git 文件不能嵌套（仓库不能嵌套）</code></p><h4 id="克隆一个项目"><a href="#克隆一个项目" class="headerlink" title="克隆一个项目"></a>克隆一个项目</h4><p>克隆一个已经存在的项目到本地。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token punctuation">[</span>url<span class="token punctuation">]</span></code></pre><h4 id="一次提交流程"><a href="#一次提交流程" class="headerlink" title="一次提交流程"></a>一次提交流程</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先拉取目标分支的最新代码，拉取之后直接合并。可以简写为 git pull</span><span class="token function">git</span> pull origin <span class="token punctuation">[</span>分支名<span class="token punctuation">]</span><span class="token comment"># git pull = git fetch + git merge</span><span class="token comment"># git fetch origin [分支名] ：先拉取目标分支的最新代码，拉取之后由用户决定是否合并</span><span class="token comment"># 将改动的代码文件添加至暂存区</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token comment"># 也可以 git add [文件名] 来单独添加某一个文件</span><span class="token function">git</span> <span class="token function">add</span> -A<span class="token comment"># 将暂存区的文件提交至本地仓库</span><span class="token function">git</span> commit -m <span class="token string">'这次提交的描述信息'</span><span class="token comment"># 将代码推送到远程 如果不是该分支的第一次推送，可以简写为 git push</span><span class="token function">git</span> push origin <span class="token punctuation">[</span>分支名<span class="token punctuation">]</span><span class="token comment"># 当然这个过程你也可以查看当前仓库的状态</span><span class="token function">git</span> status</code></pre><p>如图：</p><p><a href="/images/share/git/p1.png"><img src="/images/share/git/p1.png" alt="git-p1" loading="lazy"></a></p><h4 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log</code></pre><h4 id="移动、重命名文件"><a href="#移动、重命名文件" class="headerlink" title="移动、重命名文件"></a><strong>移动、重命名文件</strong></h4><div class="success"><blockquote><p><code>git mv</code>命令用于移动或重命名一个文件、目录或软连接，可以解决<code>windows</code>环境下<code>git</code>对文件及文件夹大小写不敏感问题。（<del>当然删除再提交，重新添加再提交也是可以滴 😂😂😂</del>）</p></blockquote></div><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先 cd 到你要重命名的文件夹，然后执行下面命令</span><span class="token function">git</span> <span class="token function">mv</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span> <span class="token punctuation">[</span>newfile<span class="token punctuation">]</span><span class="token comment"># eg. root/static/images -> root/static/image</span><span class="token builtin class-name">cd</span> ./static<span class="token function">git</span> <span class="token function">mv</span> images image<span class="token comment"># 重命名的文件夹 已存在，此时的 mv 就是移动指令指--移动到--   如果想移动到 上一级：</span><span class="token function">git</span> <span class="token function">mv</span> files <span class="token punctuation">..</span><span class="token comment"># 对于文件而言，如果已存在，添加 -f 强制修改</span><span class="token function">git</span> <span class="token function">mv</span> -f <span class="token punctuation">[</span>file<span class="token punctuation">]</span> <span class="token punctuation">[</span>newfile<span class="token punctuation">]</span></code></pre><h4 id="存储文件改动"><a href="#存储文件改动" class="headerlink" title="存储文件改动"></a>存储文件改动</h4><p>场景：当前工作区被污染，内容未完成，不想直接提交， 需要切到指定分支版本紧急解决其他需求。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 存储当前工作区的改动（不存储新文件及 ignore 的文件</span><span class="token function">git</span> stash<span class="token comment"># 存储所有改动</span><span class="token function">git</span> stash -a<span class="token comment"># 指定版本 test 并存储</span><span class="token function">git</span> stash save <span class="token string">'test'</span><span class="token comment"># 查看当前存储的所有版本</span><span class="token function">git</span> stash list<span class="token comment"># 弹出最新的存储内容至工作区 并删除存储对应的版本的存储</span><span class="token function">git</span> stash pop<span class="token comment"># 应用指定版本的存储内容至工作区 不删除存储 version 对应存储的版本号 0、1、、</span><span class="token function">git</span> stash apply stash@<span class="token punctuation">&#123;</span>version<span class="token punctuation">&#125;</span><span class="token comment"># 删除指定的存储版本内容 0 为版本号</span><span class="token function">git</span> stash drop stash@<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token comment"># 删除所有的存储</span><span class="token function">git</span> stash <span class="token function">clear</span><span class="token comment"># ...</span></code></pre><h4 id="将某次提交合并至当前分支"><a href="#将某次提交合并至当前分支" class="headerlink" title="将某次提交合并至当前分支"></a>将某次提交合并至当前分支</h4><p>场景：在某个功能分支<code>A</code>上新增了一个功能提交，想在另外一个分支<code>B</code>使用，但又不想让另外这个分支<code>B</code>合并<code>A</code>的其他功能，此时，可以通过<code>cherry-pick</code>将<code>A</code>的某次提交合并到<code>B</code>。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换到分支 B</span><span class="token function">git</span> checkout B<span class="token comment"># 将分支 A 提交的 asgasgasgnajsgank 内容合并当当前的 B 分支</span><span class="token function">git</span> cherry-pick asgasgasgnajsgank<span class="token comment"># 遇到冲突</span><span class="token comment"># 解决冲突 先打开编辑器解决冲突</span><span class="token comment"># -- 工作区是干净的</span><span class="token function">git</span> cherry-pick --continue<span class="token comment"># -- 工作区不干净</span><span class="token function">git</span> <span class="token function">add</span> xxx<span class="token function">git</span> commit -m <span class="token string">''</span><span class="token function">git</span> push 或 <span class="token function">git</span> push origin B<span class="token comment"># 不解决冲突</span><span class="token comment"># -- 退回到 cherry-pick 之前的状态</span><span class="token function">git</span> cherry-pick --abort<span class="token comment"># -- 退出 cherry-pick 但不回到之前的状态</span><span class="token function">git</span> cherry-pick --quit</code></pre><h4 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h4><p>回退到指定版本后，指定版本的后续版本将被删除</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看版本号</span><span class="token function">git</span> log<span class="token comment"># 版本回退至 asgasjgajsga</span><span class="token function">git</span> reset --hard asgasjgajsga<span class="token comment"># 推送更改</span><span class="token comment"># 直接 git push 会报错，因为此时本地的 HEAD 指向版本和远程不一样</span><span class="token function">git</span> push origin A  <span class="token operator">||</span> <span class="token function">git</span> push -f</code></pre><h4 id="还原某一次提交"><a href="#还原某一次提交" class="headerlink" title="还原某一次提交"></a>还原某一次提交</h4><p>场景：用于回退之前的错误提交或者取消某一次的内容提交，不影响其他的提交内容</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 取消 asgasgasgjaj 这次提交</span><span class="token function">git</span> revert -n asgasgasgjaj<span class="token comment"># 遇到冲突先解决</span><span class="token comment"># 提交这次 revert</span><span class="token function">git</span> commit -m <span class="token string">'Revert: 取消 asgasgasgjaj 的提交内容'</span><span class="token comment"># 推送</span><span class="token function">git</span> push</code></pre><h4 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a><strong>分支管理</strong></h4><h5 id="分支查看"><a href="#分支查看" class="headerlink" title="分支查看"></a>分支查看</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看本地分支列表</span><span class="token function">git</span> branch 或 <span class="token function">git</span> branch -a<span class="token comment"># 查看所有分支</span><span class="token function">git</span> branch -l</code></pre><h5 id="分支创建"><a href="#分支创建" class="headerlink" title="分支创建"></a>分支创建</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建分支 A</span><span class="token function">git</span> branch A<span class="token comment"># 指定以 asgasgl 这次提交的内容 创建的分支名 A</span><span class="token function">git</span> branch A asgasgl<span class="token comment"># 创建并切换至分支 B</span><span class="token function">git</span> checkout -b B</code></pre><h5 id="分支切换"><a href="#分支切换" class="headerlink" title="分支切换"></a>分支切换</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换至分支 B</span><span class="token function">git</span> checkout B</code></pre><h5 id="分支更新"><a href="#分支更新" class="headerlink" title="分支更新"></a>分支更新</h5><p>场景：远程分支被删除，但自己本地显示远程分支存在</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更新远程分支</span><span class="token function">git</span> remote update origin --prune<span class="token comment"># 查看需要清理的本地分支</span><span class="token function">git</span> remote prune origin --dry-run<span class="token comment"># 删除本地存在，但远程不存在的分支</span><span class="token function">git</span> remote prune origin -n</code></pre><h5 id="分支删除"><a href="#分支删除" class="headerlink" title="分支删除"></a>分支删除</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除本地分支 B, 需要先切到一个非 B 的分支 A</span><span class="token function">git</span> checkout A<span class="token function">git</span> branch -d B<span class="token comment"># 删除远程分支 B</span><span class="token function">git</span> push origin --delete B</code></pre><h5 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 功能分支的代码推送至远端</span><span class="token function">git</span> push origin feature/xxx<span class="token comment"># 切换至主分支</span><span class="token function">git</span> checkout develop<span class="token comment"># 拉取主分支最新代码</span><span class="token function">git</span> pull origin develop <span class="token operator">||</span> <span class="token function">git</span> pull<span class="token comment"># 合并功能分支至 develop</span><span class="token function">git</span> merge feature/xxx<span class="token comment"># 遇到冲突 --- 丢弃 不合并了</span><span class="token function">git</span> merge --abort<span class="token comment"># 另外一种变基合并</span><span class="token function">git</span> rebase branch</code></pre><h4 id="为某次提交打标签"><a href="#为某次提交打标签" class="headerlink" title="为某次提交打标签"></a>为某次提交打标签</h4><p>标签分为<strong>轻量标签（<code>lightweight</code>）</strong>与附注标签 <strong>（<code>annotated</code>）</strong></p><h5 id="标签查看"><a href="#标签查看" class="headerlink" title="标签查看"></a>标签查看</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出所有标签</span><span class="token function">git</span> tag<span class="token comment"># 按照通配符列出标签需要 -l 或 --list 选项（下面通配符指 v1.0.0 开头的所有标签）</span><span class="token function">git</span> tag -l <span class="token string">'v1.0.0*'</span><span class="token comment"># 查看具体某一个标签（v1.0.0）信息和与之对应的提交信息</span><span class="token function">git</span> show v1.0.0</code></pre><h5 id="标签创建"><a href="#标签创建" class="headerlink" title="标签创建"></a>标签创建</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -a 创建附注标签（v1.0.0） -m 指定了一条将会存储在标签中的信息</span><span class="token function">git</span> tag -a v1.0.0 -m <span class="token string">"my version 1.4"</span><span class="token comment"># 创建轻量标签（v1.0.0），不包含任何其他信息</span><span class="token function">git</span> tag v1.0.0<span class="token comment"># 针对历史提交记录的某一次的提交，创建标签（v1.0.0）</span><span class="token function">git</span> tag -a v1.0.0 9fceb02xxx</code></pre><h5 id="标签共享（推送远程）"><a href="#标签共享（推送远程）" class="headerlink" title="标签共享（推送远程）"></a>标签共享（推送远程）</h5><p>注意需要显式的推送，不能简写为<code>git push</code>.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将标签 v1.0.0 推送到远程，方便其他人共享</span><span class="token function">git</span> push origin v1.0.0<span class="token comment"># 将所有标签推送至远程</span><span class="token function">git</span> push origin --tags</code></pre><h5 id="标签删除"><a href="#标签删除" class="headerlink" title="标签删除"></a>标签删除</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除本地标签 v1.0.0</span><span class="token function">git</span> tag -d v1.0.0<span class="token comment"># 删除远程的一个标签 git push &lt;remote> :refs/tags/&lt;tagname></span><span class="token function">git</span> push origin :refs/tags/v1.0.0<span class="token comment"># 或者</span><span class="token function">git</span> push origin --delete v1.0.0</code></pre><h5 id="检出标签"><a href="#检出标签" class="headerlink" title="检出标签"></a>检出标签</h5><p>在标签创建完成后，你在上线之前又做过多次修改。这时你可以检出你之前那个准备发布的版本（打标签的版本）进行部署。</p><p><code>Git</code>中不能真的检出一个标签，因为他们并不能像分支一样来回移动。如果你切换到某个标签后又提交了新东西，那么这些新的提交将不属于任何分支，并且无法访问，除非通过确切的提交哈希才能访问。</p><p>那么<strong>如果真的需要在某一个标签版本修复一些内容：那么推荐的做法是基于这个标签版本创建一个新的分支。</strong>如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># git checkout -b [分支名] [标签名]</span><span class="token function">git</span> checkout -b version1 v1.0.0</code></pre><div class="success"><blockquote><p>说了这么多指令，不用刻意去记，孰能生巧。另外：安利 vscode 的插件 Git Graph、GitLens — Git supercharged，所有的<code>git</code>指令都能通过界面操作。可以看一下我另外一篇文章： <a href="/posts/vscode-setting-and-plugins">vscode 的使用，设置分享以及插件推荐</a></p></blockquote></div><h3 id="代码提交规范"><a href="#代码提交规范" class="headerlink" title="代码提交规范"></a>代码提交规范</h3><p>每一次提交代码时都会写<code>commit message</code>，如果书写风格不统一，十分不利于阅读和维护。推荐格式：</p><blockquote><p>type(scope) : subject</p></blockquote><p><code>type</code>：指<code>commit</code>的类别，此项必填。</p><ul><li><p><code>feat</code>: 新功能</p></li><li><p><code>fix</code>: 修复 bug</p></li><li><p><code>docs</code>: 文档改变</p></li><li><p><code>style</code>: 代码格式改变</p></li><li><p><code>refactor</code>: 某个已有功能重构</p></li><li><p><code>perf</code>: 性能优化</p></li><li><p><code>test</code>: 增加测试</p></li><li><p><code>build</code>: 改变了 build 工具 如 grunt 换成了 npm</p></li><li><p><code>revert</code>: 撤销上一次的 commit</p></li><li><p><code>chore</code>: 构建过程或辅助工具的变动</p></li></ul><p><code>scope</code>：说明<code>commit</code>影响的范围，此项选题</p><p><code>subject</code>：<code>commit</code>的简短描述，不超过<code>50</code>个字符</p><blockquote><p>tips：仅作为一个推荐的规范格式，并不会对你的 commit-message 做任何校验，自觉遵守即可；另外如果你的团队有自己的提交规范，请优先以团队提交规范为主。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 土豆の教程分享 </category>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> git指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你使用 npm-link 软链</title>
      <link href="/share/npm-link/"/>
      <url>/share/npm-link/</url>
      
        <content type="html"><![CDATA[<h3 id="浅谈一下"><a href="#浅谈一下" class="headerlink" title="浅谈一下"></a>浅谈一下</h3><p>前段时间，开发了一个组件，需要在本地<code>debug</code>验证相关功能，有些纠结是用<code>npm link</code>还是<code>npx link</code>，亦或是<code>npm install</code>。。。</p><p>有些忘记了相关用法以及带来的影响…觉得还是有必要写一篇文章记录一下过程，以及新的东西。😮‍💨😮‍💨😮‍💨</p><h3 id="npm-link是干啥的？"><a href="#npm-link是干啥的？" class="headerlink" title="npm link是干啥的？"></a><code>npm link</code>是干啥的？</h3><p><a href="https://docs.npmjs.com/cli/v7/commands/npm-link">npm 文档</a> 也有说明：为了方便你的迭代测试，<code>npm link</code>将在全局的<code>node_modules</code>创建一个指向当前自定义的<code>npm</code>模块的软链接，并在你需要使用的地方通过<code>npm link packagename</code>创建一个从全局安装的<code>package-name</code>到<code>当前文件夹/node_modules</code>的符号链接。你对自定义包的任何改动都将同步到<code>link</code>到的项目中。<del>可以理解为 mklink</del></p><span id="more"></span><h3 id="第一视角带你学习link指令"><a href="#第一视角带你学习link指令" class="headerlink" title="第一视角带你学习link指令"></a>第一视角带你学习<code>link</code>指令</h3><h4 id="准备好预发布包"><a href="#准备好预发布包" class="headerlink" title="准备好预发布包"></a>准备好预发布包</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> my-test-component-zhl<span class="token builtin class-name">cd</span> ./my-test-component-zhl<span class="token function">npm</span> init -y<span class="token comment"># 准备入口文件 index</span><span class="token comment"># (() => &#123;</span><span class="token comment">#   console.log('这是我的组件模块');</span><span class="token comment"># &#125;)();</span></code></pre><h4 id="准备一个用于测试的项目"><a href="#准备一个用于测试的项目" class="headerlink" title="准备一个用于测试的项目*"></a>准备一个用于测试的项目*</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token function">mkdir</span> my-test-project<span class="token builtin class-name">cd</span> ./my-test-project<span class="token function">npm</span> init -y</code></pre><h4 id="为预发布包创建软链接"><a href="#为预发布包创建软链接" class="headerlink" title="为预发布包创建软链接"></a>为预发布包创建软链接</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/my-test-component-zhl<span class="token function">npm</span> <span class="token function">link</span></code></pre><p>结果预览：</p><p><a href="/images/share/npm-link/p1.png"><img src="/images/share/npm-link/p1.png" alt="npm-link-p1" loading="lazy"></a></p><p>链接的位置就是你<code>nodejs</code>安装目录下的<code>node_modules</code>目录下，指向了当前的组件。</p><h4 id="在项目中引用这个预发布包"><a href="#在项目中引用这个预发布包" class="headerlink" title="在项目中引用这个预发布包"></a>在项目中引用这个预发布包</h4><p>你会发现，<code>link</code>的包并不会在<code>package.json</code>的<code>dependencies</code>里出现。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/my-test-project<span class="token function">npm</span> <span class="token function">link</span> my-test-component-zhl</code></pre><p>结果预览：</p><p><a href="/images/share/npm-link/p2.png"><img src="/images/share/npm-link/p2.png" alt="npm-link-p2" loading="lazy"></a><br><a href="/images/share/npm-link/p3.png"><img src="/images/share/npm-link/p3.png" alt="npm-link-p3" loading="lazy"></a></p><p>实际使用调试：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'my-test-component-zhl'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="/images/share/npm-link/p4.png"><img src="/images/share/npm-link/p4.png" alt="npm-link-p4" loading="lazy"></a></p><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>修改<code>my-test-component-zhl</code>的内容，会同步更新到当前引用的项目中…很方便。</p><p>效果：</p><p><a href="/images/share/npm-link/p5.png"><img src="/images/share/npm-link/p5.png" alt="npm-link-p5" loading="lazy"></a></p><h4 id="解除link"><a href="#解除link" class="headerlink" title="解除link"></a>解除<code>link</code></h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> unlink --no-save packagename <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> <span class="token function">install</span></code></pre><p>查阅了文档，发现<code>unlink</code>其实是<code>uninstall</code>的别名。<a href="https://docs.npmjs.com/cli/v7/commands/npm-uninstall">-&gt; 戳这里</a></p><p>当然，如果你不需要<code>link</code>该组件包进行测试时，建议你同时也卸载掉<code>link</code>到全局的包。如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/my-test-component-zhl<span class="token function">npm</span> unlink <span class="token punctuation">[</span>-g<span class="token punctuation">]</span></code></pre><h3 id="说说npm-link的缺点"><a href="#说说npm-link的缺点" class="headerlink" title="说说npm link的缺点"></a>说说<code>npm link</code>的缺点</h3><p>好用确实是好用，但是也有几个缺点（槽点）：</p><details><summary>建立了 link 过后，跨 node 版本使用容易出错</summary><p>其实这个在我本机上没有遇到，前面测试的时候，细心的伙伴可能也发现了，<code>link</code>的<code>global</code>地址并没有带<code>node</code>版本信息（并不是在<code>nvm/nodeversion/node_modules</code>下，意味着我换一个<code>node</code>的版本，软链接仍然是存在且有效的。😮‍💨😮‍💨😮‍💨 如何做到的？<del>小伙伴可以自己验证一下是否可行</del></p><p>配置<code>npm</code>的全局安装位置：</p><blockquote><p>npm config set prefix xxx</p></blockquote></details><details><summary>link 失败不会报错并且会回退到直接从 npm 仓库进行安装</summary><p>这个确实，如果<code>link</code>本地预发布包失败，<code>npm</code>会全局安装一个你<code>link 的 packagename</code>包，然后再建立软链接，如果<code>npm-registry</code>仓库也没有这个包，才会抛异常。💀💀💀 <del>潜在问题，不容易发现，当然你可以通过为自己模块添加私有前缀避免这一问题</del></p></details><details><summary>会有预期之外的二进制可执行文件安装</summary><p><code>通过 npm uninstall -g packagename</code>可以同时卸载全局包和它的二进制执行文件。那么根据<code>unlink</code>是<code>uninstall</code>的别名，可以很容易推出另外一个等价指令：</p><blockquote><p>npm unlink [-g]</p></blockquote></details><details><summary>不符合预期的软链接删除</summary><p>每一次的<code>npm link</code>，都是一次<strong>重新建立软链接</strong>的过程，这个过程会取消之前已经链接的包。</p><p>如果你想同时保留多个包的软链接，记得同时<code>link</code>多个：</p><blockquote><p>npm link ..&#x2F;packageA ..&#x2F;packageB</p></blockquote></details><p>这么一分析，好像也就不是问题了…😂😂😂 不过还是介绍一下另外的两种方式：</p><h3 id="npm-install替代"><a href="#npm-install替代" class="headerlink" title="npm install替代"></a><code>npm install</code>替代</h3><p>使用安装指令，拼上<code>你自定义的模块的路径地址，可以是相对路径</code>，这种方式同样是建立软链接，并不是真的将资源下载到<code>node_modules</code>，只不过少了个<code>global</code>的中间过程。貌似更加方便一点。</p><blockquote><p>npm install &lt;package-path&gt;</p></blockquote><p>如果你不想写入<code>package.json</code>，可以带上<code>--no-save</code>参数：</p><blockquote><p>npm install –no-save &lt;package-path&gt;</p></blockquote><p>取消的话，可以用<code>uninstall</code>：</p><blockquote><p>npm uninstall package-path</p></blockquote><h3 id="扩展【仅做了解】"><a href="#扩展【仅做了解】" class="headerlink" title="扩展【仅做了解】"></a>扩展【仅做了解】</h3><p>通过<code>link</code>工具避免上面提到的问题。<a href="https://github.com/privatenumber/link">-&gt; 详见</a></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i -g <span class="token function">link</span><span class="token comment"># 方式一</span>npx <span class="token function">link</span> package-path<span class="token comment"># 方式二：项目根目录添加 link.config.json 配置文件，再执行</span>npx <span class="token function">link</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 土豆の教程分享 </category>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> npm-link </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何发布一个 npm-package?</title>
      <link href="/share/npm-publish/"/>
      <url>/share/npm-publish/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是npm-package？"><a href="#什么是npm-package？" class="headerlink" title="什么是npm-package？"></a>什么是<code>npm-package</code>？</h3><p>先说模块，<code>node</code>模块大致可以分为三类：内置模块（由<code>nodeJs</code>原生提供，可直接使用）、自定义模块（<code>module.export/require、export/import</code>）、第三方模块（需要通过<code>npm install</code>下载后才能使用）。</p><p>我这里提到<code>npm-package</code>的发布，自然是指的三方模块。后续如果有使用需求，可以直接<code>install</code>安装使用，大大提高咱的开发效率。</p><blockquote><p>本文主要针对<code>publish</code>做说明。至于<code>package</code>模块如何定义，以及具体如何配置，后续会写另外一篇文章补充。</p></blockquote><span id="more"></span><h3 id="创建一个npm账号"><a href="#创建一个npm账号" class="headerlink" title="创建一个npm账号"></a>创建一个<code>npm</code>账号</h3><p>如果你有相关的账号，请跳过该步骤；如果你没有<code>npm</code>的账号，那就需要先注册。注册有两种方式：官网注册 &#x2F; 命令行创建</p><h4 id="官网注册"><a href="#官网注册" class="headerlink" title="官网注册"></a>官网注册</h4><p>进入<a href="https://www.npmjs.com/signup">https://www.npmjs.com/signup</a>输入用户、密码、邮箱注册。</p><h4 id="命令行创建"><a href="#命令行创建" class="headerlink" title="命令行创建"></a>命令行创建</h4><blockquote><p><strong>如果你通过这种方式创建账号，创建成功过后会默认你已经登录，无需使用登录指令再次登录。</strong></p></blockquote><p>如果你配置过<code>npm-registry</code> <del>（例如你配置了淘宝镜像、或者你所在公司的<code>private-npm</code>）</del>，请记得在发布之前切换到<code>npm</code>的官方源<code>https://registry.npmjs.org</code>。</p><h5 id="重置registry地址"><a href="#重置registry地址" class="headerlink" title="重置registry地址"></a>重置<code>registry</code>地址</h5><p><strong>重置的前提</strong>你这个包是要发布到<code>npmjs</code>，如果你要发布至你所配置的<code>registry</code>，那就不需要操作。</p><blockquote><p>npm config set registry <a href="https://registry.npmjs.org/">https://registry.npmjs.org</a></p></blockquote><p>总有一些懒人不想这么干，毕竟包发布完了过后还要切回原来的<code>registry</code>，觉得麻烦 <del>（不会承认是我）</del>，有没有别的办法咧？</p><blockquote><p>在使用 addUser 指令时，指定当前注册并登录的 registry，覆盖全局配置中的 registry.（不会修改全局配置） 具体用法如下：</p></blockquote><h5 id="开始创建"><a href="#开始创建" class="headerlink" title="开始创建"></a>开始创建</h5><blockquote><p>npm addUser --registry&#x3D;<a href="https://registry.npmjs.org/">https://registry.npmjs.org</a></p></blockquote><p>如果你是通过<code>npm config set registry xx</code>重置的<code>registry</code>：</p><blockquote><p>npm addUser</p></blockquote><p>回车，你会得到一个<code>Username、Password、Email</code>的输入提示，录入你的用户信息（注意<code>password</code>不是明文显示的，会被隐藏）。</p><p>录完回车，得到一个<code>Enter one-time password from your authenticator app</code>的输入提示，录入验证码。<del>这个验证码会发送到你上面填的邮箱里</del></p><p>继续回车，提示<code>Logged in as xxx on https://registry.npmjs.org/.</code>登录成功。</p><hr><h3 id="准备好模块"><a href="#准备好模块" class="headerlink" title="准备好模块"></a>准备好模块</h3><blockquote><p><strong>友情提示：最好为你的模块包添加私有前缀，避免与已经发布的包冲突，导致发布不成功…</strong></p></blockquote><p>初始化一个项目，<code>-y</code>使用默认配置项。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> test-publish-project<span class="token builtin class-name">cd</span> ./test-publish-project<span class="token function">npm</span> init -y</code></pre><p>创建一个<code>index.js</code>的入口文件（同<code>package.json</code>中指定的<code>main</code>字段），随便写点东西… <del>这里只是一个简单演示</del></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是一个测试用的模块入口'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h3 id="登录npm"><a href="#登录npm" class="headerlink" title="登录npm"></a><strong>登录<code>npm</code></strong></h3><p>前面有提到：通过<code>addUser</code>方式创建的账户在创建成功后会默认登录，所以如果你是通过命令行的方式注册的，可以跳过当前步骤…</p><blockquote><p>npm login</p></blockquote><p>同时你也可以登录到指定<code>registry</code>，避免<code>publish</code>过程中抛出<code>401</code>。</p><blockquote><p>npm login --registry&#x3D;xxx</p></blockquote><h3 id="发布（publish）"><a href="#发布（publish）" class="headerlink" title="发布（publish）"></a><strong>发布（<code>publish</code>）</strong></h3><p>如果你不是通过<code>npm config set registry</code>修改的源地址，那么发布的时候同样要指定<code>registry</code>参数 😢😢😢。</p><blockquote><p>npm publish --registry&#x3D;xxx</p></blockquote><p>有没有觉得这个很鸡肋？别急…咱这就解决</p><p>修改<code>package.json</code>，添加<code>publishConfig</code>配置项：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token comment">// other config...</span>  <span class="token property">"publishConfig"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"registry"</span><span class="token operator">:</span> <span class="token string">"https://registry.npmjs.org/"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>好了（意味着，以后只有<code>login or addUser</code>的时候需要指定<code>registry</code>🎉🎉🎉），现在可以愉快的直接使用<code>npm publish</code>。</p><p>发布成功！<del>虽然遇到了一点点小问题，写在下面了</del></p><p>打开 <a href="https://www.npmjs.com/">https://www.npmjs.com</a> 找了一下我的包，纳尼 🤔🤔🤔，居然搜不到。。<del>可能是因为缓存?</del></p><p>通过路径直接搜索：<a href="https://www.npmjs.com/package/your-project-name">https://www.npmjs.com/package/your-project-name</a> 能找到，通过<code>npm install packagename</code>也成功了，说明包实实在在是发布上去了…</p><h3 id="版本更新迭代"><a href="#版本更新迭代" class="headerlink" title="版本更新迭代"></a><strong>版本更新迭代</strong></h3><p>添加&#x2F;修改你的功能，修改完成以后…</p><h4 id="手动修改版本号"><a href="#手动修改版本号" class="headerlink" title="手动修改版本号"></a>手动修改版本号</h4><p>打开<code>package.json</code>文件，修改<code>version</code>字段。</p><h4 id="指令修改版本号"><a href="#指令修改版本号" class="headerlink" title="指令修改版本号"></a>指令修改版本号</h4><p>小版本升级：<code>1.0.0 -&gt; 1.0.1</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果没有预发布号：直接升级小号，去掉预发布号；如果有预发布号：去掉预发布号，其他不动</span><span class="token function">npm</span> version patch<span class="token comment"># 直接升级小号，增加预发布号为 0</span><span class="token function">npm</span> version prepatch</code></pre><p>中版本升级：<code>1.0.0 -&gt; 1.1.0</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果没有预发布号，则升级一位中号，大号不动，小号置为空；如果有预发布号小号为0，则不升级中号，将预发布号去掉</span><span class="token function">npm</span> version minor<span class="token comment"># 直接升级中号，小号置为 0，增加预发布号为 0</span><span class="token function">npm</span> version preminor</code></pre><p>大版本升级：<code>1.0.0 -&gt; 2.0.0</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果没有预发布号，则直接升级一位大号，其他位都置为0；如果有预发布号：中号和小号都为0，则不升级大号，而将预发布号删掉，中号小号存在不为0，则升级大号，清空预发布号。</span><span class="token function">npm</span> version major<span class="token comment"># 直接升级中号，小号置为 0，增加预发布号为 0</span><span class="token function">npm</span> version premajor</code></pre><h5 id="修改版本号的同时添加commit"><a href="#修改版本号的同时添加commit" class="headerlink" title="修改版本号的同时添加commit"></a>修改版本号的同时添加<code>commit</code></h5><blockquote><p>npm version [patch] -m ‘你的 commit 内容’</p></blockquote><h4 id="再次发布"><a href="#再次发布" class="headerlink" title="再次发布"></a>再次发布</h4><p>可以在发布之前确认一下当前登录信息<code>npm whoami --registry=xx</code>，如果没登录，需要重新登录。</p><blockquote><p>npm publish</p></blockquote><h3 id="包卸载"><a href="#包卸载" class="headerlink" title="包卸载"></a><strong>包卸载</strong></h3><p>参考：<a href="https://www.npmjs.cn/cli/unpublish/">https://www.npmjs.cn/cli/unpublish/</a></p><p>注意：<code>npm -f unpublish</code>不允许您取消发布超过<code>24</code>小时的任何内容。</p><blockquote><p>npm -f unpublish</p></blockquote><p><strong>tips：如果这个包不是仅测试使用，建议不要删除…否则，对别的用户而言是极不道德的行为。</strong></p><hr><h3 id="过程中的错误记录"><a href="#过程中的错误记录" class="headerlink" title="过程中的错误记录"></a>过程中的错误记录</h3><div class="error"><blockquote><p>400 Bad Request</p></blockquote></div><p><code>The password you have entered was detected on a public list of known compromised passwords. Please enter a different password.</code></p><p>重新设个密码… <del>密码设置简单了，抛了个异常…</del></p><div class="error"><blockquote><p>403 Forbidden</p></blockquote></div><p><code>You do not have permission to publish &quot;test-publish-project&quot;. Are you logged in as the correct user?</code></p><p><del>what?告诉我没有权限发布…我这不是已经登录了吗，怎么肥四？</del></p><p>赶紧查一下是否登录成功！！！</p><blockquote><p>npm whoami --registry&#x3D;xxx</p></blockquote><p>确实已经登录了 🤣🤣🤣。<del>一万个尼玛心中飘过</del></p><p>查了相关资料，总结可能性：<code>该包已被别的作者发布</code>；<code>邮箱未验证</code><del>（扯淡，邮箱我已经验证了）</del></p><p>那就验证一下是包是否已经存在，去搜了一下（或者直接<code>install</code>），还真有… <del>那好吧，咱改个名</del>，重新改了个包名（<code>package.json</code>中的<code>name</code>值）再次<code>publish</code>，成功!!!</p>]]></content>
      
      
      <categories>
          
          <category> 土豆の教程分享 </category>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> npm-publish </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript[ES6] 中的箭头函数学习及this理解</title>
      <link href="/notes/javascript-arrow-function/"/>
      <url>/notes/javascript-arrow-function/</url>
      
        <content type="html"><![CDATA[<h3 id="箭头函数是什么？"><a href="#箭头函数是什么？" class="headerlink" title="箭头函数是什么？"></a>箭头函数是什么？</h3><p>简单的说，箭头函数就是对匿名函数的简化。</p><p>作为<code>ES6</code>的一种新规范，箭头函数的优点不仅在于写法上的简化，而且能够根据情况，与匿名函数之间切换使用，使<code>this</code>指向不同的值。</p><p><code>so</code>，箭头函数如何使用呢？</p><span id="more"></span><h3 id="格式用法"><a href="#格式用法" class="headerlink" title="格式用法"></a>格式用法</h3><p>一般形式上的箭头函数长这样<del>（看了案例还是不明白的，可以运行代码看一下结果，或许你就明白了）</del></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="单参数单返回语句"><a href="#单参数单返回语句" class="headerlink" title="单参数单返回语句"></a><strong>单参数单返回语句</strong></h4><blockquote><p>单参数：在箭头函数中参数的括号可以省略，但不建议<del>一般项目规范箭头函数，参数位置必须加括号</del></p></blockquote><blockquote><p>单返回语句：函数体 {} 括号可以省略。（<strong>特殊说明：注意返回对象时的书写格式，避免与函数体的 {} 冲突</strong>，<del>错误示范：y &#x3D;&gt; { y };</del>）</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token parameter">y</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> y <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等价写法：</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token operator">*</span><span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token operator">=></span> y <span class="token operator">=</span> <span class="token punctuation">&#123;</span> y <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// (y) => (y = &#123; y &#125;); // (y) => y = (&#123; y &#125;);</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> y <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token comment">// 等价的匿名函数写法</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> x<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span> y <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>当只有一个执行语句，且无需返回数据时，可以返回可执行代码：<strong>此时返回的执行语句必须用小括号包裹</strong></p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> y<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>y <span class="token operator">=</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等价的匿名函数写法</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  y <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="单参数多执行语句"><a href="#单参数多执行语句" class="headerlink" title="单参数多执行语句"></a><strong>单参数多执行语句</strong></h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token parameter">x</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> flag <span class="token operator">=</span> x <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> flag <span class="token operator">?</span> x <span class="token operator">:</span> x <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 等价写法：</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">?</span> x <span class="token operator">:</span> x <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 等价的匿名函数写法</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">?</span> x <span class="token operator">:</span> x <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="多参数单返回语句"><a href="#多参数单返回语句" class="headerlink" title="多参数单返回语句"></a><strong>多参数单返回语句</strong></h4><p>与单参数单返回语句的<strong>唯一区别</strong>就是参数必须用小括号包裹。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=></span> x<span class="token operator">*</span>y<span class="token punctuation">;</span><span class="token comment">// 等价写法：</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token operator">*</span>y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">// 等价的匿名函数写法</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> x<span class="token operator">*</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="多参数多执行语句"><a href="#多参数多执行语句" class="headerlink" title="多参数多执行语句"></a><strong>多参数多执行语句</strong></h4><p>与单参数多执行语句的<strong>唯一区别</strong>就是参数必须用小括号包裹。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> flag <span class="token operator">=</span> x <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> flag <span class="token operator">?</span> y <span class="token operator">:</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 等价的匿名函数写法</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">?</span> y <span class="token operator">:</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="没有参数"><a href="#没有参数" class="headerlink" title="没有参数"></a><strong>没有参数</strong></h4><p><strong>参数位置必须加括号</strong>，其他单&#x2F;多语句执行的书写格式同上。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token comment">// 等价的匿名函数写法</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a><strong>可变参数</strong></h4><p>利用<code>rest</code>变量取值，可以利用…对个数不明参数的参数进行囊括，得到变量组成的数组。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">...</span>rest</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> sum <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rest<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sum <span class="token operator">+=</span> rest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// sum += 4; sum += 5;sum += 6  4/8/13/19</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 19</span></code></pre><p>看完是不是感觉，原来箭头函数这么简单，对没错…就是如此简单。</p><p>箭头函数在一定形式上与匿名函数没有太大的差异，写法上除了函数头尾部，函数体依旧是逻辑性的代码。</p><hr><h3 id="与普通匿名函数的区别"><a href="#与普通匿名函数的区别" class="headerlink" title="与普通匿名函数的区别"></a>与普通匿名函数的区别</h3><ul><li><p>箭头函数形式上做了改变，简化了函数体。</p></li><li><p>普通函数支持通过<code>arguments</code>获取未知个数的实参，而箭头函数不支持<code>arguments</code>用法，究其原因：箭头函数没有自身的<code>this、arguments</code>，但是…如若它的父级存在，那么在箭头函数内获取的就是其父级对应的<code>this、arguments</code>。如果在箭头函数中有这个获取自身的<code>arguments</code>需求，可以用<code>...rest</code>替代。</p></li><li><p>箭头函数在<code>ES6</code>标准下可使用，普通函数则没有这个限制。</p></li><li><p><code>this</code>指向的修改。箭头函数的<code>this</code>指向外部，常在对类的方法进行构造时使用，使函数体内的<code>this</code>始终指向这个类。如果需要 <code>this</code>指向当前源，建议使用普通函数。</p></li></ul><div class="primary"><blockquote><p>补充说明：</p></blockquote></div><blockquote><p><strong>箭头函数除了没有自身的 this、arguments 外，new.target、super 也没有</strong>。（注意只是自身没有，它会从它的外部获取，就近原则，如果外部还是没有自身的，继续向外…）；另：<strong>不可以使用 yield 命令，因此箭头函数不能用作 Generator 函数</strong>。</p></blockquote><blockquote><p><strong>箭头函数有作用域</strong>（词法作用域），词法作用域简单来讲就是，一切变量（包括 this）都根据作用域链来查找。</p></blockquote><blockquote><p>至于为啥箭头函数自身没有？这玩意儿连 ES6 规范原文里都没写原因（<a href="https://262.ecma-international.org/6.0/#sec-arrow-function-definitions">https://262.ecma-international.org/6.0/#sec-arrow-function-definitions</a>），只要知道是规范标准就行，也可以理解为是箭头函数的特性…</p></blockquote><h3 id="箭头函数中的this"><a href="#箭头函数中的this" class="headerlink" title="箭头函数中的this"></a>箭头函数中的<code>this</code></h3><blockquote><p>请记住：箭头函数自身没有 this，如若你在箭头函数中使用了它，那么它其实是<strong>箭头函数父级</strong>的 this。</p></blockquote><p>怎么理解这个<strong>箭头函数的父级</strong>？可以参考<strong>位置</strong>，它的外层的<code>console.log</code>的<code>this</code>值即为它的<code>this</code>值。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 事件函数中：</span><span class="token comment">// 普通匿名函数中的 this，指向了事件源 ele</span>ele<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ele</span>  <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 普通匿名函数 this，执行了它的调用者 window</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// window</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 下面的箭头函数外部，或者可以理解为其 父级</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ele<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 箭头函数内部</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 与上面那个 log 一致，都是指向的 window</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>又比如：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">parentFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 这是普通匿名函数的内部，它的调用者是 window，所以下面这句 log 就是 window</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这里是箭头函数内部，上面那句 log 就是外部，而外部 this 指向了 window，所以下面这句 log 的值也是 window</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">parentFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// window.parentFn()</span></code></pre><p>结合上面两种方式：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">ele<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 这里是普通匿名函数的内部，this 指向了它的调用者：ele</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这里的 this 取决于外面的 log，同为 ele</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="谈谈我对箭头函数与普通匿名函数的this区分理解"><a href="#谈谈我对箭头函数与普通匿名函数的this区分理解" class="headerlink" title="谈谈我对箭头函数与普通匿名函数的this区分理解"></a>谈谈我对箭头函数与普通匿名函数的<code>this</code>区分理解</h4><p>从上面的代码，我们可以看到一个现象：就是只要有箭头函数存在，那么它的<code>this</code>，始终都是和外面一层打印的<code>this</code>一样。而普通的匿名函数，不管是否处于其他匿名函数&#x2F;箭头函数内部（不管层级多深），它自身的<code>this</code>都只会指向它的调用者。</p><p><strong>普通匿名函数的调用者又是个啥？</strong></p><blockquote><p>通过 fn() 方式调用：函数在通过函数名调用时，调用者就是 window，可以理解为 window.fn()，只不过 window 省略了。</p></blockquote><blockquote><p>通过 obj.fn() 方式调用：此时这个普通匿名函数是对象身上一个方法，对象调用自身的方法，调用者就是这个 obj。</p></blockquote><blockquote><p>如果是事件处理函数，例如 ele.onclick 触发的事件，虽然没有显式的调用者，但是却由 ele 引起，它的调用者可以理解为 ele。</p></blockquote><div class="success"><blockquote><p>总结：箭头函数 this 取决于其函数体的位置（与调用者无关），值始终与其外层的 this 一致。普通匿名函数 this 取决于其调用者（与位置无关），值始终是调用者。</p></blockquote></div>]]></content>
      
      
      <categories>
          
          <category> 土豆の学习笔记 </category>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 箭头函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript中的事件组成、分类、绑定与监听</title>
      <link href="/notes/javascript-event/"/>
      <url>/notes/javascript-event/</url>
      
        <content type="html"><![CDATA[<h3 id="What"><a href="#What" class="headerlink" title="What?"></a>What?</h3><p>主要是介绍事件相关知识。涵盖事件的组成部分、常见事件分类、以及当我们为元素绑定事件监听以后，如何阻止事件冒泡（捕获）、阻止默认事件、委派、如何解绑…</p><span id="more"></span><h3 id="事件是由哪些元素构成的？"><a href="#事件是由哪些元素构成的？" class="headerlink" title="事件是由哪些元素构成的？"></a>事件是由哪些元素构成的？</h3><h4 id="事件源"><a href="#事件源" class="headerlink" title="事件源"></a>事件源</h4><p>源：源头，来源。描述事件的产生源头，例如给一个按钮绑定了点击事件，那么这个按钮就是事件源 —— 调用者。</p><blockquote><p>btn.onclick &#x3D; function(){}，btn 即为事件源</p></blockquote><h4 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h4><p>事件类型，比如已知的点击事件、 移入移出事件、表单提交事件、浏览器事件…</p><blockquote><p>注意：类似于 onclick 这种方式的事件绑定，它的类型是 click。on 前缀只是绑定事件的一种方式 onclick 不是类型。</p></blockquote><h4 id="事件处理函数"><a href="#事件处理函数" class="headerlink" title="事件处理函数"></a>事件处理函数</h4><p>事件被触发以后，所执行的函数体，一般情况下是匿名函数。</p><blockquote><p>function(){}</p></blockquote><h3 id="事件对象-e"><a href="#事件对象-e" class="headerlink" title="事件对象 e"></a>事件对象 <code>e</code></h3><h4 id="事件对象获取"><a href="#事件对象获取" class="headerlink" title="事件对象获取"></a>事件对象获取</h4><blockquote><p>window.event 以前只能在 IE 中能使用</p></blockquote><blockquote><p>Chrome 和 Firefox 提供了另一种方法 即 提供一个 参数。（事件处理函数的第一个默认参数）</p></blockquote><p>存在兼容性，兼容处理：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>e<span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="事件目标元素获取"><a href="#事件目标元素获取" class="headerlink" title="事件目标元素获取"></a>事件目标元素获取</h4><p>兼容性处理：</p><blockquote><p>target &#x3D; e.target || e.srcEle (IE)</p></blockquote><h4 id="获取触发事件的鼠标按键"><a href="#获取触发事件的鼠标按键" class="headerlink" title="获取触发事件的鼠标按键"></a>获取触发事件的鼠标按键</h4><p>获取：非<code>IE</code>下为<code>e.button</code>，<code>IE</code>下为<code>e.which</code>。</p><p>对应值：</p><table><thead><tr><th>环境</th><th>鼠标左键</th><th>鼠标滚轮</th><th>鼠标右键</th></tr></thead><tbody><tr><td>IE</td><td>1</td><td>2</td><td>3</td></tr><tr><td>非 IE</td><td>0</td><td>1</td><td>2</td></tr></tbody></table><h4 id="获取光标位置"><a href="#获取光标位置" class="headerlink" title="获取光标位置"></a>获取光标位置</h4><ul><li><code>e.clientX/clientYY</code>获取到的是<strong>触发点</strong>相对浏览器可视区域左上角距离，不随页面滚动而改变。</li><li><code>e.pageX/pageY</code>获取到的是<strong>触发点</strong>相对文档区域左上角距离，会随着页面滚动而改变</li></ul><p><strong>拓展，注意 display 为 none 时， 宽高均为 0，拿数据的时候注意判断</strong>，<code>ele</code>指的元素。</p><ul><li><p><code>ele.offsetX/offsetY</code>获取到是<strong>触发点</strong>相对被触发<code>dom</code>的左上角距离，不过左上角基准点在不同浏览器中有区别，其中在<code>IE</code>中以内容区左上角为基准点不包括边框，如果<strong>触发点</strong>在边框上会返回负值，而<code>chrome</code>中以边框左上角为基准点。</p></li><li><p><code>ele.layerX/layerY</code>获取到的是<strong>触发点</strong>相对被触发<code>dom</code>左上角的距离，数值与<code>offsetX/offsetY</code>相同，这个变量就是<code>firefox</code>用来替代<code>offsetX/offsetY</code>的。（有个前提条件就是，被触发的 dom 需要是有定位的元素，否则会返回相对<code>html</code>文档区域左上角的距离）</p></li><li><p><code>ele.offsetWidth/offsetHeight</code><strong>元素</strong>的宽度&#x2F;高度，包括<code>border</code>。</p></li><li><p><code>ele.offsetLeft/offsetTop</code><strong>元素</strong>到有定位的父元素的左边&#x2F;上边的距离 ，如果父元素都没有定位 ，那就是相对于 body 上边的距离。</p></li><li><p><code>ele.offsetParent</code>拿到有定位的父元素，都没定位，那么拿到的就是<code>body</code>。</p></li><li><p><code>ele.clientWidth/clientHeight</code>元素的宽度&#x2F;高度，不含<code>border</code>。</p></li><li><p><code>ele.clientLeft/clientTop</code>元素的左&#x2F;上边框宽度</p></li></ul><p><strong>火狐以外的所有浏览器使用（兼容 IE）</strong></p><ul><li><p><code>window.screenLeft</code>浏览器窗口相对于显示器(屏幕)左边的距离</p></li><li><p><code>window.screenTop</code>浏览器窗口相对于显示器(屏幕)上边的距离</p></li></ul><p><strong>火狐浏览器使用（不兼容 IE）</strong></p><ul><li><p><code>window.screenX</code>浏览器窗口相对于显示器(屏幕)左边的距离</p></li><li><p><code>window.screenY</code>浏览器窗口相对于显示器(屏幕)上边的距离</p></li></ul><h4 id="键盘事件对象的属性"><a href="#键盘事件对象的属性" class="headerlink" title="键盘事件对象的属性"></a>键盘事件对象的属性</h4><blockquote><p>ctrlkey ctrl 按钮是否被按下，值为 boolean</p></blockquote><blockquote><p>shiftkey shift 按钮是否被按下，值为 boolean</p></blockquote><blockquote><p>altkey alt 按钮是否被按下，值为 boolean</p></blockquote><p>…</p><p><code>keyCode</code>获取触发<code>kayup</code>事件的键盘按钮编号，可以通过<code>keyCode</code>为具体的某一个按键添加对应的功能逻辑。</p><hr><h3 id="常见的几种事件类型"><a href="#常见的几种事件类型" class="headerlink" title="常见的几种事件类型"></a><strong>常见的几种事件类型</strong></h3><h4 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h4><ul><li><code>click</code>—鼠标左键单击。</li><li><code>dblclick</code>—鼠标双击。</li><li><code>contextmenu</code>—鼠标右键点击事件。</li><li><code>mousedown</code>—鼠标按下。</li><li><code>mouseup</code>—鼠标抬起(松开按键)。</li><li><code>mousemove</code>—鼠标移动。</li><li><code>mouseenter</code>—鼠标移入。</li><li><code>mouseover</code>—鼠标移入。</li><li><code>mouseleave</code>—鼠标离开。</li><li><code>mouseout</code>—鼠标离开。</li></ul><h5 id="mouseenter和mouseover的区别："><a href="#mouseenter和mouseover的区别：" class="headerlink" title="mouseenter和mouseover的区别："></a><code>mouseenter</code>和<code>mouseover</code>的区别：</h5><blockquote><p><code>over</code>会给子元素同时绑定有冒泡的行为</p></blockquote><blockquote><p><code>enter</code>没有冒泡，不会给其子元素绑定事件</p></blockquote><h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><ul><li><code>keydown</code>按下键盘键</li><li><code>keyup</code>紧接着<code>keydown</code>事件触发（只有按下字符键时触发）。</li><li><code>keypress</code>释放键盘键。</li></ul><h4 id="浏览器事件"><a href="#浏览器事件" class="headerlink" title="浏览器事件"></a>浏览器事件</h4><ul><li><code>load</code>—页面资源加载结束时执行, 通过这个函数可以使<code>js</code>放在<code>head</code>中不影响正常加载。</li><li><code>scroll</code>—浏览器滚动时执行，与滚轮无关，只和浏览器的滚动条是否滚动有关系。</li><li><code>resize</code>—浏览器的尺寸发生变化时触发执行。<del>（可以用<code>js</code>实现，响应式布局）不咋用</del></li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h4><p><strong><code>touchstart</code>会先于<code>click</code>事件执行，如果不想执行<code>click</code>，可以阻止默认事件。</strong></p><ul><li><code>touchstart</code>手指触摸屏幕时触发，即使已经有手指在屏幕上也会触发。</li><li><code>touchmove</code>手指在屏幕滑动时触发。</li><li><code>touchend</code>手指从屏幕时移开时触发。</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript">ele<span class="token punctuation">.</span><span class="token function-variable function">ontouchstart</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h4><ul><li><code>change</code>—焦点前后比较，发生了改变则触发该函数。</li><li><code>input</code>—只要输入了内容就会触发，一直输入一直触发。</li><li><code>focus</code>—获取焦点。</li><li><code>blur</code>—失去焦点。</li><li><code>submit</code>—提交事件。</li></ul><hr><h3 id="事件绑定与事件解绑"><a href="#事件绑定与事件解绑" class="headerlink" title="事件绑定与事件解绑"></a><strong>事件绑定与事件解绑</strong></h3><h4 id="添加一个事件监听"><a href="#添加一个事件监听" class="headerlink" title="添加一个事件监听"></a>添加一个事件监听</h4><h5 id="addEventListener"><a href="#addEventListener" class="headerlink" title="addEventListener"></a><code>addEventListener</code></h5><p><strong>注意：通过这种方式，可以同时绑定多个同类型事件。</strong></p><ul><li>第一个参数：事件的类型，不需要加<code>on</code>前缀。</li><li>第二个参数：是函数执行的内容。</li><li>第三个参数：冒泡还是捕获<code>false</code>为冒泡，<code>true</code>为捕获，默认为冒泡<code>false</code>。</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript">ele<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是绑定的第一个事件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ele<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是绑定的第二个事件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="attachEvent"><a href="#attachEvent" class="headerlink" title="attachEvent"></a><code>attachEvent</code></h5><ul><li>第一个参数：<code>on</code> + 事件类型。</li><li>第二个参数：是函数，需要执行的代码。</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript">ele<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'onclick'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是绑定的第一个事件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ele<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'onclick'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是绑定的第二个事件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h5><p>存在兼容性的问题，可以自己通过封装函数解决兼容问题。</p><blockquote><p>addEventListener：-ie 8 以上版本的浏览器支持，<strong>顺序绑定 -&gt; 顺序执行</strong></p></blockquote><blockquote><p>attachEvent：**-ie 10 和 ie 9，顺序绑定 顺序执行。-ie 8 及以下是顺序绑定 -&gt; 倒叙执行。**</p></blockquote><h4 id="解绑事件"><a href="#解绑事件" class="headerlink" title="解绑事件"></a>解绑事件</h4><h5 id="removeEvent-‘事件类型’，fn"><a href="#removeEvent-‘事件类型’，fn" class="headerlink" title="removeEvent(‘事件类型’，fn)"></a><code>removeEvent</code>(‘事件类型’，fn)</h5><blockquote><p>addEventListener -&gt; removeEventListener 解绑的时候，事件类型和事件处理函数(<strong>地址</strong>)必须是一样的。</p></blockquote><p><strong>注意：需要解绑的时候，事件处理函数 fn 不能是匿名函数，否则无法正常解绑。fn 在绑定和解绑过程中，书写结构要完全保持一致。</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 注意：由于匿名 fn地址不一样 这种方式 解绑不了</span>ele<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Error</span>document<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ele<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 采用这种方式进行函数解绑</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ele<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ele<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h5 id="detachEvent-‘事件类型’，fn"><a href="#detachEvent-‘事件类型’，fn" class="headerlink" title="detachEvent(‘事件类型’，fn)"></a><code>detachEvent</code>(‘事件类型’，fn)</h5><p>要求同上。</p><blockquote><p>attachEvent -&gt; detachEvent</p></blockquote><hr><h3 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a><strong>阻止默认事件</strong></h3><p>比如<code>a</code>标签有<code>href</code>时，会自动跳转，如果要阻止这个行为：</p><blockquote><p>方式一：e.parentDefault() 非 IE 浏览器</p></blockquote><blockquote><p>方式二：return false; 使用 return false 阻止默认事件，只能将 return false 放在函数的最后面</p></blockquote><blockquote><p>方式三：e.returnValue &#x3D; false；</p></blockquote><h3 id="事件冒泡与事件捕获"><a href="#事件冒泡与事件捕获" class="headerlink" title="事件冒泡与事件捕获"></a><strong>事件冒泡与事件捕获</strong></h3><p><strong>冒泡：从子元素到根元素，从小到大。捕获：从根元素到子元素，从大到小。</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* ​      inner ​        center ​          outer​            body​              html​                documwnt​                  window​    事件执行机制 冒泡 捕获​    */</span></code></pre><h4 id="阻止冒泡（存在低版本兼容）"><a href="#阻止冒泡（存在低版本兼容）" class="headerlink" title="阻止冒泡（存在低版本兼容）"></a>阻止冒泡（存在低版本兼容）</h4><blockquote><p>e.stopPropagation(); or e.cancelBubble &#x3D; true;</p></blockquote><p>只有绑定了同类型事件才会触发冒泡。</p><p>阻止冒泡机制，只针对事件源本身，如果通过事件委派的形式为其子元素添加事件，那么就不能对其子元素实行阻止冒泡</p><hr><h3 id="事件委派"><a href="#事件委派" class="headerlink" title="事件委派"></a><strong>事件委派</strong></h3><p>把这个事件绑定在父元素身上，然后由父元素委派给子元素。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 通过 e.target 去判断 目标源元素是哪一个</span>  <span class="token comment">// console.log(e.target)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>className <span class="token operator">==</span> <span class="token string">'dv'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'点到小的了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 比如这里，设置阻止冒泡就会失效</span>    <span class="token comment">//e.target.stopPropagation()</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 土豆の学习笔记 </category>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 事件冒泡 </tag>
            
            <tag> 事件委派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jest测试框架搭建和简单使用</title>
      <link href="/notes/jest/"/>
      <url>/notes/jest/</url>
      
        <content type="html"><![CDATA[<h3 id="了解测试用例和单元测试"><a href="#了解测试用例和单元测试" class="headerlink" title="了解测试用例和单元测试"></a>了解测试用例和单元测试</h3><ul><li><p>测试用例：是为某个特殊目标而编制的一组测试输入、执行条件以及预期结果，测试是否满足特定需求；</p></li><li><p>单元测试：(是测试的级别)。unit testing 针对某一个功能的[最小部分(单元)]测试，比如(函数？类？)的执行结果是否符合预期。</p><blockquote><p>不同的企业可能对不同测试级别有不同的称谓，比如单元测试、增量测试、集成测试、回归测试、冒烟测试….. 谷歌对此创立了自己的命名方式：小型测试(具体到某个函数？)、中型测试(多个模块之间交互)、大型测试(端对端？系统整体验证)。</p></blockquote></li></ul><span id="more"></span><h3 id="了解快照测试"><a href="#了解快照测试" class="headerlink" title="了解快照测试"></a>了解快照测试</h3><blockquote><p>快照测试：例如对 vue 的测试，就是将 vue 渲染的 dom 结果序列化成 string，然后存入到 snapshot 文件夹下，后缀为.snap, 如果是首次则会新建，不是首次，那么以后的每次测试，如果是基于快照的，就会那快照的内容与当前执行的内容做比较，如果不同，则抛出异常告知变更项；<br>快照测试一般用于代码趋于稳定的版本，提升测试的稳定性和速度；</p></blockquote><h3 id="jest-环境搭建"><a href="#jest-环境搭建" class="headerlink" title="jest 环境搭建"></a>jest 环境搭建</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> jest-project<span class="token builtin class-name">cd</span> jest-project/<span class="token comment"># 项目初始化及依赖安装</span><span class="token function">npm</span> init -y<span class="token comment"># jest 安装.. 注意版本号 28版本以后 需要另外再安装 jest-environment-jsdom</span><span class="token function">yarn</span> <span class="token function">add</span> jest@24.8.0 --dev<span class="token comment"># scripts 添加指令</span>test: <span class="token string">"jest"</span><span class="token comment"># test 文件改动 自动执行 jest</span><span class="token string">"test:debug"</span><span class="token builtin class-name">:</span> <span class="token string">"jest --watchAll"</span><span class="token comment"># 初始化 jest 配置文件 (npx xx 可以理解为寻址执行(优先找$path,再从node_modules查找)，如果xx存在，那么就执行这个exe， 不存在则安装再执行)</span><span class="token comment"># 执行结束会根据选项,生成对应配置文件 jest.config.js|ts</span>npx jest --init√ Would you like to use Typescript <span class="token keyword">for</span> the configuration file? <span class="token punctuation">..</span>. no√ Choose the <span class="token builtin class-name">test</span> environment that will be used <span class="token keyword">for</span> testing » jsdom <span class="token punctuation">(</span>browser-like<span class="token punctuation">)</span>√ Do you want Jest to <span class="token function">add</span> coverage reports? <span class="token punctuation">..</span>. <span class="token function">yes</span>√ Which provider should be used to instrument code <span class="token keyword">for</span> coverage? » babel√ Automatically <span class="token function">clear</span> mock calls and instances between every test? <span class="token punctuation">..</span>. <span class="token function">yes</span><span class="token comment"># 生成覆盖率检测文件</span>npx jest --coverage or 添加执行命令 <span class="token function">yarn</span> coverage: <span class="token string">"jest --coverage"</span></code></pre><h4 id="默认配置项"><a href="#默认配置项" class="headerlink" title="默认配置项"></a>默认配置项</h4><p><a href="https://github.com/vuejs/vue-cli/blob/dev/packages/%40vue/cli-plugin-unit-jest/presets/default/jest-preset.js"><code>default-jest-config</code></a></p><h3 id="测试用例简单示例"><a href="#测试用例简单示例" class="headerlink" title="测试用例简单示例"></a>测试用例简单示例</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 添加测试的主文件 例如：feature1.js</span><span class="token comment">// 测试对应测试文件 feature1.test.js</span><span class="token comment">// 注意：jest 测试文件不需要具体指明文件名称 而是通过 test.js 标识</span><span class="token comment">// feature1.js</span><span class="token keyword">function</span> <span class="token function">myFn1TestAdd</span><span class="token punctuation">(</span><span class="token parameter">arg0<span class="token punctuation">,</span> arg1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> arg0 <span class="token operator">+</span> arg1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">myFn2TestLogic</span><span class="token punctuation">(</span><span class="token parameter">arg0<span class="token punctuation">,</span> arg1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> arg0 <span class="token operator">&lt;</span> arg1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span> myFn1TestAdd<span class="token punctuation">,</span> myFn2TestLogic <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// feature1.test.js</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> myFn1TestAdd<span class="token punctuation">,</span> myFn2TestLogic <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./feature1.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test number summation'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">myFn1TestAdd</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'compare number'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">myFn2TestLogic</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">myFn2TestLogic</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>理解：test(用例描述，执行回调) 创建一个测试用例， expect 预期(实际值：这里是测试的函数，那么即为函数的返回值) toBe[匹配器 通过 object.js(绝对比较，类似 === 效果) 比较](期望值)，not 可以理解为取反</code></p><h3 id="部分Api学习"><a href="#部分Api学习" class="headerlink" title="部分Api学习"></a>部分<code>Api</code>学习</h3><ul><li>自定义 matchers</li></ul><p>​ <code>等值判断</code></p><ul><li><p><code>toEqual</code> 匹配器: 递归比较对象属性实例，和 <code>toBe</code>匹配器的区别在于 <code>toBe</code> 类似 <code>===</code> 的方式进行绝对匹配，实际运用中 <code>toEqual</code>更适合对比引用类型数据的预期输出；</p></li><li><p><code>toStrictEqual</code>匹配器：严格比较，例如：<code>[, , 1] 和 [undefined, undefined, 1]</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// expect(&#123; a: 1, b: 'aa', c: false &#125;).toEqual(&#123; a: 1, b: 'aa' &#125;); // false</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toStrictEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">__proto__</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">q</span><span class="token operator">:</span> <span class="token string">'eq'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">__proto__</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">q</span><span class="token operator">:</span> <span class="token string">'eq'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toStrictEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token comment">// expect([, , 1]).toStrictEqual([undefined, undefined, 1]); // false</span></code></pre></li><li><p><code>toBeCloseTo(number, numDigits?)</code> 匹配器： 解决<code>JavaScript</code> 浮点数相等比较问题</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test toBeCloseTo'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCloseTo</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p>​ <code>数字大小比较</code></p><ul><li><p><code>toBeGreaterThan</code> <code>toBeGreaterThanOrEqual</code> <code>toBeLessThan</code> <code>toBeLessThanOrEqual</code> (参数均为<code>number | bigint</code>)匹配器: 是否大于、大于等于、小于、小于等于值；</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test toBeLessThan toBeGreaterThan'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeLessThan</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThan</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p>​ <code>类型判断</code></p><ul><li><p><code>toBeNull</code> <code>toBeUndefined</code> <code>toBeDefined </code> 匹配器(无参数)：判断这个值是否为 <code>null、undefined、不为undefined</code>；</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test undefined'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> a<span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeUndefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>  a <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeUndefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>  a <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeUndefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><code>toBeTruthy</code> <code>toBeFalsy</code> <code>toBeNaN</code> 匹配器(无参数)：判断一个值经过隐式转换后为 <code>true、false</code>(类似 1，’test’ 等等 <code>toBeTruthy()</code> 则达到预期)、判断一个值是否为 <code>NaN</code>(和<code>toBeTruthy/toBeFalsy</code> 不同的是，这里为显示比较);</p></li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test NaN'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token string">'11'</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeNaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>  n <span class="token operator">=</span> <span class="token string">'11ds'</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeNaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>  n <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeNaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>toBeInstanceOf(class)</code>匹配器：判断是否为某个类的实例对象；</li></ul><p>​ <code>判断是否包含某个值</code></p><ul><li><p><code>toMatch(regexp | string) </code>匹配器：判断字符串是否能够根据<code>match</code>参数提取片段(简言之，<code>match</code> 为 <code>regexp</code> 时，类似<code>reg.test(str)</code>, 类型为 <code>string</code> 时类似 <code>str.includes(match) or str.indexOf(match) &gt; -1</code>);</p></li><li><p><code>toMatchObject(obj)</code> 匹配器：判断 obj 是否为某个对象的子集</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> be<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> kit<span class="token operator">:</span> <span class="token punctuation">&#123;</span> am<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'oven'</span><span class="token punctuation">,</span> <span class="token string">'stove'</span><span class="token punctuation">,</span> <span class="token string">'washer'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> area<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> ob <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  kit<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    am<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'oven'</span><span class="token punctuation">,</span> <span class="token string">'stove'</span><span class="token punctuation">,</span> <span class="token string">'washer'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'the  has my desired features'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchObject</span><span class="token punctuation">(</span>ob<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// pase</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><code>toContain(item)</code> 匹配器：判断数组是否包含了某个 <code>item</code>,类似 <code>arr.includes(&#39;xx&#39;)</code>;</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test toContain'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">,</span> <span class="token string">'cc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p>​ <code>判断是否抛出异常</code></p><ul><li><p><code>toThrow()</code> 匹配器：判断<code>expect</code>传入值执行过程中发生异常; 注意 <code>throw 抛出的异常值 要同 toThrow 参数一致</code>。此时 <code>expect 传入的不再是具体的值，而是可执行回调</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test toThrow'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">fn1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">fn2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">fn3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>fn1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>  <span class="token comment">// expect(fn2).toThrow('aa'); // false</span>  <span class="token function">expect</span><span class="token punctuation">(</span>fn3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>  <span class="token comment">// expect(fn3).toThrow('aa'); // false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="让jest-支持-esModule"><a href="#让jest-支持-esModule" class="headerlink" title="让jest 支持 esModule"></a>让<code>jest</code> 支持 <code>esModule</code></h3><h4 id="方案一：添加-babel-转译"><a href="#方案一：添加-babel-转译" class="headerlink" title="方案一：添加 babel 转译"></a>方案一：添加 <code>babel</code> 转译</h4><p>​ <code>jest 运行在 node 环境中，遵循 commonJs 规范，无法识别 EsModule 类似 export/import ... form ...模块导入导出，因此添加 babel 实现转译，将 EsModule 转换为 commonJs 的导入导出规范；</code></p><ul><li><p><code>@babel/core@7.4.5</code> 指定所有的转译都是用本地配置文件 <code>.babelrc or package.json</code>；</p></li><li><p><code>@babel/preset-env@7.4.5</code> 转换器核心，用作语法转换编译；</p><blockquote><p>yarn add @babel&#x2F;<a href="mailto:&#99;&#111;&#114;&#x65;&#64;&#x37;&#46;&#x34;&#46;&#53;">&#99;&#111;&#114;&#x65;&#64;&#x37;&#46;&#x34;&#46;&#53;</a> @babel&#x2F;<a href="mailto:&#112;&#x72;&#101;&#115;&#101;&#116;&#x2d;&#x65;&#110;&#x76;&#x40;&#55;&#46;&#52;&#46;&#53;">&#112;&#x72;&#101;&#115;&#101;&#116;&#x2d;&#x65;&#110;&#x76;&#x40;&#55;&#46;&#52;&#46;&#53;</a> –dev</p></blockquote></li><li><p><code>yarn test</code> 执行 <code>jest</code> 前，<code>jest 的 babel-jest</code> 组件会优先检测是否安装了 <code>babel</code>，检测 <code>.babelrc</code> 配置文件是否存在，然后再根据 <code>babel</code>转译后的结果执行<code>test</code></p></li><li><p>添加 <code>.babelrc</code> 配置文件，指定预设规则；<code>对象：presets 为[&#39;presetName&#39;, options: any][]类型，每个 item 为一个预设</code>，预设：就是提供一个预定的配置项，然后与当前配置做合并；</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span>      <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"targets"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token property">"node"</span><span class="token operator">:</span> <span class="token string">"current"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h4 id="方案二：配置-package-json"><a href="#方案二：配置-package-json" class="headerlink" title="方案二：配置 package.json"></a>方案二：配置 <code>package.json</code></h4><ul><li><p>将 <code>package.json</code> 的 <code>type</code> 字段设置为 <code>module</code></p></li><li><p>每次执行 <code>jest</code> 指定环境变量</p><blockquote><p>&#x2F;&#x2F; package.json</p><p>{</p><p>&#x2F;&#x2F; …,</p><p>“type”: “module”,</p><p>“scripts”: {</p><p>​ <code>&quot;test&quot;: &quot;NODE_OPTIONS=--experimental-vm-modules jest&quot;</code></p><p>}</p><p>}</p></blockquote></li></ul><h3 id="测试-typescript"><a href="#测试-typescript" class="headerlink" title="测试 typescript"></a>测试 <code>typescript</code></h3><h4 id="方案一：仅编译，不做类型检测"><a href="#方案一：仅编译，不做类型检测" class="headerlink" title="方案一：仅编译，不做类型检测"></a>方案一：仅编译，不做类型检测</h4><p><code>通过 @babel/preset-typescript 预设，完成 typescript 的转译</code></p><blockquote><p>yarn add @babel&#x2F;preset-typescript –dev</p><p>&#x2F;&#x2F; 配置 .babelrc 转换器规则</p><p>{ presets: [ [‘@babel&#x2F;preset-typescript’] ] }</p></blockquote><h4 id="方案二：编译并对类型检测"><a href="#方案二：编译并对类型检测" class="headerlink" title="方案二：编译并对类型检测"></a>方案二：编译并对类型检测</h4><p><code>普通的 javascript 测试，使用内置的 babel-jest 组件。那么为 typescript 编写测试用例，则需要安装 ts-jest 组件；与此同时，安装 jest 的类型依赖，用于 .test.ts 中类型的注入。</code></p><blockquote><p>&#x2F;&#x2F; 建议 @types&#x2F;jest 版本同 jest 主次版本一致</p><p>yarn add ts-jest @types&#x2F;jest –dev</p><p>&#x2F;&#x2F; 配置 <code>jest.config.js</code> , 添加 preset: <code>&#39;ts-jest&#39;</code> 预设配置：即为预配置项。由 <code>ts-jest</code> 提供配置项，然后与当前配置做合并，这也是为什么加了预设过后，当前配置文件就不需要再向 <code>moduleFileExtensions</code> 内添加 ts 后缀识别，也不需要添加<code> transform &#123;&#39;^.+\\.tsx?$&#39;: tsJest&#125;</code>；告诉 <code>jest, .tsx 文件通过 require.resolve(&#39;ts-jest&#39;) 编译处理</code></p><p><code>&#123; ...otherOptions, preset: &#39;ts-jest&#39; &#125;</code></p></blockquote><h3 id="测试异步结果"><a href="#测试异步结果" class="headerlink" title="测试异步结果"></a>测试异步结果</h3><p><code>asyncFuntion.ts</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">myRequestFn1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> rej<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> success<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="方案一：接受一个参数-done"><a href="#方案一：接受一个参数-done" class="headerlink" title="方案一：接受一个参数 done"></a>方案一：接受一个参数 <code>done</code></h4><p><code>不管 done 在 test 回调函数内是否有被使用，整个回调都会被判定为异步函数，需要等待 done() 结束执行。有点类似 promise.resolve 结束 promise。等待超时后结果为 false</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 直接在回调内的 promise.then 内写的语句不会被 test 检测，无关 equal 的值，结果都是 pass</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test Done'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">myRequestFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> success<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等待超时，结果异常</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test Done'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">myRequestFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> success<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 正常执行</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test Done'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">myRequestFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> success<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>    <span class="token comment">// expect(data).toEqual(&#123; success: false &#125;); // false</span>    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="方案二：return-返回一个-promise-结果"><a href="#方案二：return-返回一个-promise-结果" class="headerlink" title="方案二：return 返回一个 promise 结果"></a>方案二：<code>return</code> 返回一个 <code>promise</code> 结果</h4><p><code>返回一个 promise 结果，test 代码也可以被正常执行</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test async return'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">myRequestFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> success<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>雷：当 return 返回的 promise 不包含错误时，catch 不会被执行，那么 .catch 内的 expec 始终都会被 pass；此时，通过添加 expect 断言来判断是否覆盖了 catch 测试语句</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test promise.catch return'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 参数为 expect 的执行此时</span>  <span class="token keyword">return</span> <span class="token function">myRequestFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeUndefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="方案三：async-await-推荐"><a href="#方案三：async-await-推荐" class="headerlink" title="方案三：async await (推荐)"></a>方案三：<code>async await</code> (推荐)</h4><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test async await'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">myRequestFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// expect(res).toBeUndefined(); // failed</span>  <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> success<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// pass</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="生命周期钩子函数"><a href="#生命周期钩子函数" class="headerlink" title="生命周期钩子函数"></a>生命周期钩子函数</h3><ul><li><p><code>beforeAll</code> <code>beforeEach</code> <code>afterEach</code> <code>afterAll</code> ：所有测试用例开始之前执行、每个测试用例开始之前执行、每个测试用例结束之后执行、所有测试用例结束之后执行。</p></li><li><p>作用域:</p><blockquote><p>钩子函数在父级分组可作用于子级，类似继承</p><p>钩子函数同级分组作用域互不干扰，各起作用</p><p>先执行外部的钩子函数，再执行内部的钩子函数</p></blockquote><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 分组和钩子函数理解</span><span class="token comment">// 父级分组</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a</span>  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b 这里父级的钩子函数会作用于子分组, 比如 beforeEach 在子分组的每个 test 执行之前会被触发</span>  <span class="token comment">// 子分组</span>  <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'test a'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// c</span>    <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// d</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test a.a'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// e</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test a.b'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// f</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'test b'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// g</span>    <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// h</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test b.a'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test b.b'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// j</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// a -> c -> b -> d -> e -> b -> d -> f -> g -> b -> h -> i -> b -> h -> j</span></code></pre><p><code>简言之，同级从上到下执行，只有执行到该子级后，该子级的周期钩子函数才会被触发，例如 beforeALL；然后当该及的 beforeALL 钩子执行后，开始从最外向内级依次执行 beforeEach ,再从上到下执行该级的 test 用例。注意：after 钩子与 before 相反，after 钩子是由内向外级依次执行。 类似 vue 的父子组件的生命周期执行顺序</code>；</p></li></ul><h3 id="测试用例的分组"><a href="#测试用例的分组" class="headerlink" title="测试用例的分组"></a>测试用例的分组</h3><p>​ <code>当测试用例足够多时，过量的测试用例 不方便管理及查看。此时使用 describe(name, fn) 对测试用例分组；注意：分组后还可以进行子分组，最外层可以理解为一个 describe</code>。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 原:</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test a.a'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test a.b'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test b.a'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test b.b'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 分组后：(将原有的 test 用例拷贝到 describe 回调内即可完成分组)</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'test a'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test a.a'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test a.b'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'test b'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test b.a'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test b.b'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="其他-API"><a href="#其他-API" class="headerlink" title="其他 API"></a>其他 <code>API</code></h3><ul><li><code>test.only(name, fn)</code> 当存在 <code>test.only</code> 时，其他的测试用例会被 skipped 跳过，只执行当前的测试用例，通常用于 <code>debug</code></li></ul><h3 id="测试-Vue-组件"><a href="#测试-Vue-组件" class="headerlink" title="测试 Vue 组件"></a>测试 <code>Vue</code> 组件</h3><p><code>配合 @vue/test-utils 提供的 api，完成 vue 组件的 TDD(单元) 测试</code></p><ul><li><p>在项目中，能够被正确识别的测试文件，通常被指定在 <code>**/tests/unit/**/*.spec.[jt]s?(x) or **/__tests__/*.[jt]s?(x) </code></p></li><li><p><code>it</code>(断言)，<code>test</code>测试，类似 it。</p></li><li><p>通过 <code>@vue/test-utils 提供的 mount or shadowMount 函数来挂载并渲染 vue</code>。</p></li><li><p>由于 <code>jest</code> 默认配置包含了对 <code>@</code> 符号路径的映射，所以可以直接使用。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// xx.spec.ts</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> mount<span class="token punctuation">,</span> shadowMount <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@vue/test-utils'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token constant">XX</span> <span class="token keyword">from</span> <span class="token string">'@/xxx/Xx.vue'</span><span class="token punctuation">;</span> <span class="token comment">// 由于配置了引用后缀，这里可以不写 .vue</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'测试一个 XX 组件功能'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'测试 A 函数'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shadowMount</span><span class="token punctuation">(</span><span class="token constant">XX</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 断言 add TDD</span>    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatch</span><span class="token punctuation">(</span><span class="token string">'测试'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><code>shadowMount 和 mount</code> 的区别：<a href="https://github.com/holylovelqq/vue-unit-test-with-jest/issues/4">参考</a></p><p><code>渲染区别：</code></p><pre class="language-none"><code class="language-none">mount：踏踏实实的渲染，会将被测试组件中使用到的子子孙孙组件完全渲染。最终结果内肯定不存在自定义组件名作为标签名，包括插件提供的V-btn之类的dom结构，全部不存在，彻底渲染到&lt;div&gt;&lt;span&gt;&lt;p&gt;之类shallowMount：浅渲染，与mount相反，既不会渲染子组件，更不用提孙子辈的组件，仅限测试组件本身。子组件会原原本本的显示子组件的存根，当使用stubs的时候，子组件存根是可以自定义显示内容的，如果未自定义，将会显示子组件名-stub的标签名，如&lt;my-componet-stub&gt;&lt;&#x2F;my-componet-stub&gt;</code></pre><p><code>场景</code>：</p><pre class="language-none"><code class="language-none">mount：多数情况出现在snapshot中使用，而且也只是部分snapshot中必须使用mount。下面将说明何种情况：当被测试组件内包含子组件，且子组件的dom结构通过slot在被测试组件内定义的时候，必须使用mount来测试snapshot。hallowMount：所有必须使用mount的情况以外都使用shallowMount，使用mount将更大的消耗时间和性能，----&gt; 实际上所有测试都可以不使用mount，但是鉴于测试的复杂性，有可能会出现用shallowMount怎么也报错的情况，但是改成mount就能测试通过</code></pre><p><code>基本准则：所有使用 shallowMount 的地方都可以用 mount 替换，但是但凡能使用 shallowMount 的地方坚决不用 mount；</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 土豆の学习笔记 </category>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript 作用域理解</title>
      <link href="/notes/javascript-scope/"/>
      <url>/notes/javascript-scope/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是作用域？"><a href="#什么是作用域？" class="headerlink" title="什么是作用域？"></a>什么是作用域？</h3><p>域：范围、区域</p><p>作用域：变量起作用的一个域 –&gt; 变量起作用的一个范围</p><p>那么，在<code>js</code>中的作用域又是怎么设定的呢？直接写在<code>script</code>脚本的最外层和写在函数体内又有啥不同？</p><span id="more"></span><h3 id="作用域分类"><a href="#作用域分类" class="headerlink" title="作用域分类"></a>作用域分类</h3><p>在<code>es5 即 ECMAscript5</code>根据范围的不同，作用域分为了<strong>全局作用域</strong>和<strong>局部作用域</strong>。<strong>这个标准中只有函数拥有局部作用域。</strong></p><p>在<code>es6 中新增了块作用域。</code></p><h4 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h4><p>在全局作用域下声明的变量就是全局变量。而<strong>全局作用域是唯一的，只有一个</strong>。</p><p>你可以理解为： <code>&lt;script&gt;</code>标签下的最外层变量或者函数、以及<strong>所有能够在<code>js</code>代码的任何地方能够访问的对象拥有全局作用域。</strong>，那么不难得知：**<code>window</code>对象拥有全局作用域。**</p><p>例如代码：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'test'</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    c <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> <span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>在这个代码片段中，变量<code>a</code>、函数<code>fn1，d</code>、属性<code>c（为什么是属性？）</code>，均能够在代码的任何地方进行访问（也是‘所谓的’处在最外层），都处在同一个全局作用域中。<code>fn1 中的 c 会不断向上寻址，直到全局作用域，如果没有任何 var 声明，那么它的赋值则会被当做是 window 的外挂属性进行设置并赋值，让使用者产生了一种不用声明的假象。</code></p><h4 id="局部作用域（私有作用域）"><a href="#局部作用域（私有作用域）" class="headerlink" title="局部作用域（私有作用域）"></a>局部作用域（私有作用域）</h4><p><code>es5</code>标准中，只有函数有私有作用域。在函数体内定义的一切变量和函数，影响范围和可访问范围仅在函数体内，如上面代码片段中的变量<code>b 和 f</code>。</p><blockquote><p><strong>每个函数都有一个独立的私有作用域。</strong></p></blockquote><h4 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a><strong>块级作用域</strong></h4><h5 id="why"><a href="#why" class="headerlink" title="why?"></a><strong>why?</strong></h5><p>这个是<code>es6</code>提出的概念，那么为什么需要块作用域？</p><blockquote><p>块作用域的出现，避免了内存泄漏，例如下面代码：用来计数的循环变量泄露为全局变量</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>预解析导致的误判，误判外层变量被覆盖。<del>（这个问题我认为影响还没那么大，毕竟只要写的够规范，就不存在）</del></p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  i <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>大家可以猜一下结果，我先说错误答案：<del><code>10, 20</code></del>，相信有一部分同志已经绕进去了。</p><p>其实细看，在代码运行到<code>fn()</code>时，开始对<code>fn</code>函数体进行预解析，这个过程也可以理解为‘变量提升’，然后再开始执行函数体代码，此时的<code>i *= 10</code>其实是对局部变量的赋值操作。说到这就不难发现，此时的全局变量<code>i</code>值为<code>1</code>。</p><h5 id="定义和规范"><a href="#定义和规范" class="headerlink" title="定义和规范"></a>定义和规范</h5><p>任何<code>&#123;&#125;</code>包裹的代码都可以称之为块，而包裹在内的变量都会受块作用域的影响。而让这个块作用域生效的，正是<code>let 和 const</code>。</p><p>通过<code>let</code>和<code>const</code>声明的变量，无法在块的外部访问。而两者的区别，就是<code>let</code>的值可以被修改，<code>const</code>定义的是常量，无法被修改。</p><p>与<code>var</code>的区别：</p><blockquote><p><strong>let 和 const 声明的变量，不会被提前预解析，没有所谓的变量提升特性，而是‘暂时性死区（temporal dead zone）’特性</strong>。</p></blockquote><blockquote><p><strong>let 和 const 声明的变量，仅在‘块作用域’中生效。</strong></p></blockquote><h3 id="作用域变量的访问规则（变量提升）"><a href="#作用域变量的访问规则（变量提升）" class="headerlink" title="作用域变量的访问规则（变量提升）"></a>作用域变量的访问规则（<strong>变量提升</strong>）</h3><blockquote><p>要使用某个变量，会先在自己的作用域里查找，如果找到，那就直接使用（<strong>如果使用这个变量的语句在声明它之前，那么此时使用的这个变量值为 undefined，同时应该注意：只有 var 声明的变量允许在声明前访问</strong>），如果找不到，就往上一级查找，如果找到，就直接拿来用，如果还是找不到，再继续… 往上一级查找，直到全局作用域。 如果最终找到，那就直接用，找不到那就报错 xxx is not defined.</p></blockquote><blockquote><p>变量查找，只能往上查找，不能往下。</p></blockquote><p>总结就是：<strong>全局不能访问局部，局部可以拿到全局。</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>  m <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span><span class="token punctuation">&#125;</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>n</code>会优先从局部变量读取，<code>m</code>局部没有声明，向上寻址，在全局作用域中找到。</p><h3 id="作用域变量的赋值规则"><a href="#作用域变量的赋值规则" class="headerlink" title="作用域变量的赋值规则"></a>作用域变量的赋值规则</h3><p>注意：<strong>赋值的这个变量的寻址过程需要遵循作用域变量的访问规则</strong>。</p><blockquote><p>如果自己的作用域，有这个变量，那么直接给自己作用域的这个变量赋值。</p></blockquote><blockquote><p>如果自己的作用域没有这个变量，那就往上一级查找，如果找到，那就赋值，如果没有找到，就继续往上一级查找…直到全局作用域，如果找到，那就赋值，找不到就会被当做是 window 的一个属性，并进行赋值。</p></blockquote><p><strong>注意这个寻找的过程，只有 var 变量允许在声明之前赋值，let 不允许。</strong></p><h3 id="作用域变量的生命周期"><a href="#作用域变量的生命周期" class="headerlink" title="作用域变量的生命周期"></a>作用域变量的生命周期</h3><p><code>就是作用域变量在内存之中存活的时间。</code></p><blockquote><p>全局变量：生命周期是和程序同步的， 程序不关闭，变量就一直存在。</p></blockquote><blockquote><p>局部变量：生命周期是和函数执行同步的，函数执行结束变量就被删除了。</p></blockquote><blockquote><p>块作用域变量：仅存活与块代码执行时，执行结束内存就会释放。</p></blockquote><p>综上，全局变量的大量使用会导致程序变得更重。如果代码逻辑写的不够严谨，很容易造成内存泄漏吗（例如：不声明变量直接赋值，会挂载到 window 对象），影响到我们程序的运行效率。<del>如果可能，还是少设计一点全局变量吧！对大家都好…hh</del></p><blockquote><p>建议：任何一个独立的 script 标签下的代码，都应用匿名函数包裹，并自调用。避免污染全局，并造成其他未知的程序错误。</p></blockquote><p>例如：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 或者：这是自调用的几种写法，推荐用上面那种，下面的仅做了解</span><span class="token operator">~</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">!</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 土豆の学习笔记 </category>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 作用域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转] 2021高频前端面试题汇总之JavaScript篇</title>
      <link href="/posts/interview-javascript/"/>
      <url>/posts/interview-javascript/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/6940945178899251230"><img src="/images/posts/interview-javascript/p1.png" alt="&#39;interview-javascript-p1&#39;" loading="lazy"></a></p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 土豆の收藏安利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vi、vim编辑器学习</title>
      <link href="/share/vi-vim/"/>
      <url>/share/vi-vim/</url>
      
        <content type="html"><![CDATA[<h3 id="Why-study"><a href="#Why-study" class="headerlink" title="Why study?"></a>Why study?</h3><p>在<code>linux</code>系统中，如果需要对文件进行修改编辑，一般可以使用<code>vi/vim</code>编辑器。<code>vim</code>是<code>vi</code>的升级版本，所以同样兼容<code>vi</code>的所有指令，它们都是多模式编辑器。</p><p><code>git-bash</code>工具在<code>windows</code>中实现了该功能，因此可以直接在<code>git-bash</code>中使用<code>vi/vim</code>。</p><p><del>一次偶然的需求，在<code>rancher</code>管理平台里对正在运行的容器日志在线修改，领导随口提了一句用<code>vi</code>，当时的我很懵逼，也很尴尬。🙄🤥😌 然后就查阅了相关资料，自己动手敲了试了一下，感觉还是有必要学习一下。</del></p><span id="more"></span><h3 id="vi-vim模式介绍"><a href="#vi-vim模式介绍" class="headerlink" title="vi/vim模式介绍"></a><code>vi/vim</code>模式介绍</h3><p><code>vi</code>编辑器有两种操作模式：</p><blockquote><p><strong>命令模式</strong>：输入的每个字符都是对正在编辑的文本文件执行某些操作的命令。<strong>部分按键按下会切换命令模式至插入模式</strong>，后面详细介绍。</p></blockquote><blockquote><p><strong>插入模式</strong>：输入的每个字符都会添加到文件中的文本中。<strong>按&lt;Esc&gt; ( Escape ) 键关闭插入模式，同时光标会向前移一位</strong>。</p></blockquote><p><strong><code>注意：UNIX 和vi都区分大小写。确保不要使用大写字母代替小写字母；否则结果可能不会是你所期望的。</code></strong></p><hr><h3 id="编辑器的启动和关闭"><a href="#编辑器的启动和关闭" class="headerlink" title="编辑器的启动和关闭"></a>编辑器的启动和关闭</h3><h4 id="启动vi-vim编辑器（进入vi）"><a href="#启动vi-vim编辑器（进入vi）" class="headerlink" title="启动vi/vim编辑器（进入vi）"></a>启动<code>vi/vim</code>编辑器（进入<code>vi</code>）</h4><blockquote><p>vi 文件名. （说明：如果文件存在，则打开该文件，如果参文件不存在，则会新建该文件。不是立即创建，而是在保存的时候创建）</p></blockquote><p><strong>注意</strong>：如果在<code>vi</code>编辑过程中遇到不可逆的操作导致强制退出的情况，直接输入上面命令会抛异常。当然可以在抛异常后根据提示输入<code>r</code>恢复；也可以直接在<code>vi</code>启动的时候添加<code>-r</code>参数避免这个异常提示。</p><blockquote><p>vi -r 文件名</p></blockquote><p>进入过后，默认是插入模式，可以对文件内容做任意修改。</p><h4 id="关闭vi-vim编辑器"><a href="#关闭vi-vim编辑器" class="headerlink" title="关闭vi/vim编辑器"></a>关闭<code>vi/vim</code>编辑器</h4><p>通常在你想离开<code>vi</code>界面，并且保存你所修改的内容的时候使用。或者不保存直接退出。</p><blockquote><p><strong>只要键入冒号(:)，光标就会移动到底部命令行</strong>。</p></blockquote><blockquote><p>输入 <strong>:wq 或者 :x</strong> 回车即可完成保存并退出；</p></blockquote><blockquote><p>输入 <strong>:q! 或者 :q</strong> 回车即可不保存直接退出；</p></blockquote><hr><h3 id="编辑器中的光标移动"><a href="#编辑器中的光标移动" class="headerlink" title="编辑器中的光标移动"></a>编辑器中的光标移动</h3><p>与其他编辑器不同的是，鼠标无法在<code>vi</code>操作界面移动或者指定光标的位置，只能通过键盘完成这个操作。</p><p>在某些平台上，可以直接使用方向（箭头）键，但是部分不包括箭头键的键盘又该如何使用呢？<code>vi</code>也是考虑过这个问题，可以通过字母键来移动。</p><p>值得一提的是：方向键在两种模式下均可使用，而<strong>代替键仅可在命令模式下使用</strong>。（避免与插入模式下输入的字符冲突）</p><blockquote><p>左：h 或者 ← 键，将光标左移一个字符。</p></blockquote><blockquote><p>右：l 或者 → 键，将光标又以一个字符。</p></blockquote><blockquote><p>上：k 或者 ↑ 键，将光标上移一行。</p></blockquote><blockquote><p>下：j 或者 ↓ 键，将光标下移一行。</p></blockquote><blockquote><p>跳转到首行：gg 或者 :0 或者 :1 键</p></blockquote><blockquote><p>跳转到最后一行：G 键</p></blockquote><blockquote><p>跳转至 n 行：输入 :n 回车，这里 n 代表数字。</p></blockquote><blockquote><p>跳转至当前行行头：0 或者 ^ 键。</p></blockquote><blockquote><p>跳转到当前行行尾：$ 键。</p></blockquote><blockquote><p>跳转到上个单词的开头：b 键。</p></blockquote><blockquote><p>跳转到下个单词的开头：w 键。</p></blockquote><p><strong><code>注意：方向键（左右）只能在当前行的可编辑区域进行移动，不会跨行边界</code></strong></p><hr><h3 id="屏幕操作"><a href="#屏幕操作" class="headerlink" title="屏幕操作"></a>屏幕操作</h3><p>以下命令允许<code>vi</code>编辑器屏幕（或窗口）向上或向下移动几行并进行刷新。</p><blockquote><p>上翻一屏：Ctrl + b（PageUp）。</p></blockquote><blockquote><p>上翻半屏：Ctrl + u。</p></blockquote><blockquote><p>下翻一屏：Ctrl + f（PageDown）。</p></blockquote><blockquote><p>下翻半屏：Ctrl + d。</p></blockquote><hr><h3 id="撤销、删除和复制粘贴"><a href="#撤销、删除和复制粘贴" class="headerlink" title="撤销、删除和复制粘贴"></a>撤销、删除和复制粘贴</h3><h4 id="回退、撤销"><a href="#回退、撤销" class="headerlink" title="回退、撤销"></a>回退、撤销</h4><blockquote><p>Ctrl + u 撤消您刚才所做的一切（而非一步操作）。</p></blockquote><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><blockquote><p>删除整个当前行：dd</p></blockquote><blockquote><p>删除多行：dnd 或者 ndd，n 指的行数</p></blockquote><blockquote><p>删除单个字符：x，类似于 backspace 键效果</p></blockquote><blockquote><p>删除多个字符：nx，n 指的数字，从光标位置开始</p></blockquote><h4 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h4><blockquote><p>粘贴：p，将粘贴内容放到当前行文本之后。</p></blockquote><blockquote><p>复制当前行：yy</p></blockquote><blockquote><p>复制多行：nyy 或者 yny，n 值行数</p></blockquote><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p><del>反正我是没怎么用过这个修改指令，习惯使然，有这个需求的时候我都是先删除再添加，避免出错 🙈🙉🙊</del>详见末尾<strong>其他指令</strong>。</p><blockquote><p>光标位置的字符替换：r 键 + 输入你要替换的字符</p></blockquote><hr><h3 id="模式切换-and-插入操作"><a href="#模式切换-and-插入操作" class="headerlink" title="模式切换 and 插入操作"></a>模式切换 and 插入操作</h3><p>在命令模式下，想要输入文本内容，就需要切换到编辑模式。涉及的键有好几个，分别是<code>a i o s</code>，它们的区别：</p><blockquote><p>a：在光标后追加文本（光标会向后移动一位）</p></blockquote><blockquote><p>i：在光标前插入文本（光标位置不会变化）</p></blockquote><blockquote><p>o：新建并跳转至光标行的下一行</p></blockquote><blockquote><p>s：删除光标后一个字符，并切换至插入模式</p></blockquote><h3 id="文本搜索"><a href="#文本搜索" class="headerlink" title="文本搜索"></a>文本搜索</h3><p><del>光速打脸，刚说修改字符的命令没啥用，这就来了</del></p><p>场景：输入你要搜索的文本，替换为你想要的新内容。</p><blockquote><p>从上到下搜索：&#x2F; + 你要搜索的内容 + 回车</p></blockquote><blockquote><p>从下向上搜索：? + 你要搜索的内容 + 回车。</p></blockquote><blockquote><p>跳转至搜索到的下一个匹配项：n 键，一直按，一直向后匹配</p></blockquote><h3 id="获取行号"><a href="#获取行号" class="headerlink" title="获取行号"></a>获取行号</h3><blockquote><p>获取当前光标所在行的行号：:.&#x3D; 键回车</p></blockquote><blockquote><p>获取文件总行数（末尾行号）：:&#x3D; 键回车</p></blockquote><h3 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a><a href="https://www.cs.colostate.edu/helpdocs/vi.html">其他指令</a></h3>]]></content>
      
      
      <categories>
          
          <category> 土豆の教程分享 </category>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vi </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>emoji表情收藏分享</title>
      <link href="/posts/emoji-collect/"/>
      <url>/posts/emoji-collect/</url>
      
        <content type="html"><![CDATA[<blockquote><p>收集一些常用的 emoji，用他们来表达自己的情绪 😂。Emoji 虽然是文字，但是无法书写，必须使用其他方法插入文档 ，比如 CTRL C + CTRL V，此外也可以通过快捷键的方式插入，比如 windows 下的 win + 。</p></blockquote><span id="more"></span><h3 id="人脸情感类"><a href="#人脸情感类" class="headerlink" title="人脸情感类"></a>人脸情感类</h3><hr><p>😀😃😄😁😆😅🤣😂🙂🙃😉😊😇🥰😍🤩😘😗😚😙😋😛😜🤪😝🤑🤗🤭🤫🤔🤐🤨😐😑😶😏😒🙄😬🤥😌😔😪🤤😴😷🤒🤕🤢🤮🤧🥵🥶🥴😵🤯🤠🥳😎🤓🧐😕😟🙁😮😯😲😳🥺😦😧😨😰😥😢😭😱😖😣😞😓😩😫😤😠<br>😡🤬😈👿💀💩🤡👹👺👻👽👾🤖😺😸😹😻😼😽🙀😿😾💋<br>👋🤚🖐✋🖖👌✌🤞🤟🤘🤙👈👉👆🖕👇☝👍👎✊👊🤛🤜👏🙌👐🤲🤝🙏✍💅🤳💪🦵🦶👂👃🧠🦷🦴👀👁👅👄<br>👶🧒👦👧🧑👱👨🧔👨‍🦰👨‍🦱👨‍🦳👨‍🦲👩👩‍🦰👩‍🦱👩‍🦳👩‍🦲👱‍♀️👱‍♂️🧓👴👵🙍🙍‍♂️🙍‍♀️🙎🙎‍♂️🙎‍♀️🙅🙅‍♂️🙅‍♀️🙆🙆‍♂️🙆‍♀️💁💁‍♂️💁‍♀️🙋🙋‍♂️🙋‍♀️🙇🙇‍♂️🙇‍♀️🤦🤦‍♂️🤦‍♀️🤷🤷‍♂️🤷‍♀️👨‍⚕️👩‍⚕️👨‍🎓👩‍🎓👨‍🏫👩‍🏫👨‍⚖️👩‍⚖️👨‍🌾👩‍🌾👨‍🍳👩‍🍳👨‍🔧👩‍🔧👨‍🏭👩‍🏭👨‍💼👩‍💼👨‍🔬👩‍🔬👨‍💻👩‍💻👨‍🎤👩‍🎤👨‍🎨👩‍🎨👨‍✈️👩‍✈️👨‍🚀👩‍🚀👨‍🚒👩‍🚒👮👮‍♂️👮‍♀️🕵🕵️‍♂️🕵️‍♀️💂💂‍♂️💂‍♀️👷👷‍♂️👷‍♀️🤴👸👳👳‍♂️👳‍♀️👲🧕🤵👰🤰🤱👼🎅🤶🦸🦸‍♂️🦸‍♀️🦹🦹‍♂️🦹‍♀️🧙🧙‍♂️🧙‍♀️🧚🧚‍♂️🧚‍♀️🧛🧛‍♂️🧛‍♀️🧜🧜‍♂️🧜‍♀️🧝🧝‍♂️🧝‍♀️🧞🧞‍♂️🧞‍♀️🧟🧟‍♂️🧟‍♀️💆💆‍♂️💆‍♀️💇💇‍♂️💇‍♀️<br>🚶🚶‍♂️🚶‍♀️🏃🏃‍♂️🏃‍♀️💃🕺🕴👯👯‍♂️👯‍♀️🧖🧖‍♂️🧖‍♀️🧘👭👫👬💏👨‍❤️‍💋‍👨👩‍❤️‍💋‍👩💑👨‍❤️‍👨👩‍❤️‍👩👪👨‍👩‍👦👨‍👩‍👧👨‍👩‍👧‍👦👨‍👩‍👦‍👦👨‍👩‍👧‍👧👨‍👨‍👦👨‍👨‍👧👨‍👨‍👧‍👦👨‍👨‍👦‍👦👨‍👨‍👧‍👧👩‍👩‍👦👩‍👩‍👧👩‍👩‍👧‍👦👩‍👩‍👦‍👦👩‍👩‍👧‍👧👨‍👦👨‍👦‍👦👨‍👧👨‍👧‍👦👨‍👧‍👧👩‍👦👩‍👦‍👦👩‍👧👩‍👧‍👦👩‍👧‍👧🗣<br>👤👥👣🧳🌂☂🧵🧶👓🕶🥽🥼👔👕👖🧣🧤🧥🧦👗👘👙👚👛👜👝🎒👞👟🥾🥿👠👡👢👑👒🎩🎓🧢⛑💄💍💼</p><h3 id="动物与自然类"><a href="#动物与自然类" class="headerlink" title="动物与自然类"></a>动物与自然类</h3><hr><p>🙈🙉🙊💥💫💦💨🐵🐒🦍🐶🐕🐩🐺🦊🦝🐱🐈🦁🐯🐅🐆🐴🐎🦄🦓🦌🐮🐂🐃🐄🐷🐖🐗🐽🐏🐑🐐🐪🐫🦙🦒🐘🦏🦛🐭🐁🐀🐹🐰🐇🐿🦔🦇🐻🐨🐼🦘🦡🐾🦃🐔🐓🐣🐤🐥🐦🐧🕊🦅🦆🦢🦉🦚🦜🐸🐊🐢🦎🐍🐲🐉🦕🦖🐳🐋🐬🐟🐠🐡🦈🐙🐚🐌🦋🐛🐜🐝🐞🦗🕷🕸🦂🦟🦠<br>💐🌸💮🏵🌹🥀🌺🌻🌼🌷🌱🌲🌳🌴🌵🌾🌿☘🍀🍁🍂🍃🍄🌰🦀🦞🦐🦑<br>🌍🌎🌏🌐🌑🌒🌓🌔🌕🌖🌗🌘🌙🌚🌛🌜☀🌝🌞⭐🌟🌠☁⛅⛈🌤🌥🌦🌧🌨🌩🌪🌫🌬🌈<br>☂☔⚡❄☃⛄☄🔥💧🌊🎄✨🎋🎍</p><h3 id="食物类"><a href="#食物类" class="headerlink" title="食物类"></a>食物类</h3><hr><p>🍇🍈🍉🍊🍋🍌🍍🥭🍎🍏🍐🍑🍒🍓🥝🍅🥥🥑🍆🥔🥕🌽🌶🥒🥬🥦🍄🥜🌰🍞🥐🥖🥨🥯🥞🧀🍖🍗🥩🥓🍔🍟🍕🌭🥪🌮🌯🥙🍳🥘🍲🥣🥗🍿🧂🥫🍱🍘🍙🍚🍛🍜🍝🍠🍢🍣🍤🍥🥮🍡🥟🥠🥡🍦🍧🍨🍩🍪🎂🍰🧁🥧🍫🍬🍭🍮🍯🍼🥛☕🍵🍶🍾🍷🍸🍹🍺🍻🥂🥃🥤🥢🍽🍴🥄</p><h3 id="活动类"><a href="#活动类" class="headerlink" title="活动类"></a>活动类</h3><hr><p>🕴🧗🧗‍♂️🧗‍♀️🏇⛷🏂🏌🏌️‍♂️🏌️‍♀️🏄🏄‍♂️🏄‍♀️🚣🚣‍♂️🚣‍♀️🏊🏊‍♂️🏊‍♀️⛹⛹️‍♂️⛹️‍♀️🏋🏋️‍♂️🏋️‍♀️🚴🚴‍♂️🚴‍♀️🚵🚵‍♂️🚵‍♀️🤸🤸‍♂️🤸‍♀️🤼🤼‍♂️🤼‍♀️🤽🤽‍♂️🤽‍♀️🤾🤾‍♂️🤾‍♀️🤹🤹‍♂️🤹‍♀️🧘🧘‍♂️🧘‍♀️🎪🛹🎗🎟🎫🎖🏆🏅🥇🥈🥉⚽⚾🥎🏀🏐🏈🏉🎾🥏🎳🏏🏑🏒🥍🏓🏸🥊🥋⛳⛸🎣🎽🎿🛷🥌🎯🎱🎮🎰🎲🧩♟🎭🎨🧵🧶🎼🎤🎧🎷🎸🎹🎺🎻🥁🎬🏹</p><h3 id="交通与地点类"><a href="#交通与地点类" class="headerlink" title="交通与地点类"></a>交通与地点类</h3><hr><p>🚣🗾🏔⛰🌋🗻🏕🏖🏜🏝🏞🏟🏛🏗🏘🏚🏠🏡🏢🏣🏤🏥🏦🏨🏩🏪🏫🏬🏭🏯🏰💒🗼🗽⛪🕌🕍⛩🕋⛲⛺🌁🌃🏙🌄🌅🌆🌇🌉🎠🎡🎢🚂🚃🚄🚅🚆🚇🚈🚉🚊🚝🚞🚋🚌🚍🚎🚐🚑🚒🚓🚔🚕🚖🚗🚘🚚🚛🚜🏎🏍🛵🚲🛴🚏🛤⛽🚨🚥🚦🚧⚓⛵🚤🛳⛴🛥🚢✈🛩🛫🛬💺🚁🚟🚠🚡🛰🚀🛸🌠🌌⛱🎆🎇🎑💴💵💶💷🗿🛂🛃🛄🛅</p><h3 id="常见事物类"><a href="#常见事物类" class="headerlink" title="常见事物类"></a>常见事物类</h3><hr><p>💌🕳💣🛀🛌🔪🏺🗺🧭🧱💈🛢🛎🧳⌛⏳⌚⏰⏱⏲🕰🌡⛱🧨🎈🎉🎊🎎🎏🎐🧧🎀🎁🔮🧿🕹🧸🖼🧵🧶🛍📿💎📯🎙🎚🎛📻📱📲☎📞📟📠🔋🔌💻🖥🖨⌨🖱🖲💽💾💿📀🧮🎥🎞📽📺📷📸📹📼🔍🔎🕯💡🔦🏮📔📕📖📗📘📙📚📓📃📜📄📰🗞📑🔖🏷💰💴💵💶💷💸💳🧾✉📧📨📩📤📥📦📫📪📬📭📮🗳✏✒🖋🖊🖌🖍📝📁📂🗂📅📆🗒🗓📇📈📉📊📋📌📍📎🖇📏📐✂🗃🗄🗑🔒🔓🔏🔐🔑🗝🔨⛏⚒🛠🗡⚔🔫🛡🔧🔩⚙🗜⚖🔗⛓🧰🧲⚗🧪🧫🧬🔬🔭📡💉💊🚪🛏🛋🚽🚿🛁🧴🧷🧹🧺🧻🧼🧽🧯🚬⚰⚱🗿🚰</p><h3 id="标志类"><a href="#标志类" class="headerlink" title="标志类"></a>标志类</h3><hr><p>💘💝💖💗💓💞💕💟❣💔❤🧡💛💚💙💜🖤💯💢💬👁️‍🗨️🗯💭💤💮♨💈🛑<br>🕛🕧🕐🕜🕑🕝🕒🕞🕓🕟🕔🕠🕕🕡🕖🕢🕗🕣🕘🕤🕙🕥🕚🕦<br>🌀♠♥♦♣🃏🀄🎴🔇🔈🔉🔊📢📣📯🔔🔕🎵🎶🏧🚮🚰♿🚹🚺🚻🚼🚾⚠🚸⛔🚫🚳🚭🚯🚱🚷🔞<br>☢☣⬆↗➡↘⬇↙⬅↖↕↔↩↪⤴⤵🔃🔄🔙🔚🔛🔜🔝🛐⚛🕉✡☸☯✝☦☪☮<br>🕎🔯♈♉♊♋♌♍♎♏♐♑♒♓⛎🔀🔁🔂▶⏩◀⏪🔼⏫🔽⏬⏹⏏🎦<br>🔅🔆📶📳📴♾♻🔱📛🔰⭕✅☑✔✖❌❎➕➖➗➰➿〽✳✴❇‼⁉❓❔❕❗©®™</p><p>️🔟🔠🔡🔢🔣🔤🅰🆎🅱🆑🆒🆓ℹ🆔Ⓜ🆕🆖🅾🆗🅿🆘🆙🆚🈁</p><p>🈂🈷🈶🈯 🉐 🈹🈚🈲 🉑 🈸🈴🈳 ㊗㊙ 🈺🈵<br>🔴🔵⚫⚪⬛⬜◼◻◾◽▪▫🔶🔷🔸🔹🔺🔻💠🔳🔲</p><h3 id="旗帜类"><a href="#旗帜类" class="headerlink" title="旗帜类"></a>旗帜类</h3><hr><p>🏁🚩🎌🏴🏳🏳️‍🌈🏳️‍⚧️🏴‍☠️🏴󠁧󠁢󠁥󠁮󠁧󠁿🏴󠁧󠁢󠁳󠁣󠁴󠁿🏴󠁧󠁢󠁷󠁬󠁳󠁿🏴󠁵󠁳󠁴󠁸󠁿</p>]]></content>
      
      
      <categories>
          
          <category> 土豆の收藏安利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emoji </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows环境的git-bash终端美化</title>
      <link href="/posts/git-bash-prettify/"/>
      <url>/posts/git-bash-prettify/</url>
      
        <content type="html"><![CDATA[<h3 id="Before-this"><a href="#Before-this" class="headerlink" title="Before this"></a>Before this</h3><p>最开始是想着直接安装<code>zsh</code>，但是或多或少还是存在问题。</p><p>比如：安装完了过后，除去<code>vscode</code>的其他运行方式和环境都很<code>ok</code>，在<code>vscode</code>的<code>terminal</code>中，如果使用<code>git-bash</code>并且安装了<code>zsh</code>，那么只要<code>terminal</code>的窗口视图发生变化（新建、拆分终端，又或者改变<code>terminal</code>的高度），都会导致命令行无法正常输入，就像卡死了一般。其他的运行方式，比如直接右键在文件中使用<code>git-bash</code>，又或者是在<code>windows-terminal</code>中使用，都是没得问题的。如果有想要了解的伙伴，可以参考这篇文章。<a href="https://zhuanlan.zhihu.com/p/455925403">一文搞定<code>Windows Terminal</code>设置与<code>zsh</code>安装【非<code>WSL</code>】</a></p><p>当然，如果<strong>只是想美化</strong>，做到类似<code>zsh</code>的显示效果，有没有办法咧？<del>💀💀💀</del></p><span id="more"></span><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>找到文件<code>git-prompt.sh</code>，在安装目录下的<code>Git/etc/profile.d/git-prompt.sh</code>。右键在<code>vscode</code>中打开，或者终端输入<code>code git-prompt.sh(绝对路径，或者相对路径都可以)</code>。</p><p>替换为下面代码。实际只修改了<code>$PS1</code>的值：</p><blockquote><p>注意：\w 表示的详细路径，如果只想展示当前工作区，设置为 \W</p></blockquote><blockquote><p>类似于 [\033[32m] 这样的值，是命令行的颜色色值，具体可参考：<a href="https://gist.github.com/vratiu/9780109">.bash_aliases</a></p></blockquote><pre class="language-sh" data-language="sh"><code class="language-sh">if test -f &#x2F;etc&#x2F;profile.d&#x2F;git-sdk.shthen    TITLEPREFIX&#x3D;SDK-$&#123;MSYSTEM#MINGW&#125;else    TITLEPREFIX&#x3D;$MSYSTEMfiif test -f ~&#x2F;.config&#x2F;git&#x2F;git-prompt.shthen    . ~&#x2F;.config&#x2F;git&#x2F;git-prompt.shelse    PS1&#x3D;&#39;\[\033]0;Bash\007\]&#39;      # 窗口标题    # PS1&#x3D;&quot;$PS1&quot;&#39;\n&#39;               # 换行    PS1&#x3D;&quot;$PS1&quot;&#39;\[\033[32m\]&#39;     # 高亮绿色    PS1&#x3D;&quot;$PS1&quot;&#39;➜ &#39;               # 右箭头    PS1&#x3D;&quot;$PS1&quot;&#39;\[\033[33m\]&#39;     # 高亮黄色    PS1&#x3D;&quot;$PS1&quot;&#39;[\w]&#39;                 # 当前目录    if test -z &quot;$WINELOADERNOEXEC&quot;    then        GIT_EXEC_PATH&#x3D;&quot;$(git --exec-path 2&gt;&#x2F;dev&#x2F;null)&quot;        COMPLETION_PATH&#x3D;&quot;$&#123;GIT_EXEC_PATH%&#x2F;libexec&#x2F;git-core&#125;&quot;        COMPLETION_PATH&#x3D;&quot;$&#123;COMPLETION_PATH%&#x2F;lib&#x2F;git-core&#125;&quot;        COMPLETION_PATH&#x3D;&quot;$COMPLETION_PATH&#x2F;share&#x2F;git&#x2F;completion&quot;        if test -f &quot;$COMPLETION_PATH&#x2F;git-prompt.sh&quot;        then            . &quot;$COMPLETION_PATH&#x2F;git-completion.bash&quot;            . &quot;$COMPLETION_PATH&#x2F;git-prompt.sh&quot;            PS1&#x3D;&quot;$PS1&quot;&#39;\[\033[31m\]&#39;   # 红色            PS1&#x3D;&quot;$PS1&quot;&#39;&#96;__git_ps1&#96;&#39;    # git 插件        fi    fi    PS1&#x3D;&quot;$PS1&quot;&#39;\[\033[0;36m\] &#39;      # 青色fiMSYS2_PS1&#x3D;&quot;$PS1&quot;</code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><a href="/images/posts/git-bash-prettify/p1.png"><img src="/images/posts/git-bash-prettify/p1.png" alt="&#39;git-bash-preview&#39;" loading="lazy"></a></p><div class="primary"><blockquote><p>把你的脸迎向阳光，那就不会有阴影</p></blockquote></div>]]></content>
      
      
      <categories>
          
          <category> 土豆の收藏安利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git-bash </tag>
            
            <tag> terminal </tag>
            
            <tag> 终端美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git环境搭建，vscode配置git-bash作为默认的terminal</title>
      <link href="/share/git-install-and-terminal-config/"/>
      <url>/share/git-install-and-terminal-config/</url>
      
        <content type="html"><![CDATA[<h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p><code>傻瓜式安装，选择盘符- 注意安装过程中会提示是否将bash加入右键菜单，勾选</code></p><span id="more"></span><p><a href="https://git-scm.com/download/win">windows 下载</a></p><p><a href="https://git-scm.com/download/mac">mac 下载</a></p><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><h4 id="配置当前git用户信息"><a href="#配置当前git用户信息" class="headerlink" title="配置当前git用户信息"></a>配置当前<code>git</code>用户信息</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token punctuation">[</span>git提交显示的用户名<span class="token punctuation">]</span><span class="token function">git</span> config --global user.email <span class="token punctuation">[</span>git提交用户所属邮箱<span class="token punctuation">]</span><span class="token comment"># 查看系统配置</span><span class="token function">git</span> config --system --list <span class="token operator">||</span> <span class="token function">git</span> config --system -l<span class="token comment"># 查看用户全局配置</span><span class="token function">git</span> config --global --list <span class="token operator">||</span> <span class="token function">git</span> config --global -l<span class="token comment"># 查看当前仓库配置</span><span class="token function">git</span> config --local --list <span class="token operator">||</span> <span class="token function">git</span> config --local -l</code></pre><h4 id="配置git规范"><a href="#配置git规范" class="headerlink" title="配置git规范"></a>配置<code>git</code>规范</h4><div class="primary"><blockquote><p>换行符约束（问题记录）</p></blockquote></div><p>多人协作项目，如果其他人用的时<code>linux</code>，你用的<code>windows</code>，会存在行尾结束符问题扰乱协作，因为<code>windows</code>使用回车和换行两个字符来结束一行。</p><p>配置<code>core.autocrlf</code>可以避免这个问题。</p><p>参数说明：</p><blockquote><p>true：默认值，拉取（签出）代码的时候，LF 会被转换成 CRLF。大家也应该发现了，如果源代码中是 LF，那么提交的时候肯定会遇到错误冲突 LF would be replaced by CRLF.</p></blockquote><blockquote><p>input：提交（签入）时把 CRLF 转换成 LF。同理，当远程仓库源代码使用的是 CRLF，那么提交也会遇到错误冲突 CRLF would be replaced by LF.</p></blockquote><blockquote><p>false：取消此功能，即签入签出代码时，不做任何处理。源代码是 LF，那么提交就是 LF，源代码是 CRLF，那么提交也就是 CRLF。所以，当遇到上面两种错误冲突时，设置为 false 通常可以避免。</p></blockquote><p>如果项目中没有对源文件的换行符作出规定，**源代码使用的是 LF，设置<code>autocrlf=input</code>, 源代码使用的是 CRLF，设置<code>autocrlf=true</code>**。</p><p>当我用<code>windows</code>电脑<code>git clone</code>代码的时候，若我的<code>autocrlf</code>(在<code>windows</code>下安装<code>git</code>，该选项默认为<code>true</code>)为<code>true</code>，那么文件每行会被自动转成以<code>CRLF</code>结尾，若对文件不做任何修改，<code>pre-commit</code>执行<code>eslint</code>的时候就会提示你删除<code>CR</code>。</p><p>项目仓库中一般是<code>Linux</code>环境下提交的代码，文件换行符默认是以<code>LF</code>结尾的(工程化需要，统一标准)，如果你是<code>windows</code>用户，设置为<code>false</code>最稳妥。<del>毕竟不可能每个项目都去配一次，而不同的项目完全有可能是不同的环境和换行符，设置为 false 可以避免这个问题</del></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global core.autocrlf <span class="token boolean">false</span></code></pre><h4 id="配置密钥对"><a href="#配置密钥对" class="headerlink" title="配置密钥对"></a>配置密钥对</h4><p>生成公钥和私钥，用于上传代码时的安全验证</p><pre class="language-none"><code class="language-none">在git bash里执行命令ssh-keygen 一路回车，就可以生成密钥对，默认密钥对是存放在(&#x2F;c&#x2F;Users&#x2F;[主机用户名]&#x2F;.ssh&#x2F;) 。这个目录下有两个文件， .pub就是公钥，另外一个是私钥到线上（gitlab或其他平台）打开设置-&gt;安全设置-&gt;ssh公钥，把本地的公钥文件全选复制进来，输入登录密码，就配置成功了。</code></pre><h4 id="配置https-proxy代理"><a href="#配置https-proxy代理" class="headerlink" title="配置https.proxy代理"></a>配置<code>https.proxy</code>代理</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global https.proxy http:<span class="token punctuation">\</span><span class="token number">127.0</span>.0.1:xxx</code></pre><h3 id="VsCode-Terminal配置为默认git-bash"><a href="#VsCode-Terminal配置为默认git-bash" class="headerlink" title="VsCode Terminal配置为默认git-bash"></a><code>VsCode Terminal</code>配置为默认<code>git-bash</code></h3><ul><li><p>找到<code>Terminal &gt; Integrated &gt; Profiles: Windows</code>，选择在<code>settings.json</code>中编辑。</p></li><li><p>添加<code>GItBash</code>子项（注意首字母大写，我配置的时候小写没有生效，不知道是不是版本问题导致的）修改<code>path</code>，如下图。</p></li><li><p>配置默认的<code>terminal</code>为<code>GitBash</code>, 方式一：设置中搜索<code>Default Profile: Windows</code>，选择<code>GitBash</code>，方式二：直接在<code>settings</code>中添加下面配置。</p></li></ul><p><a href="/images/share/git-install-and-terminal-config/p1.png"><img src="/images/share/git-install-and-terminal-config/p1.png" alt="&#39;vscode-terminal&#39;" loading="lazy"></a></p><h3 id="配置指令的alias"><a href="#配置指令的alias" class="headerlink" title="配置指令的alias"></a>配置指令的<code>alias</code></h3><p>打开文件<code>bash.bashrc</code>，在安装目录下的<code>Git/etc/bash.bashrc</code>。</p><p>末尾添加：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">blog</span><span class="token operator">=</span><span class="token string">'cd /e/flynn/flynna.github.io'</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">serve</span><span class="token operator">=</span><span class="token string">'yarn serve'</span><span class="token comment"># ...</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 土豆の教程分享 </category>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> git-bash </tag>
            
            <tag> terminal </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode的使用，设置分享以及插件推荐</title>
      <link href="/posts/vscode-setting-and-plugins/"/>
      <url>/posts/vscode-setting-and-plugins/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>工欲善其事，必先利其器</p></blockquote><p>前端开发工具有很多，类似<code>HBuilder、WebStorm、Visual Studio Code...</code>等，其中<code>vscode</code>以其轻量且强大的代码编辑功能和丰富的插件生态系统，独受前端工师的青睐。</p><span id="more"></span><h3 id="编辑器汉化"><a href="#编辑器汉化" class="headerlink" title="编辑器汉化"></a>编辑器汉化</h3><ul><li><p>方式一：<code>Ctrl+Shift+P</code>，输入<code>configure language</code>回车，在打开的语言配置文件中将<code>en-us</code>修改为<code>zh-cn</code>，<code>Ctrl+S</code>保存设置，重启生效。</p></li><li><p>方式二：插件安装。打开扩展搜索<code>Chinese (Simplified) (简体中文) Language Pack</code>安装，重启生效。</p></li></ul><hr><h3 id="vscode-推荐的用户设置"><a href="#vscode-推荐的用户设置" class="headerlink" title="vscode 推荐的用户设置"></a>vscode 推荐的用户设置</h3><p>左下角设置图标，点击，选择设置，搜索设置，设置以下内容(推荐)。或者直接<code>Ctrl+Shift+P</code>搜索<code>setting.json</code>，直接在文件中编辑修改，界面化操作的设置最终也会同步到该文件中。</p><h4 id="关闭vscode的自动更新"><a href="#关闭vscode的自动更新" class="headerlink" title="关闭vscode的自动更新"></a>关闭<code>vscode</code>的自动更新</h4><p>配置是否接收自动更新，更改后需要重新启动。</p><blockquote><p>update mode:none</p></blockquote><h4 id="默认行尾字符"><a href="#默认行尾字符" class="headerlink" title="默认行尾字符"></a>默认行尾字符</h4><p><code>windows</code>系统环境下的换行方式默认为<code>CRLF: \r\n</code>，<code>linux</code>系统环境下的换行方式默认为<code>LF: \n</code>。配置行位字符为<code>\n</code>。</p><blockquote><p>Eol: \n</p></blockquote><h4 id="自动保存"><a href="#自动保存" class="headerlink" title="自动保存"></a>自动保存</h4><p>避免一些不可逆的异常关闭导致数据丢失。<code>onFocusChange</code>-文件焦点变化时自动保存。</p><blockquote><p>autoSave: onFocusChange</p></blockquote><h4 id="tab相关"><a href="#tab相关" class="headerlink" title="tab相关"></a><code>tab</code>相关</h4><p>配置一个制表符等于的空格数以及是否启用<code>tab</code>补全。</p><blockquote><p>Tab Size: 2</p></blockquote><blockquote><p>Tab Completion: on</p></blockquote><h4 id="‘括号对’着色和匹配"><a href="#‘括号对’着色和匹配" class="headerlink" title="‘括号对’着色和匹配"></a>‘括号对’着色和匹配</h4><p><code>Bracket Pair Colorization</code>插件弃用，插件功能已经被<code>vscode</code>内置。直接设置就可以控制每个括号类型是否具有自己的独立颜色池。</p><blockquote><p>Bracket Pair Colorization: Enabled</p></blockquote><blockquote><p>Bracket Pair Colorzation: Independent Color Pool Per Bracket Type</p></blockquote><blockquote><p>Bracket Pairs: active</p></blockquote><h4 id="其他配置项"><a href="#其他配置项" class="headerlink" title="其他配置项"></a>其他配置项</h4><p>设置字体大小</p><blockquote><p>Font Size: 14</p></blockquote><p>控制在删除括号或者引号时编辑器是否应删除相邻的右引号或右方括号。</p><blockquote><p>Auto Closing Delete: always</p></blockquote><p>在保存文件时自动运行<code>ESLint</code>的自动修复命令<code>eslint --fix</code>，修改<code>setting.json</code></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"editor.codeActionsOnSave"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"source.fixAll.eslint"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>超出显示范围，自动换行（只是显示效果上，并没有真正换行）</p><blockquote><p>word Wrap: on</p></blockquote><p>在<code>Word Wrap</code>为<code>wordWrapColumn</code>或<code>bounded</code>时，控制编辑器的折行列。（与<code>word Wrap: on</code>相悖，根据自己喜好设置）</p><blockquote><p>Word Wrap Column: 100</p></blockquote><p>差异编辑器是否忽略前导空格或尾随空格中的更改。</p><blockquote><p>Ignore Trim Whitespace: false</p></blockquote><hr><h3 id="插件-plugins-推荐"><a href="#插件-plugins-推荐" class="headerlink" title="插件(plugins)推荐"></a>插件(<code>plugins</code>)推荐</h3><h4 id="Guides"><a href="#Guides" class="headerlink" title="Guides"></a><a href="https://marketplace.visualstudio.com/items?itemName=spywhere.guides"><code>Guides</code></a></h4><p>带色竖线提示所属区域块，效果如下：</p><p><a href="/images/posts/vscode-setting-and-plugins/p1.png"><img src="/images/posts/vscode-setting-and-plugins/p1.png" alt="vscode-setting-and-plugins-p1" loading="lazy"></a></p><h4 id="ESLint-代码语法规范校验"><a href="#ESLint-代码语法规范校验" class="headerlink" title="ESLint-代码语法规范校验"></a><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"><code>ESLint</code></a>-代码语法规范校验</h4><p>该扩展使用安装在打开的工作区文件夹中的<code>ESLint</code>库。如果该文件夹没有提供一个，则扩展程序会查找全局安装版本。(需要先安装-一般安装在项目的<code>devDependenice</code>)</p><p>配置文件：添加<code>.eslintrc</code>，或者终端<code>Create ESLint configuration</code>，如果你在全局安装了<code>ESLint</code>，执行<code>eslint --init</code>。</p><h4 id="Prettier-Code-formatter-代码风格格式化"><a href="#Prettier-Code-formatter-代码风格格式化" class="headerlink" title="Prettier - Code formatter-代码风格格式化"></a><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"><code>Prettier - Code formatter</code></a>-代码风格格式化</h4><p>为不同文件配置默认的格式化程序。</p><ul><li><p>可通过界面操作（右键 -&gt; 使用…格式化文档 -&gt; 配置默认格式化程序 -&gt; 选择<code>prettier</code>）</p></li><li><p>在<code>setting.json</code>文件中添加字段配置。</p></li></ul><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token comment">// ... 其他配置</span>  <span class="token property">"[javascript]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><code>prettier</code>相关配置项，可通过下面两种方式设置。</p><ul><li>方式一，添加全局用户配置（<code>vscode</code>设置）</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用单引号。</span>singleQuote: <span class="token boolean">true</span><span class="token comment"># 尽可能控制尾随逗号的输出。</span>trailingComma: all<span class="token comment"># 指定每行代码的最佳长度，如果超出长度则换行。</span>printWidth: <span class="token number">100</span><span class="token comment"># 当箭头函数仅有一个参数时加上括号。</span>arrowParens: always</code></pre><ul><li>方式二：项目的<code>package.json</code>种添加<code>prettier</code>字段配置。</li></ul><h4 id="Document-This-js-ts-注释生成"><a href="#Document-This-js-ts-注释生成" class="headerlink" title="Document This-js/ts-注释生成"></a><a href="https://marketplace.visualstudio.com/items?itemName=oouo-diogo-perdigao.docthis"><code>Document This</code></a>-<code>js/ts</code>-注释生成</h4><p>可以自动为<code>TypeScript</code>和<code>JavaScript</code>文件生成详细的<code>JSDoc</code>注释。使用：</p><ul><li><p>方式一：，光标指中需要注释的函数体，按两次<code>Ctrl + Alt + d</code>即可。</p></li><li><p>方式二：打开命令行方式<code>Ctrl + Shift + p</code>输入<code>document this</code>。</p></li></ul><h4 id="TODO-Highlight-高亮提示"><a href="#TODO-Highlight-高亮提示" class="headerlink" title="TODO Highlight-高亮提示"></a><a href="https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight"><code>TODO Highlight</code></a>-高亮提示</h4><p>代码行添加<code>TODO</code>字样，高亮效果提示。突出尚未完成的功能或者事情。</p><h4 id="GitLens-—-Git-supercharged和Git-Graph"><a href="#GitLens-—-Git-supercharged和Git-Graph" class="headerlink" title="GitLens — Git supercharged和Git Graph"></a><a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"><code>GitLens — Git supercharged</code></a>和<a href="https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph"><code>Git Graph</code></a></h4><p>前者：</p><ul><li>查看单个文件的提交记录</li><li>代码行尾浅色的<code>commit-message</code></li><li>鼠标覆盖到代码块上，可以查看更详细的提交信息和<code>commit-id</code>，更甚至能跳转到当次记录查看详细提交</li><li><code>git</code>命令界面化操作</li><li>其他的侧边栏视图和功能</li></ul><p>后者：</p><ul><li>图形化展示所有分支及结构，可选择性过滤分支再查看</li><li>可直接选择某一次的提交节点右键执行某些操作（<code>revert/cherryPick/createBranch/drop?/checkOut/addTag</code>等）</li><li>点击节点，查看当次提交的详细文件修改，进行代码审查</li><li>单击一个提交，<code>CTRL/CMD</code>单击另一个提交比较任何两个提交</li><li>其他功能</li></ul><h4 id="Search-node-modules-node-modules文件搜索"><a href="#Search-node-modules-node-modules文件搜索" class="headerlink" title="Search node_modules-node_modules文件搜索"></a><a href="https://marketplace.visualstudio.com/items?itemName=jasonnutter.search-node-modules"><code>Search node_modules</code></a>-<code>node_modules</code>文件搜索</h4><p><code>Ctrl + Shift + p</code>，或者<code>Ctrl + p 输入 &gt;</code> 或者按下 <code>F1</code>。在打开的面板中输入或者选择<code>Search node_modules</code>。点击查询出来的<code>Search node_modules</code>后，会根据当前的工作区文件夹查找<code>node_modules</code>并打开，支持<strong>类似</strong><code>Ctrl + f</code>对路径的文件夹或者文件进行搜索。</p><h4 id="DotENV-env文件代码高亮"><a href="#DotENV-env文件代码高亮" class="headerlink" title="DotENV-.env文件代码高亮"></a><a href="https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv"><code>DotENV</code></a>-<code>.env</code>文件代码高亮</h4><h4 id="Import-Cost-内联显示导入的包文件大小"><a href="#Import-Cost-内联显示导入的包文件大小" class="headerlink" title="Import Cost-内联显示导入的包文件大小"></a><a href="https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost"><code>Import Cost</code></a>-内联显示导入的包文件大小</h4><h4 id="Template-String-Converter-字符串与模板字符串的自动转换"><a href="#Template-String-Converter-字符串与模板字符串的自动转换" class="headerlink" title="Template String Converter-字符串与模板字符串的自动转换"></a><a href="https://marketplace.visualstudio.com/items?itemName=meganrogge.template-string-converter"><code>Template String Converter</code></a>-字符串与模板字符串的自动转换</h4><h4 id="TypeScript-Barrel-Generator-ts文件导出到index"><a href="#TypeScript-Barrel-Generator-ts文件导出到index" class="headerlink" title="TypeScript Barrel Generator-ts文件导出到index"></a><a href="https://marketplace.visualstudio.com/items?itemName=eliostruyf.vscode-typescript-exportallmodules"><code>TypeScript Barrel Generator</code></a>-<code>ts</code>文件导出到<code>index</code></h4><p>允许通过或者自动导出某个文件夹（模块）的所有<code>export</code>至<code>index.ts</code>，使用时直接引入<code>index</code>即可。</p><p>使用：</p><ul><li><p>方式一：右键文件夹，选择<code>Typescript: export all modules</code></p></li><li><p>方式二：手动创建<code>index.ts</code>，如下：</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 例如 folder/a、folder/b 都 export 了一些变量或者函数</span><span class="token comment">// 创建 folder/index.ts</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'./a'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'./b'</span><span class="token punctuation">;</span></code></pre><h4 id="Code-Runner-代码运行器"><a href="#Code-Runner-代码运行器" class="headerlink" title="Code Runner-代码运行器"></a><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner"><code>Code Runner</code></a>-代码运行器</h4><p>点击编辑器右上角类似 |&gt; 的按钮，即可执行当前文件代码片段，并在编辑器内输出结果。</p><h4 id="Path-Intellisense-路径感知"><a href="#Path-Intellisense-路径感知" class="headerlink" title="Path Intellisense-路径感知"></a><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense"><code>Path Intellisense</code></a>-路径感知</h4><p>输入路径时，智能提示，帮助自动完成文件名填充。</p><h4 id="Better-Comments-注释美化"><a href="#Better-Comments-注释美化" class="headerlink" title="Better Comments-注释美化"></a><code>Better Comments</code>-注释美化</h4><p>根据特殊字符前缀标识不同类型的注释。</p><h4 id="Auto-Rename-Tag和Auto-Close-Tag"><a href="#Auto-Rename-Tag和Auto-Close-Tag" class="headerlink" title="Auto Rename Tag和Auto Close Tag"></a><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"><code>Auto Rename Tag</code></a>和<a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag"><code>Auto Close Tag</code></a></h4><p>前者：标签重命名时，成对的另外一半标签会自动重命名。</p><p>后者：输入前半个标签<code>&lt;div&gt;</code>，会自动生成另外一半用于关闭的标签<code>&lt;/div&gt;</code></p><h4 id="Markdown-All-in-One-Markdown-所有功能支持"><a href="#Markdown-All-in-One-Markdown-所有功能支持" class="headerlink" title="Markdown All in One-Markdown 所有功能支持"></a><a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one"><code>Markdown All in One</code></a>-<code>Markdown 所有功能支持</code></h4><p>在<code>typora</code>开始收费后，发现的一款<code>markdown</code>插件。<code>.md</code>文件的右上角类似窗口扩展的查看图标，点击后会在右侧窗口打开<code>Markdown</code>的预览效果页面。</p><h4 id="open-in-browser-浏览器打开文件"><a href="#open-in-browser-浏览器打开文件" class="headerlink" title="open in browser-浏览器打开文件"></a><a href="https://marketplace.visualstudio.com/items?itemName=techer.open-in-browser"><code>open in browser</code></a>-浏览器打开文件</h4><p>在写<code>html</code>文件的时候，方便快速在浏览器打开该文件。<code>Alt + b</code>快捷键打开，或者右键 <code>open in browser</code>。对应还有一个插件<code>View In Browser</code>，不过作者已经不再维护了。</p><h4 id="Color-Highlight-颜色代码效果实时预览"><a href="#Color-Highlight-颜色代码效果实时预览" class="headerlink" title="Color Highlight-颜色代码效果实时预览"></a><a href="https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight"><code>Color Highlight</code></a>-颜色代码效果实时预览</h4><p>如果你不仅仅是想预览颜色，而是需要类似<code>picker</code>的颜色选择器来对已有的颜色进行修改，可以安装另外一个插件<code>Flutter Color</code>，又或者你可以两者一起使用。</p><h4 id="Code-Spell-Checker-单词拼写检测"><a href="#Code-Spell-Checker-单词拼写检测" class="headerlink" title="Code Spell Checker-单词拼写检测"></a><a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker"><code>Code Spell Checker</code></a>-单词拼写检测</h4><p>自动捕获常见的（单词）拼写错误，同时降低误报，适用于驼峰式代码。</p><h4 id="filesize-实时观测文件bundle"><a href="#filesize-实时观测文件bundle" class="headerlink" title="filesize-实时观测文件bundle"></a><a href="https://marketplace.visualstudio.com/items?itemName=mkxml.vscode-filesize"><code>filesize</code></a>-实时观测文件<code>bundle</code></h4><p>在状态栏中显示当前文件大小，点击状态栏中的文件大小时，会在<code>OUTPUT</code>中输出<code>Gzip</code>大小。</p><h4 id="json2ts-将剪贴板内容转为ts-interface"><a href="#json2ts-将剪贴板内容转为ts-interface" class="headerlink" title="json2ts-将剪贴板内容转为ts-interface"></a><a href="https://marketplace.visualstudio.com/items?itemName=GregorBiswanger.json2ts"><code>json2ts</code></a>-将剪贴板内容转为<code>ts-interface</code></h4><p>简直<code>yyds...</code>，实际开发过程中，如果你使用到了<code>ts</code>，可以为你省去很多定义类型的时间。~~比如：将接口返回的数据转为 interface ~~</p><p>除了这个插件以外，你也可以到 <a href="http://json2ts.com/">http://json2ts.com/</a> 实现更完整的转换（因为插件只会提取<code>json</code>内容进行转换）</p><h4 id="koroFileHeader-or-fileheader-在文件头生成作者信息"><a href="#koroFileHeader-or-fileheader-在文件头生成作者信息" class="headerlink" title="[koroFileHeader or fileheader]-在文件头生成作者信息"></a>[<code>koroFileHeader</code> or <code>fileheader</code>]-在文件头生成作者信息</h4><p>感觉很鸡肋的一个功能 <del>git 的 文件变更记录同样可以查看，且更加强大</del> …目前没怎么用到，不排除别的项目组有这种爱好…</p><h4 id="vscode-pdf-预览pdf"><a href="#vscode-pdf-预览pdf" class="headerlink" title="vscode-pdf-预览pdf"></a><a href="https://marketplace.visualstudio.com/items?itemName=tomoki1207.pdf">vscode-pdf</a>-预览<code>pdf</code></h4><h4 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a><a href="https://marketplace.visualstudio.com/items?itemName=LeetCode.vscode-leetcode"><code>LeetCode</code></a></h4><p>LeetCode 在 VS Code 中刷题。<del>（如果你觉得有必要）</del></p><div class="success"><blockquote><p>框架相关</p></blockquote></div><h4 id="ES7-React-Redux-React-Native-snippets-React代码片段"><a href="#ES7-React-Redux-React-Native-snippets-React代码片段" class="headerlink" title="ES7+ React/Redux/React-Native snippets-React代码片段"></a><a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets"><code>ES7+ React/Redux/React-Native snippets</code></a>-<code>React</code>代码片段</h4><p>集成了<code>ES7</code>标准及一下的语法片段…意味着例如<code>JavaScript (ES6) code snippets</code>提供的片段，也是支持的…</p><h4 id="Vue-3-Snippets-Vue代码片段"><a href="#Vue-3-Snippets-Vue代码片段" class="headerlink" title="Vue 3 Snippets-Vue代码片段"></a><a href="https://marketplace.visualstudio.com/items?itemName=hollowtree.vue-snippets"><code>Vue 3 Snippets</code></a>-<code>Vue</code>代码片段</h4><p>基于<code>Vue 2 Snippets</code>开发的兼容适配<code>Vue 3</code>的插件。另外一个片段插件<code>VueHelper</code>。</p><h4 id="Vue-Language-Features-Volar-Vue-语言扩展"><a href="#Vue-Language-Features-Volar-Vue-语言扩展" class="headerlink" title="Vue Language Features (Volar)-Vue 语言扩展"></a><a href="https://marketplace.visualstudio.com/items?itemName=Vue.volar"><code>Vue Language Features (Volar)</code></a>-<code>Vue 语言扩展</code></h4><p>为<code>Vue template</code>提供原生的<code>TypeScript</code>语言服务。推荐在<code>Vue3</code>项目中开启。</p><h4 id="Vetur-Vue相关支持"><a href="#Vetur-Vue相关支持" class="headerlink" title="Vetur-Vue相关支持"></a><a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur"><code>Vetur</code></a>-<code>Vue相关支持</code></h4><ul><li>语法、语义高亮</li><li><code>Vue</code>代码片段</li><li>格式化相关代码</li><li>智能感知及<code>debug</code></li><li>错误检测</li><li>其他功能</li></ul><div class="success"><blockquote><p>主题相关</p></blockquote></div><h4 id="One-Dark-Pro和Material-Theme-vscode主题"><a href="#One-Dark-Pro和Material-Theme-vscode主题" class="headerlink" title="One Dark Pro和Material Theme-vscode主题"></a><a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme"><code>One Dark Pro</code></a>和<a href="https://marketplace.visualstudio.com/items?itemName=Equinusocio.vsc-material-theme"><code>Material Theme</code></a>-<code>vscode主题</code></h4><h4 id="Material-Icon-Theme-vscode文件图标主题"><a href="#Material-Icon-Theme-vscode文件图标主题" class="headerlink" title="Material Icon Theme-vscode文件图标主题"></a><a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme"><code>Material Icon Theme</code></a>-<code>vscode文件图标主题</code></h4><hr><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><h4 id="跳转到代码行"><a href="#跳转到代码行" class="headerlink" title="跳转到代码行"></a>跳转到代码行</h4><p><code>Ctrl + g</code>或者<code>Ctrl + p</code>输入<code>:</code>，再输入行号回车，即可完成行跳转</p><h4 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h4><p><code>Ctrl + p</code>输入文件名，回车。文件內搜索<code>Ctrl + f</code></p><h4 id="打开最近工作区或者文件（夹）"><a href="#打开最近工作区或者文件（夹）" class="headerlink" title="打开最近工作区或者文件（夹）"></a>打开最近工作区或者文件（夹）</h4><p><code>Ctrl + r</code> 选择你的工作区，按住<code>Ctrl</code>点击打开，会新开一个<code>vscode</code>打开。不加<code>Ctrl</code>会在当前窗口替换并打开。</p><h4 id="新建文件和新开vscode"><a href="#新建文件和新开vscode" class="headerlink" title="新建文件和新开vscode"></a>新建文件和新开<code>vscode</code></h4><p><code>Ctrl + n</code>新建文件，<code>Ctrl + Shift + n</code>新开<code>vscode</code>。</p><h4 id="新键行"><a href="#新键行" class="headerlink" title="新键行"></a>新键行</h4><p><code>Ctrl + 回车</code>，效果类似在行尾按下回车。带来的便捷就是不需要先将光标移动到行尾。</p><h4 id="打开文件Ctrl-o，打开、关闭终端Ctrl"><a href="#打开文件Ctrl-o，打开、关闭终端Ctrl" class="headerlink" title="打开文件Ctrl + o，打开、关闭终端Ctrl + ~"></a>打开文件<code>Ctrl + o</code>，打开、关闭终端<code>Ctrl + ~</code></h4><h4 id="代码行快速复制、剪贴"><a href="#代码行快速复制、剪贴" class="headerlink" title="代码行快速复制、剪贴"></a>代码行快速复制、剪贴</h4><p>当需要对整行代码操作时，无需选中直接<code>Ctrl + c</code>即可复制，<code>Ctrl + x</code>即可剪贴。</p><p>同时按住<code>Shift + Alt + 方向键（上/下）</code>，可实现基于当前行的向上向下复制粘贴。</p><h4 id="缩进调整"><a href="#缩进调整" class="headerlink" title="缩进调整"></a>缩进调整</h4><p><code>Tab</code>向后缩进，<code>Shift + Tab</code>向前缩进。</p><h4 id="批量选中"><a href="#批量选中" class="headerlink" title="批量选中"></a>批量选中</h4><p>按住<code>Shift</code>，鼠标左键点击开头结尾（或者方向键），即可选中。<code>Ctrl + a</code>选中所有。选中变量<code>or</code>函数后<code>Ctrl + d</code>持续使用即可<strong>批量查找</strong>该函数或变量。</p><h4 id="修改引用"><a href="#修改引用" class="headerlink" title="修改引用"></a>修改引用</h4><p>鼠标点击变量或者函数，按下<code>F2</code>，输入你要更改的名称，回车即可<strong>同步修改</strong>所有用到该变量的名称。</p><h4 id="添加注释"><a href="#添加注释" class="headerlink" title="添加注释"></a>添加注释</h4><p>单行注释<code>Ctrl + /</code>，多行注释<code>Shift + Alt + a</code>。</p><h4 id="多光标"><a href="#多光标" class="headerlink" title="多光标"></a>多光标</h4><p>按住<code>Alt</code>键，鼠标左键每次点击都会生成一个新的光标。或者<code>Ctrl + Alt + 方向键</code>创建多个光标。</p><h4 id="窗口拆分"><a href="#窗口拆分" class="headerlink" title="窗口拆分"></a>窗口拆分</h4><p><code>Ctrl + \</code>，在右侧开一个编辑器。</p><h4 id="窗口视图移动（滚轮效果）"><a href="#窗口视图移动（滚轮效果）" class="headerlink" title="窗口视图移动（滚轮效果）"></a>窗口视图移动（滚轮效果）</h4><p>按住<code>Ctrl</code>，点击方向键上下，即可实现滚动。</p><h4 id="代码行移动"><a href="#代码行移动" class="headerlink" title="代码行移动"></a>代码行移动</h4><p>按住<code>Alt</code>，点击方向键上下，即可完成光标代码行的移动，如行 11 移动到行 19。</p><h4 id="代码debug"><a href="#代码debug" class="headerlink" title="代码debug"></a>代码<code>debug</code></h4><ul><li><p>方式一：可以选择侧边栏的调试按钮，选择配置进行调试。</p></li><li><p>方式二：<code>F5</code>运行调试。</p></li></ul><h4 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h4><blockquote><p>(Code 快捷键 Shift + Alt + F) 格式化工具使用 prettier</p></blockquote><blockquote><p>(Code 快捷键 Shift + Alt + O) 整理 import 引用</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 土豆の收藏安利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> plugins </tag>
            
            <tag> 设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遗忘，教你洒脱</title>
      <link href="/diary/forget-thing/"/>
      <url>/diary/forget-thing/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 土豆の随笔日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript中的继承方案及其实现</title>
      <link href="/notes/javascript-extends/"/>
      <url>/notes/javascript-extends/</url>
      
        <content type="html"><![CDATA[<h3 id="继承-extends-导语"><a href="#继承-extends-导语" class="headerlink" title="继承(extends) 导语"></a>继承(extends) 导语</h3><p>任何一门面向对象的语言都有继承，继承简单的说 即为子类继承父类的属性和方法，并且在继承以后可以对这些属性和方法进行操作及使用。</p><p>举个栗子：（你的父亲很富有，你继承你父亲的财产以后，你也就变得和他一样富有。）</p><p><code>js</code>虽然是一门弱类型语言，但是却给我们提供了一种很好的实现继承的方法——基于原型实现 不知道原型的盆友，<a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes">戳这里</a></p><span id="more"></span><h3 id="继承的六种实现"><a href="#继承的六种实现" class="headerlink" title="继承的六种实现"></a>继承的六种实现</h3><p><code>主要对继承熟悉掌握，所以没有单独写测试用例进行测试。</code></p><p>定义基类(父类)<code>Man</code>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Man</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> params<span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'my name is '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 原型上的方法</span><span class="token class-name">Man</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">food</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'正在吃'</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="拷贝继承"><a href="#拷贝继承" class="headerlink" title="拷贝继承"></a>拷贝继承</h4><blockquote><p>实现：枚举父类实例的方法及属性，拷贝到子类的原型上</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> man1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> man1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 需要拷贝基类原型上的属性和方法，所以移除了 hasOwnProperty 判断</span>    <span class="token comment">// if (Object.hasOwnProperty.call(man1, key)) &#123;</span>    <span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> man1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// &#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// test</span><span class="token keyword">const</span> jack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'jack'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jack<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jack</span>jack<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// my name is jack</span>jack<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">'零食'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jack正在吃零食</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jack <span class="token keyword">instanceof</span> <span class="token class-name">Man</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jack <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><blockquote><p>优缺点：</p></blockquote><ul><li><p>支持多继承</p></li><li><p>效率较低，内存占用较高。（因为要拷贝父类的属性）</p></li><li><p>无法获取父类不可枚举的方法。（不可枚举方法，不能使用 <code>for in</code> 访问）</p></li></ul><h4 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h4><blockquote><p>实现：子类的原型指向父类的实例</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> params<span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> params<span class="token punctuation">.</span>age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> params<span class="token punctuation">.</span>sex<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">', my age is '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// test</span><span class="token keyword">const</span> rose <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'rose'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rose<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// rose</span>rose<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// my name is rose</span>rose<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello rose, my age is 18</span></code></pre><blockquote><p>优缺点：</p></blockquote><ul><li><p>非常纯粹的继承关系，实例是子类的实例，也是父类的实例。</p></li><li><p>父类新增原型方法&#x2F;原型属性，子类也能访问到。</p></li><li><p>简单易实现。</p></li><li><p>无法实现多继承，且来自原型上的引用属性所有实例共享！</p></li><li><p>子类需要对自身(非原型)属性重载，因为基类(非原型)属性无法在继承时被实例化-基于原型链继承导致。</p></li></ul><h4 id="构造继承"><a href="#构造继承" class="headerlink" title="构造继承"></a>构造继承</h4><blockquote><p>实现：</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">Man</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// test</span><span class="token keyword">const</span> m1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'mm'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// my name is mm</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1 <span class="token keyword">instanceof</span> <span class="token class-name">Man</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1 <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><blockquote><p>优缺点：</p></blockquote><ul><li><p>解决子类实例共享父类引用属性的问题. 可以实现多继承（<code>call</code>多个父类对象）。</p></li><li><p>实例并不是父类的实例，只是子类的实例。</p></li><li><p>只能继承父类的实例属性和方法，不能继承原型属性&#x2F;方法</p></li><li><p>无法实现函数复用，每个子类都有父类实例函数的副本，影响性能</p></li></ul><h4 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h4><blockquote><p>实现：</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">Man</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Student<span class="token punctuation">;</span><span class="token comment">// test</span><span class="token keyword">let</span> m2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'mm2'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mm2</span>m2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// my name is mm2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2 <span class="token keyword">instanceof</span> <span class="token class-name">Man</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2 <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><blockquote><p>优缺点：</p></blockquote><ul><li><p>可以继承实例属性&#x2F;方法，也可以继承原型属性&#x2F;方法。</p></li><li><p>实例既是父类的实例，也是子类的实例。</p></li><li><p>可实现函数方法的复用</p></li><li><p>调用了两次父类构造函数，生成了两份实例.</p></li></ul><h4 id="寄生继承"><a href="#寄生继承" class="headerlink" title="寄生继承"></a>寄生继承</h4><p><code>比组合多了一个立即执行函数, 消除多余的实例</code></p><blockquote><p>实现：</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">Man</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 创建一个没有实例方法的类</span>  <span class="token keyword">const</span> <span class="token function-variable function">Super</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token class-name">Super</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">Man</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>  <span class="token comment">// 将实例作为子类的原型</span>  <span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>优缺点：</p></blockquote><ul><li>实现相对较复杂一点。</li></ul><h4 id="ES6语法糖"><a href="#ES6语法糖" class="headerlink" title="ES6语法糖"></a><code>ES6</code>语法糖</h4><blockquote><p>实现：</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'my name is '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Man</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// test</span><span class="token keyword">const</span> m3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'mm3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m3<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// my name is mm3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m3 <span class="token keyword">instanceof</span> <span class="token class-name">Man</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m3 <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><blockquote><p>优缺点：</p></blockquote><ul><li><code>ECMAscript6</code>标准的继承方案</li></ul><p><code>继承能够在一定程度上帮助我们快速便捷的使用父类的属性及方法，在 js 中实现继承的方案大致就这六种，基本都是依托原型建立的继承关系。其中的拷贝继承个人不推荐使用，ES6继承能用则用</code></p>]]></content>
      
      
      <categories>
          
          <category> 土豆の学习笔记 </category>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>容器嵌入iframe后的滚动问题记录</title>
      <link href="/bugs/iframe-scroll/"/>
      <url>/bugs/iframe-scroll/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>最初，我做了一个<code>h5</code>的页面，该页面使用<code>iframe</code>内链了一个网页。当我直接在手机浏览器打开时，发现无法正常进行滚动。</p><p>拟解决办法：我给这个<code>iframe</code>添加了一个包裹容器，通过设置该容器的<code>overflow: auto</code>，以及设置<code>iframe height:100%</code>达到预期可滚动的效果。</p><p>新问题：首轮解决办法确实能够让 iframe 滚动，不过页面却出现了两个滚动条，<code>what f?</code>那肯定就是<code>wrapper 和 iframe</code>出现了高度差了。</p><span id="more"></span><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><blockquote><p>分析高度差出现的原因，然后…解决。</p></blockquote><p>从节点本身出发，<code>iframe</code>是内联元素，而内联元素是跟基线<code>baseline</code>对齐的，iframe 的后面有个<code>行内空白节点</code>(该节点产生的原因其实和<code>dom</code>结构有关系，下面贴上源代码：)</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iframe-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iframe<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>可以看到<code>iframe</code>与<code>div</code>之间有个换行符，也可以理解为空白节点，空白节点占据着高度，<code>iframe</code>与空白节点的基线对齐，导致了<code>div</code>被撑开，从而出现滚动条。</p><p>解决方案：</p><pre class="language-none"><code class="language-none">方案一：设置iframe的vertical-align:top方案二：设置父div的font-size:0方案三：改变iframe的内联元素性质，display: block</code></pre><p>通常采用第三种方案，改变<code>iframe</code>的元素性质，贴上部分源码：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.iframe-container</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">-webkit-overflow-scrolling</span><span class="token punctuation">:</span> touch<span class="token punctuation">;</span> // 兼容 ios<span class="token punctuation">&#125;</span><span class="token selector">.iframe-container .iframe</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>至此，<code>iframe</code>的滚动问题得到完美解决。<del>算是踩了个小坑，以后注意就好了</del></p><blockquote><p>试一下，你会比你自己想象中的还要强大</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 土豆の踩坑之路 </category>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> iframe滚动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm以及yarn的指令使用</title>
      <link href="/share/npm-and-yarn/"/>
      <url>/share/npm-and-yarn/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="npm，npx概念及指令简单介绍"><a href="#npm，npx概念及指令简单介绍" class="headerlink" title="npm，npx概念及指令简单介绍"></a><code>npm，npx</code>概念及指令简单介绍</h3></blockquote><p><code>tips：相关配置指令在环境配置章节</code></p><p><code>npm</code>是随<code>node</code>一起安装的包管理器。主要作用是用于发布和下载程序包的<code>CLI(命令行)</code>工具，以及托管<code>javascript程序包的在线存储库</code>。</p><p>不同于<code>npm</code>，<code>npx</code>的<code>x</code>可理解为<code>eXecute</code>，主要作为命令行的寻址等辅助功能。<code>npx xxx</code>时，<code>npx</code>会先看<code>xxx</code>在<code>$PATH</code>是否存在，如果没有，则会找当前目录的<code>node_modules</code>，如果还是没有，那么会先下载安装这个<code>xxx</code>再执行。</p><span id="more"></span><h4 id="常用安装指令说明"><a href="#常用安装指令说明" class="headerlink" title="常用安装指令说明"></a>常用安装指令说明</h4><p>安装使用 i or install。<code>卸载时使用 uni or uninstall，就不另外说明了</code>。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 npm 包 i 为 install 简写</span><span class="token comment"># 不带任何参数：临时安装到 node_modules，不会添加到 devDependencies 和 dependencies</span><span class="token function">npm</span> i <span class="token punctuation">[</span>package<span class="token punctuation">]</span><span class="token comment"># 安装指定版本or tag的包</span><span class="token function">npm</span> <span class="token function">install</span> package@version<span class="token function">npm</span> i package@tag<span class="token comment"># 安装最新版本的包</span><span class="token function">npm</span> i package@latest<span class="token comment"># 安装时的一些参数说明：</span><span class="token comment"># --save-dev or -D or --dev or -S-D 表示安装依赖到 devDependencies</span><span class="token function">npm</span> i package -D<span class="token comment"># -S or --save 表示安装依赖到 dependencies</span><span class="token function">npm</span> i package --save<span class="token comment"># 全局安装</span><span class="token function">npm</span> i --global package</code></pre><h4 id="其他指令及附带配置说明："><a href="#其他指令及附带配置说明：" class="headerlink" title="其他指令及附带配置说明："></a>其他指令及附带配置说明：</h4><blockquote><p>npm help 查看全部指令</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 清除缓存</span><span class="token function">npm</span> cache clean --force<span class="token comment"># config 别名 c</span><span class="token comment"># 设置全局安装位置</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> prefix <span class="token string">'C:\Users\xx\AppData\Roaming\npm'</span><span class="token comment"># 设置缓存路径，默认在 c 盘</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> cache <span class="token string">"C:\Users\xx\AppData\Roaming<span class="token entity" title="\n">\n</span>pm_cache"</span><span class="token comment"># 其他 npm 配置，格式均同上，set 设置，get 读取，delete删除，例如：</span><span class="token function">npm</span> config get registry<span class="token comment"># 当然可以添加限制参数，表示是本地配置、全局配置、用户配置</span><span class="token function">npm</span> config --global <span class="token builtin class-name">set</span> registry xxx<span class="token comment"># 查看配置</span><span class="token function">npm</span> config <span class="token function">ls</span> -l<span class="token comment"># 版本号 -v or --version</span><span class="token function">npm</span> -v<span class="token comment"># 项目初始化 -y 参数可选</span><span class="token function">npm</span> init -y<span class="token comment"># 执行某个某个脚本命令 例如(package.json 的 scripts)</span><span class="token function">npm</span> run <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token comment"># 登录到 npm，可以添加登录参数,如下登录到xxx npm仓库，一般用于公司内部npm私服</span><span class="token function">npm</span> login<span class="token function">npm</span> login --registry<span class="token operator">=</span>xxx<span class="token comment"># 没有账号，添加账号登录。同理可设置 registry</span><span class="token function">npm</span> adduser<span class="token comment"># 查看当前登录信息</span><span class="token function">npm</span> <span class="token function">whoami</span><span class="token comment"># 查看一个 npm 包的最新版本/所有版本</span><span class="token function">npm</span> view package version/versions</code></pre><p>补充： <code>npm link</code>详见：<a href="/share/npm-link">手把手教你使用 npm-link 软链</a>，<code>npm publish</code>详见：<a href="/share/npm-publish">如何发布一个 npm-package?</a></p><p>其他指令：<a href="https://docs.npmjs.com/cli/v7/commands/npm-install">-&gt; 详见 v7</a></p><blockquote><p>tips: npm config 读取的内容是有优先级的，项目下的 <code>.npmrc</code> -&gt; 用户级<code>~/.npmrc</code> -&gt; 全局<code>安装目录/etc/.npmrc</code>（稍不注意就会存在你配置的 global registry 不生效…）</p></blockquote><blockquote><h3 id="yarn常用指令介绍"><a href="#yarn常用指令介绍" class="headerlink" title="yarn常用指令介绍"></a><code>yarn</code>常用指令介绍</h3></blockquote><blockquote><p>yarn help 查看全部指令</p></blockquote><p>大部分指令与<code>npm</code>大同小异，主要介绍一些项目常用的：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#初始化项目 (避免使用Git bash)</span><span class="token function">yarn</span> init<span class="token comment"># 安装依赖</span><span class="token comment"># add 参数说明 --dev or -D 安装到 devDependencies，不加参数则安装到 dependencies</span><span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span><span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>version<span class="token punctuation">]</span><span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span> --dev<span class="token comment"># 升级依赖的包版本</span><span class="token function">yarn</span> upgrade <span class="token punctuation">[</span>package<span class="token punctuation">]</span><span class="token function">yarn</span> upgrade <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>version<span class="token punctuation">]</span><span class="token function">yarn</span> upgrade <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment"># 安装指定包的最新版本</span><span class="token comment"># eg. yarn add ioredis@latest</span><span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>packageName<span class="token punctuation">]</span>@latest<span class="token comment"># 全局安装</span><span class="token function">yarn</span> global <span class="token function">add</span> xx<span class="token comment"># 移除依赖</span><span class="token function">yarn</span> remove <span class="token punctuation">[</span>package<span class="token punctuation">]</span><span class="token comment"># 执行某个脚本命令 run 可以省略</span><span class="token function">yarn</span> run <span class="token punctuation">[</span>scriptName<span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 土豆の教程分享 </category>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> npx </tag>
            
            <tag> yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nvm安装及Node环境搭建</title>
      <link href="/share/nvm-and-node-install/"/>
      <url>/share/nvm-and-node-install/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="nvm下载及安装"><a href="#nvm下载及安装" class="headerlink" title="nvm下载及安装"></a><code>nvm</code>下载及安装</h3></blockquote><p>下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases">链接</a></p><p><code>下载exe的package文件，选择自定义的安装盘符，傻瓜式安装即可，环境变量会自动添加。</code></p><p>安装完成后，配置<code>node</code>及<code>nvm</code>的<code>mirror</code>地址 (不配置会导致下载<code>node</code>后，在下载<code>npm</code>过程中可能会发生错误，需要手动下载安装<code>npm</code>)。配置如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 方式一：手动添加到配置文件中：nvm安装目录/settings.txt 末尾追加</span>node_mirror: https://npm.taobao.org/mirrors/node/npm_mirror: https://npm.taobao.org/mirrors/npm/<span class="token comment"># 方式二：通过指令修改</span>nvm node_mirror <span class="token punctuation">[</span>url<span class="token punctuation">]</span>nvm npm_mirror <span class="token punctuation">[</span>url<span class="token punctuation">]</span></code></pre><blockquote><h3 id="安装node以及npm"><a href="#安装node以及npm" class="headerlink" title="安装node以及npm"></a>安装<code>node</code>以及<code>npm</code></h3></blockquote><p><code>打开windows terminal，并以管理员身份运行(避免权限问题导致安装过程抛出异常)</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示所有可以下载的 NodeJs 版本：</span>nvm list available<span class="token comment"># 安装指定版本的 NodeJs (选择版本号安装) 你可以安装多个版本</span>nvm <span class="token function">install</span> <span class="token number">14.5</span>.0<span class="token comment"># or 直接安装最新版(不建议)</span>nvm <span class="token function">install</span> latest<span class="token comment"># 列出你以及安装的 NodeJs 版本，下面一行指令同 nvm list</span>nvm list installed<span class="token comment"># 使用某个版本号的 NodeJs (从你安装的版本中选择)</span>nvm use <span class="token number">14.5</span>.0</code></pre><p>检测<code>node及npm</code>是否成功安装：出现版本号代表安装成功</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> -v<span class="token function">npm</span> -v</code></pre><p>如果<code>nvm</code>没有配置<code>mirror</code>，或者其他原因导致你的<code>npm</code>不能正常下载安装。可以通过上面配置的方式，重新安装<code>node</code>，会自动匹配对应的<code>npm</code>下载安装。当然你想手动安装并配置<code>npm</code>，也是 ok 的，如下介绍手动配置方式：(正常安装请跳过)</p><ul><li><p>根据<code>nvm</code>下载安装<code>node</code>时，抛出的异常信息得知<code>npm</code>的下载地址：<a href="https://github.com/npm/cli/releases/tag/v6.14.11">下载 npm</a></p></li><li><p>将<code>npm</code>解压到<code>nvm/v指定版本/node_modules/</code>下，将<code>npm</code>解压文件夹重命名为<code>npm</code></p></li><li><p>将<code>npm/bin/</code>文件下的<code>npm</code>及<code>npx</code>相关文件拷贝到<code>nvm/v指定版本/</code>下</p></li><li><p>在当前目录打开终端，输入<code>npm -v</code>，出现版本号表示安装成功，如果换了文件夹后提示指令不存在，可在环境变量<code>path</code>内添加当前路径</p></li></ul><blockquote><h3 id="nrm的安装及切换镜像源"><a href="#nrm的安装及切换镜像源" class="headerlink" title="nrm的安装及切换镜像源"></a><code>nrm</code>的安装及切换镜像源</h3></blockquote><p><code>nrm</code>提供了快速切换镜像源的方案，如果通过<code>npm</code>指令配置，则无需安装</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 全局安装</span><span class="token function">npm</span> i<span class="token punctuation">(</span>install<span class="token punctuation">)</span> nrm -g<span class="token comment"># 检测是否安装成功</span>nrm --version<span class="token comment"># 列出可用的镜像源</span>nrm <span class="token function">ls</span><span class="token comment"># 测试镜像地址速度</span>nrm <span class="token builtin class-name">test</span><span class="token comment"># 切换到指定镜像</span>nrm use <span class="token punctuation">[</span>镜像名称<span class="token punctuation">]</span></code></pre><blockquote><h3 id="npm全局配置及yarn安装"><a href="#npm全局配置及yarn安装" class="headerlink" title="npm全局配置及yarn安装"></a><code>npm</code>全局配置及<code>yarn</code>安装</h3></blockquote><ul><li>安装<code>yarn</code></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># [下载镜像安装](https://classic.yarnpkg.com/en/docs/install#windows-stable)</span><span class="token comment"># npm 安装</span><span class="token function">npm</span> <span class="token function">install</span> --global <span class="token function">yarn</span><span class="token comment"># [2.x 安装使用](https://yarnpkg.com/getting-started/install)</span></code></pre><ul><li>配置<code>npm</code>及<code>yarn</code>的<code>registry</code>：</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 默认源</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmjs.org<span class="token function">yarn</span> config <span class="token builtin class-name">set</span> registry https://registry.yarnpkg.com<span class="token comment"># 配置到内网环境</span><span class="token function">npm</span> config --global <span class="token builtin class-name">set</span> registry http://172.xxx/repository/npm/<span class="token comment"># 配置淘宝镜像</span><span class="token comment"># (截止22-5-31)</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span class="token function">yarn</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span class="token comment"># new</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmmirror.com<span class="token comment"># 配置源，且同步安装使用 cnpm</span><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npmmirror.com<span class="token comment"># 如果命令行修改失败 - 手动修改配置 c:/用户/user/.npmrc 文件</span><span class="token assign-left variable">registry</span><span class="token operator">=</span>http://172.xxx/repository/npm/<span class="token comment"># 其他镜像</span><span class="token assign-left variable">CHROMEDRIVER_CDNURL</span><span class="token operator">=</span><span class="token string">"https://registry.npmmirror.com/-/binary/chromedriver"</span><span class="token assign-left variable">SASS_BINARY_SITE</span><span class="token operator">=</span><span class="token string">"https://registry.npmmirror.com/-/binary/node-sass"</span><span class="token assign-left variable">PUPPETEER_DOWNLOAD_HOST</span><span class="token operator">=</span><span class="token string">"https://registry.npmmirror.com/-/binary"</span><span class="token assign-left variable">NODEJS_ORG_MIRROR</span><span class="token operator">=</span><span class="token string">"https://registry.npmmirror.com/-/binary/node"</span><span class="token assign-left variable">NVM_NODEJS_ORG_MIRROR</span><span class="token operator">=</span><span class="token string">"https://registry.npmmirror.com/-/binary/node"</span></code></pre><ul><li>设置全局安装及缓存路径</li></ul><p><code>配置使用 set，查看使用 get。除了指令设置配置项外，也可手动添加配置，文件位置：~/.npmrc ~/.yarnrc</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 清除缓存</span><span class="token function">npm</span> cache clean --force<span class="token function">yarn</span> cache clean<span class="token comment"># 设置全局安装位置</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> prefix <span class="token string">'C:\Users\xx\AppData\Roaming\npm'</span><span class="token function">yarn</span> config <span class="token builtin class-name">set</span> global-folder <span class="token string">"D:\yarn\yarnDate"</span><span class="token comment"># 设置缓存路径，默认在 c 盘</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> cache <span class="token string">"C:\Users\xx\AppData\Roaming<span class="token entity" title="\n">\n</span>pm_cache"</span><span class="token function">yarn</span> config <span class="token builtin class-name">set</span> cache-folder e:<span class="token punctuation">\</span>YarnCache<span class="token comment"># 查看配置信息 --global or -l</span><span class="token function">npm</span> config <span class="token function">ls</span><span class="token function">yarn</span> config list</code></pre>]]></content>
      
      
      <categories>
          
          <category> 土豆の教程分享 </category>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> yarn </tag>
            
            <tag> nvm </tag>
            
            <tag> node </tag>
            
            <tag> nrm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的服务搭建和简单使用</title>
      <link href="/share/hexo/"/>
      <url>/share/hexo/</url>
      
        <content type="html"><![CDATA[<h3 id="What-is-Hexo"><a href="#What-is-Hexo" class="headerlink" title="What is Hexo?"></a>What is Hexo?</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<a href="https://hexo.io/docs/">详见文档</a></p><span id="more"></span><h3 id="开始搭建你的Hexo服务"><a href="#开始搭建你的Hexo服务" class="headerlink" title="开始搭建你的Hexo服务"></a>开始搭建你的<code>Hexo</code>服务</h3><h4 id="安装脚手架"><a href="#安装脚手架" class="headerlink" title="安装脚手架"></a>安装脚手架</h4><blockquote><p>npm install -g hexo-cli<br>npm install hexo</p></blockquote><h4 id="初始化你的博客项目"><a href="#初始化你的博客项目" class="headerlink" title="初始化你的博客项目"></a>初始化你的博客项目</h4><blockquote><p>hexo init <blogName><br>cd blogName<br>yarn or npm i</p></blockquote><h4 id="配置你的博客信息"><a href="#配置你的博客信息" class="headerlink" title="配置你的博客信息"></a>配置你的博客信息</h4><p><code>_config.yml</code>即为博客的配置信息文件，详见<a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 。</p><h4 id="主要文件夹说明"><a href="#主要文件夹说明" class="headerlink" title="主要文件夹说明"></a>主要文件夹说明</h4><p><code>scaffolds</code>文件夹可以配置你的文章模板，即每次 hexo 新建文章都会根据此文件夹配置建立文件。</p><p><code>source</code>就是你的文章相关的资源文件。</p><p><code>themes</code>主题文件夹，根据主题来生成对应静态页面。</p><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p>在<code>package.json</code>中可以发现程序的启动指令。</p><blockquote><p>hexo server [hexo s] [yarn server]</p></blockquote><p>在<code>terminal</code>中找到服务地址，默认<code>http://localhost:4000/</code>,打开浏览器即可浏览你的博客</p><h3 id="根据你的口味配置想要的主题模板"><a href="#根据你的口味配置想要的主题模板" class="headerlink" title="根据你的口味配置想要的主题模板"></a>根据你的口味配置想要的主题模板</h3><ul><li><p>打开<code>github</code>，搜索<code>hexo-theme</code>，根据<code>star</code>的数量排个序，挨个去看效果，选择自己心仪的主题</p></li><li><p><code>cd themes &amp;&amp; git clone xxx</code>，将找到的主题文件资源克隆到<code>themes</code>文件夹下</p></li><li><p>根据主题的相关配置项提示进行配置，重启服务即可看到效果。(每个主题可能配置方式不一样，大同小异)</p></li></ul><h3 id="开启你的博客之路"><a href="#开启你的博客之路" class="headerlink" title="开启你的博客之路"></a>开启你的博客之路</h3><blockquote><p>新建文章，<code>layout</code>对应<code>draft、post、page(草稿source/_drafts、文章source/_posts、页面source)</code></p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span></code></pre><p>其他辅助参数：</p><pre class="language-none"><code class="language-none">-p, --path自定义新文章的路径-r, --replace如果存在同名文章，将其替换-s, --slug文章的 Slug，作为新文章的文件名和发布后的 URL</code></pre><p><code>eg</code>. 我想在<code>_posts/share</code>文件夹下创建一片<code>a.md</code>的文章，且文章的页面<code>title</code>为‘这是 A’</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new post -p share/a <span class="token string">'这是A'</span><span class="token comment"># 创建一篇草稿</span>hexo new draft <span class="token punctuation">..</span>.<span class="token comment"># 发布</span>hexo publish <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span></code></pre><blockquote><p>其他常用指令说明：</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成静态文件，在 public 文件夹下</span>hexo generatehexo g<span class="token comment"># 清除缓存文件 (db.json) 和已生成的静态文件 (public)</span>hexo clean<span class="token comment"># 部署网站 -g, --generate部署之前预先生成静态文件</span>hexo deploy<span class="token comment"># 草稿发表，移动到 source/_posts 文件夹</span>hexo publish <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>filename<span class="token operator">></span></code></pre><h3 id="将Hexo部署到GitHub-Pages"><a href="#将Hexo部署到GitHub-Pages" class="headerlink" title="将Hexo部署到GitHub Pages"></a><a href="https://hexo.io/zh-cn/docs/github-pages">将<code>Hexo</code>部署到<code>GitHub Pages</code></a></h3>]]></content>
      
      
      <categories>
          
          <category> 土豆の教程分享 </category>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo-cli </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
