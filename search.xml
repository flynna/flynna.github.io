<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深入了解事件循环</title>
      <link href="/share/javascript-event-loop/"/>
      <url>/share/javascript-event-loop/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="JS-是单线程"><a href="#JS-是单线程" class="headerlink" title="JS 是单线程"></a><code>JS</code> 是单线程</h4><p>在此之前，请注意进程和线程的区别。单线程的特性，决定了<code>JS</code> 引擎在任何时候都只有一个主线程来执行任务。</p><p>为什么是单线程？</p><blockquote><p><code>js</code> 的主要作用是和用户互动以及操作 <code>dom</code>.</p><p>想象一个场景，在浏览器环境下，我们需要使用 <code>js</code> 来操作 <code>dom</code>，它可能是 <strong>插入 dom</strong> 或者 <strong>删除 dom</strong>，如果 <code>js</code> 是多线程，那么可能存在两种操作同时执行的情况，这是自相矛盾的…</p></blockquote><p>然而，有些任务在执行的过程中是非常耗时的，比如定时器或者监听事件…它们会阻塞主线程的执行，导致页面卡顿。</p><h4 id="JS-是非阻塞性的"><a href="#JS-是非阻塞性的" class="headerlink" title="JS 是非阻塞性的"></a><code>JS</code> 是非阻塞性的</h4><p>为了避免主线程被阻塞，<code>JS</code> 引擎将任务分为两种：<strong>同步任务（代码）和异步任务（代码）</strong></p><p>常见的异步代码：</p><blockquote><p><code>setTimeout、setInterval、AJAX/Fetch、事件绑定监听、promise.then、promise.catch...</code></p></blockquote><p><strong>请注意：<code>promise</code> 本身是同步任务（代码），仅 <code>then</code> 和 <code>catch</code> 是异步的</strong></p><p>协调同步任务和异步任务执行，从而使 <code>JS</code> 的执行是非阻塞的，就需要事件循环（<code>Event Loop</code>）机制来实现。</p><span id="more"></span><h3 id="什么是事件循环"><a href="#什么是事件循环" class="headerlink" title="什么是事件循环"></a>什么是事件循环</h3><p>同步任务是由 <code>JS</code> 引擎发起并立即执行，异步任务则是通过宿主环境（浏览器、<code>node</code>）在正确时机发起并执行。</p><h4 id="执行栈"><a href="#执行栈" class="headerlink" title="执行栈"></a>执行栈</h4><p>在我们调用某一个方法时，<code>js</code> 会生成对应的执行环境（执行上下文 <code>context</code>）和私有作用域。如果该方法中又存在另一个方法的调用，则需要等待另一个方法执行完毕后，再执行当前方法。依次类推，这个不停等待内部函数执行的过程就执行栈，秉持先进后出的原则，等执行栈为空时，则表示当前函数执行完成。</p><p>如果是其他的同步代码执行，例如变量赋值而非函数调用，则直接入栈并立即执行，执行完成后出栈。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>a 声明并赋值（入栈出栈）-&gt; b() 入栈开始执行 -&gt; c() 入栈开始执行 -&gt; c() 执行完毕出栈 -&gt; b() 执行完毕出栈 -&gt; console.log(‘a’)（入栈出栈）-&gt; 执行栈清空</p></blockquote><p>例如上面的代码，为了方便说明，我省略了函数回调注册的过程， 同时只写了同步代码，实际应用中，同步异步代码都会有。</p><h4 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h4><p>上面有提到，对于异步任务，<code>js</code> 引擎不会一直等待其执行完成再继续其他任务。</p><p>当代码执行过程中，如果遇到<strong>同步（任务）代码立即入栈并执行，执行完成后出栈。在这个过程中，如果存在异步（任务）代码，则先将异步任务放入宿主环境等待正确执行时机，时机到了则入异步任务执行队列，等待执行栈清空，主线程空闲后依次执行</strong>。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> rej</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise then'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise then then'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> rej</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2 then'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2 then then'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>console.log(‘promise’) 入执行栈并出栈 -&gt; promise then 入异步任务队列 –&gt; promise2 then 入异步任务队列 -&gt; console.log(‘promise2’) 入执行栈并出栈 -&gt; a() 入栈并出栈 -&gt; 执行栈清空，主线程空闲 –&gt; promise then 入执行栈执行(出队列)，promise then then 入异步队列 –&gt; promise2 then 入执行栈执行(出队列)，promise2 then then 入异步队列 —&gt; promise then then 入执行栈(出队列) —&gt; promise2 then then 入执行栈(出队列) —&gt; 执行栈和异步任务队列均清空</p></blockquote><p>上面例子，我刻意没有使用类似 <code>setTimeout</code> 这样的异步方法，因为它本身是支持定时到某个时间间隔后执行。又或者类似点击事件，它也只有在被点击的时候才加入到异步任务执行队列里。</p><p>为了区分这类异步任务，<code>js</code> 引擎将异步任务分为两类：<strong>宏任务（<code>macro-task</code>）队列和微任务（<code>micro-task</code>）队列</strong></p><h4 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h4><table><thead><tr><th>#</th><th>浏览器</th><th>Node</th></tr></thead><tbody><tr><td>I&#x2F;O</td><td>✅</td><td>✅</td></tr><tr><td>setTimeout</td><td>✅</td><td>✅</td></tr><tr><td>setInterval</td><td>✅</td><td>✅</td></tr><tr><td>setImmediate</td><td>❌</td><td>✅</td></tr><tr><td>requestAnimationFrame</td><td>✅</td><td>❌</td></tr></tbody></table><p><code>script</code> 主线程代码其实也是宏任务，此外还有注入事件监听、点击事件等等都可以算作是宏任务。</p><blockquote><p>常见的微任务：</p></blockquote><h4 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h4><table><thead><tr><th>#</th><th>浏览器</th><th>Node</th></tr></thead><tbody><tr><td>process.nextTick</td><td>❌</td><td>✅</td></tr><tr><td>MutationObserver</td><td>✅</td><td>❌</td></tr><tr><td>Promise.then catch finally</td><td>✅</td><td>✅</td></tr></tbody></table><p>根据上面列出的常见宏任务和微任务，不难看出：类似不确定的执行时机的 <code>api</code> 都是宏任务，反之则是微任务。（<del>方便记忆 😋😋😋</del>）</p><h4 id="事件循环的产生"><a href="#事件循环的产生" class="headerlink" title="事件循环的产生"></a>事件循环的产生</h4><p>不管是宏任务还是微任务还是主线程的同步代码，他们都是 <code>JS</code> 代码，都需要满足单线程的前提…</p><p>同一时间不能执行多个任务，此外宏任务和微任务本身又可以产生新的同步代码或者新的宏任务和微任务，所以这些任务应该按照怎样的规律去执行呢？事件循环机制因此诞生…</p><p><strong><code>script</code> 主线程代码可以看做是一个宏任务，从这个角度分析，其实代码产生的宏任务和微任务都是由(<code>script</code>)宏任务产生，说其先执行宏任务再执行微任务也不算离谱…</strong></p><p>抛开这个观点来看，其实执行顺序无非就是：主线程同步代码 —&gt; 前者产生的所有微任务（根据生成顺序入队列，包含微任务产生的新微任务）执行 —&gt; 主线程执行完成输出 undefined（步骤可忽略） —&gt; 宏任务执行队列（<strong>和微任务不同的是，宏任务需要正确的时机才会执行，根据时机满足的先后顺序入执行队列</strong>，所以这里是执行队列而非任务产生的顺序队列。此外前者微任务产生的新宏任务将根据执行时机追加到宏任务执行队列末尾）</p><p><strong>注意：宏任务（内部代码）的执行也需要严格按照先同步再所有微任务再宏任务的顺序执行下一个宏任务</strong>，意味着尽管宏任务 1 和 2 都是主线程依次产生，但是也需要先执行完宏任务 1 的所有微任务（如果这个过程中产生新的宏任务，则加入宏任务队列等待正确时机加入执行队列的末尾），再执行宏任务 2</p><blockquote><p>宏任务的同步代码 —&gt; 宏任务的所有微任务执行(根据生成顺序入队列) —&gt; 下一个宏任务的同步代码 —&gt; 下一个宏任务的所有微任务执行…..</p></blockquote><p>依次类推，这种循环执行的过程被称之为事件循环。</p><blockquote><p>如点击或者监听事件被触发，被触发的瞬间加入执行队列等待执行…</p></blockquote><h4 id="规律总结"><a href="#规律总结" class="headerlink" title="规律总结"></a>规律总结</h4><p>主线程(同步代码立即执行并出栈，异步代码分别入微任务队列、宏任务队列)</p><p>—&gt; 微任务队列(由 js 引擎发起并执行的任务： 先进先执行，微任务产生的新的微任务追加到本轮微任务队列末尾，在宏任务之前执行【执行完本轮所有的微任务】)</p><p>—&gt; 宏任务队列(由宿主环境【浏览器、node】发起并执行的任务：等待正确的时机【如定时器(从加入到宏任务队列开始计时，如果时间相同则按加入顺序放入)】，</p><p>【如点击或者监听事件被触发】时机到了后将执行代码放入宏任务执行队列【时机是否正确的监听判断，不需要等待微任务 or 主线程同步代码执行完成】)</p><p>—&gt; 执行本轮宏任务产生的异步任务队列(按顺序取出一个任务，执行其同步代码，以及产生的所有微任务，然后取出下一个异步任务…)</p><p>一次事件循环：</p><pre class="language-none"><code class="language-none">主线程所有同步代码（宏任务执行）---&gt;主线程产生的微任务 1 执行 ----&gt;主线程产生的微任务 2 执行 ----&gt;主线程产生的微任务 1 产生的微任务执行 ----&gt;主线程产生的微任务 2 产生的微任务执行 ----&gt;主线程产生的微任务 1 产生的微任务的微任务执行（依次类推，执行完主线程所有的微任务） ---&gt;undefined（主线程执行完成打印） ---&gt;</code></pre><p>将上面的‘主线程’文字替换为（‘宏任务’）同样适用，等全部完成后，表示该轮宏任务执行结束，开启下一个宏任务继续上面的循环执行…</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><a href="https://www.jsv9000.app/">https://www.jsv9000.app/</a></p><p><code>eg.1</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1 then'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1 then then'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2 then'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2 then then'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout setTimeout2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise then'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-none"><code class="language-none">script startasync1 startasync2promisescript endasync1 endpromise thenundefinedsetTimeoutpromise1promise2promise1 thenpromise2 thenpromise1 then thenpromise2 then thensetTimeout setTimeout2</code></pre><p><code>eg.2</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-none"><code class="language-none">1234 (这里的then要比6的then先加入队列，因为4所在的then加入到微任务队列后，才表示2所在then同步代码执行结束，6继续被加入微任务队列，在所在then微任务后面)567 (同理，7所在then被加入微任务队列后，4所在then同步代码执行结束，此时8所在then被追加到微任务队列，在7所在then之后)89 (7所在then被执行后，9所在then被追加到微任务队列末尾，在8所在then之后)</code></pre><p><strong>注意：<code>promise</code> 内部如果没有调用 <code>resolve</code> 或者 <code>reject</code> 那么 <code>promise</code> 内部代码（含新产生的微任务和宏任务）都执行完成后，此时 <code>promise</code> 状态会自动终止（执行栈清空，该模块微任务宏任务队列清空，由引擎终止回收，而非继续等待）</strong></p><p>**<code>promise</code> 模块内如果同时调用了 <code>resolve</code> 和 <code>reject</code>，那么先被调用的生效，后调用的则不会生效，也不会触发 <code>then</code> 回或者 <code>catch</code>**，所以上面例子的 <code>reject</code> 不会被触发。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 事件循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mobile Tree 组件封装</title>
      <link href="/share/mobile-tree/"/>
      <url>/share/mobile-tree/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="Before…"><a href="#Before…" class="headerlink" title="Before…"></a><code>Before</code>…</h3><p>前段时间封装了<code>mobile-cascade</code> 组件，详见<a href="/share/mobile-cascader-multiple">Mobile 端的级联选择单多选组件实现</a>，有很多的弊端，例如前置依赖了其他的 <code>UI</code> 库基础组件（<code>input/checkbox/tabs...</code>），此外功能相对较单一（不支持 <code>remote/checkStrictly/single...</code>等模式）…</p><p>由于需求迭代，需要在移动端实现一个类似于 <code>pc-tree</code> 的组件，因此在前者的基础上进行了二次封装和优化，最终实现了 <code>mobile-tree</code> 组件。</p><span id="more"></span><h3 id="从0到-1"><a href="#从0到-1" class="headerlink" title="从0到 1"></a>从<code>0</code>到 <code>1</code></h3><ul><li><p>准备用于显示的 <code>cell、icon、checkbox、tabs...</code>等基础组件</p></li><li><p>实现已知选项 <code>data</code> 的 <code>tree</code> 静态渲染</p></li><li><p>支持 <code>fieldProps</code> 字段映射，根据树节点的映射配置渲染节点名称和是否禁用、选中…</p></li><li><p>支持 <code>lazy</code> 模式，可参考其他 <code>UI</code> 组件库实现，通过 <code>emit:click</code> 事件，由外部加载新的数据结构，动态更新 <code>options</code></p></li><li><p>支持 <code>checkStrictly</code> 模式，是否严格遵守父子组件不互相关联。</p></li><li><p>支持 <code>single</code> 模式，是否将绑定的 <code>value</code> 值限制为当前节点而不关联前置路径</p></li><li><p>支持 <code>multiple</code> 多选模式…如果有其他需求可以继续扩展</p></li></ul><h3 id="基于vue3实现"><a href="#基于vue3实现" class="headerlink" title="基于vue3实现"></a>基于<code>vue3</code>实现</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> cloneDeep <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'lodash'</span><span class="token punctuation">;</span>  <span class="token keyword">interface</span> <span class="token class-name">MobileTreeProps</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 单选时值为路径数组string[]，多选为string[][]，若为single模式则类型为[string] | [string][]，此时string为节点自身value</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token literal-property property">fieldProps</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>NodeField<span class="token punctuation">,</span> string<span class="token operator">></span><span class="token punctuation">;</span>    <span class="token literal-property property">options</span><span class="token operator">:</span> InnerOption<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 非 single 模式下 v-model 包含各个层级节点 value，splitChar 用于分割绑定的当前节点值和其父级节点值</span>    splitChar<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span>    multiple<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>    <span class="token comment">// 是否严格遵守父子不互相关联，默认为 false，若父节点可选，此时选中父节点会同时选中子节点且此时绑定的 value 只会统计叶子节点</span>    checkStrictly<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>    <span class="token comment">// single 模式绑定值为选项自身 value，不包含前置路径，选项不跟踪父级节点</span>    single<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>    <span class="token comment">// lazy 模式 nodeChildrenLoad 必传，用于加载子节点</span>    lazy<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>    nodeChildrenLoad<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> InnerOption</span><span class="token punctuation">)</span> <span class="token operator">=></span> Promise<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> <span class="token constant">ROOT</span> <span class="token operator">=</span> <span class="token string">'__$ROOT$__'</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">withDefaults</span><span class="token punctuation">(</span>defineProps<span class="token operator">&lt;</span>MobileTreeProps<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">splitChar</span><span class="token operator">:</span> <span class="token string">'|'</span><span class="token punctuation">,</span>    <span class="token function-variable function">nodeChildrenLoad</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> emits <span class="token operator">=</span> defineEmits<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">'nodeClick'</span><span class="token punctuation">,</span> <span class="token literal-property property">node</span><span class="token operator">:</span> InnerOption<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> activeTab <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> currentSelectPath <span class="token operator">=</span> ref<span class="token operator">&lt;</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> valueSync <span class="token operator">=</span> <span class="token function">useVModel</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">,</span> emits<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">eventName</span><span class="token operator">:</span> <span class="token string">'input'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> selectableOptions <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token constant">ROOT</span><span class="token punctuation">,</span> <span class="token operator">...</span>currentSelectPath<span class="token punctuation">.</span>value<span class="token punctuation">]</span>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getOptionChildrenByPath</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span><span class="token operator">!</span>o<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    currentSelectPath<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">(</span>      props<span class="token punctuation">.</span>multiple <span class="token operator">?</span> valueSync<span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> valueSync<span class="token punctuation">.</span>value    <span class="token punctuation">)</span> <span class="token keyword">as</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">getOptionChildrenByPath</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">path</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token constant">ROOT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>          prev<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=></span> o<span class="token punctuation">[</span>props<span class="token punctuation">.</span>fieldProps<span class="token punctuation">.</span>value<span class="token punctuation">]</span> <span class="token operator">===</span> current<span class="token punctuation">)</span><span class="token operator">?.</span><span class="token punctuation">[</span>props<span class="token punctuation">.</span>fieldProps<span class="token punctuation">.</span>children<span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> prev<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> props<span class="token punctuation">.</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">getTabPrePath</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">tabIdx</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> currentSelectPath<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> tabIdx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>splitChar<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">getTabTitle</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">tab</span><span class="token operator">:</span> InnerOption<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">tabIdx</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      tab<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=></span>          o<span class="token punctuation">[</span>props<span class="token punctuation">.</span>fieldProps<span class="token punctuation">.</span>value<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>          o<span class="token punctuation">[</span>props<span class="token punctuation">.</span>fieldProps<span class="token punctuation">.</span>value<span class="token punctuation">]</span> <span class="token operator">===</span> currentSelectPath<span class="token punctuation">.</span>value<span class="token punctuation">[</span>tabIdx<span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token operator">?.</span><span class="token punctuation">[</span>props<span class="token punctuation">.</span>fieldProps<span class="token punctuation">.</span>label<span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string">'---'</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">checkHasSelectedNode</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">option</span><span class="token operator">:</span> InnerOption<span class="token punctuation">,</span> <span class="token literal-property property">tabIdx</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token function">pathsArr2PathsStr</span><span class="token punctuation">(</span>valueSync<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> prePath <span class="token operator">=</span> <span class="token function">getTabPrePath</span><span class="token punctuation">(</span>tabIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> checkableValues <span class="token operator">=</span> <span class="token function">findAllCheckableNodeValues</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> prePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> checkableValues<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> values<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">optionClickHandle</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">option</span><span class="token operator">:</span> InnerOption<span class="token punctuation">,</span> <span class="token literal-property property">tabIdx</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">emits</span><span class="token punctuation">(</span><span class="token string">'nodeClick'</span><span class="token punctuation">,</span> option<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">optionIsLeafNode</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> props<span class="token punctuation">.</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> props<span class="token punctuation">.</span>nodeChildrenLoad<span class="token operator">?.</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 避免非常规常规节点影响</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token punctuation">[</span>props<span class="token punctuation">.</span>fieldProps<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      currentSelectPath<span class="token punctuation">.</span>value <span class="token operator">=</span> currentSelectPath<span class="token punctuation">.</span>value        <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> tabIdx<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>option<span class="token punctuation">[</span>props<span class="token punctuation">.</span>fieldProps<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">optionIsLeafNode</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// update tab after tabs(dependencies currentSelectPath) rerender.</span>        <span class="token keyword">await</span> <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        activeTab<span class="token punctuation">.</span>value <span class="token operator">=</span> tabIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">getOptionSelectedStatus</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">option</span><span class="token operator">:</span> InnerOption<span class="token punctuation">,</span> <span class="token literal-property property">tabIdx</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> checkedValues <span class="token operator">=</span> <span class="token function">getOptionCheckedValues</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> tabIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token function">pathsArr2PathsStr</span><span class="token punctuation">(</span>valueSync<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> selectAll <span class="token operator">=</span> checkedValues<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=></span> values<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> indeterminate <span class="token operator">=</span> <span class="token operator">!</span>selectAll <span class="token operator">&amp;&amp;</span> checkedValues<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=></span> values<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> selectAll<span class="token punctuation">,</span> indeterminate <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">optionSelectChange</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">option</span><span class="token operator">:</span> InnerOption<span class="token punctuation">,</span> <span class="token literal-property property">tabIdx</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 严格模式下只切换当前节点选中状态</span>    <span class="token keyword">const</span> checkedValues <span class="token operator">=</span> <span class="token function">getOptionCheckedValues</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> tabIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">pathsArr2PathsStr</span><span class="token punctuation">(</span>valueSync<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> normalValues <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>checkedValues<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> newChecked <span class="token operator">=</span> <span class="token operator">!</span>checkedValues<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=></span> value<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>multiple<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      valueSync<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">pathsStr2PathsArr</span><span class="token punctuation">(</span>        newChecked <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>normalValues<span class="token punctuation">,</span> <span class="token operator">...</span>checkedValues<span class="token punctuation">]</span> <span class="token operator">:</span> normalValues<span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// checkedValues 会包含节点自身，不存在为 [] 的情况</span>      valueSync<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">pathsStr2PathsArr</span><span class="token punctuation">(</span>newChecked <span class="token operator">?</span> <span class="token punctuation">[</span>checkedValues<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">getOptionCheckedValues</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">option</span><span class="token operator">:</span> InnerOption<span class="token punctuation">,</span> <span class="token literal-property property">tabIdx</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> prePath <span class="token operator">=</span> <span class="token function">getTabPrePath</span><span class="token punctuation">(</span>tabIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> checkableValues <span class="token operator">=</span> <span class="token function">findAllCheckableNodeValues</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> prePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token literal-property property">optionValue</span><span class="token operator">:</span> string <span class="token operator">=</span>      prePath <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>props<span class="token punctuation">.</span>single        <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prePath<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>props<span class="token punctuation">.</span>splitChar<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>option<span class="token punctuation">[</span>props<span class="token punctuation">.</span>fieldProps<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>        <span class="token operator">:</span> option<span class="token punctuation">[</span>props<span class="token punctuation">.</span>fieldProps<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 严格模式下只切换当前节点选中状态</span>    <span class="token keyword">return</span> props<span class="token punctuation">.</span>checkStrictly <span class="token operator">?</span> <span class="token punctuation">[</span>optionValue<span class="token punctuation">]</span> <span class="token operator">:</span> checkableValues<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">pathsArr2PathsStr</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">v</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">]</span> <span class="token operator">|</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> tv <span class="token operator">=</span> props<span class="token punctuation">.</span>multiple <span class="token operator">?</span> v <span class="token operator">:</span> v<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tv<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>o <span class="token keyword">as</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>splitChar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">pathsStr2PathsArr</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">]</span> <span class="token operator">|</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> tv <span class="token operator">=</span> val<span class="token operator">?.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> v<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>splitChar<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> props<span class="token punctuation">.</span>multiple <span class="token operator">?</span> tv <span class="token operator">:</span> tv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">optionIsLeafNode</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">option</span><span class="token operator">:</span> InnerOption</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 支持配置 leaf 控制是否为叶子节点，否则通过 children.length 判断</span>    <span class="token keyword">return</span> <span class="token keyword">typeof</span> option<span class="token punctuation">[</span>props<span class="token punctuation">.</span>fieldProps<span class="token punctuation">.</span>leaf<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'boolean'</span>      <span class="token operator">?</span> option<span class="token punctuation">[</span>props<span class="token punctuation">.</span>fieldProps<span class="token punctuation">.</span>leaf<span class="token punctuation">]</span>      <span class="token operator">:</span> <span class="token operator">!</span>option<span class="token punctuation">[</span>props<span class="token punctuation">.</span>fieldProps<span class="token punctuation">.</span>children<span class="token punctuation">]</span><span class="token operator">?.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">checkboxShown</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">option</span><span class="token operator">:</span> InnerOption</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 非常规节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>option<span class="token punctuation">[</span>props<span class="token punctuation">.</span>fieldProps<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 传入了 checkAble 控制</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> option<span class="token punctuation">[</span>props<span class="token punctuation">.</span>fieldProps<span class="token punctuation">.</span>checkAble<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'boolean'</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> option<span class="token punctuation">[</span>props<span class="token punctuation">.</span>fieldProps<span class="token punctuation">.</span>checkAble<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 默认节点可选：多选以及非严格模式(父子关联，选父表示选择所有子，不含自身)，所有节点可选，叶子节点可选</span>    <span class="token keyword">return</span> props<span class="token punctuation">.</span>multiple <span class="token operator">||</span> props<span class="token punctuation">.</span>checkStrictly <span class="token operator">||</span> <span class="token function">optionIsLeafNode</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">validateNodeSelfCheckable</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> InnerOption</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 与 checkboxShown 不同的是，checkboxShown 只针对是否显示多选框(比如非严格模式下的父节点，选中只是同时选中所有子节点，但并不包含自身)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkboxShown</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 校验当前可选项是否可以包含自身</span>    <span class="token keyword">return</span> props<span class="token punctuation">.</span>checkStrictly <span class="token operator">||</span> <span class="token function">optionIsLeafNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// if option is a leaf node, it's includes itself. and only one</span>  <span class="token keyword">function</span> <span class="token function">findAllCheckableNodeValues</span><span class="token punctuation">(</span>root<span class="token operator">:</span> InnerOption<span class="token punctuation">,</span> prePath <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token literal-property property">values</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token literal-property property">queue</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>InnerOption <span class="token operator">&amp;</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">prePath</span><span class="token operator">:</span> string <span class="token punctuation">&#125;</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>root<span class="token punctuation">,</span> prePath <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> nodeValue <span class="token operator">=</span> node<span class="token punctuation">[</span>props<span class="token punctuation">.</span>fieldProps<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> optPathValue <span class="token operator">=</span> node<span class="token punctuation">.</span>prePath        <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token punctuation">.</span>prePath<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>props<span class="token punctuation">.</span>splitChar<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>nodeValue<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>        <span class="token operator">:</span> nodeValue<span class="token punctuation">;</span>      <span class="token keyword">const</span> optVal <span class="token operator">=</span> props<span class="token punctuation">.</span>single <span class="token operator">?</span> nodeValue <span class="token operator">:</span> optPathValue<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">[</span>props<span class="token punctuation">.</span>fieldProps<span class="token punctuation">.</span>children<span class="token punctuation">]</span><span class="token operator">?.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>          <span class="token operator">...</span>node<span class="token punctuation">[</span>props<span class="token punctuation">.</span>fieldProps<span class="token punctuation">.</span>children<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">n</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token operator">...</span>n<span class="token punctuation">,</span>            <span class="token literal-property property">prePath</span><span class="token operator">:</span> optPathValue<span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">validateNodeSelfCheckable</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> values<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>optVal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> values<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> type <span class="token punctuation">&#123;</span> CascaderOption <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-ui/types/cascader'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">InnerOption</span> <span class="token keyword">extends</span> <span class="token class-name">CascaderOption</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span>k<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">export</span> type NodeField <span class="token operator">=</span> <span class="token string">'label'</span> <span class="token operator">|</span> <span class="token string">'value'</span> <span class="token operator">|</span> <span class="token string">'checkAble'</span> <span class="token operator">|</span> <span class="token string">'leaf'</span> <span class="token operator">|</span> <span class="token string">'loading'</span> <span class="token operator">|</span> <span class="token string">'children'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'MobileTree'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-tabs</span>    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>activeTab<span class="token punctuation">"</span></span>    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p-6<span class="token punctuation">"</span></span>    <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#02A7F0<span class="token punctuation">"</span></span>    <span class="token attr-name">title-active-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#02A7F0<span class="token punctuation">"</span></span>    <span class="token attr-name">title-inactive-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000<span class="token punctuation">"</span></span>    <span class="token attr-name">:swipe-threshold</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-tab</span>      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(tab, tabIdx) in selectableOptions<span class="token punctuation">"</span></span>      <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>`$&#123;getTabPrePath(tabIdx)&#125;_$&#123;tabIdx&#125;`<span class="token punctuation">"</span></span>      <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getTabTitle(tab, tabIdx)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-cell-group</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option-wrapper<span class="token punctuation">"</span></span> <span class="token attr-name">:border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-cell</span>          <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(option, optionIdx) in tab<span class="token punctuation">"</span></span>          <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>`$&#123;tabIdx&#125;-$&#123;optionIdx&#125;-$&#123;option[fieldProps.value]&#125;`<span class="token punctuation">"</span></span>          <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option[fieldProps.label]<span class="token punctuation">"</span></span>          <span class="token attr-name">:title-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;            <span class="token punctuation">'</span>text-ellipsis<span class="token punctuation">'</span>: true,            <span class="token punctuation">'</span>pr-20<span class="token punctuation">'</span>: true,            featureNode: !option[fieldProps.value],            selectedCell: checkHasSelectedNode(option, tabIdx),          &#125;<span class="token punctuation">"</span></span>          <span class="token attr-name">clickable</span>          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ptb-10<span class="token punctuation">"</span></span>          <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>optionClickHandle(option, tabIdx)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#icon</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-checkbox</span>              <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkboxShown(option)<span class="token punctuation">"</span></span>              <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getOptionSelectedStatus(option, tabIdx).selectAll<span class="token punctuation">"</span></span>              <span class="token attr-name">:indeterminate</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getOptionSelectedStatus(option, tabIdx).indeterminate<span class="token punctuation">"</span></span>              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plr-10<span class="token punctuation">"</span></span>              <span class="token attr-name">@click.native.stop</span>              <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>optionSelectChange(option, tabIdx)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!optionIsLeafNode(option)<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plr-10 lh-24 el-icon-caret-right<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#right-icon</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option[fieldProps.loading]<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isLoading el-icon-loading<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-icon</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!optionIsLeafNode(option)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>arrow<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>arrow-icon<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>16<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-cell</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-cell-group</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-tab</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-tabs</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.p-6</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0 6px <span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.lh-24</span> <span class="token punctuation">&#123;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 24px <span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.option-wrapper</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 350px<span class="token punctuation">;</span>    <span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.selectedCell</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #409eef<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.featureNode</span> <span class="token punctuation">&#123;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 75%<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #409eff<span class="token punctuation">;</span>    <span class="token selector">&amp;:hover</span> <span class="token punctuation">&#123;</span>      <span class="token property">color</span><span class="token punctuation">:</span> #66b1ff<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.arrow-icon</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> -5px<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.isLoading</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">/deep/.van-cell:active</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #f2f3f5<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">/deep/.van-tab</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0 10px <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 5px 0 0 <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> 0 0 auto <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token selector">&amp; + &amp;</span> <span class="token punctuation">&#123;</span>      <span class="token selector">&amp;::before</span> <span class="token punctuation">&#123;</span>        <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'>'</span><span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> -7px<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 28%<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">/deep/.van-tabs__line</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p><strong>这个功能需求并没有相应的 ui 设计，是由我参考其他类似数据结构的移动端组件效果图实现，效果图可能不是特别好，但麻雀虽小…五脏俱全</strong></p><p><a href="/images/share/mobile-tree/p1.png"><img src="/images/share/mobile-tree/p1.png" alt="mobile-tree-p1" loading="lazy"></a></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 组件封装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mobile-UI </tag>
            
            <tag> Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发过程中能让你解放双手的一些插件</title>
      <link href="/engineering/plugins/"/>
      <url>/engineering/plugins/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><div class="info"><blockquote><p>介绍在 <code>vue/react</code> 项目中常用的一些插件。例如自动引入、按需导入等等…</p><p>持续更新中…</p></blockquote></div><span id="more"></span><h3 id="unplugin-auto-import"><a href="#unplugin-auto-import" class="headerlink" title="unplugin-auto-import"></a><a href="https://github.com/unplugin/unplugin-auto-import#install">unplugin-auto-import</a></h3><p>用作模块的自动导入，下面将以 <code>vue</code> 项目为例介绍（<code>v2、v3</code>均可），完整的插件配置项可点击标题链接查看。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">pnpm</span> <span class="token function">add</span> unplugin-auto-import -D</code></pre><h4 id="配置-vite-config-ts-or-vue-config-js"><a href="#配置-vite-config-ts-or-vue-config-js" class="headerlink" title="配置 vite.config.ts or vue.config.js"></a>配置 <code>vite.config.ts or vue.config.js</code></h4><pre class="language-diff" data-language="diff"><code class="language-diff">import &#123; defineConfig &#125; from 'vite';// const &#123; defineConfig &#125; = require('@vue/cli-service');import autoImport from 'unplugin-auto-import/vite';# const autoImport = require('unplugin-auto-import/webpack');export default defineConfig(&#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> # ...</span><span class="token prefix unchanged"> </span><span class="token line"> plugins: [</span><span class="token prefix unchanged"> </span><span class="token line">   vue(),</span><span class="token prefix unchanged"> </span><span class="token line">   vueJsx(),</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   autoImport(&#123;</span><span class="token prefix inserted">+</span><span class="token line">     imports: [</span><span class="token prefix inserted">+</span><span class="token line">       'vue',</span><span class="token prefix inserted">+</span><span class="token line">       &#123;</span><span class="token prefix inserted">+</span><span class="token line">         'vue-router': ['useRouter', 'useRoute'],</span><span class="token prefix inserted">+</span><span class="token line">       &#125;,</span><span class="token prefix inserted">+</span><span class="token line">       &#123;</span><span class="token prefix inserted">+</span><span class="token line">         'vue-i18n': ['useI18n'],</span><span class="token prefix inserted">+</span><span class="token line">       &#125;,</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       # &#123;</span><span class="token prefix unchanged"> </span><span class="token line">       #   '@vueuse/core': ['useVModel', 'useVModels', 'useMouse'],</span><span class="token prefix unchanged"> </span><span class="token line">       # &#125;,</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     ],</span><span class="token prefix inserted">+</span><span class="token line">   &#125;)</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ]</span></span>&#125;);</code></pre><p>保存，重新编译启动会在默认路径（<code>/</code>）下自动生成 <code>auto-imports.d.ts</code> 文件，里面包含了自动导入的模块。形如：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/* eslint-disable */</span><span class="token comment">/* prettier-ignore */</span><span class="token comment">// @ts-nocheck</span><span class="token comment">// noinspection JSUnusedGlobalSymbols</span><span class="token comment">// Generated by unplugin-auto-import</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">declare</span> global <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> useAttrs<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'vue'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'useAttrs'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> useCssModule<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'vue'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'useCssModule'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> useCssVars<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'vue'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'useCssVars'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> useMouse<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@vueuse/core'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'useMouse'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> useRoute<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'vue-router'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'useRoute'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> useRouter<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'vue-router'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'useRouter'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> useSlots<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'vue'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'useSlots'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token comment">// for type re-export</span><span class="token keyword">declare</span> global <span class="token punctuation">&#123;</span>  <span class="token comment">// @ts-ignore</span>  <span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> Component<span class="token punctuation">,</span> ComponentPublicInstance<span class="token punctuation">,</span> ComputedRef<span class="token punctuation">,</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="配置-tsconfig-json"><a href="#配置-tsconfig-json" class="headerlink" title="配置 tsconfig.json"></a>配置 <code>tsconfig.json</code></h4><p>为了让项目能够加载识别模块声明，避免编辑器的校验错误提示（虽然不配置不影响实际功能）：</p><pre class="language-diff" data-language="diff"><code class="language-diff">&#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> # ...</span><span class="token prefix unchanged"> </span><span class="token line"> "include": [</span><span class="token prefix unchanged"> </span><span class="token line">   # ...</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   "./auto-imports.d.ts"</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ]</span></span>&#125;</code></pre><h4 id="配置-eslintrc-js"><a href="#配置-eslintrc-js" class="headerlink" title="配置 .eslintrc.js"></a>配置 <code>.eslintrc.js</code></h4><p>根据插件官方推荐，在使用 <code>typescript</code> 的时候，关掉 <code>eslint</code> 的部分规则校验：</p><pre class="language-diff" data-language="diff"><code class="language-diff">module.exports = &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> # ...</span><span class="token prefix unchanged"> </span><span class="token line"> rules: &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   # ...</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   'no-undef': 'off',</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span>&#125;</code></pre><p>如果还存在校验异常，请移步官方查看推荐配置：<a href="https://github.com/unplugin/unplugin-auto-import#eslint">https://github.com/unplugin/unplugin-auto-import#eslint</a></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>完成上面配置后，在项目里无需引入，即可使用某些模块。对比使用：</p><pre class="language-diff" data-language="diff"><code class="language-diff"># 配置了插件以后，下面的引入语句即可直接省略<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> import &#123; defineProps, withDefaults, defineEmits, defineExpose &#125; from 'vue';</span></span>withDefaults(<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> defineProps&lt;&#123;</span><span class="token prefix unchanged"> </span><span class="token line">   activeId: string;</span><span class="token prefix unchanged"> </span><span class="token line">   onlyReview: boolean;</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;>(),</span><span class="token prefix unchanged"> </span><span class="token line"> &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   activeId: '',</span><span class="token prefix unchanged"> </span><span class="token line">   onlyReview: false,</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;,</span></span>);defineEmits&lt;&#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> (e: 'select', id: string): void;</span><span class="token prefix unchanged"> </span><span class="token line"> (e: 'delete', ids: string[]): void;</span></span>&#125;>();defineExpose(&#123; handleAddComponent, handleDeleteComponent &#125;);function handleAddComponent() &#123;&#125;function handleDeleteComponent() &#123;&#125;</code></pre><p>有没有觉得方便很多？如果你安装了该插件并正确配置了，但是没有生效，可能是缓存原因，请先删除缓存（<code>/node_modules/.cache</code>），然后重启编辑器，执行 <code>npm run dev.</code></p><h3 id="unplugin-vue-components"><a href="#unplugin-vue-components" class="headerlink" title="unplugin-vue-components"></a><a href="https://github.com/unplugin/unplugin-vue-components#installation">unplugin-vue-components</a></h3><p>页面组件自动引入并注册（自身并未支持按需引入）。该插件内置了 <code>VUE-UI</code> 相关组件库的解析器处理（后续是由组件库自身提供支持），方便在项目中直接使用组件库而无需单独引入注册。</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># pnpm add element-plus</span><span class="token function">pnpm</span> <span class="token function">add</span> unplugin-vue-components -D</code></pre><h4 id="配置-vite-config-ts-or-vue-config-js-1"><a href="#配置-vite-config-ts-or-vue-config-js-1" class="headerlink" title="配置 vite.config.ts or vue.config.js"></a>配置 <code>vite.config.ts or vue.config.js</code></h4><p>在 <code>vite.config.ts</code> 中添加如下配置：</p><pre class="language-diff" data-language="diff"><code class="language-diff"># ...import Components from 'unplugin-vue-components/vite';# import &#123; ElementPlusResolver &#125; from 'unplugin-vue-components/resolvers';export default defineConfig(&#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> # ...</span><span class="token prefix unchanged"> </span><span class="token line"> plugins: [</span><span class="token prefix unchanged"> </span><span class="token line">   # ...</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    Components(&#123;</span><span class="token prefix inserted">+</span><span class="token line">      // 配置文件生成的位置</span><span class="token prefix inserted">+</span><span class="token line">      dts: 'components.d.ts',</span><span class="token prefix inserted">+</span><span class="token line">      // 指定需要自动导入的组件库路径（可以是自定义实现的 'src/components'）,配置后，在使用时即可无需再引入到 script</span><span class="token prefix inserted">+</span><span class="token line">      // 同时，该路径下的所有组件都会添加到 components.d.ts 的声明中</span><span class="token prefix inserted">+</span><span class="token line">      dirs: [],</span></span># +      resolvers: [ElementPlusResolver()],<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      resolvers: [],</span><span class="token prefix inserted">+</span><span class="token line">    &#125;),</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ]</span></span>&#125;)</code></pre><p>添加上面配置，在默认的路径（<code>/</code>）下会生成 <code>components.d.ts</code>，形如：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/* eslint-disable */</span><span class="token comment">/* prettier-ignore */</span><span class="token comment">// @ts-nocheck</span><span class="token comment">// Generated by unplugin-vue-components</span><span class="token comment">// Read more: https://github.com/vuejs/core/pull/3399</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">'vue'</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">GlobalComponents</span> <span class="token punctuation">&#123;</span>    HelloWorld<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./src/components/HelloWorld.vue'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// ElLink: typeof import('element-plus/es')['ElLink'];</span>    RouterLink<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'vue-router'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'RouterLink'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    RouterView<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'vue-router'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'RouterView'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>虽然基于该插件以及解析器的实现，可以完成对三方组件库的组件的自动引入（即不搭配其他插件，此时已经<strong>无需在 <code>main.ts</code> 里全局注册或者页面组件内部引入并局部注册</strong>），但是并没有做到按需加载…</p><h5 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h5><p>以我在案例中使用的 <code>element-plus</code> 为例，根据<a href="https://element-plus.org/zh-CN/guide/quickstart.html#%E6%8C%89%E9%9C%80%E5%AF%BC%E5%85%A5">官方推荐</a>的方式， 还需要结合 <code>unplugin-auto-import</code> 插件使用，达到按需加载的目的：</p><pre class="language-diff" data-language="diff"><code class="language-diff"># ...import autoImport from 'unplugin-auto-import/vite';export default defineConfig(&#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> # ...</span><span class="token prefix unchanged"> </span><span class="token line"> plugins: [</span><span class="token prefix unchanged"> </span><span class="token line">   # ...</span><span class="token prefix unchanged"> </span><span class="token line">   autoImport(&#123;</span><span class="token prefix unchanged"> </span><span class="token line">     # ...</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     resolvers: [ElementPlusResolver()],</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   &#125;),</span><span class="token prefix unchanged"> </span><span class="token line"> ]</span></span>&#125;)</code></pre><p>上面的配置是基于高版本的，如果是低版本的 <code>element-plus or element-ui...</code>，可结合组件库自身推荐的方式，例如搭配 <code>babel-plugin-component or babel-plugin-import</code> 实现，下面提供可行性方案：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># vant</span><span class="token function">pnpm</span> <span class="token function">add</span> babel-plugin-import -D<span class="token comment"># element-ui</span><span class="token function">pnpm</span> <span class="token function">add</span> babel-plugin-component -D</code></pre><p>再添加 <code>babel</code> 配置：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// babel.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'@vue/cli-plugin-babel/preset'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span>      <span class="token string">'component'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">libraryName</span><span class="token operator">:</span> <span class="token string">'element-ui'</span><span class="token punctuation">,</span>        <span class="token literal-property property">styleLibraryName</span><span class="token operator">:</span> <span class="token string">'theme-chalk'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>      <span class="token string">'import'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">libraryName</span><span class="token operator">:</span> <span class="token string">'vant'</span><span class="token punctuation">,</span>        <span class="token literal-property property">libraryDirectory</span><span class="token operator">:</span> <span class="token string">'es'</span><span class="token punctuation">,</span>        <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>然后在 <code>unplugin-vue-components 的 Components</code> 配置中添加 <code>ElementUiResolver、VantResolver</code> 即可（自动完成注册）。</p><h4 id="配置-tsconfig-json-1"><a href="#配置-tsconfig-json-1" class="headerlink" title="配置 tsconfig.json"></a>配置 <code>tsconfig.json</code></h4><p>将生成的 <code>components.d.ts</code> 文件地址放入配置的 <code>includes</code> 中，这样在 <code>vue</code> 组件内使用三方组件时，如果组件库提供有类型支持，此时会有相关<code>prop</code> 类型提示。</p><pre class="language-diff" data-language="diff"><code class="language-diff">&#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> # ...</span><span class="token prefix unchanged"> </span><span class="token line"> "include": [</span><span class="token prefix unchanged"> </span><span class="token line">   # ...</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   "./components.d.ts"</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ]</span></span>&#125;</code></pre><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p>完成上述配置，可以在组件内直接使用相关组件：</p><pre class="language-diff" data-language="diff"><code class="language-diff"><span class="token deleted-arrow deleted"><span class="token prefix deleted">&lt;</span><span class="token line">script setup lang="ts"></span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> import &#123; ElLink &#125; from 'element-plus';</span><span class="token prefix deleted">-</span><span class="token line"> import HelloWorld from './components/HelloWorld.vue'</span></span><span class="token deleted-arrow deleted"><span class="token prefix deleted">&lt;</span><span class="token line">/script></span></span><span class="token deleted-arrow deleted"><span class="token prefix deleted">&lt;</span><span class="token line">template></span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &lt;HelloWorld msg="You did it!" /></span><span class="token prefix unchanged"> </span><span class="token line"> &lt;el-link type="primary">primary&lt;/el-link></span></span><span class="token deleted-arrow deleted"><span class="token prefix deleted">&lt;</span><span class="token line">/template></span></span></code></pre><div class="warning"><blockquote><p><strong>注意：在使用插件进行自动引入注册时，三方库的样式是后加载的。意味着可能存在自定义样式和组件自身样式优先级的问题。适当为自定义样式添加权重即可。</strong></p></blockquote></div>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
          <category> 插件使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unplugin-auto-import </tag>
            
            <tag> unplugin-vue-components </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于开源项目二次开发的解决方案</title>
      <link href="/posts/second-development/"/>
      <url>/posts/second-development/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="Before"><a href="#Before" class="headerlink" title="Before..."></a><code>Before...</code></h3><p>针对开源项目进行二次开发，在日常开发中已经很常见了。它可以为我们提供很多便利：</p><ul><li><p>定制需求：开源项目通常是通用性的，为了满足特定组织或项目的需求，可能需要定制功能、界面。</p></li><li><p>功能扩展：有时候，开源项目的功能不足以满足特定用例的需求，你可以扩展和增强现有功能。</p></li><li><p>修复错误和漏洞：开源项目可能存在错误和漏洞，当然你也可以提 <code>PR</code> 修复，贡献社区。</p></li><li><p>整合与互操作：在实际应用中，可能需要将多个开源项目整合在一起，以构建更大的系统。</p></li><li><p>性能优化：你可以对开源项目进行性能优化，以满足特定的性能需求，例如提高响应时间或减少资源消耗。</p></li></ul><span id="more"></span><p>了解了二次开发的必要性，下面我们开始准备工作：</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>准备一个远程仓库，用于存放二次开发后的代码。<del>当然，这个仓库可以是公司私服</del></p><p>克隆开源项目到本地，并创建自己的开发分支。为了方便后期维护，建议将开源项目的版本号作为分支名。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/ElemeFE/element.git<span class="token builtin class-name">cd</span> element<span class="token comment"># 基于 2.15.13 版本创建自己的开发分支</span><span class="token function">git</span> checkout -b my2.x v2.15.13</code></pre><p>修改当前 <code>remote</code> 名称，并将新的 <code>remote</code> 指向自己的远程仓库。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看现在的 origin</span><span class="token function">git</span> remote -v<span class="token comment"># 改名</span><span class="token function">git</span> remote <span class="token function">rename</span> origin element<span class="token comment"># 添加新的 remote，关联到自己的远程仓库</span><span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/flynna/el-dev.git<span class="token comment"># 添加远程跟踪，与本地分支和新的远程分支之间的关联</span><span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/my2.x</code></pre><p>推送代码到远程</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin my2.x<span class="token comment"># 设置了 --set-upstream-to 后，可以简化</span><span class="token function">git</span> push<span class="token function">git</span> pull</code></pre><p>准备已就绪，现在二次开发的项目仓库和配置就搭建好了。你可以写一些自己的代码然后推送（此时推送到的是自己的远程仓库）</p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>当开源项目更新时，如果你有需要，你可以将它更新的代码合并到自己开发的分支中，然后再推送到创建的远程仓库。</p><p>更新开源项目远端库的 <code>tags</code>：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch element --tags</code></pre><p>合并新的功能分支（<code>tag</code>）到当前开发分支（假设有新的资源 <code>v2.15.14</code>）：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge refs/tags/v2.15.14</code></pre><blockquote><p><strong>注意：<code>tags</code> 数据在 <code>fetch</code> 下来后是不分远端库的（即使它有多个远端库），所以这里可以直接合并，日常开发应该注意避免相同 <code>tag</code> 导致冲突</strong></p></blockquote><p>推送更新资源到自己的远程仓库：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push</code></pre><p>过程如图：</p><p><a href="/images/posts/second-development/p1.png"><img src="/images/posts/second-development/p1.png" alt="second-development-p1" loading="lazy"></a></p><p><a href="/images/posts/second-development/p2.png"><img src="/images/posts/second-development/p2.png" alt="second-development-p2" loading="lazy"></a></p>]]></content>
      
      
      <categories>
          
          <category> 收藏安利 </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二次开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Qiankun 的微前端解决方案实践</title>
      <link href="/share/qiankun/"/>
      <url>/share/qiankun/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="什么是微前端？"><a href="#什么是微前端？" class="headerlink" title="什么是微前端？"></a>什么是微前端？</h3><blockquote><p><code>Techniques, strategies and recipes for building a modern web app with multiple teams that can ship features independently. -- Micro Frontends</code></p><p>微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 <code>web</code> 应用的技术手段及方法策略。</p></blockquote><p>简单说就是：<strong>将前端应用程序分解成多个小块，每个小块被称为微前端。每个微前端都是一个独立的部分，可以由不同的团队开发和维护。这些微前端可以独立部署，甚至可以使用不同的技术栈和框架开发。最终组合在一起呈现出完整的前端应用程序</strong></p><span id="more"></span><h3 id="微前端能够解决哪些问题？"><a href="#微前端能够解决哪些问题？" class="headerlink" title="微前端能够解决哪些问题？"></a>微前端能够解决哪些问题？</h3><ul><li><p>降低开发成本。应用程序日渐复杂，开发技术迭代，有许多历史已有项目功能需要在新项目中集成使用。</p></li><li><p>提升用户体验。模块分解后，主程序资源大小会大幅缩减，用户只有使用到其中某个功能模块时才会加载相应资源。</p></li><li><p>更方便业务集成扩展。微前端更具灵活性，可以根据需求添加新的微前端模块，同时不受技术栈限制。</p></li></ul><h3 id="为什么选择-qiankun？"><a href="#为什么选择-qiankun？" class="headerlink" title="为什么选择 qiankun？"></a>为什么选择 <code>qiankun</code>？</h3><blockquote><p><code>qiankun</code> 是一个基于 <code>single-spa</code> 的微前端实现库，旨在帮助大家能更简单、无痛的构建一个生产可用微前端架构系统。</p></blockquote><p>特性（摘自<a href="https://qiankun.umijs.org/zh/guide#%E7%89%B9%E6%80%A7">官网</a>）：</p><ul><li><p>📦 基于 <code>single-spa</code> 封装，提供了更加开箱即用的 <code>API</code>。</p></li><li><p>📱 技术栈无关，任意技术栈的应用均可 使用&#x2F;接入，不论是 <code>React/Vue/- Angular/JQuery</code> 还是其他等框架。</p></li><li><p>💪 <code>HTML Entry</code> 接入方式，让你接入微应用像使用 <code>iframe</code> 一样简单。</p></li><li><p>🛡​ 样式隔离，确保微应用之间样式互相不干扰。</p></li><li><p>🧳 <code>JS</code> 沙箱，确保微应用之间 全局变量&#x2F;事件 不冲突。</p></li><li><p>⚡️ 资源预加载，在浏览器空闲时间预加载未打开的微应用资源，加速微应用打开速度。</p></li><li><p>🔌 <code>umi</code> 插件，提供了 <code>@umijs/plugin-qiankun</code> 供 <code>umi</code> 应用一键切换成微前端架构系统。</p></li></ul><h3 id="了解-single-spa"><a href="#了解-single-spa" class="headerlink" title="了解 single-spa"></a>了解 <code>single-spa</code></h3><blockquote><p><code>single-spa</code> 是一个 <code>JavaScript</code> 前端微前端框架，它允许您构建和组织多个独立的前端应用程序（微前端）以实现单一页面应用程序（<code>SPA</code>）的集成</p></blockquote><p>它做的事情其实就是: <strong>注册一个微应用 —&gt; 监听 <code>URL</code> 变化 —&gt; 加载微应用 —&gt; 渲染微应用 —&gt; 卸载微应用</strong>。</p><p>大致是这样：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> singleSpa <span class="token keyword">from</span> <span class="token string">'single-spa'</span><span class="token punctuation">;</span><span class="token comment">// 定义微应用的配置</span><span class="token keyword">const</span> microAppConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">app</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// micro-app 相关资源</span>    <span class="token function">loadScripts</span><span class="token punctuation">(</span><span class="token string">'./chunk-a.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">loadScripts</span><span class="token punctuation">(</span><span class="token string">'./chunk-b.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">loadScripts</span><span class="token punctuation">(</span><span class="token string">'./entry.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 加载微应用的入口模块</span>  activeWhen<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'/micro-app'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 触发微应用的URL路径</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 注册微应用</span>singleSpa<span class="token punctuation">.</span><span class="token function">registerApplication</span><span class="token punctuation">(</span><span class="token string">'micro-app'</span><span class="token punctuation">,</span> microAppConfig<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 启动Single-spa</span>singleSpa<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>子应用提供相对应的生命周期钩子，方便 <code>single-spa</code> 进行管理：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// micro-app/src/index.js</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">bootstrap</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 初始化微应用，如果有需要的话</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">mount</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">unmount</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">unmountComponentAtNode</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 导出生命周期钩子</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> bootstrap<span class="token punctuation">,</span> mount<span class="token punctuation">,</span> unmount <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>如此便能够满足微前端的基本需求：<code>URL</code> 变化的时候加载&#x2F;卸载子应用。</p><p>但它本身并不够完善，比如不能实现 <code>JS/CSS</code> 隔离，可能存在逻辑&#x2F;样式冲突，此外子应用之间的通信处理也需要自己解决…</p><h3 id="了解-qiankun"><a href="#了解-qiankun" class="headerlink" title="了解 qiankun"></a>了解 <code>qiankun</code></h3><p><code>qiankun</code> 是基于 <code>single-spa</code> 实现的，它解决了 <code>single-spa</code> 的一些痛点，是更完善的微前端解决方案。</p><h4 id="资源自动化加载"><a href="#资源自动化加载" class="headerlink" title="资源自动化加载"></a>资源自动化加载</h4><p><code>qiankun</code> 会加载子应用入口的 <code>html</code>，将 <code>head</code> 部分转换为 <code>qiankun-head</code>，解析出 <code>scripts/styles</code>，单独去加载（实现在 <code> import-html-entry</code> 这个模块里）。而无需开发者指定如何去加载资源，如图：</p><p><a href="/images/share/qiankun/p1.png"><img src="/images/share/qiankun/p1.png" alt="qiankun-p1" loading="lazy"></a></p><p><code>single-spa</code> 的实现叫做 <code>Config Entry</code> 或者 <code>JS Entry</code>，也就是要自己指定怎么加载子应用，而 <code>qiankun</code> 这种叫做 <code>Html Entry</code>，会自动解析 <code>html</code> 实现加载。</p><h4 id="JS、CSS-沙箱"><a href="#JS、CSS-沙箱" class="headerlink" title="JS、CSS 沙箱"></a><code>JS、CSS</code> 沙箱</h4><p>理论上隔离 <code>JS</code> 只需要完成 <code>window</code> 全局变量隔离即可，函数内本就是在不同作用域下执行的。</p><p>可实行的方案：</p><ul><li><p><code>快照、diff 比对</code> 加载之前记录，卸载后再恢复。缺陷就是不能同时存在多个子应用。</p></li><li><p><code>Proxy 代理</code>，通过代理对象访问。这也是比较常用的方案。</p></li></ul><p><code>CSS</code> 的隔离可实行方案：</p><ul><li><p>使用 <code>shadow dom</code> 实现，这是浏览器支持的特性，<code>shadow root</code> 的 <code>dom</code> 不会影响其他 <code>dom</code>。</p></li><li><p><code>scoped css</code>，为元素添加属性 <code>id</code>，在 <code>css</code> 里通过前缀进行约束。</p></li></ul><p>以上方案都可以通过配置来选择。</p><h4 id="子应用间通信"><a href="#子应用间通信" class="headerlink" title="子应用间通信"></a>子应用间通信</h4><ul><li>通过注册时传入的 <code>props</code> 和回调来实现状态管理，如下：</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">registerMicroApps</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'sub-app'</span><span class="token punctuation">,</span>    entry<span class="token operator">:</span> <span class="token string">'http://localhost:3001'</span><span class="token punctuation">,</span> <span class="token comment">// 子应用的入口</span>    container<span class="token operator">:</span> <span class="token string">'#sub-app-container'</span><span class="token punctuation">,</span>    activeRule<span class="token operator">:</span> <span class="token string">'/sub-app'</span><span class="token punctuation">,</span>    props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      sharedState<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        message<span class="token operator">:</span> <span class="token string">'Hello from Main App'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 将共享状态传递给子应用</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>子应用：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> container <span class="token punctuation">&#125;</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    container <span class="token operator">?</span> container<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span> <span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">mount</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> sharedState <span class="token punctuation">&#125;</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>通过 <code>initGlobalState</code> 来实现状态管理</li></ul><p>主应用里定义子应用获取全局状态的方法：<code>getGlobalState</code> 和 监听状态变化的 <code>onGlobalStateChange</code>：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> initGlobalState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'qiankun'</span><span class="token punctuation">;</span><span class="token comment">// 初始化全局状态</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token function">initGlobalState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 定义一个改变状态的方法</span>actions<span class="token punctuation">.</span><span class="token function">onGlobalStateChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newState<span class="token punctuation">,</span> prev<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Global state changed:'</span><span class="token punctuation">,</span> newState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>actions<span class="token punctuation">.</span><span class="token function-variable function">getGlobalState</span> <span class="token operator">=</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> key <span class="token operator">?</span> initialState<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">:</span> initialState<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 定义一个设置状态的方法</span>actions<span class="token punctuation">.</span><span class="token function">setGlobalState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> count<span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 导出 actions 对象</span><span class="token keyword">export</span> <span class="token keyword">default</span> actions<span class="token punctuation">;</span></code></pre><p>子应用里通过 <code>props</code> 获取状态和修改状态：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mount</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> setGlobalState<span class="token punctuation">,</span> getGlobalState <span class="token punctuation">&#125;</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>  props<span class="token punctuation">.</span><span class="token function">setGlobalState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> message<span class="token operator">:</span> <span class="token string">'hello'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>本次 <code>qiankun</code> 实践是在 <code>vue</code> 应用（<code>hash</code> 模式）里集成 <code>umi</code> 子应用（<code>hash</code> 模式）的部分页面。</p><p>在改造之前，两个应用都是单独部署运行的，是通过 <code>iframe</code> 的方式进行集成。所以这里采用了 <code>loadMicroApp</code> 进行子应用的加载：</p><h4 id="主应用改造"><a href="#主应用改造" class="headerlink" title="主应用改造"></a>主应用改造</h4><p>首先安装 <code>qiankun</code>：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> qiankun</code></pre><p>下面开始页面组件改造，通过 <code>loadMicroApp</code> 在组件内部动态加载和卸载子应用。例如之前集成了一个 <code>http://www.site.com:8000/appA/#/pageA</code> 这样一个页面。这个地址的组成：<code>http://www.site.com:8000/appA/</code> 是子应用 <code>appA</code> 的项目根地址，我们需要集成它的 <code>/pageA</code> 页面：</p><p>添加相关的路由，并保证一致性（最后总结有解释为什么需要添加子应用相关路由）：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// router/index.ts</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> RouteConfig <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> routes<span class="token operator">:</span> RouteConfig<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/pageA'</span><span class="token punctuation">,</span> <span class="token comment">// 和子应用路由一致 （当然你可以添加自定义的主应用路由前缀，例如 /pc，即 /pc/pageA，然后添加相关配置即可，后面有提到）</span>    name<span class="token operator">:</span> <span class="token string">'pageA'</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/pageA/index.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  routes<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span class="token punctuation">;</span></code></pre><p>然后在 <code>pageA/index.vue</code> 组件中手动加载相关页面资源：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- pageA/index.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>containerRef<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> type <span class="token punctuation">&#123;</span> MicroApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'qiakun'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> loadMicroApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'qiankun'</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> containerRef <span class="token operator">=</span> ref<span class="token operator">&lt;</span>HTMLDivElement<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> ref<span class="token operator">&lt;</span>MicroApp<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 子应用 appA 的根地址</span>  <span class="token keyword">const</span> entryUrl <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://www.site.com:8000/appA/</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>containerRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      app<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">loadMicroApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'appA'</span><span class="token punctuation">,</span>        <span class="token literal-property property">entry</span><span class="token operator">:</span> entryUrl<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token comment">// 子应用入口 index.html</span>        <span class="token literal-property property">container</span><span class="token operator">:</span> containerRef<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token comment">// 挂载的 dom</span>        <span class="token comment">// eg.1</span>        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'hash'</span><span class="token punctuation">,</span> <span class="token comment">// 指定子应用使用的路由模式</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token comment">// 访问子应用时浏览器的路由前缀，默认就是 /，如果像上面我提到的路由前缀添加了 /pc，那么这里就是 /pc</span>          <span class="token comment">// base: '/' 时： /pageA -> /pageA, base: '/pc' 时： /pc/pageA（主） -> /pageA（子）</span>          <span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// eg.2</span>        <span class="token comment">// props 指定默认的子应用页面 更加的动态化，就像是使用 iframe 一样方便</span>        <span class="token comment">// props: &#123;</span>        <span class="token comment">//   history: &#123;</span>        <span class="token comment">//     // 子应用里不是这个模式，这里同样可以设置为 memory</span>        <span class="token comment">//     // memory 模式下，子应用路由跳转不改变浏览器的 URl，通常用于 mobile 端</span>        <span class="token comment">//     type: 'memory',</span>        <span class="token comment">//     initialEntries: [initEntry.value], // 设置默认的子应用路由信息</span>        <span class="token comment">//     initialIndex: 0, // 不传默认取 initialEntries 的第一个值，即默认访问的子应用路由</span>        <span class="token comment">//   &#125;,</span>        <span class="token comment">// &#125;,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">onBeforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    app<span class="token punctuation">.</span>value<span class="token operator">?.</span><span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>这里并没有指定默认打开的子应用路由页面，所以使用的是子应用根路由【<strong>这里不是需要 <code>/pageA</code> 吗？两种方案：一种是上面的配置指定路由模式为 <code>memory</code>，然后配置默认的路由页面（并无限制子应用需要是这个路由模式）；一种是为子应用根路由添加重定向</strong>】。</p><p>至此，主应用的改造就完成了，是不是很简单？</p><h4 id="子应用改造"><a href="#子应用改造" class="headerlink" title="子应用改造"></a>子应用改造</h4><p><code>umi</code> 项目内置了 <code>qiankun</code>，只需要开启配置即可：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// /config/config.ts</span><span class="token keyword">const</span> pathPrefix <span class="token operator">=</span> isDev <span class="token operator">?</span> <span class="token string">'/'</span> <span class="token operator">:</span> <span class="token string">'/appA/'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  hash<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  base<span class="token operator">:</span> pathPrefix<span class="token punctuation">,</span>  publicPath<span class="token operator">:</span> pathPrefix<span class="token punctuation">,</span>  headScripts<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> src<span class="token operator">:</span> <span class="token string">'./scripts/loading.js'</span><span class="token punctuation">,</span> async<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 类似这样的配置，将资源路径改为相对路径</span>  <span class="token comment">// 开启 qiankun</span>  qiankun<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    slave<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>确保子应用中存在刚刚主应用集成的路由，没有则添加：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// /config/routes.ts</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    redirect<span class="token operator">:</span> <span class="token string">'/pageA'</span><span class="token punctuation">,</span> <span class="token comment">// 这里写了 redirect，所以主应用挂载时并没有指定具体路由</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/pageA'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> <span class="token string">'@/pages/pageA'</span><span class="token punctuation">,</span> <span class="token comment">// 组件正常编写即可，无需特殊处理</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><div class="info"><blockquote><p><code>Tips</code>:</p><ol><li><p>区分 <code>loadMicroApp</code> 和 <code>registerMicroApps</code> 两者在路由规则上的差异：前者本身并没有内置路由的管理和拦截机制，所以需要保证子应用路由和主应用路由一致，防止触发浏览器的页面刷新行为（<code>memory</code> 路由模式除外）。后者通过匹配到 <code>activeRule</code> 时，加载子应用模块，内部实现了路由拦截机制，所以无需保证子应用路由和主应用路由一致。</p></li><li><p><code>loadMicroApp</code> 更适用于动态和个别子应用加载的场景（例如之前 <code>iframe</code> 集成某个页面时），而 <code>registerMicroApps</code> 适用于整体的子应用配置管理。</p></li><li><p>只有 <code>memory</code> 路由模式下才能通过 <code>initialEntries</code> 设置初始化路由（这无关乎采用的是 <code>loadMicroApp</code> 还是 <code>registerMicroApps</code>）。</p></li></ol></blockquote></div>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 微前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qiankun </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 zip-stream 实现批量文件的打包压缩下载</title>
      <link href="/share/download-zip-file/"/>
      <url>/share/download-zip-file/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>之前的一个项目需求：“用户从列表中勾选一些数据，这些数据包含了文件信息。需要下载所勾选数据中的所有文件”</p><p>直接通过传统方式 <code>location.href 或者 a标签</code> 下载，会发现并不能并行下载，最多只能同时下载一个文件…</p><p>然后尝试通过基于 <code>iframe</code> 并行下载，但会在浏览器上产生很多的下载任务，生成一串的文件在浏览器底部显示，看着都很不科学…</p><div class="info"><blockquote><p>为什么是基于 <code>iframe</code> 而不是 <code>a</code> 链接下载？</p><p>受浏览器安全策略影响，浏览器会阻止超过一个下载任务的请求，如果存在多个，会取消掉前面的下载任务。</p><p>除了使用 <code>iframe</code> 以外，还可以通过 <code>setTimeout</code> 来规避，（但需要知道上一个任务的下载是否完成，且理论上也并不是并行下载）</p></blockquote></div><p>最后想了下还是基于 <code>node</code> 在中间层封装一个 <code>zip</code> 的下载接口，将这一批文件统一打包处理再供给前端下载。</p><span id="more"></span><h3 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h3><h4 id="基于-POST-下载"><a href="#基于-POST-下载" class="headerlink" title="基于 POST 下载"></a>基于 <code>POST</code> 下载</h4><p>通常我们上传文件数据后，都是将文件可访问路径作为值存在表单里，当我们需要批量下载时（前提是后端并没有实现这个接口，需要我们在中间层自己封装实现），需要将这些路径拼接到 <code>query</code> 中，很容易就会导致路径过长超出浏览器限制。此时就需要我们通过 <code>POST</code> 方式进行下载。</p><p>前端只需要将返回的文件流通过 <code>blob</code> 的方式下载到客户端即可。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">download</span><span class="token punctuation">(</span>file<span class="token operator">:</span> Blob<span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  link<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>  link<span class="token punctuation">.</span>download <span class="token operator">=</span> name<span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>  link<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">downloadFiles</span><span class="token punctuation">(</span>files<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> path<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> zipRes <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/downloadFilesZip</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span> list<span class="token operator">:</span> files <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    responseType<span class="token operator">:</span> <span class="token string">'blob'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>zipStreamRes<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'application/octet-stream'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">download</span><span class="token punctuation">(</span>blob<span class="token punctuation">,</span> <span class="token string">'附件资源.zip'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="基于-GET-下载（推荐）"><a href="#基于-GET-下载（推荐）" class="headerlink" title="基于 GET 下载（推荐）"></a>基于 <code>GET</code> 下载（推荐）</h4><p>为了规避上面提到的 <code>GET</code> 链接超长的问题，可以先调用 <code>POST</code> 将需要下载的文件任务存在 <code>session</code> 中，然后再调用 <code>GET</code> 执行下载。</p><div class="info"><blockquote><p>为什么前面提到了 <code>GET</code> 的劣势，我们仍然需要使用 <code>GET</code> 进行下载？</p><p><code>POST</code> 请求下载通常是需要前端生成 <code>Blob</code> 文件对象，而这又是直接存储在内存当中的，意味着当文件过大的时候，可能会出现下载异常。</p></blockquote></div><p>改造一下前面的 <code>POST</code> 下载：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">downloadFiles</span><span class="token punctuation">(</span>files<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> path<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 调用接口，只是将 files 数据存到 session，而非真正意义上的下载</span>  <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/setupDownloadFilesZip</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token punctuation">&#123;</span> list<span class="token operator">:</span> files <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 中间层提供的 GET /downloadFilesZip 接口下载</span>  location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/downloadFilesZip</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="服务端实现"><a href="#服务端实现" class="headerlink" title="服务端实现"></a>服务端实现</h3><p>服务端实现相对 <code>client</code> 来说稍微复杂一点。需要将客户端提供的文件链接在服务端请求下载并做压缩转发。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">File</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> path<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ISession</span> <span class="token keyword">extends</span> <span class="token class-name">Express</span><span class="token punctuation">.</span>Session <span class="token punctuation">&#123;</span>  pendingDownloadTasks<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Post</span></span><span class="token punctuation">(</span><span class="token string">'/downloadFilesZip'</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">setFilesZip</span><span class="token punctuation">(</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Session</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> session<span class="token operator">:</span> ISession<span class="token punctuation">,</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Body</span></span><span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">)</span> pendingList<span class="token operator">:</span> File<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  session<span class="token punctuation">.</span>pendingDownloadTasks <span class="token operator">=</span> pendingList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">'/downloadFilesZip'</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">downloadFilesZip</span><span class="token punctuation">(</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Session</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> session<span class="token operator">:</span> ISession<span class="token punctuation">,</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Res</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> res<span class="token operator">:</span> Response<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// download...</span><span class="token punctuation">&#125;</span></code></pre><p>同 <code>client</code> 实现思路，先将需要打包压缩的文件信息存到 <code>session</code>，然后在 <code>Get</code> 请求中执行下载。下面是 <code>downloadFilesZip</code> 函数的两种实现</p><h4 id="基于-archiver-实现"><a href="#基于-archiver-实现" class="headerlink" title="基于 archiver 实现"></a>基于 <code>archiver</code> 实现</h4><blockquote><p><code>archiver</code> 是一个流式的、高级别的打包工具，支持创建各种压缩格式，如 <code>ZIP、TAR、TAR.GZ</code>。适用于大型和复杂的打包任务。</p><p><code>p-limit</code> 在异步任务中控制并发操作数量，避免资源的过渡消耗。</p></blockquote><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> Archiver <span class="token keyword">from</span> <span class="token string">'archiver'</span><span class="token punctuation">;</span><span class="token keyword">import</span> pLimit <span class="token keyword">from</span> <span class="token string">'p-limit'</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">zipFile</span><span class="token punctuation">(</span>zipArchive<span class="token operator">:</span> Archiver<span class="token punctuation">.</span>Archiver<span class="token punctuation">,</span> file<span class="token operator">:</span> File<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> fileStream <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> responseType<span class="token operator">:</span> <span class="token string">'stream'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    zipArchive<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>fileStream<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> file<span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fileStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">file </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>file<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> download success</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fileStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">downloadFilesZip</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Session</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> session<span class="token operator">:</span> ISession<span class="token punctuation">,</span> <span class="token decorator"><span class="token at operator">@</span><span class="token function">Res</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> res<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> fileList <span class="token operator">=</span> session<span class="token punctuation">.</span>pendingDownloadTasks<span class="token punctuation">;</span>  session<span class="token punctuation">.</span>pendingDownloadTasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 下载后立即清除session中保存的下载任务</span>  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    session<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fileList <span class="token operator">&amp;&amp;</span> fileList<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadRequestException</span><span class="token punctuation">(</span><span class="token string">'当前会话没有待打包下载文件数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 设置压缩等级</span>  <span class="token keyword">const</span> zipArchive <span class="token operator">=</span> <span class="token function">Archiver</span><span class="token punctuation">(</span><span class="token string">'zip'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> zlib<span class="token operator">:</span> <span class="token punctuation">&#123;</span> level<span class="token operator">:</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置响应头</span>  res<span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token string">'zip'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token string">'附件资源.zip'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 通过管道响应流式数据，中间层只做流转发不做存储</span>  zipArchive<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 控制并发数2</span>    <span class="token keyword">const</span> limit <span class="token operator">=</span> <span class="token function">pLimit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> tasks <span class="token operator">=</span> fileList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">zipFile</span><span class="token punctuation">(</span>zipArchive<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">;</span>    zipArchive<span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">download error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token punctuation">(</span>error <span class="token keyword">as</span> Error<span class="token punctuation">)</span><span class="token operator">?.</span>message<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpException</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error <span class="token keyword">as</span> Error<span class="token punctuation">)</span><span class="token operator">?.</span>message<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="基于-zip-stream-实现（推荐）"><a href="#基于-zip-stream-实现（推荐）" class="headerlink" title="基于 zip-stream 实现（推荐）"></a>基于 <code>zip-stream</code> 实现（推荐）</h4><blockquote><p><code>zip-stream</code> 是一个轻量级的、流式的 <code>zip</code> 压缩工具，专注于 <code>zip</code> 格式。相较于前者更轻量，在本例场景中更加适用。</p><p><code>promisify</code> 是一个 <code>node</code> 内置的 <code>util</code> 模块函数，用于将回调函数转换为 <code>promise</code> 对象。</p></blockquote><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> promisify <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'util'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ZipStream <span class="token keyword">from</span> <span class="token string">'zip-stream'</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">downloadFilesZip</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Session</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> session<span class="token operator">:</span> ISession<span class="token punctuation">,</span> <span class="token decorator"><span class="token at operator">@</span><span class="token function">Res</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> res<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> fileList <span class="token operator">=</span> session<span class="token punctuation">.</span>pendingDownloadTasks<span class="token punctuation">;</span>  session<span class="token punctuation">.</span>pendingDownloadTasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 下载后立即清除session中保存的下载任务</span>  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    session<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fileList <span class="token operator">&amp;&amp;</span> fileList<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadRequestException</span><span class="token punctuation">(</span><span class="token string">'当前会话没有待打包下载文件数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> zipArchive <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipStream</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> zlib<span class="token operator">:</span> <span class="token punctuation">&#123;</span> level<span class="token operator">:</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token string">'zip'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token string">'附件资源列表.zip'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  zipArchive<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> addEntry <span class="token operator">=</span> <span class="token function">promisify</span><span class="token punctuation">(</span>zipArchive<span class="token punctuation">.</span>entry<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>zipArchive<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> abortController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 客户端断开时，停止下载</span>  res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> aborted <span class="token operator">=</span> <span class="token operator">!</span>res<span class="token punctuation">.</span>writableFinished<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>aborted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">client disconnected</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      abortController<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      zipArchive<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span>headersSent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> message<span class="token operator">:</span> <span class="token string">'Client disconnect'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> file <span class="token keyword">of</span> fileList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">start download file </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>file<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> download</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> fileStream <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        responseType<span class="token operator">:</span> <span class="token string">'stream'</span><span class="token punctuation">,</span>        signal<span class="token operator">:</span> abortController<span class="token punctuation">.</span>signal<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token function">addEntry</span><span class="token punctuation">(</span>fileStream<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> file<span class="token punctuation">.</span>name<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">complete download file </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>file<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> download</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">isCancel</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">failed to add entry</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  zipArchive<span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 功能实现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> archiver </tag>
            
            <tag> zipStream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端实现文件下载的几种方案</title>
      <link href="/share/download-file/"/>
      <url>/share/download-file/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><code>前端下载文件已经是一个非常普遍的需求了，同时也已有了非常成熟的解决方案。简单做个罗列，并把可能会遇到的问题描述出来</code></p><span id="more"></span><h3 id="window-open-或-window-location-href"><a href="#window-open-或-window-location-href" class="headerlink" title="window.open 或 window.location.href"></a><code>window.open</code> 或 <code>window.location.href</code></h3><p>最简单的方式，同 <code>a</code> 标签访问下载</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript">window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 默认是 '_self' 页面会闪一下，体验不是很完美</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> url<span class="token punctuation">;</span></code></pre><blockquote><p><code>url</code> 可以是文件地址，也可以是一个 <code>GET</code> 下载请求地址</p><p>浏览器可直接浏览的文件类型是不能通过这种方式下载的（当然我指的是 <code>url</code> 不是一个下载的 <code>get</code> 请求时）。例如：<code>txt/png/pdf...</code></p><p>同时，这种方式还有个弊端，无法获取下载进度</p></blockquote><h3 id="a-标签下载"><a href="#a-标签下载" class="headerlink" title="a 标签下载"></a><code>a</code> 标签下载</h3><p>指定下载的文件名并添加下载属性，不设置默认即为文件原名（考虑到兼容性问题，<code>filename</code> 后面尽量加上文件的类型后缀）。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">download</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filename<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><blockquote><p>相比较前面通过 <code>location.href</code> 的方式，这种方式可以下载任意类型的文件。</p></blockquote><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">downloadFile</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> filename<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span>href <span class="token operator">=</span> url<span class="token punctuation">;</span>  a<span class="token punctuation">.</span>download <span class="token operator">=</span> filename<span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// appendChild 是为了更好的兼容</span>  a<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="iframe-下载"><a href="#iframe-下载" class="headerlink" title="iframe 下载"></a><code>iframe</code> 下载</h3><p>相较于前两种下载方式，<code>iframe</code> 下载方式没有并发数限制。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">downloadFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  iframe<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>  iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span> <span class="token comment">// url 是可下载的文件链接</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>  iframe<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="基于-Blob-对象下载"><a href="#基于-Blob-对象下载" class="headerlink" title="基于 Blob 对象下载"></a>基于 <code>Blob</code> 对象下载</h3><p>这种方式可以说是最通用的下载方式了，兼容性也很好。通过网络请求从后端获取，利用 <code>Blob</code> 对象将文件流转化为 <code>Blob</code> 二进制对象:</p><blockquote><p>现在主流的网络请求工具，例如 <code>axios...</code> 是支持设置 <code>responseType</code> 的，所以可以直接使用 <code>responseType = &#39;blob&#39;</code> 的方式下载。</p></blockquote><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">downloadFile</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> filename<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    responseType<span class="token operator">:</span> <span class="token string">'blob'</span><span class="token punctuation">,</span>    params<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> resData <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token keyword">const</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  link<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>resData<span class="token punctuation">)</span><span class="token punctuation">;</span>  link<span class="token punctuation">.</span>download <span class="token operator">=</span> filename<span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>  link<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p><code>URL.createObjectURL</code> 作用同 <code>fileReader.readAsDataURL</code>，只不过后者是转为 <code>Data(base64) URL</code>，前者转为 <code>Blob URL</code>。</p></blockquote><p>通过网络请求下载，可以配置函数来自定义下载进度显示（例： <code>axios</code>，则在请求体的 <code>config.onUploadProgress</code> 中）：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> fileConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> defaultUploadProgress<span class="token operator">:</span> <span class="token function-variable function">OnUploadProgress</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> percentage <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>loaded <span class="token operator">/</span> e<span class="token punctuation">.</span>total<span class="token operator">!</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>percentage <span class="token operator">!==</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fileConfig<span class="token punctuation">.</span>percentage <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>percentage<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>通常，在下载文件时，会在服务端生成对请求文件类型的描述信息，例如 <code>Content-Type</code>，<code>Content-Disposition</code> 等，这些信息需要与下载的文件名一起发送，例如：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript">res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/zip'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>  <span class="token string">'content-disposition'</span><span class="token punctuation">,</span>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attachment;filename=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token string">'资源文件列表'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.zip</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当服务端配置了以后，前端下载文件即可无需通过 <code>new Blob([res], &#123; type: &#39;application/octet-stream&#39; &#125;)</code> 进行指定。</p><h3 id="文件预览"><a href="#文件预览" class="headerlink" title="文件预览"></a>文件预览</h3><p>默认情况下，访问文件资源，部分类型的文件仅支持预览而无法下载，同理，部分能够下载的文件又不支持预览，此时，我们需要通过网络请求去获取资源，通过设置设置 <code>content-disposition</code> 告诉浏览器是需要预览还是下载。</p><p>例如文件资源链接 <code>/s3/xxx/filename.pdf</code>，那么预览：<code>/s3/xxx/filename.pdf?preview=true</code>，下载即为：<code>/s3/xxx/filename.pdf?download=true</code></p><p><code>server</code> 实现：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>preview<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'content-disposition'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">inline;filename=filename.pdf</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>download<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'content-disposition'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attachment;filename=filename.pdf</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><code>client</code> 实现：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// preview</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">previewInNewTab</span><span class="token punctuation">(</span>imgUrl<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;iframe src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>imgUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;preview=true" style="width: 100vw;height: 100vh;border: 0;margin: -8px;" /></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token keyword">const</span> popup <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  popup<span class="token operator">?.</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// download</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">downloadFile</span><span class="token punctuation">(</span>fileUrl<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>fileUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;download=true</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 功能实现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的功能辅助函数列举</title>
      <link href="/share/util-function/"/>
      <url>/share/util-function/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>列举一些在日常开发中常用的辅助函数，以便于快速开发</p></blockquote><span id="more"></span><h2 id="资源加载相关"><a href="#资源加载相关" class="headerlink" title="资源加载相关"></a>资源加载相关</h2><h3 id="加载一个远程脚本"><a href="#加载一个远程脚本" class="headerlink" title="加载一个远程脚本"></a>加载一个远程脚本</h3><p>从给定的地址链接加载 <code>js</code> 脚本，并在加载完成后执行后续的一些操作</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> needRunCallbacks<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">onScriptLoaded</span><span class="token punctuation">(</span>$script<span class="token operator">:</span> HTMLScriptElement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> onEnd <span class="token operator">=</span> <span class="token string">'onload'</span> <span class="token keyword">in</span> $script <span class="token operator">?</span> <span class="token function">stdOnEnd</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>$script<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ieOnEnd</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>$script<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">onEnd</span><span class="token punctuation">(</span>$script<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">stdOnEnd</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> script<span class="token operator">:</span> HTMLScriptElement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> _that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token punctuation">(</span>isError<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> error <span class="token operator">=</span> isError <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Failed to load </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>src<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token comment">// 移除事件监听，避免重复执行</span>      _that<span class="token punctuation">.</span>onerror <span class="token operator">=</span> _that<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      needRunCallbacks<span class="token punctuation">[</span>script<span class="token punctuation">.</span>src<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">callback</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> script<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">delete</span> needRunCallbacks<span class="token punctuation">[</span>script<span class="token punctuation">.</span>src<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    script<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    script<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">ieOnEnd</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> script<span class="token operator">:</span> HTMLScriptElement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> _that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    script<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>_that<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token string">'complete'</span> <span class="token operator">&amp;&amp;</span> _that<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token string">'loaded'</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>      _that<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      needRunCallbacks<span class="token punctuation">[</span>script<span class="token punctuation">.</span>src<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> script<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">delete</span> needRunCallbacks<span class="token punctuation">[</span>script<span class="token punctuation">.</span>src<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 加载一个远程脚本 * @param &#123;String&#125; src 一个远程脚本 * @param &#123;Function&#125; callback 回调 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">loadScript</span><span class="token punctuation">(</span>src<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> callback<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>err<span class="token operator">?</span><span class="token operator">:</span> Error<span class="token punctuation">,</span> script<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> existScript <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> cb <span class="token operator">=</span> callback <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>existScript<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果当前脚本资源还未结束加载，则只需要往回调数组里追加，否则(表示已加载完成)直接执行即可</span>    <span class="token keyword">return</span> needRunCallbacks<span class="token punctuation">[</span>src<span class="token punctuation">]</span> <span class="token operator">?</span> needRunCallbacks<span class="token punctuation">[</span>src<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> $script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    needRunCallbacks<span class="token punctuation">[</span>src<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>cb<span class="token punctuation">]</span><span class="token punctuation">;</span>    $script<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>    $script<span class="token punctuation">.</span>id <span class="token operator">=</span> src<span class="token punctuation">;</span>    $script<span class="token punctuation">.</span>async <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>$script<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">onScriptLoaded</span><span class="token punctuation">(</span>$script<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>同上实现，如果要卸载脚本资源：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">unloadScript</span><span class="token punctuation">(</span>src<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="加载一组远程脚本"><a href="#加载一组远程脚本" class="headerlink" title="加载一组远程脚本"></a>加载一组远程脚本</h3><p>在上面的基础上，添加实现：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> cloneDeep <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'lodash'</span><span class="token punctuation">;</span><span class="token comment">/** * 顺序加载一组远程脚本 * @param &#123;Array&#125; list 一组远程脚本 * @param &#123;Function&#125; cb 回调 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">loadScripts</span><span class="token punctuation">(</span>srcs<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> cloneSrcs <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>srcs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> firstSrc <span class="token operator">=</span> cloneSrcs<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  firstSrc <span class="token operator">?</span> <span class="token function">loadScript</span><span class="token punctuation">(</span>firstSrc<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">loadScripts</span><span class="token punctuation">(</span>cloneSrcs<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> callback<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="moment-dayjs相关"><a href="#moment-dayjs相关" class="headerlink" title="moment/dayjs相关"></a><code>moment/dayjs</code>相关</h2><h3 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h3><p>通常在开发中，存在类似这样的需求：<code>将时间字符串转为 今天..昨天..具体时间</code>，下面通过 <code>moment/dayjs(包体积更小，两者 api 大致相同)</code> 进行实现：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/** * 将时间字符串转为 今天..昨天..具体时间 * @param &#123;String&#125; timeStr 目标时间 * @param &#123;String&#125; defaultFormat 默认输出格式 * @return &#123;String&#125; 转换后的时间 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">timeFormat</span><span class="token punctuation">(</span>timeStr<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> defaultFormat <span class="token operator">=</span> <span class="token string">'YYYY-MM-DD HH:mm'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> dataTime <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span>timeStr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> timeSuffix <span class="token operator">=</span> dataTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'HH:mm'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> isToday <span class="token operator">=</span> dataTime<span class="token punctuation">.</span><span class="token function">isSame</span><span class="token punctuation">(</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'day'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> yd <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'days'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'day'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> isYesterday <span class="token operator">=</span> dataTime<span class="token punctuation">.</span><span class="token function">isSame</span><span class="token punctuation">(</span>yd<span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 或者你可以再分的细一点，当年的不显示年份...</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isToday<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'今天 '</span> <span class="token operator">+</span> timeSuffix<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isYesterday<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'昨天 '</span> <span class="token operator">+</span> timeSuffix<span class="token punctuation">;</span>  <span class="token keyword">return</span> dataTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>defaultFormat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="复制-x2F-粘贴相关"><a href="#复制-x2F-粘贴相关" class="headerlink" title="复制&#x2F;粘贴相关"></a>复制&#x2F;粘贴相关</h2><h3 id="文本选中"><a href="#文本选中" class="headerlink" title="文本选中"></a>文本选中</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/** * 选中元素中的文本 * @param &#123;Element&#125; textEl 目标元素 * @param &#123;Number&#125; startIndex 起始索引 * @param &#123;Number&#125; stopIndex 结束索引 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">selectText</span><span class="token punctuation">(</span>textEl<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> startIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> stopIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>textEl<span class="token punctuation">.</span>createTextRange<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ie</span>    <span class="token keyword">const</span> range <span class="token operator">=</span> textEl<span class="token punctuation">.</span><span class="token function">createTextRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    range<span class="token punctuation">.</span><span class="token function">collapse</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    range<span class="token punctuation">.</span><span class="token function">moveStart</span><span class="token punctuation">(</span><span class="token string">'character'</span><span class="token punctuation">,</span> startIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 起始光标</span>    range<span class="token punctuation">.</span><span class="token function">moveEnd</span><span class="token punctuation">(</span><span class="token string">'character'</span><span class="token punctuation">,</span> stopIndex <span class="token operator">-</span> startIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结束光标</span>    range<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不兼容苹果</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// firefox/chrome</span>    textEl<span class="token punctuation">.</span><span class="token function">setSelectionRange</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> stopIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    textEl<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="文本复制到剪贴板（丢弃）"><a href="#文本复制到剪贴板（丢弃）" class="headerlink" title="文本复制到剪贴板（丢弃）"></a>文本复制到剪贴板（丢弃）</h3><p>考虑到复制的文本中存在换行符，所以使用的 <code>textarea</code>元素：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/** * 将一段文本复制到剪贴板 * @param &#123;String&#125; value 文本内容 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setClipboard</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> tempInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'textarea'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">(</span>tempInput <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">'position: absolute; left: -1000px; top: -1000px'</span><span class="token punctuation">;</span>  tempInput<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>tempInput<span class="token punctuation">)</span><span class="token punctuation">;</span>  tempInput<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">'copy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>tempInput<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="文本复制到系统剪贴板（新）"><a href="#文本复制到系统剪贴板（新）" class="headerlink" title="文本复制到系统剪贴板（新）"></a>文本复制到系统剪贴板（新）</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">copyToClipboard</span><span class="token punctuation">(</span>text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">writeText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'无法将文本复制到剪贴板：'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 备用方案：在不支持 navigator.clipboard 的浏览器中创建临时输入框并复制文本</span>    <span class="token keyword">const</span> tempInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'textarea'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tempInput<span class="token punctuation">.</span>value <span class="token operator">=</span> text<span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>tempInput<span class="token punctuation">)</span><span class="token punctuation">;</span>    tempInput<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">'copy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>tempInput<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="从系统剪贴板读取内容"><a href="#从系统剪贴板读取内容" class="headerlink" title="从系统剪贴板读取内容"></a>从系统剪贴板读取内容</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">readFromClipboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      text <span class="token operator">=</span> <span class="token keyword">await</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">readText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'无法从剪贴板读取文本：'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 备用方案：在不支持 navigator.clipboard 的浏览器中使用 document.execCommand('paste')</span>    <span class="token keyword">const</span> tempInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'textarea'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>tempInput<span class="token punctuation">)</span><span class="token punctuation">;</span>    tempInput<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">'paste'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    text <span class="token operator">=</span> tempInput<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>tempInput<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> text<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><div class='warning'><blockquote><p>注意：基于安全性和隐私保护限制，<code>document.execCommand</code> 不会直接从系统剪贴板获取内容。所以更多时候请优先使用 <code>navigator.clipboard</code>，因为它提供了更安全的方法来执行这些任务，并且更具兼容性。</p></blockquote></div><h3 id="HTML-复制到剪贴板"><a href="#HTML-复制到剪贴板" class="headerlink" title="HTML 复制到剪贴板"></a><code>HTML</code> 复制到剪贴板</h3><p>在需要将元素带样式复制到 <code>word/excel</code> 中的场景使用（例如表格复制？）：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/** * 将 html 带格式复制到剪贴板 * @param &#123;Element&#125; elToBeCopied 需要粘贴的元素节点 eg. document.querySelector('.table') */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">copyEl</span><span class="token punctuation">(</span>elToBeCopied<span class="token operator">:</span> Element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> sel<span class="token punctuation">;</span>  <span class="token comment">// Ensure that range and selection are supported by the browsers</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>createRange <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>getSelection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> range <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sel <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// unselect any element in the page</span>    sel<span class="token operator">?.</span><span class="token function">removeAllRanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      range<span class="token punctuation">.</span><span class="token function">selectNodeContents</span><span class="token punctuation">(</span>elToBeCopied<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      range<span class="token punctuation">.</span><span class="token function">selectNode</span><span class="token punctuation">(</span>elToBeCopied<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      sel<span class="token operator">?.</span><span class="token function">addRange</span><span class="token punctuation">(</span>range<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">'copy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  sel<span class="token operator">?.</span><span class="token function">removeAllRanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="文字头像相关"><a href="#文字头像相关" class="headerlink" title="文字头像相关"></a>文字头像相关</h2><h3 id="根据名称随机设置背景"><a href="#根据名称随机设置背景" class="headerlink" title="根据名称随机设置背景"></a>根据名称随机设置背景</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/** * 根据名称随机设置背景 * * @param &#123;String&#125; name 名称 * @returns &#123;String&#125; 背景色 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">randomColorByName</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token comment">// 避免名称过短导致不能生成正常长度的十六进制数</span>  <span class="token keyword">let</span> tempName <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tempName<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    str <span class="token operator">+=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token string">'#'</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="通过-canvas-绘制文字头像"><a href="#通过-canvas-绘制文字头像" class="headerlink" title="通过 canvas 绘制文字头像"></a>通过 <code>canvas</code> 绘制文字头像</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/** * 根据传入的尺寸和名字生成文字头像 * * @param &#123;[Number, Number]&#125; size 头像尺寸 * @param &#123;String&#125; name 名字 * @param &#123;String&#125; bgc 背景色 * @returns 返回生成的图片 * @example * import &#123; genTextImg &#125; from '@/utils/genTextImg'; * genTextImg([100, 100], '张三'); */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">genTextImg</span><span class="token punctuation">(</span>size<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> bgc<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> showName <span class="token operator">=</span> name<span class="token operator">?.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> cvs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cvs<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'width'</span><span class="token punctuation">,</span> size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cvs<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span> size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> ctx <span class="token operator">=</span> cvs<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> bgc <span class="token operator">??</span> <span class="token function">randomColorByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'#fff'</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>font <span class="token operator">=</span> size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.6</span> <span class="token operator">+</span> <span class="token string">'px Arial'</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>textBaseline <span class="token operator">=</span> <span class="token string">'middle'</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>textAlign <span class="token operator">=</span> <span class="token string">'center'</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span>showName<span class="token punctuation">,</span> size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> cvs<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token string">'image/jpeg'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="window-location-相关"><a href="#window-location-相关" class="headerlink" title="window.location 相关"></a><code>window.location</code> 相关</h2><h3 id="链接追加-query-参数"><a href="#链接追加-query-参数" class="headerlink" title="链接追加 query 参数"></a>链接追加 <code>query</code> 参数</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> querystring <span class="token keyword">from</span> <span class="token string">'querystring'</span><span class="token punctuation">;</span><span class="token comment">/** * 在链接末尾追加上指定的query参数 * * @param &#123;String&#125; link 链接 * @param &#123;String&#125; queryId 参数名 * @param &#123;String&#125; queryVal 参数值 * * @returns 返回新的链接 */</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">appendLinkQuery</span> <span class="token operator">=</span> <span class="token punctuation">(</span>link<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> queryId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> queryVal<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> queryObj <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> query <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>queryObj<span class="token punctuation">,</span> <span class="token punctuation">[</span>queryId<span class="token punctuation">]</span><span class="token operator">:</span> queryVal <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>link<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>query<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="获取-hash-路径中需要的-key-值"><a href="#获取-hash-路径中需要的-key-值" class="headerlink" title="获取 hash 路径中需要的 key 值"></a>获取 <code>hash</code> 路径中需要的 <code>key</code> 值</h3><p><code>形如：http://www.xxx.com/#/xxx?a=1&amp;b=true&amp;c=name</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/** * 获取 hash 路径中需要的 queryKey 的值 * @param &#123;String&#125; [key] 可选，需要的 queryKey * @returns &#123;String | Object&#125; 返回 queryKey 的值，未传 queryKey 时返回整个 query 对象 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getHashParams</span><span class="token punctuation">(</span>queryKey<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> params<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> query <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> keyValuePairs <span class="token operator">=</span> queryString<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    keyValuePairs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>keyValue<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token operator">=</span> keyValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> decodedKey <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> decodedValue <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">[</span>decodedKey<span class="token punctuation">]</span> <span class="token operator">=</span> decodedValue<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> queryKey <span class="token operator">?</span> params<span class="token punctuation">[</span>queryKey<span class="token punctuation">]</span> <span class="token operator">:</span> params<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="获取-hash-内部的-query-参数值"><a href="#获取-hash-内部的-query-参数值" class="headerlink" title="获取 hash 内部的 query 参数值"></a>获取 <code>hash</code> 内部的 <code>query</code> 参数值</h3><p><code>形如：http://www.xxx.com/?d=1&amp;e=2#/xxx?a=1&amp;b=true&amp;c=name</code> 从中获取 <code>d</code> 的值</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">'querystring'</span><span class="token punctuation">;</span><span class="token comment">/** * 获取 hash 内部的 query 参数值 * @param &#123;String&#125; [queryKey] 可选，需要的 queryKey * @returns &#123;String | Object&#125; 返回 queryKey 的值，未传 queryKey 时返回整个 query 对象 */</span><span class="token keyword">function</span> <span class="token function">getHashInnerParams</span><span class="token punctuation">(</span>queryKey<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> search <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">;</span>  <span class="token keyword">const</span> filterSearch <span class="token operator">=</span> search<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token string">'#/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> hashQuery <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>filterSearch<span class="token operator">?.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> queryKey <span class="token operator">?</span> hashQuery<span class="token punctuation">[</span>queryKey<span class="token punctuation">]</span> <span class="token operator">:</span> hashQuery<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="持续更新中…"><a href="#持续更新中…" class="headerlink" title="持续更新中…"></a>持续更新中…</h2>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 辅助函数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 辅助函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于浏览器书签栏实现可执行脚本</title>
      <link href="/share/browser-js/"/>
      <url>/share/browser-js/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>偶然的一次机会，发现浏览器地址栏里可以执行 <code>javascript</code> 代码，<del>诶…直接发现新大陆了这是 🤩🤩🤩</del></p><p>基于这个特性，可以实现一些有趣的功能脚本，比如：表单自动填写、粘贴复制、快速测试…</p><blockquote><p><strong>除了通过书签的方式执行脚本外，你还可以将脚本内容封装到<a href="extension://dhdgffkkebhmkfjojejmpbldmpobfkfo/options.html#url=&nav=dashboard">油猴里</a>，作为插件在指定域名下自动启用</strong>。<del>它俩各有各的优缺点和使用场景，这里不对油猴做详细介绍。</del></p></blockquote><span id="more"></span><h3 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h3><p>在浏览器地址栏执行 <code>javascript</code> 脚本，需要遵循特定的 <code>URL Scheme</code> 协议开头，用以提示浏览器执行代码。</p><p>常用的格式：<code>javascript:xxx</code></p><div class="info"><blockquote><p><code>javascript:</code> 是协议前缀，<code>xxx</code> 是有效的可执行 <code>js</code> 代码。</p><p>由于 <code>URL</code> 限制，脚本最好是不要有空格，或者你可以用小括号将代码扩起来，将其看做是一个整体</p><p>除此之外，如果你不想在执行脚本后页面发生跳转，应该避免代码的最后的返回值是字符串…如果你不清楚代码的返回值是什么，可以将脚本代码放入调试控制台执行一次。</p></blockquote></div><h3 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h3><pre class="language-bash" data-language="bash"><code class="language-bash">javascript:alert<span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span></code></pre><p>将上面代码粘贴到浏览器地址栏，回车会弹出 <code>Hello World!</code> 提示框。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 脚本返回值是 string，页面会发生跳转</span>javascript:a<span class="token operator">=</span><span class="token string">'1'</span><span class="token comment"># 不会跳转，因为返回值是数字</span>javascript:a<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">;</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">2</span></code></pre><p>既然 <code>javascript:</code> 后面跟的是可执行代码，那么也就意味着我们可以将代码放入立即执行函数中，通过函数调用的方式来执行。当然这也是我推荐的一种方式：</p><blockquote><p>形如： <code>javascript:(function(item) &#123;&#125;)(args)</code></p></blockquote><p><code>ok</code>，知道怎么用了，我们可以将这些脚本设置为书签，书签地址即为我们写的脚本内容。下面是一些之前用到的脚本记录：</p><h3 id="脚本记录"><a href="#脚本记录" class="headerlink" title="脚本记录"></a>脚本记录</h3><h4 id="CSDN-免登陆复制"><a href="#CSDN-免登陆复制" class="headerlink" title="CSDN 免登陆复制"></a><code>CSDN</code> 免登陆复制</h4><p>方案一：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">javascript</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  window<span class="token punctuation">.</span>oncontextmenu <span class="token operator">=</span> document<span class="token punctuation">.</span>oncontextmenu <span class="token operator">=</span> document<span class="token punctuation">.</span>oncopy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">[</span><span class="token operator">...</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">dom</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>dom<span class="token punctuation">.</span>outerHTML <span class="token operator">=</span> dom<span class="token punctuation">.</span>outerHTML<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">[</span><span class="token operator">...</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'body, body *'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">dom</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span>      <span class="token string">'onselect'</span><span class="token punctuation">,</span>      <span class="token string">'onselectstart'</span><span class="token punctuation">,</span>      <span class="token string">'onselectend'</span><span class="token punctuation">,</span>      <span class="token string">'ondragstart'</span><span class="token punctuation">,</span>      <span class="token string">'ondragend'</span><span class="token punctuation">,</span>      <span class="token string">'oncontextmenu'</span><span class="token punctuation">,</span>      <span class="token string">'oncopy'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span> <span class="token operator">=></span> dom<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dom<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">'user-select'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'auto'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>方案二：</p><p>修改文档设计模式</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span>designMode <span class="token operator">=</span> <span class="token string">'on'</span><span class="token punctuation">;</span></code></pre><h4 id="持续更新中…"><a href="#持续更新中…" class="headerlink" title="持续更新中…"></a>持续更新中…</h4>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书签栏 </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Nginx 搭建静态资源服务器</title>
      <link href="/tools/nginx-static-server/"/>
      <url>/tools/nginx-static-server/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p><code>Nginx</code> 通常用于托管 Web 应用程序、静态网站、代理请求到后端应用程序服务器（如 <code>Node.js</code>、<code>Ruby</code>、<code>Python</code> 等），以及为高流量和高可用性场景提供解决方案。</p></blockquote><p>有些场景下，需要我们通过 <code>nginx</code> 搭建一个可访问的静态资源服务器，而无需繁琐的环境配置和程序运行。例如：托管不涉及前后端交互的静态资源网站…</p><span id="more"></span><h3 id="nginx-下载安装"><a href="#nginx-下载安装" class="headerlink" title="nginx 下载安装"></a><code>nginx</code> 下载安装</h3><p><a href="https://nginx.org/en/download.html">前往官网</a>，选择 <code>windows</code> 稳定版（<code>stable version：nginx/Windows-xxx </code>）下载压缩包，然后解压。</p><div class="danger"><blockquote><p><code>Tips:</code></p><p>由于不同的 <code>terminal</code> 限制，有的指令需要可能会抛异常，有的需要管理员权限，为了一步到位，直接在<code>nginx.exe</code> 所在根目录用管理员打开 <code>powershell</code> 操作即可</p><p>此外，下面的一些常用指令均是针对 <code>windows</code> 环境提出的，<code>linux</code> 环境下还可通过其他指令完成</p></blockquote></div><h3 id="启动-nginx"><a href="#启动-nginx" class="headerlink" title="启动 nginx"></a>启动 <code>nginx</code></h3><ul><li><p>方式一： 双击 <code>nginx.exe</code>，屏幕会弹一个黑框闪一下。</p></li><li><p>方式二： 打开 <code>cmd</code> 窗口，切换到 <code>nginx.exe</code> 目录，输入指令：</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 方式一</span>nginx.exe<span class="token comment"># 方式二</span>start nginx</code></pre><h3 id="访问-nginx"><a href="#访问-nginx" class="headerlink" title="访问 nginx"></a>访问 <code>nginx</code></h3><p>默认情况下，启动成功后会在本地开启 <code>80</code> 端口服务。在浏览器地址栏输入 <code>http://localhost:80</code>，出现如下界面表示启动成功：</p><p><a href="/images/tools/nginx-static-server/p1.png"><img src="/images/tools/nginx-static-server/p1.png" alt="nginx-static-server-p1" loading="lazy"></a></p><p>当然你也可以通过指令观察是否启动成功：</p><pre class="language-bash" data-language="bash"><code class="language-bash">tasklist /fi <span class="token string">"imagename eq nginx.exe"</span></code></pre><p>结果如下：</p><p><a href="/images/tools/nginx-static-server/p2.png"><img src="/images/tools/nginx-static-server/p2.png" alt="nginx-static-server-p2" loading="lazy"></a></p><h3 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 <code>nginx</code></h3><p>比如我们可以修改默认的 <code>80</code> 端口、服务名称、入口文件等等。</p><p>在刚刚解压的目录文件里，找到 <code>conf</code> 文件夹下的 <code>nginx.conf</code> 文件，用文本编辑器打开，修改如下配置：</p><p><a href="/images/tools/nginx-static-server/p3.png"><img src="/images/tools/nginx-static-server/p3.png" alt="nginx-static-server-p3" loading="lazy"></a></p><p>可以看到，我修改了一些比较常见的，比如端口、入口文件…一个简单的文件服务就配置好了 😍😍😍</p><div class="info"><blockquote><p><code>Tips</code>:</p><p>检测 <code>80</code> 端口是否被占用：</p><p><code>netstat -ano | findstr 0.0.0.0:80</code></p><p>或者</p><p><code>netstat -ano | findstr &quot;80&quot;</code></p></blockquote></div><h3 id="重启-nginx"><a href="#重启-nginx" class="headerlink" title="重启 nginx"></a>重启 <code>nginx</code></h3><p>当修改完配置文件后，需要重启 <code>nginx</code> 服务，才能生效。<del>不需要执行关闭操作</del></p><pre class="language-bash" data-language="bash"><code class="language-bash">nginx -s reload<span class="token comment"># 或者根据提示</span>./nginx -s reload</code></pre><h3 id="关闭-nginx"><a href="#关闭-nginx" class="headerlink" title="关闭 nginx"></a>关闭 <code>nginx</code></h3><p>值得一提的是，当我们使用完以后，记得要关闭 <code>nginx</code> 服务，不然会占用我们的端口，影响其他服务。</p><p>又特别是我们在测试一些代码的时候，由于更新了静态资源文件，此时不关闭上一次启动的服务，再一次启动 <code>nginx</code>，是不会抛异常的，而代价就是，我们看到的页面是上一次的，而不是最新的。</p><p>关闭窗口并不能关掉服务，需要执行指令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nginx.exe 所在根目录</span>.<span class="token punctuation">\</span>nginx -s stop<span class="token comment"># 或者</span>./nginx -s quit<span class="token comment"># 推荐 --- 一般在脚本中使用该指令，避免由于异常导致无法正常关闭</span>taskkill /f /t /im nginx.exe</code></pre><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>创建服务文件夹，将 <code>nginx</code> 相关资源放入子文件夹，然后将项目打包后的代码粘贴到文件夹内，最后启动服务即可。</p><p>项目目录形如：</p><pre class="language-none"><code class="language-none">- assets- images- nginx- index.html...</code></pre><p><code>nginx</code> 目录即为下载的 <code>nginx</code> 解压目录，相关配置如上面截图所示。</p><p>然后我们需要给这个静态资源服务器添加启动和关闭的脚本命令<del>总不能每次都自己打开 <code>cmd</code> 写指令吧…太麻烦了</del></p><h4 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h4><ul><li><code>start.bat</code></li></ul><pre class="language-bat" data-language="bat"><code class="language-bat">@ECHO OFFECHO Starting NGINXcd nginxstart nginx.exestart chrome http:&#x2F;&#x2F;localhost:5000popdEXIT &#x2F;b</code></pre><ul><li><code>stop.bat</code></li></ul><pre class="language-bat" data-language="bat"><code class="language-bat">@ECHO OFFtaskkill &#x2F;f &#x2F;IM nginx.exeEXIT</code></pre><div class="success"><blockquote><p>说明：</p><p><code>@ECHO OFF</code> 表示不在命令提示符窗口显示这句话以下的所有命令（即只显示输出结果）</p><p><code>start</code> 用于启动程序 <code>taskkill</code> 杀死程序</p><p><code>popd</code> 将当前工作目录还原为之前保存的目录（即返回到脚本执行之前的目录）</p><p><code>EXIT</code> 退出批处理文件（&#x2F;b 表示返回退出代码）</p></blockquote></div><p>效果如下：</p><p><a href="/images/tools/nginx-static-server/p4.png"><img src="/images/tools/nginx-static-server/p4.png" alt="nginx-static-server-p4" loading="lazy"></a></p>]]></content>
      
      
      <categories>
          
          <category> 工具学习 </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态网站 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些常用的命令行工具推荐</title>
      <link href="/tools/cli-recommend/"/>
      <url>/tools/cli-recommend/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>罗列日常开发中用到的工具包以及脚手架。持续更新中…</p><span id="more"></span><h3 id="antfu-ni"><a href="#antfu-ni" class="headerlink" title="@antfu/ni"></a><a href="https://github.com/antfu/ni"><code>@antfu/ni</code></a></h3><p>自动检测项目中使用的包管理器，是 <code>npm or yarn or pnpm...</code> 然后自动选择对应的管理器运行。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i -g @antfu/nini <span class="token comment"># npm install | yarn install ...</span>ni package <span class="token comment"># npm install package | yarn add package ...</span>ni package -Dni -g package <span class="token comment"># yarn global add package</span>nr <span class="token comment"># npm run</span>nr dev <span class="token comment"># npm run dev | yarn dev ...</span>nlx <span class="token comment"># npx</span>nlx package <span class="token comment"># npx package | yarn dlx ...</span>nu <span class="token comment"># npm upgrade | yarn upgrade | yarn up | pnpm update ...</span>nu -i <span class="token comment"># yarn upgrade-interactive (Yarn 1) | yarn up -i (Yarn Berry) | yarn up -i (Yarn Berry)</span>nun <span class="token comment"># npm uninstall | yarn remove ...</span>nci <span class="token comment"># npm ci | yarn install --frozen-lockfile ...</span>na <span class="token comment"># npm | yarn ...</span></code></pre><h3 id="depcheck"><a href="#depcheck" class="headerlink" title="depcheck "></a><a href="https://github.com/depcheck/depcheck"><code>depcheck </code></a></h3><p><code>Depcheck</code> 是一个工具，用于分析项目中的依赖项，以查看 <code>package.json</code> 哪些依赖项无用，以及缺少哪些依赖项。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g depcheckdepcheck <span class="token comment"># 根目录下执行即可 or</span>depcheck <span class="token operator">&lt;</span>项目目录<span class="token operator">></span></code></pre><div class='info'><p>常用参数：</p><ul><li><p><code>--skip-missing=[true | false]</code>：默认 <code>false</code>，表示是否检测 <code>Missing</code> 的依赖包</p></li><li><p><code>--ignore-bin-package=[true | false]</code>：默认 <code>false</code>，表示是否忽略包含 <code>bin</code> 条目的包</p></li><li><p><code>--json</code>：表示所有包的检测结果以 <code>json</code> 格式输出，大概就是 <code>XX</code> 包在哪些文件使用了，{“包名”:<code>[&quot;path1&quot;,&quot;path2&quot;]</code>}</p></li><li><p><code>--ignores=&quot;eslint,babel-*&quot;</code>：表示要忽略的包名称（逗号分隔），比如 <code>depcheck --ignores=&quot;eslint,@babel/*,babel-*&quot;</code></p></li><li><p><code>--ignore-path</code>：表示要忽略的文件的模式的文件的路径，比如 <code>depcheck --ignore-path=.eslintignore</code></p></li><li><p><code>--ignore-dirs</code>：已经弃用，使用 <code>--ignore-patterns</code> 替代，表示要忽略的目录名，逗号分隔 <code>--ignore-dirs=dist,coverage</code></p></li><li><p><code>--ignore-patterns</code>：表示要忽略的用逗号分隔的模式描述文件，比如 <code>depcheck --ignore-patterns=build/Release,dist,coverage,*.log</code></p></li><li><p><code>--parsers, --detectors and --specials</code>：高级的语法使用参考<a href="https://github.com/depcheck/depcheck/blob/main/doc/pluggable-design.md">官方文档</a></p></li><li><p><code>--config=[filename]</code>：外部配置文件</p></li></ul></div><p>外部配置文件：<code>.depcheckrc</code> 文件 （<code>yml/json</code> 格式），然后直接配置</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">ignores</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'eslint'</span><span class="token punctuation">,</span> <span class="token string">'babel-*'</span><span class="token punctuation">,</span> <span class="token string">'@babel/*'</span><span class="token punctuation">]</span><span class="token key atrule">skip-missing</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><h3 id="consoleImporter-插件"><a href="#consoleImporter-插件" class="headerlink" title="consoleImporter 插件"></a><a href="https://chrome.google.com/webstore/detail/console-importer/hgajpakhafplebkdljleajgbpdmplhie">consoleImporter 插件</a></h3><p>当我们需要对某一个三方库进行测试的时候，正常情况需要我们先搭建项目基础结构，然后安装模块在写案例并运行。<del>但只是为了测一下功能用法，这样做会显得有些笨重 😅😅😅</del></p><p>安装浏览器插件，打开浏览器调试面板 <code>console</code>：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 浏览器自带指令</span>$<span class="token comment"># 安装 package</span><span class="token variable">$i</span><span class="token punctuation">(</span>package<span class="token punctuation">)</span><span class="token comment"># 然后就可以正常使用模块的功能了</span></code></pre><h3 id="持续更新中…"><a href="#持续更新中…" class="headerlink" title="持续更新中…"></a>持续更新中…</h3>]]></content>
      
      
      <categories>
          
          <category> 工具学习 </category>
          
          <category> 脚手架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Vuepress 的静态网站生成器实践</title>
      <link href="/tools/vuepress/"/>
      <url>/tools/vuepress/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p><code>VuePress</code> 由两部分组成：第一部分是一个极简静态网站生成器 (<code>opens new window</code>)，它包含由 <code>Vue</code> 驱动的主题系统和插件 <code>API</code>，另一个部分是为书写技术文档而优化的默认主题，它的诞生初衷是为了支持 <code>Vue</code> 及其子项目的<strong>文档需求</strong></p></blockquote><p>之前自己写了一个简版的 <code>Vue</code> 组件库，但是没有写文档，所以就想着动手实际操作并记录下来。</p><span id="more"></span><h3 id="文档项目搭建"><a href="#文档项目搭建" class="headerlink" title="文档项目搭建"></a>文档项目搭建</h3><p>根目录下新增 <code>docs</code> 文件夹，作为文档项目的根节点，再初始化：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> docs <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> ./docs <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> init -y<span class="token function">yarn</span> <span class="token function">add</span> -D vuepress</code></pre><p>添加项目脚本指令：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"docs:dev"</span><span class="token operator">:</span> <span class="token string">"vuepress dev ."</span><span class="token punctuation">,</span>  <span class="token property">"docs:build"</span><span class="token operator">:</span> <span class="token string">"vuepress build ."</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><p>启动查看效果：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run docs:dev</code></pre><h3 id="文档配置调整"><a href="#文档配置调整" class="headerlink" title="文档配置调整"></a>文档配置调整</h3><p>默认的文档搭建完成后，只能通过切换网址路由来跳转各个文档，很不方便…然后看到可以自定义主题，根据主题配置侧边栏、导航栏、主页等等…详见：<a href="https://vuepress.vuejs.org/zh/theme/default-theme-config.html">https://vuepress.vuejs.org/zh/theme/default-theme-config.html</a></p><p>下面是我配置的案例：</p><h4 id="开启主页显示"><a href="#开启主页显示" class="headerlink" title="开启主页显示"></a>开启主页显示</h4><p>即项目根路由页面显示配置，仅做参考：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token comment">&lt;!-- /docs/README.md --></span><span class="token hr punctuation">---</span>home: trueheroImage: /favicon.icoheroText: vui-projecttagline: 轻量、可定制的移动端 Vue 组件库actionText: 快速上手 →actionLink: /config.htmlfeatures:<span class="token list punctuation">-</span> title: 简洁至上  details: 以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。<span class="token list punctuation">-</span> title: Vue 驱动  details: 享受 Vue + webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。<span class="token hr punctuation">---</span></code></pre><h4 id="添加侧边栏、导航栏配置"><a href="#添加侧边栏、导航栏配置" class="headerlink" title="添加侧边栏、导航栏配置"></a>添加侧边栏、导航栏配置</h4><p>新建 <code>.vuepress</code> 文件夹（请先查看<a href="https://vuepress.vuejs.org/zh/guide/directory-structure.html">目录结构说明</a>），新建 <code>config.js</code>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// /docs/.vuepress/config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">themeConfig</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">logo</span><span class="token operator">:</span> <span class="token string">'/favicon.ico'</span><span class="token punctuation">,</span>    <span class="token literal-property property">lastUpdated</span><span class="token operator">:</span> <span class="token string">'Last Updated'</span><span class="token punctuation">,</span>    <span class="token literal-property property">sidebar</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">'/config/'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'/config.html'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string-property property">'/componentsDoc/'</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">'button'</span> <span class="token comment">/* /componentsDoc/button.html */</span><span class="token punctuation">,</span>        <span class="token string">'text'</span> <span class="token comment">/* /componentsDoc/text.html */</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">nav</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span> <span class="token literal-property property">link</span><span class="token operator">:</span> <span class="token string">'/'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'Guide'</span><span class="token punctuation">,</span> <span class="token literal-property property">link</span><span class="token operator">:</span> <span class="token string">'/config.html'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'docs'</span><span class="token punctuation">,</span> <span class="token literal-property property">link</span><span class="token operator">:</span> <span class="token string">'/componentsDoc/button'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'Languages'</span><span class="token punctuation">,</span>        <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">&#123;</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'简体中文'</span><span class="token punctuation">,</span> <span class="token literal-property property">link</span><span class="token operator">:</span> <span class="token string">'/language/chinese'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'英文'</span><span class="token punctuation">,</span> <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token string">'/language/english'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'Github'</span><span class="token punctuation">,</span>        <span class="token literal-property property">link</span><span class="token operator">:</span> <span class="token string">'https://github.com/flynna/vui-project/tree/main/docs'</span><span class="token punctuation">,</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'_blank'</span><span class="token punctuation">,</span>        <span class="token literal-property property">rel</span><span class="token operator">:</span> <span class="token string">'noopener noreferrer'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>其中的以 <code>/</code> 开头的都是页面可访问路由，需要添加对应的 <code>.md</code> 文件。<a href="https://github.com/flynna/vui-project/tree/main/docs">去看源码</a></p><h4 id="主页效果"><a href="#主页效果" class="headerlink" title="主页效果"></a>主页效果</h4><p><a href="/images/tools/vuepress/p1.png"><img src="/images/tools/vuepress/p1.png" alt="vuepress-p1" loading="lazy"></a></p><h3 id="文档实现"><a href="#文档实现" class="headerlink" title="文档实现"></a>文档实现</h3><p>文档内容均是由 <code>.md</code> 文档编写，遵循 <code>markdown</code> 语法：</p><p><a href="/images/tools/vuepress/p2.png"><img src="/images/tools/vuepress/p2.png" alt="vuepress-p2" loading="lazy"></a></p><p>好像缺了点什么？哦对，实时渲染…不说实施编译，至少应该将组件效果呈现出来才对…</p><h4 id="添加-vui-project-组件库"><a href="#添加-vui-project-组件库" class="headerlink" title="添加 vui-project 组件库"></a>添加 <code>vui-project</code> 组件库</h4><p>将之前写的 <code>UI</code> 库组件引进来，全局注册…（官方默认说明：<code>.vuepress/components/*.vue</code> 的组件会自动全局注册）</p><p>说实话，将 <code>packages/</code> 的组件实现再在 <code>.vuepress/components/</code> 写一次是很冗余的事情…</p><p>翻了文档，有以下<strong>解决办法</strong>：</p><ul><li><p>添加插件 <a href="https://vuepress.vuejs.org/zh/plugin/official/plugin-register-components.html">@vuepress&#x2F;plugin-register-components</a> 配置自定义组件的路径和组件名称。</p></li><li><p>通过添加 <code>enhanceApp.js</code> 文件注册第三方库的方式，将 <code>vui-project</code> 集成进来。</p></li></ul><p><code>but</code> 由于我的组件库是由 <code>vue3</code> 写的，和 <code>vuepress</code> 存在兼容性问题，对我都不太适用…所以尝试着查阅了一下，果然有相关的 <a href="https://github.com/vuejs/vuepress/issues/2550">issue</a>，可以发现，官方尝试着发行新的库 <a href="https://github.com/vuepress/vuepress-next">vuepress-next</a> 来解决这个问题，但目前还没有正式版…</p><p>所以为了测试组件在 <code>vuepress</code> 的可用性，我就直接在 <code>/docs/.vuepress/components/</code> 下写了一份 <code>vue2</code> 的同功能 <code>VuiText</code> 组件代码。</p><h4 id="效果呈现"><a href="#效果呈现" class="headerlink" title="效果呈现"></a>效果呈现</h4><p><a href="/images/tools/vuepress/p3.png"><img src="/images/tools/vuepress/p3.png" alt="vuepress-p3" loading="lazy"></a></p>]]></content>
      
      
      <categories>
          
          <category> 工具学习 </category>
          
          <category> Vuepress </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态网站 </tag>
            
            <tag> vuepress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教你如何写一个 Vue 的 UI 组件库</title>
      <link href="/share/vue-components-ui-install/"/>
      <url>/share/vue-components-ui-install/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>在此之前，你需要先了解<a href="/tools/npm-publish">如何发布一个 npm-package?</a>，以及 <a href="/share/vue-component-vs-use">Vue.use 和 Vue.component</a> 实现。</p><div class="danger"><blockquote><p>注意：从 <code>UI</code> 组件功能实现到打包构建，本文主要是均是针对 <code>Vue3</code> 写的，如果你需要在 <code>Vue2</code> 中使用，需要单独提供可用于 <code>Vue2</code> 的 <code>UI</code> 库…</p></blockquote></div><span id="more"></span><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><h4 id="脚手架构建"><a href="#脚手架构建" class="headerlink" title="脚手架构建"></a>脚手架构建</h4><p>因为是从 <code>0</code> 到 <code>1</code> 构建，所以就选择了 <code>vue3</code> 了，参考 <a href="https://vuejs.org/guide/quick-start.html">https://vuejs.org/guide/quick-start.html</a></p><div class="info"><blockquote><p>npm create vue@latest<br>✔ Project name: … xxxxx<br>✔ Add TypeScript? … No &#x2F; Yes<br>✔ Add JSX Support? … No &#x2F; Yes<br>✔ Add Vue Router for Single Page Application development? … No &#x2F; Yes<br>✔ Add Pinia for state management? … No &#x2F; Yes<br>✔ Add Vitest for Unit testing? … No &#x2F; Yes<br>✔ Add an End-to-End Testing Solution? … No &#x2F; Cypress &#x2F; Playwright<br>✔ Add ESLint for code quality? … No &#x2F; Yes<br>✔ Add Prettier for code formatting? … No &#x2F; Yes<br>Scaffolding project in .xxxxx…<br>Done.</p></blockquote></div><h4 id="目录结构调整"><a href="#目录结构调整" class="headerlink" title="目录结构调整"></a>目录结构调整</h4><p>默认生成的项目目录结构如下：</p><p><a href="/images/share/vue-components-ui-install/p1.png"><img src="/images/share/vue-components-ui-install/p1.png" alt="vue-components-ui-install-p1" loading="lazy"></a></p><p>你很容易发现，大多数的 <code>UI</code> 项目组件库，都是将 <code>Demo</code> 调试资源放置在了 <code>example/</code> 目录下，而组件资源则放置到了 <code>packages/</code>。</p><p>为了保证结构化统一，我们需要重命名 <code>src</code> 为 <code>example</code>（<code>demo</code> 展示，可以直接是一个完整的 <code>vue</code> 项目 ☺☺☺）：</p><p>此外，我们需要再新建一个 <code>src 和 packages</code> 文件夹，作为组件包的实际入口文件以及包相关的资源。修改后的核心目录说明：</p><div class="warning"><blockquote><p><code>example</code>：用于测试组件的相关功能，用作 <code>UI</code> 组件的 <code>Demo</code> 展示（原脚手架创建的 <code>src</code> 目录）。<br><code>packages</code>：用于存放封装的自定义组件，仅含文件夹，每个子文件夹代表一个组件资源。<br><code>src</code>：组件库打包的入口文件存放处，同时也可以存放 <code>UI</code> 库相关的其他资源，例如指令、工具函数、类型定义等。</p></blockquote></div><p>新目录结构如下：</p><p><a href="/images/share/vue-components-ui-install/p2.png"><img src="/images/share/vue-components-ui-install/p2.png" alt="vue-components-ui-install-p2" loading="lazy"></a></p><h4 id="配置调整"><a href="#配置调整" class="headerlink" title="配置调整"></a>配置调整</h4><p>由于修改了原脚手架的 <code>src</code> 目录名称，又新建了资源目录，所以需要我们对项目配置做相应的调整：</p><ul><li><strong>修改 <code>index.html</code> 的 <code>script.src</code> 属性，由 <code>/src/main.ts</code> 修改为 <code>/example/main.ts</code></strong></li></ul><pre class="language-diff" data-language="diff"><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> &lt;script type="module" src="/src/main.ts">&lt;/script></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> &lt;script type="module" src="/example/main.ts">&lt;/script></span></span></code></pre><ul><li><strong>修改 <code>vite.config.ts</code> 中的 <code>resolve.alias @</code> 符号的别名配置</strong></li></ul><pre class="language-diff" data-language="diff"><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> '@': fileURLToPath(new URL('./src', import.meta.url))</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> '@': fileURLToPath(new URL('./example', import.meta.url))</span></span></code></pre><ul><li><strong>修改 <code>package.json</code> 中的 <code>format</code> 指令 <code>prettier</code> 的文件夹路径</strong></li></ul><pre class="language-diff" data-language="diff"><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> "format": "prettier --write src/"</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> "format": "prettier --write src/ example/ packages/"</span></span></code></pre><ul><li><strong>修改 <code>tsconfig.app.json</code> 下相关路径，并添加 <code>include</code> 配置</strong></li></ul><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"env.d.ts"</span><span class="token punctuation">,</span>    <span class="token string">"src/**/*"</span><span class="token punctuation">,</span>    <span class="token string">"packages/**/*"</span><span class="token punctuation">,</span>    <span class="token string">"packages/**/*.vue"</span><span class="token punctuation">,</span>    <span class="token string">"example/**/*"</span><span class="token punctuation">,</span>    <span class="token string">"example/**/*.vue"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"example/**/__tests__/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"composite"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">,</span>    <span class="token property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"@/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./example/*"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><div class="danger"><blockquote><p>注意：由于缓存的问题，修改了配置后，可能仍存在异常提示，这时需要手动清除掉 <code>node_modules/.vite</code> 目录，关掉服务，并重启编辑器，再重启项目。</p></blockquote></div><h3 id="组件库设计"><a href="#组件库设计" class="headerlink" title="组件库设计"></a>组件库设计</h3><p>本文旨在记录组件库的实现过程和思路，所以只写了两个 <code>demo</code> 组件。<del>后续如有需要，会在此基础上添加完善其他的组件实现 😶😶😶</del></p><h4 id="Demo-按钮组件实现"><a href="#Demo-按钮组件实现" class="headerlink" title="Demo 按钮组件实现"></a><code>Demo</code> 按钮组件实现</h4><p>在 <code>packages/</code> 文件夹下创建 <code>button/</code> 文件夹，用于存放按钮组件相关资源。</p><p><code>由于 vue3 版本改动原因，v-listeners 被合并到 $attrs 统一处理，所以就没有绑定 v-on=&quot;$listeners&quot; 了</code></p><pre class="language-markup" data-language="markup"><code class="language-markup">// packages/button/src/index.vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'VuiButton'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- vue3 the $listeners is deprecated --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vui-button<span class="token punctuation">"</span></span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$attrs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.vui-button</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #317a2e<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p><code>style 样式也可以是单独的 less 文件，通过 src 引入即可.</code></p><h4 id="less-支持"><a href="#less-支持" class="headerlink" title="less 支持"></a><code>less</code> 支持</h4><p>由于脚手架并没有内置 <code>less</code>，所以需要单独安装：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> <span class="token function">less</span> less-loader -D</code></pre><p>并在 <code>vite.config.ts</code> 中添加如下配置：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  css<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    preprocessorOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      less<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        javascriptEnabled<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="单组件插件注册支持"><a href="#单组件插件注册支持" class="headerlink" title="单组件插件注册支持"></a>单组件插件注册支持</h4><p>在此之前，回顾一下 <code>app.use(plugin)</code> 注册插件时，<code>plugin</code> 需要满足的基础结构：</p><blockquote><p><code>export default &#123; install &#125; 或者 export default function(app) &#123;&#125;...</code></p></blockquote><p><code>ok</code>，现在我们需要针对 <code>VuiButton</code> 完成插件设计，即<code>app.use(VuiButton)</code> 支持：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// packages/button/index.ts</span><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> App <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> VuiButton <span class="token keyword">from</span> <span class="token string">'./src/index.vue'</span><span class="token punctuation">;</span>VuiButton<span class="token punctuation">.</span><span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>app<span class="token operator">:</span> App<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">(</span>VuiButton<span class="token punctuation">.</span>name <span class="token operator">||</span> VuiButton<span class="token punctuation">.</span>__name<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">,</span> VuiButton<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">WithInstall<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token punctuation">&#123;</span> <span class="token function">install</span><span class="token punctuation">(</span>app<span class="token operator">:</span> App<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> VuiButton <span class="token keyword">as</span> WithInstall<span class="token operator">&lt;</span><span class="token keyword">typeof</span> VuiButton<span class="token operator">></span><span class="token punctuation">;</span></code></pre><p><strong><code>如上所示，一个单一的组件功能和结构就实现好了，它已经具备了被集成的基础条件</code>。</strong></p><p>后续只需要同 <code>Button</code> 组件一样，在该 <code>packages/</code> 文件夹下开发其他组件就行了。</p><p>额…你应该也发现了，封装成模块，貌似我们这个组件库还差一个程序入口…</p><hr><h4 id="组件库入口文件设计"><a href="#组件库入口文件设计" class="headerlink" title="组件库入口文件设计"></a>组件库入口文件设计</h4><p>在根目录下新创建的 <code>src</code> 下面新建入口文件 <code>index.ts</code>，实现并导出 <code>install</code> 方法。</p><p>和单一组件库不同的是，组件库需要对所有组件进行全局注册，并添加额外的配置和扩展。<del>详细可文章开头描述</del></p><p>具体实现：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// /src/index.ts</span><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> App <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">'../packages/button'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Text <span class="token keyword">from</span> <span class="token string">'../packages/text'</span><span class="token punctuation">;</span><span class="token comment">// ...other component</span><span class="token keyword">type</span> <span class="token class-name">InstallFunction</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">(</span>app<span class="token operator">:</span> App<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> size<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">'small'</span> <span class="token operator">|</span> <span class="token string">'middle'</span> <span class="token operator">|</span> <span class="token string">'large'</span><span class="token punctuation">;</span> theme<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">'dark'</span> <span class="token operator">|</span> <span class="token string">'light'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>  installed<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Window</span> <span class="token keyword">extends</span> <span class="token class-name">globalThis</span><span class="token punctuation">.</span>Window <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>k<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 所有自定义的组件</span><span class="token keyword">const</span> vuiComponents <span class="token operator">=</span> <span class="token punctuation">[</span>Button<span class="token punctuation">,</span> Text<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 支持 use.use 全局注册所有组件</span><span class="token keyword">const</span> install<span class="token operator">:</span> <span class="token function-variable function">InstallFunction</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>app<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 因为组件内部实现了 install 方法，所以可以直接 Vue.use</span>  vuiComponents<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span> <span class="token operator">=></span> app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 如果没有实现，则如下：</span>  <span class="token comment">// vuiComponents.forEach(component => Vue.component(component.name || component.__name, component))</span>  <span class="token comment">// -------------------------------------------------------</span>  <span class="token comment">// vue3 使用 app.config.globalProperties 替代 prototype</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$vui <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token operator">...</span>options<span class="token punctuation">,</span>      size<span class="token operator">:</span> options<span class="token punctuation">.</span>size <span class="token operator">||</span> <span class="token string">'middle'</span><span class="token punctuation">,</span>      theme<span class="token operator">:</span> options<span class="token punctuation">.</span>theme <span class="token operator">||</span> <span class="token string">'light'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 组件内部 使用以下方式读取：</span>    <span class="token comment">// import &#123; getCurrentInstance &#125; from 'vue';</span>    <span class="token comment">// const app = getCurrentInstance();</span>    <span class="token comment">// const vuiConfig = app?.appContext.config.globalProperties.$vui</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// vue2 版本的全局配置</span>  <span class="token comment">// Vue.prototype.$vui = &#123;</span>  <span class="token comment">//   ...options,</span>  <span class="token comment">//   size: options.size || 'middle',</span>  <span class="token comment">//   theme: options.theme || 'light',</span>  <span class="token comment">// &#125;;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// tips: 下面逻辑主要是为 vue2 提供，直接给浏览器或 AMD loader 使用，引入 script 即可完成注册</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> contentWindow <span class="token operator">=</span> globalThis <span class="token keyword">as</span> <span class="token builtin">unknown</span> <span class="token keyword">as</span> Window<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>contentWindow<span class="token operator">?.</span>Vue<span class="token operator">?.</span>use<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">install</span><span class="token punctuation">(</span>contentWindow<span class="token punctuation">.</span>Vue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//! 当在 Vue3 项目中作为 script 引入时：</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 方案一: 推荐 --- 先引入 vue3 和 vui 的 script，然后通过 `app.use(window.Vui)` 来手动注册</span>  <span class="token comment">// 方案二：将实例化后的 app 作为属性挂载到 window 上，例如 window.__VUE__，详见 ../example/demo/vue3Demo.html</span>  <span class="token keyword">const</span> contentWindow <span class="token operator">=</span> globalThis <span class="token keyword">as</span> <span class="token builtin">unknown</span> <span class="token keyword">as</span> Window<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>contentWindow <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>contentWindow<span class="token punctuation">.</span>Vue<span class="token operator">?.</span>use <span class="token operator">&amp;&amp;</span> contentWindow<span class="token punctuation">.</span>__VUE__<span class="token operator">?.</span>use<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">install</span><span class="token punctuation">(</span>contentWindow<span class="token punctuation">.</span>__VUE__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 解构导入 eg. import &#123; Button &#125; from 'vui-project'; app.use(Button);</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> <span class="token keyword">default</span> <span class="token keyword">as</span> Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../packages/button'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> <span class="token keyword">default</span> <span class="token keyword">as</span> Text <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../packages/text'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  install<span class="token punctuation">,</span> <span class="token comment">// 用于ES modules，import Vue 后直接使用 Vue.use()</span>  Button<span class="token punctuation">,</span>  Text<span class="token punctuation">,</span> <span class="token comment">// eg. Vui.Text</span>  <span class="token comment">// ...other component</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><div class="success"><blockquote><p><code>Tips：</code></p><ol><li><p>由于 <code>vue3 和 vue2</code> 的版本差异性，<code>vue3</code> 中插件 <code>install</code> 方法的第一个参数 <code>app</code>，并不能访问到 <code>prototype</code>。意味着之前 <code>vue2</code> 通过 <code>prototype</code> 为全局添加配置的方式不适用了，可以通过 **<code>app.config.globalProperties 替代 prototype</code>**，参考上面实现。</p></li><li><p>导出 <code>export &#123; default as Button &#125; from &#39;../packages/button&#39;;</code> 是为了支持解构导入。方便后续在使用该 <code>UI</code> 库时，仅引入部分组件进行注册。<code> eg. import &#123; Button &#125; from &#39;vui-project&#39;; app.use(Button);</code></p></li><li><p>最后 <code>export default &#123; install, Button&#125;</code> 中也导出了组件，方便在使用该 <code>UI</code> 库时，可以通过 <code>import Vui from &#39;vui-project&#39;; const &#123; Button &#125; = Vui; 或者 Vui.Button</code> 的方式使用单个组件。</p></li></ol></blockquote></div><h4 id="Typescript-支持"><a href="#Typescript-支持" class="headerlink" title="Typescript 支持"></a><code>Typescript</code> 支持</h4><h5 id="定义类型"><a href="#定义类型" class="headerlink" title="定义类型"></a>定义类型</h5><p>根目录下新增 <code>types/</code> 文件夹，用于存放组件库相关的类型定义。</p><p>例如：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// types/index.d.ts</span><span class="token keyword">import</span> Vue<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> App<span class="token punctuation">,</span> DefineComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">VuiComponentSize</span> <span class="token operator">=</span> <span class="token string">'small'</span> <span class="token operator">|</span> <span class="token string">'middle'</span> <span class="token operator">|</span> <span class="token string">'large'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">VuiComponentTheme</span> <span class="token operator">=</span> <span class="token string">'dark'</span> <span class="token operator">|</span> <span class="token string">'light'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">InstallFunctionOptions</span> <span class="token punctuation">&#123;</span>  size<span class="token operator">?</span><span class="token operator">:</span> VuiComponentSize<span class="token punctuation">;</span>  theme<span class="token operator">?</span><span class="token operator">:</span> VuiComponentTheme<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">install</span><span class="token punctuation">(</span>vue<span class="token operator">:</span> App<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> InstallFunctionOptions<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token comment">/* --------------------------------------- */</span><span class="token comment">// Vue2</span><span class="token comment">// export declare class VuiComponent extends Vue &#123;</span><span class="token comment">//   static install(app: App): void;</span><span class="token comment">// &#125;</span><span class="token comment">// Vue3</span><span class="token keyword">type</span> <span class="token class-name">WithInstall<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token punctuation">&#123;</span> <span class="token function">install</span><span class="token punctuation">(</span>app<span class="token operator">:</span> App<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// T is propsType</span><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">VuiComponent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> WithInstall<span class="token operator">&lt;</span>DefineComponent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">;</span><span class="token comment">/* --------------------------------------- */</span><span class="token comment">// VuiButton  ---------- 可以单独将组件类型定义抽离至独立文件 eg. button.d.ts  ------------</span><span class="token keyword">interface</span> <span class="token class-name">VuiButtonProps</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// component props...</span>  type<span class="token operator">:</span> <span class="token string">'primary'</span> <span class="token operator">|</span> <span class="token string">'success'</span> <span class="token operator">|</span> <span class="token string">'warning'</span> <span class="token operator">|</span> <span class="token string">'danger'</span> <span class="token operator">|</span> <span class="token string">'info'</span> <span class="token operator">|</span> <span class="token string">'text'</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">const</span> Button<span class="token operator">:</span> VuiComponent<span class="token operator">&lt;</span>VuiButtonProps<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">// ... other component</span></code></pre><h5 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h5><p>修改 <code>package.json</code> 的 <code>typings 和 files</code> 字段：</p><pre class="language-diff" data-language="diff"><code class="language-diff">&#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> # 指明模块的类型入口</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> "typings": "types/index.d.ts",</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> "files": [</span><span class="token prefix unchanged"> </span><span class="token line">   "lib",</span><span class="token prefix unchanged"> </span><span class="token line">   # npm 发布时，将 types 包含到模块内</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   "types"</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ]</span></span>&#125;</code></pre><h3 id="打包构建-umd"><a href="#打包构建-umd" class="headerlink" title="打包构建 umd"></a>打包构建 <code>umd</code></h3><p>脚手架提供的 <code>build、build-only</code> 指令默认是打包的 <code>example</code> 内的资源（因为前面调整过 <code>index.html</code> 的入口路径）。</p><p>所以为了区分，单独提供一个文件用于打包组件库相关的资源：</p><h4 id="添加组件库打包配置文件-viteLib-config-ts"><a href="#添加组件库打包配置文件-viteLib-config-ts" class="headerlink" title="添加组件库打包配置文件 viteLib.config.ts"></a>添加组件库打包配置文件 <code>viteLib.config.ts</code></h4><p><code>别忘记把打包后的 lib 文件夹添加到 .gitignore</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> vueJsx <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue-jsx'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> resolve <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'path'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineConfig <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vite'</span><span class="token punctuation">;</span><span class="token comment">// https://vitejs.dev/config/</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">vueJsx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  css<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    preprocessorOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      less<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        javascriptEnabled<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  build<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    outDir<span class="token operator">:</span> <span class="token string">'lib'</span><span class="token punctuation">,</span>    lib<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Could also be a dictionary or array of multiple entry points</span>      entry<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src/index.ts'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'Vui'</span><span class="token punctuation">,</span>      <span class="token comment">// the proper extensions will be added</span>      fileName<span class="token operator">:</span> <span class="token string">'vui'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    rollupOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      external<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'vue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        format<span class="token operator">:</span> <span class="token string">'umd'</span><span class="token punctuation">,</span> <span class="token comment">// 输出格式为 UMD</span>        name<span class="token operator">:</span> <span class="token string">'Vui'</span><span class="token punctuation">,</span> <span class="token comment">// UMD 全局变量名称 --- 未指定则使用 lib.name</span>        globals<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          vue<span class="token operator">:</span> <span class="token string">'Vue'</span><span class="token punctuation">,</span> <span class="token comment">// key: 库中的模块依赖项的名称, value: 在浏览器中访问这个模块依赖项时应该使用的全局变量的名称</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>因为 <code>UI</code> 库是由 <code>Vue3</code> 写的，使用一般也是在该环境下，为了避免造成产物冗余，需要在 <code>external</code> 中添加上外部化的依赖，以在打包的时候剔除。</p><p>当 <code>output</code> 产物是 <code>umd</code> 格式时，可以直接通过 <code>script</code> 引入使用，所以需要提供一个全局变量，支持开发者通过全局变量来访问库的一些功能。配置用于指定模块依赖项与全局变量之间的映射关系，例如上面配置的 <code>vue</code> 模块和 <code>Vue</code> 全局变量映射）</p><p><code>Vite</code> 默认的 <code>formats</code> 有 <code>es</code> 和 <code>umd</code> 两种格式，所以即使没有配置打包后也会生成两份文件。</p></blockquote><h4 id="添加组件库打包脚本指令"><a href="#添加组件库打包脚本指令" class="headerlink" title="添加组件库打包脚本指令"></a>添加组件库打包脚本指令</h4><pre class="language-json" data-language="json"><code class="language-json"><span class="token comment">// package.json</span><span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token property">"build:lib"</span><span class="token operator">:</span> <span class="token string">"vite build --config viteLib.config.ts"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>执行组件库打包命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> build:lib</code></pre><p>生成构建后的资源文件，如下图所示：</p><p><a href="/images/share/vue-components-ui-install/p3.png"><img src="/images/share/vue-components-ui-install/p3.png" alt="vue-components-ui-install-p3" loading="lazy"></a></p><p>偶买噶…<code>css</code> 资源被单独打包出来了….</p><h4 id="将-CSS-打包进-JS"><a href="#将-CSS-打包进-JS" class="headerlink" title="将 CSS 打包进 JS"></a>将 <code>CSS</code> 打包进 <code>JS</code></h4><p>作为一个独立组件库，我不希望每次使用的时候再单独引入 <code>css</code> 资源，所以下面做一些优化处理：</p><p>呃…翻了下 <code>vite</code> 文档，基于某些原因，官方并没有提供该类需求的配置，在 <a href="https://github.com/vitejs/vite/issues/1579">issues</a> 里找到了实现方案：<strong>通过 <a href="https://www.npmjs.com/package/vite-plugin-css-injected-by-js">vite-plugin-css-injected-by-js</a> 插件，将 <code>css</code> 通过 <code>js</code> 注入到页面中</strong>：</p><blockquote><p>yarn add vite-plugin-css-injected-by-js -D</p></blockquote><p>修改 <code>viteLib.config.ts</code> 打包配置：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineConfig <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vite'</span><span class="token punctuation">;</span><span class="token keyword">import</span> cssInjectedByJsPlugin <span class="token keyword">from</span> <span class="token string">'vite-plugin-css-injected-by-js'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token function">cssInjectedByJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// ... other plugins</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// ... other config</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>重新执行 <code>yarn build:lib</code>，<code>css</code> 文件终于没了~~~，生成的两个文件：</p><blockquote><p><code>/lib/vui.mjs</code>：基于 <code>es</code> 格式的模块包（更好地利用模块化的优势，提高代码的可维护性和可重用性）</p><p><code>/lib/vui.umd.js</code>：一个直接给浏览器或 <code>AMD loader</code> 使用的 <code>umd</code> 格式包</p></blockquote><h3 id="组件库功能测试"><a href="#组件库功能测试" class="headerlink" title="组件库功能测试"></a>组件库功能测试</h3><h4 id="UMD-链接测试"><a href="#UMD-链接测试" class="headerlink" title="UMD 链接测试"></a><code>UMD</code> 链接测试</h4><p>在 <code>example/</code> 下新建 <code>demo/vue3Demo.html</code>，将生成的文件引入到 <code>html</code> 页面中，测试组件库是否正常工作：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vui-button</span><span class="token punctuation">></span></span>测试一下自定义的button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vui-button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../lib/vui.umd.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token operator">=</span> Vue<span class="token punctuation">;</span>    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>Vui<span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>可以看到，效果一切正常：</p><p><a href="/images/share/vue-components-ui-install/p4.png"><img src="/images/share/vue-components-ui-install/p4.png" alt="vue-components-ui-install-p4" loading="lazy"></a></p><h3 id="组件库发布"><a href="#组件库发布" class="headerlink" title="组件库发布"></a>组件库发布</h3><h4 id="修改-package-json-配置"><a href="#修改-package-json-配置" class="headerlink" title="修改 package.json 配置"></a>修改 <code>package.json</code> 配置</h4><p>同时，移除 <code>example</code> 相关的脚本指令，例如：<code>build、build-only</code>，同时将 <code>dependencies</code> 中的 <code>vue</code> 相关依赖移到 <code>devDependencies</code>。并添加组件包的前置依赖 <code>vue^3</code>（<code>example</code> 相关资源只在开发环境下调试使用）。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token comment">// ... 移除 private: true 配置</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.0.1"</span><span class="token punctuation">,</span>  <span class="token comment">// npm 包入口</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"lib/vui.mjs"</span><span class="token punctuation">,</span>  <span class="token comment">// cdn 相关</span>  <span class="token property">"unpkg"</span><span class="token operator">:</span> <span class="token string">"lib/vui.umd.js"</span><span class="token punctuation">,</span>  <span class="token comment">// package description keywords</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"hrlin &lt;flynnzhl@qq.com>"</span><span class="token punctuation">,</span>  <span class="token property">"homepage"</span><span class="token operator">:</span> <span class="token string">"https://github.com/flynna/vui-project/blob/main/README.md"</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token comment">// 添加发布指令钩子</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token property">"prepublishOnly"</span><span class="token operator">:</span> <span class="token string">"npm run build:lib"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 指定需要发布的文件，效果同 .npmignore</span>  <span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"lib"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 发布配置</span>  <span class="token property">"publishConfig"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"access"</span><span class="token operator">:</span> <span class="token string">"public"</span><span class="token punctuation">,</span>    <span class="token property">"registry"</span><span class="token operator">:</span> <span class="token string">"https://registry.npmjs.org"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 仓库配置</span>  <span class="token property">"repository"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"git"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://github.com/flynna/vui-project.git"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// bugs</span>  <span class="token property">"bugs"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://github.com/flynna/vui-project/issues"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="修改-npm-registry-配置"><a href="#修改-npm-registry-配置" class="headerlink" title="修改 npm.registry 配置"></a>修改 <code>npm.registry</code> 配置</h4><p>因为公司在内网搭建的 <code>npm</code> 服务，所以如果我需要将包发到 <code>npm</code> 官网，需要修改 <code>npm</code> 源：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmjs.org</code></pre><p><code>ok</code>，修改成功，执行发布脚本<del>（文章开头有提到如何发布一个 <code>npm</code> 包）</del>：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> login<span class="token comment"># 输入账号密码邮箱验证码... 没有账号可以先注册一个</span><span class="token function">npm</span> publish</code></pre><h4 id="发布成功"><a href="#发布成功" class="headerlink" title="发布成功"></a>发布成功</h4><p>测试 <code>CDN</code> 服务是否有效（本地测过了，直接引用 <code>cdn</code> 功能正常的），效果图如下：</p><p><a href="/images/share/vue-components-ui-install/p5.png"><img src="/images/share/vue-components-ui-install/p5.png" alt="vue-components-ui-install-p5" loading="lazy"></a></p><p><a href="/images/share/vue-components-ui-install/p6.png"><img src="/images/share/vue-components-ui-install/p6.png" alt="vue-components-ui-install-p6" loading="lazy"></a></p><h4 id="项目里使用"><a href="#项目里使用" class="headerlink" title="项目里使用"></a>项目里使用</h4><p><code>yarn add</code> 安装模块 <code>vui-project</code>，在 <code>example/main.ts</code> 中引入组件库。</p><div class="danger"><blockquote><p><code>Tips</code>：</p><ol><li><p>因为测试项目 <code>example</code> 和我组件库自身共用一个包(<code>package.json</code>)的缘故，调试完成我就把安装的 <code>vui-project</code> 移除了，避免产生循环依赖对后续版本发布产生影响。</p></li><li><p>安装自身模块仅是为了测试模块发布后是否可用，仅测试功能的话可以不安装可以直接引入 <code>build</code> 过后的产物即可。</p></li></ol></blockquote></div><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token comment">// 测试自定义的组件</span><span class="token keyword">import</span> Vui <span class="token keyword">from</span> <span class="token string">'vui-project'</span><span class="token punctuation">;</span><span class="token comment">// import &#123; Button, Text &#125; from 'vui-project'; 经测试，组件单独注册也是可以的...</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vui<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ...</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>App.vue</code> 修改，添加自定义的组件：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- ... other template --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>vui-button</span><span class="token punctuation">></span></span>测试一下自定义的button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>vui-button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>效果：</p><p><a href="/images/share/vue-components-ui-install/p7.png"><img src="/images/share/vue-components-ui-install/p7.png" alt="vue-components-ui-install-p7" loading="lazy"></a></p><h3 id="组件库文档搭建"><a href="#组件库文档搭建" class="headerlink" title="组件库文档搭建"></a>组件库文档搭建</h3><p>详细实现：<a href="/tools/vuepress">基于 Vuepress 的静态网站生成器实践</a></p><div class="warning"><blockquote><p>Tips: 由于 <code>Vuepress</code> 依赖的 <code>vue-server-renderer</code> 版本需要和 <code>vue</code> 保持一致，而我这个测试的组件库是基于 <code>vue3</code> 实现的，所以文档和调试项目 <code>example</code> 并没有共用一个 <code>package.json</code></p></blockquote></div><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><div class="info"><blockquote><p>完整源码：<a href="https://github.com/flynna/vui-project">https://github.com/flynna/vui-project</a></p><p><a href="/tools/npm-publish">如何发布一个 npm-package?</a></p><p><a href="/share/vue-component-vs-use">Vue.component 和 Vue.use 两者之间的区别</a></p></blockquote></div>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue3 </tag>
            
            <tag> 插件注册 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.component 和 Vue.use 两者之间的区别</title>
      <link href="/share/vue-component-vs-use/"/>
      <url>/share/vue-component-vs-use/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>突然想起，项目里大多时候，<code>UI</code> 组件库在进行全局或者局部注册的时候，会使用到 <code>Vue.use</code>，有时候也会使用到 <code>Vue.component</code>，那么两者之间有什么区别呢？我们又应该如何根据场景选择注册方式呢？</p><span id="more"></span><h3 id="Vue-component"><a href="#Vue-component" class="headerlink" title="Vue.component"></a><code>Vue.component</code></h3><blockquote><p>用于注册全局组件。全局组件是可以在整个应用程序中使用的组件，不需要在每个单独的组件中再次注册。</p></blockquote><p>通常，你会在根 <code>Vue</code> 实例创建之前使用 <code>Vue.component</code> 来注册全局组件。<code>eg:</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> MyComponent <span class="token keyword">from</span> <span class="token string">'./MyComponent.vue'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">,</span> MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>完成注册后，你可以在任何 <code>Vue</code> 组件的模板中使用这个组件。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span></code></pre><h3 id="Vue-use"><a href="#Vue-use" class="headerlink" title="Vue.use"></a><code>Vue.use</code></h3><blockquote><p>用于注册 <code>Vue.js</code> 插件。插件通常是第三方库或功能模块，它们可以在 <code>Vue</code> 应用中全局使用。</p></blockquote><p>当你使用 <code>Vue.use</code> 注册一个插件时，它会调用插件的 <code>install</code> 方法，传递 <code>Vue</code> 构造函数作为参数，以便插件可以进行必要的初始化和扩展。<code>eg:</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> MyPlugin <span class="token keyword">from</span> <span class="token string">'./my-plugin'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>MyPlugin<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> size<span class="token operator">:</span> <span class="token string">'middle'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>MyPlugin</code> 就需要我们提供 <code>install</code> 方法，或者当 <code>MyPlugin</code> 本身就是一个函数的时候，则直接运行：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// ./my-plugin.js</span><span class="token keyword">import</span> MyComponent <span class="token keyword">from</span> <span class="token string">'./MyComponent.vue'</span><span class="token punctuation">;</span><span class="token comment">// 当使用 Vue.use() 注册插件时，install 方法会被调用，在该方法内部，即可实现全局注册的相关逻辑</span><span class="token keyword">const</span> <span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token punctuation">(</span>Vue<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Vue'</span><span class="token punctuation">,</span> Vue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Vue 构造函数</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'MyPlugin installed!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 期望用户执行 Vue.use(MyPlugin) 时，1.注册组件：</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">,</span> MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2.期望用户在注册的时候为组件添加一些全局配置，例如主题颜色尺寸等... 【通过在 Vue 的原型上添加全局方法或属性实现】</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$MyPlugin <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span>options<span class="token punctuation">,</span>    size<span class="token operator">:</span> options<span class="token punctuation">.</span>size<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 3.添加全局方法或属性</span>  Vue<span class="token punctuation">.</span><span class="token function-variable function">globalFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 4.挂载全局指令</span>  Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'my-directive'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">bind</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> oldVnode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 逻辑...</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5.注入全局资源 --- 虽然不推荐这么做</span>  Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function-variable function">created</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 逻辑...</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  install<span class="token punctuation">,</span> <span class="token comment">// 导出 install 方法，支持插件式注册</span>  MyComponent<span class="token punctuation">,</span> <span class="token comment">// 导出改组件，支持组件单个注册</span><span class="token punctuation">&#125;</span></code></pre><p>通过在 <code>Vue</code> 的原型上添加全局方法或属性实现来扩展组件功能，如上所示，在功能组件内部实现时即可通过 <code>this.$MyPlugin</code> 来读取配置信息：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// ./my-component.vue</span>computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">size</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$MyPlugin<span class="token punctuation">.</span>size<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="为什么要提供-install"><a href="#为什么要提供-install" class="headerlink" title="为什么要提供 install?"></a>为什么要提供 <code>install</code>?</h4><p>细看 <code>vue</code> 源码，可以发现，<code>Vue.use</code> 调用后执行了插件提供的 <code>install</code> 方法，或者当插件本身是函数的时候，无需提供 <code>install</code>。此外在执行前，内置了 <code>this</code> 参数，也就是 <code>Vue</code> 构造器作为插件初始化的第一个参数：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> toArray <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../util/index'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initUse</span><span class="token punctuation">(</span>Vue<span class="token operator">:</span> GlobalAPI<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Vue<span class="token punctuation">.</span><span class="token function-variable function">use</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>plugin<span class="token operator">:</span> <span class="token builtin">Function</span> <span class="token operator">|</span> Object<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> installedPlugins <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_installedPlugins <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_installedPlugins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>installedPlugins<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// additional parameters</span>    <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token function">toArray</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    args<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> plugin<span class="token punctuation">.</span>install <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      plugin<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>plugin<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> plugin <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">plugin</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    installedPlugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="差异总结"><a href="#差异总结" class="headerlink" title="差异总结"></a>差异总结</h3><ul><li><p><code>Vue.component</code> 用于注册全局组件，以便在整个应用程序中使用。</p></li><li><p><code>Vue.use</code> 用于注册 <code>Vue.js</code> 插件，以扩展 <code>Vue</code> 的功能和添加全局方法或属性。</p></li><li><p><strong>使用时机不同</strong>：<code>Vue.component</code> 通常在组件定义之前使用，而 <code>Vue.use</code> 通常在根 <code>Vue</code> 实例创建之前使用。</p></li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p><code>Vue.component</code> 用于全局组件注册。而 <code>Vue.use</code> 不仅可以在插件内部通过执行 <code>Vue.component</code> 实现组件的批量注册逻辑，额外添加一些自定义处理，提升开发体验，还多用于第三方插件库集成，例如 <code>VueRouter...</code>💀💀💀</p><blockquote><p>之所以几乎所有的 <code>UI</code> 库都支持 <code>Vue.use</code> 方式，一是因为可以进行批量全局注册。二是可以添加自定义的组件配置等等…这些都是 <code>Vue.component</code> 不具备的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vueComponent </tag>
            
            <tag> vueUse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue Component 动态组件和 v-if 控制组件两者区别？</title>
      <link href="/share/vue-component-vs-vif/"/>
      <url>/share/vue-component-vs-vif/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>其实两者从定义上讲区别还是挺明显的：</p><blockquote><p><code>v-if</code>：用于条件性地显示或隐藏一个元素，适用于简单的条件渲染。</p></blockquote><blockquote><p><code>component</code>：通过 <code>:is</code> 属性实现组件的动态切换，适用于更复杂的条件渲染场景，可以根据条件加载不同的组件</p></blockquote><p>那为什么要单独拧出来说呢？是因为<strong>两者在特殊情况下是具有一致性</strong>的..😟😟😟</p><span id="more"></span><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><p>仅从切换单个组件渲染的角度来讲：<code>component</code> <strong>动态组件可以理解为就是 <code>v-if</code> 控制显示的语法糖</strong>。</p><p><em>试想一个场景，当我们需要从很多个组件中挑选一个进行渲染的时候，使用 <code>v-if</code> 就会显得特别的臃肿，这个时候切换到 <code>component</code>渲染，可以增加代码的可读性和可维护性</em></p><p>例如：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponentA</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showComponentName === <span class="token punctuation">'</span>MyComponentA<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MyComponentA</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponentB</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showComponentName === <span class="token punctuation">'</span>MyComponentB<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MyComponentB</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponentC</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showComponentName === <span class="token punctuation">'</span>MyComponentC<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MyComponentC</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponentD</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showComponentName === <span class="token punctuation">'</span>MyComponentD<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>D<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MyComponentD</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponentE</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showComponentName === <span class="token punctuation">'</span>MyComponentE<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>E<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MyComponentE</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponentF</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showComponentName === <span class="token punctuation">'</span>MyComponentF<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>F<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MyComponentF</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> MyComponentA <span class="token keyword">from</span> <span class="token string">'./MyComponentA.vue'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> MyComponentB <span class="token keyword">from</span> <span class="token string">'./MyComponentB.vue'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> MyComponentC <span class="token keyword">from</span> <span class="token string">'./MyComponentC.vue'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> MyComponentD <span class="token keyword">from</span> <span class="token string">'./MyComponentD.vue'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> MyComponentE <span class="token keyword">from</span> <span class="token string">'./MyComponentE.vue'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> MyComponentF <span class="token keyword">from</span> <span class="token string">'./MyComponentF.vue'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">showComponentName</span><span class="token operator">:</span> <span class="token string">'MyComponentA'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      MyComponentA<span class="token punctuation">,</span>      MyComponentB<span class="token punctuation">,</span>      MyComponentC<span class="token punctuation">,</span>      MyComponentD<span class="token punctuation">,</span>      MyComponentE<span class="token punctuation">,</span>      MyComponentF<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>是不是看着都挺累….</p><p>这个时候我们就可以使用 <code>component</code> 组件来渲染，这样代码看起来就简洁多了：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showComponentName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">showComponentName</span><span class="token operator">:</span> <span class="token string">'MyComponentA'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">MyComponentA</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./MyComponentA.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function-variable function">MyComponentB</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./MyComponentB.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function-variable function">MyComponentC</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./MyComponentC.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function-variable function">MyComponentD</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./MyComponentD.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function-variable function">MyComponentE</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./MyComponentE.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function-variable function">MyComponentF</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./MyComponentF.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>为什么说这种模式下，<code>component</code> 可以理解为 <code>v-if</code> 的语法糖？</p><blockquote><p><strong>当通过 <code>is</code> 切换 <code>component</code> 组件显示时，对比 <code>v-if</code> 页面渲染和钩子函数的执行情况，两者是一致的。</strong></p></blockquote><p>除此之外：</p><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><ul><li><p><code>v-if</code> 旨在控制单个元素的渲染，<strong>并未限制元素是否为独立组件</strong></p></li><li><p><code>v-if</code> 适合简单的渲染场景，使用起来也更加的灵活，而 <strong><code>component</code> 局限于多选一的情况</strong></p></li><li><p>一个是指令，一个是组件，两者实现和实际用法不一样，只有在特定情况下两者是一致的。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> component </tag>
            
            <tag> v-if </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端调试神器之 vConsole</title>
      <link href="/tools/v-console/"/>
      <url>/tools/v-console/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>前面开发移动端功能的时候，发现调试并不是很方便，主要体现在部分兼容性问题和体验上，浏览器模拟的手机并不能完全替代。</p><p>部分功能只有上线后，才能在手机上发现错误，然后机缘巧合下发现了腾讯开源的 <code>vConsole</code> 工具。</p><blockquote><p><a href="https://github.com/Tencent/vConsole/blob/dev/README_CN.md"><code>vConsole</code></a> 一个轻量、可拓展、针对手机网页的前端开发者调试面板。和框架无关，可以在任何地方进行使用。（微信小程序的官方调试工具）</p></blockquote><span id="more"></span><h3 id="特性介绍"><a href="#特性介绍" class="headerlink" title="特性介绍"></a>特性介绍</h3><ul><li><p>查看 <code>console</code> 日志</p></li><li><p>查看网络请求</p></li><li><p>查看页面 <code>element</code> 结构</p></li><li><p>查看 <code>cookie、localStorage、sessionStorage</code></p></li><li><p>查看系统版本相关信息</p></li><li><p>执行命令行脚本</p></li><li><p>自定义插件</p></li></ul><p>可以理解为就是浏览器 <code>DevTools</code> 的一个缩略版。</p><h3 id="安装及初始化"><a href="#安装及初始化" class="headerlink" title="安装及初始化"></a>安装及初始化</h3><h4 id="cdn-方式"><a href="#cdn-方式" class="headerlink" title="cdn 方式"></a><code>cdn</code> 方式</h4><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 安装 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vconsole@latest/dist/vconsole.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 使用 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">// VConsole 默认会挂载到 `window.VConsole` 上</span>  <span class="token keyword">var</span> vConsole <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">window<span class="token punctuation">.</span>VConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>相关资源：</p><blockquote><p><code>https://unpkg.com/vconsole@latest/dist/vconsole.min.js</code> &gt; <code>https://cdn.jsdelivr.net/npm/vconsole@latest/dist/vconsole.min.js</code></p></blockquote><h4 id="npm-方式"><a href="#npm-方式" class="headerlink" title="npm 方式"></a><code>npm</code> 方式</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> vconsole</code></pre><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> VConsole <span class="token keyword">from</span> <span class="token string">'vconsole'</span><span class="token punctuation">;</span><span class="token keyword">const</span> vConsole <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 完成调试后，可销毁 vConsole</span>vConsole<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p><code>TIPS:</code> <strong>VConsole 实例化后，项目里所有的 <code>console.log</code> 语句以及错误信息、网络请求等等，都默认会在 <code>vConsole</code> 面板进行展示，无需手动额外操作</strong> <del>有个前提就是 <code>vConsole</code> 完成挂载之后的日志才会在 <code>vConsole</code> 面板显示 😲😲😲</del></p></blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在 <code>vConsole</code> 模块成功引入后，会在页面的右下角出现 <code>vConsole</code> 按钮，可以展开&#x2F;收起调试面板。<strong>注意在生产环境屏蔽该功能</strong>。</p><p>支持原生 <code>console</code> 的几乎大部分功能和语法。<code>eg:</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> VConsole <span class="token keyword">from</span> <span class="token string">'vconsole'</span><span class="token punctuation">;</span><span class="token keyword">const</span> vConsole <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 测试打印信息均会展示在 vConsole 面板中</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 支持 object 和 array 等类型变量打印</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">'hello world '</span><span class="token punctuation">,</span> <span class="token string">'hhh'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 支持多参数打印</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不支持</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不支持</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ...</span></code></pre><p>效果如下图所示：</p><p><a href="/images/tools/v-console/p1.png"><img src="/images/tools/v-console/p1.png" alt="v-console-p1" loading="lazy"></a></p><hr><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><h4 id="vConsole-本体"><a href="#vConsole-本体" class="headerlink" title="vConsole 本体"></a><code>vConsole</code> 本体</h4><p>初始化 <code>option</code> 配置见如下：公共属性及方法</p><ul><li><a href="./doc/tutorial_CN.md">使用教程</a></li><li><a href="./doc/public_properties_methods_CN.md">公共属性及方法</a></li><li><a href="./doc/plugin_properties_methods_CN.md">内置插件：属性及方法</a></li></ul><h4 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h4><ul><li><a href="./doc/plugin_getting_started_CN.md">插件：入门</a></li><li><a href="./doc/plugin_building_a_plugin_CN.md">插件：编写插件</a></li><li><a href="./doc/plugin_event_list_CN.md">插件：Event 事件列表</a></li></ul><h3 id="第三方插件列表"><a href="#第三方插件列表" class="headerlink" title="第三方插件列表"></a>第三方插件列表</h3><ul><li><a href="https://github.com/WechatFE/vConsole-sources">vConsole-sources</a></li><li><a href="https://github.com/diamont1001/vconsole-webpack-plugin">vconsole-webpack-plugin</a></li><li><a href="https://github.com/smackgg/vConsole-Stats">vconsole-stats-plugin</a></li><li><a href="https://github.com/Zippowxk/vue-vconsole-devtools">vconsole-vue-devtools-plugin</a></li><li><a href="https://github.com/sunlanda/vconsole-outputlog-plugin">vconsole-outputlog-plugin</a></li><li><a href="https://github.com/vadxq/vite-plugin-vconsole">vite-plugin-vconsole</a></li></ul><hr><h3 id="源码剖析"><a href="#源码剖析" class="headerlink" title="源码剖析"></a>源码剖析</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li><p>通过 <code>window</code> 监听页面加载，加载完成后向页面追加调试相关的 <code>DOM</code>。</p></li><li><p>类似 <code>log、network</code> 面板等相关的渲染显示，则是通过重写 <code>window</code> 下对应的系统方法，追加一些自定义操作完成。</p></li></ul><h4 id="原理实现"><a href="#原理实现" class="headerlink" title="原理实现"></a>原理实现</h4><h5 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h5><p>入口在 <code>src/core/core.js</code>，采用单例模式，只允许有一个 <code>vconsole</code> 实例：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ...</span><span class="token keyword">class</span> <span class="token class-name">VConsole</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">opt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>$<span class="token punctuation">.</span><span class="token function">one</span><span class="token punctuation">(</span><span class="token constant">VCONSOLE_ID</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">'vConsole is already exists.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// ...</span></code></pre><p><code>vConsole</code> 面板里的模块则是通过插件的形式集成进去的独立模块：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// built-in plugins</span><span class="token keyword">import</span> VConsolePlugin <span class="token keyword">from</span> <span class="token string">'../lib/plugin.js'</span><span class="token punctuation">;</span><span class="token keyword">import</span> VConsoleLogPlugin <span class="token keyword">from</span> <span class="token string">'../log/log.js'</span><span class="token punctuation">;</span><span class="token keyword">import</span> VConsoleDefaultPlugin <span class="token keyword">from</span> <span class="token string">'../log/default.js'</span><span class="token punctuation">;</span><span class="token keyword">import</span> VConsoleSystemPlugin <span class="token keyword">from</span> <span class="token string">'../log/system.js'</span><span class="token punctuation">;</span><span class="token keyword">import</span> VConsoleNetworkPlugin <span class="token keyword">from</span> <span class="token string">'../network/network.js'</span><span class="token punctuation">;</span><span class="token keyword">import</span> VConsoleElementPlugin <span class="token keyword">from</span> <span class="token string">'../element/element.js'</span><span class="token punctuation">;</span><span class="token keyword">import</span> VConsoleStoragePlugin <span class="token keyword">from</span> <span class="token string">'../storage/storage.js'</span><span class="token punctuation">;</span></code></pre><h5 id="加载-DOM"><a href="#加载-DOM" class="headerlink" title="加载 DOM"></a>加载 <code>DOM</code></h5><p>监听 <code>window</code> 事件，确定加载结束后挂载 <code>vconsole</code> 相关 <code>dom</code>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// try to init</span><span class="token keyword">let</span> <span class="token function-variable function">_onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>isInited<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  that<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  that<span class="token punctuation">.</span><span class="token function">_mockTap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  that<span class="token punctuation">.</span><span class="token function">_bindEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  that<span class="token punctuation">.</span><span class="token function">_autoRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>document <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token string">'loading'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> _onload<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">_onload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// if document does not exist, wait for it</span>  <span class="token keyword">let</span> _timer<span class="token punctuation">;</span>  <span class="token keyword">let</span> <span class="token function-variable function">_pollingDocument</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>document <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token string">'complete'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      _timer <span class="token operator">&amp;&amp;</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>_timer<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">_onload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      _timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>_pollingDocument<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  _timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>_pollingDocument<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="Log-模块实现"><a href="#Log-模块实现" class="headerlink" title="Log 模块实现"></a><code>Log</code> 模块实现</h5><p>通过重写 <code>window.console..</code> 的相关方法，执行自己的 <code>printLog</code> 并记录，最后渲染到 <code>vconsole</code> 面板：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// src/log/log.js</span><span class="token comment">// ...</span><span class="token comment">/** * replace window.console with vConsole method * @private */</span><span class="token function">mockConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> methodList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">,</span> <span class="token string">'info'</span><span class="token punctuation">,</span> <span class="token string">'warn'</span><span class="token punctuation">,</span> <span class="token string">'debug'</span><span class="token punctuation">,</span> <span class="token string">'error'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>console<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span>console <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    methodList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">method</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      that<span class="token punctuation">.</span>console<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>console<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    that<span class="token punctuation">.</span>console<span class="token punctuation">.</span>time <span class="token operator">=</span> window<span class="token punctuation">.</span>console<span class="token punctuation">.</span>time<span class="token punctuation">;</span>    that<span class="token punctuation">.</span>console<span class="token punctuation">.</span>timeEnd <span class="token operator">=</span> window<span class="token punctuation">.</span>console<span class="token punctuation">.</span>timeEnd<span class="token punctuation">;</span>    that<span class="token punctuation">.</span>console<span class="token punctuation">.</span>clear <span class="token operator">=</span> window<span class="token punctuation">.</span>console<span class="token punctuation">.</span>clear<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  methodList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">method</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span>console<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">printLog</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">logType</span><span class="token operator">:</span> method<span class="token punctuation">,</span>        <span class="token literal-property property">logs</span><span class="token operator">:</span> args<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span></code></pre><p>当 <code>vconsole destroy</code> 后，恢复 <code>window.console</code> 方法：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// src/log/log.js</span><span class="token function">onRemove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  window<span class="token punctuation">.</span>console<span class="token punctuation">.</span>log <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>console<span class="token punctuation">.</span>log<span class="token punctuation">;</span>  window<span class="token punctuation">.</span>console<span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>console<span class="token punctuation">.</span>info<span class="token punctuation">;</span>  window<span class="token punctuation">.</span>console<span class="token punctuation">.</span>warn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>console<span class="token punctuation">.</span>warn<span class="token punctuation">;</span>  window<span class="token punctuation">.</span>console<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>console<span class="token punctuation">.</span>debug<span class="token punctuation">;</span>  window<span class="token punctuation">.</span>console<span class="token punctuation">.</span>error <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>console<span class="token punctuation">.</span>error<span class="token punctuation">;</span>  window<span class="token punctuation">.</span>console<span class="token punctuation">.</span>time <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>console<span class="token punctuation">.</span>time<span class="token punctuation">;</span>  window<span class="token punctuation">.</span>console<span class="token punctuation">.</span>timeEnd <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>console<span class="token punctuation">.</span>timeEnd<span class="token punctuation">;</span>  window<span class="token punctuation">.</span>console<span class="token punctuation">.</span>clear <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>console<span class="token punctuation">.</span>clear<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>console <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> idx <span class="token operator">=</span> <span class="token constant">ADDED_LOG_TAB_ID</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token constant">ADDED_LOG_TAB_ID</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="Network-模块实现"><a href="#Network-模块实现" class="headerlink" title="Network 模块实现"></a><code>Network</code> 模块实现</h5><p>也是重写了原生的 <code>window.XMLHttpRequest.prototype.open/send</code> 等方法，添加了拦截器：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// src/network/network.js</span><span class="token comment">/** * mock ajax request * @private */</span><span class="token function">mockAjax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> _XMLHttpRequest <span class="token operator">=</span> window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> _open <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token class-name">XMLHttpRequest</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>open<span class="token punctuation">,</span>      _send <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token class-name">XMLHttpRequest</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>send<span class="token punctuation">;</span>  that<span class="token punctuation">.</span>_open <span class="token operator">=</span> _open<span class="token punctuation">;</span>  that<span class="token punctuation">.</span>_send <span class="token operator">=</span> _send<span class="token punctuation">;</span>  <span class="token comment">// mock open()</span>  window<span class="token punctuation">.</span><span class="token class-name">XMLHttpRequest</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">open</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> XMLReq <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// ...</span>  <span class="token comment">// mock send()</span>  window<span class="token punctuation">.</span><span class="token class-name">XMLHttpRequest</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">send</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> XMLReq <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">,</span>        data <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// ...</span></code></pre><blockquote><p>篇幅原因就不完整呈现源码了，另外文档和第三方插件列表摘自：官方文档：<a href="https://github.com/Tencent/vConsole/blob/dev/README_CN.md#L160-L186">https://github.com/Tencent/vConsole/blob/dev/README_CN.md#L160-L186</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具学习 </category>
          
          <category> 程序调试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
            <tag> vConsole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为 Hexo 添加音乐播放器插件</title>
      <link href="/posts/hexo-music-install/"/>
      <url>/posts/hexo-music-install/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script>    <div id="aplayer-dXcrYbRO" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="754708245" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#C20C0C"    ></div><p>目前已经有很多成熟的方案，为 <code>hexo</code> 或者自建博客提供音乐播放器插件使用。</p><p>我将从不同的角度介绍这几种方式：</p><span id="more"></span><h3 id="基于外链生成播放器插件"><a href="#基于外链生成播放器插件" class="headerlink" title="基于外链生成播放器插件"></a>基于外链生成播放器插件</h3><h4 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h4><p>前往<a href="https://music.163.com/">网易云音乐官网</a>，搜索一个作为背景音乐的歌曲，并进入播放页面，点击 <strong>生成外链播放器</strong></p><p><a href="/images/posts/hexo-music-install/p1.png"><img src="/images/posts/hexo-music-install/p1.png" alt="hexo-music-install-p1" loading="lazy"></a></p><p>设置好想要显示的样式后，复制 <code>html</code> 代码</p><p><a href="/images/posts/hexo-music-install/p2.png"><img src="/images/posts/hexo-music-install/p2.png" alt="hexo-music-install-p2" loading="lazy"></a></p><p>最好外层在加一个 <code>div</code>，如下，可直接将上一步复制的 <code>iframe</code> 替换下方里面的 <code>iframe</code></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>musicMouseDrag<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">position</span><span class="token punctuation">:</span>fixed<span class="token punctuation">;</span> <span class="token property">z-index</span><span class="token punctuation">:</span> 9999<span class="token punctuation">;</span> <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>    <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>musicDragArea<span class="token punctuation">"</span></span>    <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token property">cursor</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span> <span class="token property">z-index</span><span class="token punctuation">:</span> 10<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span>    <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span>    <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>    <span class="token attr-name">marginwidth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>    <span class="token attr-name">marginheight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>    <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>330<span class="token punctuation">"</span></span>    <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>86<span class="token punctuation">"</span></span>    <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//music.163.com/outchain/player?type=2&amp;id=38592976&amp;auto=1&amp;height=66<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>默认给的样式是显示在右下角，可以通过调整上一步粘贴的 <code>div</code> 的 <code>style</code> 中 <code>bottom</code> 和 <code>right</code> 来调整位置。</p><h4 id="自由拖动"><a href="#自由拖动" class="headerlink" title="自由拖动"></a>自由拖动</h4><p>如果需要自由拖动，在刚才添加的代码后面，再添加下面代码即可，鼠标就可以在音乐控件的 <strong>上边沿</strong> 点击拖动。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> $<span class="token constant">DOC</span> <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> $musicMouseDrag <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#musicMouseDrag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> $musicDragArea <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#musicDragArea'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> $moveTarget <span class="token operator">=</span> $musicMouseDrag<span class="token punctuation">;</span><span class="token keyword">var</span> borderWidth <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>$musicMouseDrag<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'mousedown'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 阻止默认事件，如文本选中</span>  <span class="token keyword">var</span> div_x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> $moveTarget<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left<span class="token punctuation">;</span>  <span class="token keyword">var</span> div_y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">-</span> $moveTarget<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top<span class="token punctuation">;</span>  $<span class="token constant">DOC</span>    <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'mousemove.drag'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> targetX <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> div_x<span class="token punctuation">;</span>      <span class="token keyword">var</span> targetY <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">-</span> div_y<span class="token punctuation">;</span>      <span class="token comment">// 限制拖动范围</span>      targetX <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>targetX<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">-</span> $moveTarget<span class="token punctuation">.</span><span class="token function">outerWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      targetY <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>targetY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">-</span> $moveTarget<span class="token punctuation">.</span><span class="token function">outerHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      $moveTarget<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">left</span><span class="token operator">:</span> targetX <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">,</span>        <span class="token literal-property property">top</span><span class="token operator">:</span> targetY <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">,</span>        <span class="token literal-property property">bottom</span><span class="token operator">:</span> <span class="token string">'inherit'</span><span class="token punctuation">,</span>        <span class="token literal-property property">right</span><span class="token operator">:</span> <span class="token string">'inherit'</span><span class="token punctuation">,</span>        <span class="token literal-property property">border</span><span class="token operator">:</span> borderWidth <span class="token operator">+</span> <span class="token string">'px dashed grey'</span><span class="token punctuation">,</span> <span class="token comment">// 显示边框</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">one</span><span class="token punctuation">(</span><span class="token string">'mouseup'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      $<span class="token constant">DOC</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">'mousemove.drag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      $moveTarget<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'border'</span><span class="token punctuation">,</span> <span class="token string">'none'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 隐藏边框</span>      $musicDragArea<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span> <span class="token string">'10px'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><p><code>网易云单曲外链没什么问题，但不能满足列表歌单的需求...😗😗😗</code></p><h3 id="基于-hexo-tag-aplayer-插件"><a href="#基于-hexo-tag-aplayer-插件" class="headerlink" title="基于 hexo-tag-aplayer  插件"></a>基于 <code>hexo-tag-aplayer </code> 插件</h3><p><a href="https://easyhexo.com/3-Plugins-use-and-config/3-1-hexo-tag-aplayer/#%E4%BB%8B%E7%BB%8D">hexo-tag-aplayer</a> 是 <code>APlayer (opens new window)</code> 播放器的 <code>Hexo</code> 标签插件，可以十分方便地在文章内插入音乐播放器。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在根目录执行：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-tag-aplayer -s</code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>修改 <code>Hexo</code> 的根目录配置文件 <code>_config.yml</code>:</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">aplayer</span><span class="token punctuation">:</span>  <span class="token comment"># 示例配置</span>  <span class="token key atrule">cdn</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js  <span class="token key atrule">style_cdn</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css  <span class="token key atrule">meting</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">meting_cdn</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js  <span class="token comment"># 完整配置如下： --- 一般不需要配置这么多  ---</span>  <span class="token comment"># script_dir: some/place # Public 目录下脚本目录路径，默认: 'assets/js'</span>  <span class="token comment"># style_dir: some/place # Public 目录下样式目录路径，默认: 'assets/css'</span>  <span class="token comment"># cdn: http://xxx/aplayer.min.js # 引用 APlayer.js 外部 CDN 地址 (默认不开启)</span>  <span class="token comment"># style_cdn: http://xxx/aplayer.min.css # 引用 APlayer.css 外部 CDN 地址 (默认不开启)</span>  <span class="token comment"># meting: true # MetingJS 支持</span>  <span class="token comment"># meting_api: http://xxx/api.php # 自定义 Meting API 地址</span>  <span class="token comment"># meting_cdn: http://xxx/Meing.min.js # 引用 Meting.js 外部 CDN 地址 (默认不开启)</span>  <span class="token comment"># asset_inject: true # 自动插入 APlayer.js 与 Meting.js 资源脚本, 默认开启</span>  <span class="token comment"># externalLink: http://xxx/aplayer.min.js # 老版本参数，功能与参数 cdn 相同</span></code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>使用 <code>hexo-tag-aplayer</code> 非常简单，只需要在 <code>MarkDown </code>文件中插入正确的标记就可以了。</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</code></pre><p>开启了<a href="https://hexo.io/zh-cn/docs/asset-folders.html#%E6%96%87%E7%AB%A0%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%B9">文章资源文件夹 (opens new window)</a>功能, 可以这样使用：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">&#123;% aplayer "Caffeine" "Jeff Williams" "caffeine.mp3" "picture.jpg" "lrc:caffeine.txt" %&#125;</code></pre><p><del>配置稍显复杂且麻烦…😂😂😂…</del></p><p><strong>或者…如果你开启了 meting 配置：即上面 <code>yml</code> 内 <code>aplayer.meting</code> 设置为 <code>true</code>，配置将变得很简单了：</strong></p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">&#123;% meting "002j785c33YQHT" "tencent" "song" %&#125;</code></pre><p>例如：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">&#123;% meting "754708245" "netease" "playlist" "theme:#C20C0C" %&#125;</code></pre><p>具体的 <code>&#123;% meting %&#125;</code> 参数可以参考：<a href="https://easyhexo.com/3-Plugins-use-and-config/3-1-hexo-tag-aplayer/#metingjs">https://easyhexo.com/3-Plugins-use-and-config/3-1-hexo-tag-aplayer/#metingjs</a></p><h4 id="切换页面不中断播放"><a href="#切换页面不中断播放" class="headerlink" title="切换页面不中断播放"></a>切换页面不中断播放</h4><p>几乎所有的博客框架都支持播放器功能，每个框架提供的不中断方案也不相同，以我目前使用的主题为例，找到主题下的<code>yml</code>，开启配置中的 <code>pjax</code>：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">pjax</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>或者手动引入 <code>pjax</code> 相关的 <code>cdn</code> 资源：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">CDN</span><span class="token punctuation">:</span>  <span class="token key atrule">jquery</span><span class="token punctuation">:</span> //cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js  <span class="token key atrule">pjax</span><span class="token punctuation">:</span> //cdn.jsdelivr.net/npm/jquery<span class="token punctuation">-</span>pjax@2.0.1/jquery.pjax.min.js</code></pre><p><strong>为了正确加载音乐播放器，当切换到的文章页面也存在音乐播放器时，播放会中断重新加载</strong></p><p>这种方式，满足了 <code>md</code> 文章内的播放器实现，以及切换不中断的效果。但…我其实更想要能外挂在全局的那种，方便随时切换歌曲…😣😣😣</p><hr><h3 id="全局播放器"><a href="#全局播放器" class="headerlink" title="全局播放器"></a>全局播放器</h3><p><strong>我们只需要关心如何在页面公共区域挂载一个 <code>dom</code> 控制歌曲切换</strong>。至于播放器的实现，由于不需要考虑在 <code>md</code> 文件中引入，所以无需安装 <code>hexo-tag-aplayer</code>，只需要引入 <code>APlayer</code> 和 <code>MetingJs</code> 即可。</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><blockquote><p><code>tip:</code> 由于最新的 <code>MetingJs 2.x</code> 版本与 <code>APlayer</code> 版本不兼容，所以一般都是使用 <code>1.x 的 MetingJs</code>。</p></blockquote><p>通过 <code>cdn</code> 引入 <code>script</code>：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/meting@1.2.0/dist/Meting.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>或者开启根目录下的 <code>yml</code> 配置自动引入，如下：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">aplayer</span><span class="token punctuation">:</span>  <span class="token comment"># 示例配置</span>  <span class="token key atrule">cdn</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js  <span class="token key atrule">style_cdn</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css  <span class="token key atrule">meting</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">meting_cdn</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js</code></pre><h4 id="通用使用"><a href="#通用使用" class="headerlink" title="通用使用"></a>通用使用</h4><p>如果你的博客框架使用的是单页面应用框架实现的，那么你只需要在公共组件<code>wrapper</code> 里添加相应挂载的 <code>dom</code> 即可，否则，你需要像前面提到的一样，另外手动引入 <code>pjax</code> 相关资源文件。</p><p>外挂 <code>dom</code> 实现：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aplayer<span class="token punctuation">"</span></span>  <span class="token attr-name">data-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>754708245<span class="token punctuation">"</span></span>  <span class="token attr-name">data-server</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>netease<span class="token punctuation">"</span></span>  <span class="token attr-name">data-type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>playlist<span class="token punctuation">"</span></span>  <span class="token attr-name">data-fixed</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>  <span class="token attr-name">data-listfolded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>  <span class="token attr-name">data-autoplay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>  <span class="token attr-name">data-order</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span>  <span class="token attr-name">data-volume</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.5<span class="token punctuation">"</span></span>  <span class="token attr-name">data-theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#1da496<span class="token punctuation">"</span></span>  <span class="token attr-name">data-preload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 优化样式 --- 觉得默认的不太好看 --></span><span class="token comment">&lt;!-- 发现歌词出现在了播放器外，可能设计是这样的，但是我想把它放到播放器内部进度条位置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.aplayer.aplayer-fixed .aplayer-lrc,  .aplayer.aplayer-fixed .aplayer-body</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 999 <span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h4 id="主题博客中使用"><a href="#主题博客中使用" class="headerlink" title="主题博客中使用"></a>主题博客中使用</h4><p>如果你使用了和我相同的博客主题，开启全局播放器只需要修改主题下的 <code>_config.yml</code> 文件即可，如下（如果切换页面中断，只需要如上所说开启 <code>pjax</code> 即可）：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">aplayer</span><span class="token punctuation">:</span>  <span class="token comment"># https://yun.yunyoujun.cn/guide/additional-package-support.html#%E6%92%AD%E6%94%BE%E5%99%A8</span>  <span class="token key atrule">global</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">meting</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># https://github.com/metowolf/MetingJS/tree/v1.2#option</span>  <span class="token key atrule">widget</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">"#1da496"</span>    <span class="token comment"># loop: all</span>    <span class="token key atrule">order</span><span class="token punctuation">:</span> list    <span class="token key atrule">preload</span><span class="token punctuation">:</span> auto    <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.5</span>    <span class="token key atrule">mutex</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">lrcType</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">listMaxHeight</span><span class="token punctuation">:</span> 340px    <span class="token comment"># audio:</span>    <span class="token comment">#   - name: 星宿计时</span>    <span class="token comment">#     artist: 杉田朗/洛天依</span>    <span class="token comment">#     url: https://cdn.jsdelivr.net/gh/YunYouJun/cdn/audio/star-timer.mp3</span>    <span class="token comment">#     cover: https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/bg/stars-timing-0.jpg</span>    <span class="token key atrule">meting</span><span class="token punctuation">:</span>      <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">754708245</span>      <span class="token key atrule">server</span><span class="token punctuation">:</span> netease      <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist</code></pre><h4 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h4><p><a href="/images/posts/hexo-music-install/p3.png"><img src="/images/posts/hexo-music-install/p3.png" alt="hexo-music-install-p3" loading="lazy"></a></p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><blockquote><p><a href="https://easyhexo.com/3-Plugins-use-and-config/3-1-hexo-tag-aplayer/#%E4%BB%8B%E7%BB%8D">hexo-tag-aplayer</a></p></blockquote><blockquote><p><a href="https://aplayer.js.org/#/zh-Hans/">APlayer</a></p></blockquote><blockquote><p><a href="https://github.com/metowolf/MetingJS">MetingJS</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 收藏安利 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> APlayer </tag>
            
            <tag> MetingJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>突发 Node 环境以及相关指令异常</title>
      <link href="/bugs/nvm-symlink-not-working/"/>
      <url>/bugs/nvm-symlink-not-working/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>嘿嘿~，就是这么神奇，早上来公司写代码，由于周五走的时候并没有关掉服务，所以来了我就像往常一样工作。新的一周开始了…美滋滋 😚😚😚</p><p>一些不可描述的原因，编辑器很卡，<del>公司真的该换得电脑了 😶😶😶</del> 我重启了 <code>vscode</code>，执行 <code>nr start</code> 想着先把程序跑起来。</p><p><code>md</code>，<code>command not found? wtf?</code> 我不可能没装这个工具的呀，难道是我切了其他版本自己忘记了？，试着运行了一下 <code>node -v</code></p><p>😋😋😋 什么是 <code>tm</code> 的惊喜…<code>node command not found</code> <del>大哥 不要搞我啊…</del></p><span id="more"></span><h3 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h3><p>既然现在不能用了，也不能怨天尤人了，先看看是不是 <code>nvm</code> 的问题，执行 <code>nvm ls</code> 看看…试着切换一下版本，或者重装一下<code>node</code>，如图：</p><p><a href="/images/bugs/nvm-symlink-not-working/p1.png"><img src="/images/bugs/nvm-symlink-not-working/p1.png" alt="nvm-symlink-not-working-p1" loading="lazy"></a></p><p>果然不出我所料 😎😎😎，不行…😭😭😭</p><p>难道是…全局 <code>nodejs</code> 可执行文件出问题不可用了？去瞅了一眼（<strong>nvm 创建的软连接，将版本与全局可执行 node 相关联，也是环境变量里配置的 NVM_SYMLINK 的地址</strong>）…就剩个空文件夹了 <del>连最基本的 node.exe 都没有，这还咋运行？废了</del></p><p>毕竟是通过 <code>nvm</code> 安装的 <code>node</code> 环境，也就不存在单独的 <code>nodejs</code> 环境变量配置了…</p><p><strong><code>NVM_SYMLINK</code> 地址很重要，它指定了当前全局的 <code>node</code> 可执行环境</strong>，至于为什么这个文件夹会突然坏掉不可用了，<code>emm...</code> 我也很疑惑…只能先把这个问题解决了</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li><p>删掉之前的 <code>symlink</code> 的文件夹，并在 <code>nvm</code> 下新建一个 <code>nodejs</code> 空文件夹</p></li><li><p>重新建立软连接（额…说的不太准确，应该是修改环境变量 <code>NVM_SYMLINK</code>，值就是上一步新创建的 <code>nodejs</code> 文件夹路径），如下图：</p></li></ul><p><a href="/images/bugs/nvm-symlink-not-working/p2.png"><img src="/images/bugs/nvm-symlink-not-working/p2.png" alt="nvm-symlink-not-working-p2" loading="lazy"></a></p><ul><li><p>设置完成后，关闭所有终端，重新打开<code>cmd or bash...</code></p></li><li><p><code>ok</code>，重新绑定了，但是 <code>nodejs</code> 文件夹还是空的呀，此时执行 <code>node -v</code> 肯定还是 <code>command not found</code></p></li><li><p>重新切入你使用的 <code>node</code> 版本，执行 <code>nvm use [version]</code>,（如果有需要可新安装指定的版本），如下图：</p></li></ul><p><a href="/images/bugs/nvm-symlink-not-working/p3.png"><img src="/images/bugs/nvm-symlink-not-working/p3.png" alt="nvm-symlink-not-working-p3" loading="lazy"></a></p><ul><li><p>可以看到，此时 <code>node</code> 和 <code>npm</code> 相关指令都能重新正常使用了 <del>欣慰啊 😯😯😯</del> （<strong>有可能之前 <code>-g</code> 装的 <code>global packages</code> 会丢失，自行判断是否需要再次安装</strong>）</p></li><li><p>最后一步，验证之前的猜想…找到第一步创建的 <code>nodejs</code> 文件夹并打开，可以发现里面多了很多内容。（其实也就是你 <code>nvm use [version]</code> 对应的 <code>version</code> 文件夹里的内容，也从侧面说明了 <code>symlink</code> 能够正常工作了）</p></li></ul><p><a href="/images/bugs/nvm-symlink-not-working/p4.png"><img src="/images/bugs/nvm-symlink-not-working/p4.png" alt="nvm-symlink-not-working-p4" loading="lazy"></a></p><blockquote><p>总会有一些奇奇怪怪的 <code>bug</code>伴随你我，日记一笔，以备后用.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 踩坑记录 </category>
          
          <category> NVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> nvm </tag>
            
            <tag> nvm_symlink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElForm 偶现表单字段校验异常</title>
      <link href="/bugs/el-form-validate-error/"/>
      <url>/bugs/el-form-validate-error/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="浅谈一下"><a href="#浅谈一下" class="headerlink" title="浅谈一下"></a>浅谈一下</h3><p><code>elementUI</code>存在很多已知或者未知的问题需要我们去发现并解决，但不可否认它确实在曾经取得过很好的认可。</p><p>在使用 <code>el-form-item</code> 组件时，正常情况下，我们经常需要自定义校验规则来规范用户输入，比如这样：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span> <span class="token attr-name">:rules</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rules.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>年龄<span class="token punctuation">"</span></span> <span class="token attr-name">:rules</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rules.age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input-number</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form.age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input-number</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>...</code></pre><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">public</span> rules <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">'姓名不能为空'</span><span class="token punctuation">,</span> trigger<span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">'年龄不能为空'</span><span class="token punctuation">,</span> trigger<span class="token operator">:</span> <span class="token string">'change'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p>当然你也可以把 <code>rules</code> 绑定到 <code>el-form</code> 上，因为两者在校验过程中起的作用和我所描述的问题并不冲突。</p><p>😏😏😏 问题的产生往往是来自于部分特殊需求：</p><span id="more"></span><h3 id="场景复现"><a href="#场景复现" class="headerlink" title="场景复现"></a>场景复现</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><ul><li><p><code>el-form-item</code> 包裹的子组件 <code>（自定义的独立页面组件）</code>能够由自身提供校验函数，然后由 <code>el-form-item</code> 触发校验</p></li><li><p>能够根据表单权限（比如只读、可写、隐藏）等动态生成校验规则。<code>（权限可以来自于组件的 prop）</code></p></li></ul><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>基于性能优化方面考虑，将 <code>rules</code> 绑定到了每个 <code>el-form-item</code> 而非 <code>el-form</code>。</p><blockquote><p><em>如果 <code>rules</code> 绑定到了 <code>el-form</code>，那么当其中某个组件的权限发生变更时，需要重新对整个 form 的 rules 计算并赋值，会影响到整个父级的 wrapper 组件 rerender，当组件数量达到一定程度时(刚好我所在场景下就会有很多…有的多达上千)，会明显感觉到性能差异</em></p></blockquote><p>为了满足上面的需求，<code>rules</code> 是绑定的计算属性，通过计算实时赋予 <code>el-form-item</code> 组件新的 <code>rules</code>，实现如下：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">:prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prop<span class="token punctuation">"</span></span> <span class="token attr-name">:rules</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>formItemRules<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CustomChildren</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>childrenRef<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CustomChildren</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span></code></pre><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// CustomChildren 是动态组件，根据组件 tag 渲染</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Ref</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> childrenRef<span class="token operator">!</span><span class="token operator">:</span> CustomChildren<span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> prop<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> privilege<span class="token operator">!</span><span class="token operator">:</span> <span class="token string">'VIEW'</span> <span class="token operator">|</span> <span class="token string">'HIDDEN'</span> <span class="token operator">|</span> <span class="token string">'EDIT'</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">get</span> <span class="token function">formItemRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 只有可编辑时需要 rule</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>privilege <span class="token operator">===</span> <span class="token string">'EDIT'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// getFormItemRules： rules 构建函数，具体实现由需求决定</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFormItemRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token function">getFormItemRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 找到子组件实例 --- 具体的组件层级不做深究，由组件结构决定</span>  <span class="token keyword">const</span> controlRef <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>childrenRef<span class="token operator">?.</span>$children<span class="token operator">?.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> ruleList<span class="token operator">:</span> ValidationRule<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// eg. nameRules，实际实现需要考虑通用性</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>prop <span class="token operator">===</span> <span class="token string">'name'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ruleList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">'请输入姓名'</span><span class="token punctuation">,</span> trigger<span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// ... other prop</span>  <span class="token comment">// add children customRules</span>  ruleList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">(</span>controlRef<span class="token operator">?.</span>customRules <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// children customRules：</span><span class="token comment">// export default class Upload extends Vue &#123;</span><span class="token comment">//   protected customRules: ValidationRule[] = [</span><span class="token comment">//     &#123;</span><span class="token comment">//       trigger: 'submit',</span><span class="token comment">//       validator: (r, v, callback) => &#123;</span><span class="token comment">//         if (this.uploading) &#123;</span><span class="token comment">//           callback(new Error('文件正在上传中...'));</span><span class="token comment">//         &#125;</span><span class="token comment">//         return callback();</span><span class="token comment">//       &#125;,</span><span class="token comment">//     &#125;,</span><span class="token comment">//   ];</span><span class="token comment">// &#125;</span></code></pre><p>是不是看上去没有任何的问题？嘿，我开始也是这么想的…</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><h4 id="不触发校验"><a href="#不触发校验" class="headerlink" title="不触发校验"></a>不触发校验</h4><p>给 <code>el-form-item</code> 绑定了 <code>rules</code> 后，变更了值，但是校验并没有触发，这是为什么呢？</p><ul><li>首先我怀疑是 <code>rules</code> 构建过程中出错了，没有传入正确的 <code>rules</code>.</li></ul><p>通过 <code>console.debug</code> 以及<code>vue-devtools</code> 进行查看，发现 <code>rules</code> 是正确的…那么会不会是出在 <code>el-form-item</code> 自身呢？</p><ul><li>翻阅 <code>el-form-item</code> 源码：<a href="https://github.com/ElemeFE/element/blob/dev/packages/form/src/form-item.vue">https://github.com/ElemeFE/element/blob/dev/packages/form/src/form-item.vue</a></li></ul><p>发现了这么一句： <del>移除了其他干扰代码 😁😁😁</del></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">getRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> formRules <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>rules<span class="token punctuation">;</span>    <span class="token keyword">const</span> selfRules <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rules<span class="token punctuation">;</span>    <span class="token keyword">const</span> requiredRule <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>required <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>required <span class="token punctuation">&#125;</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> prop <span class="token operator">=</span> <span class="token function">getPropByPath</span><span class="token punctuation">(</span>formRules<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prop <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    formRules <span class="token operator">=</span> formRules <span class="token operator">?</span> <span class="token punctuation">(</span>prop<span class="token punctuation">.</span>o<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>prop <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">]</span> <span class="token operator">||</span> prop<span class="token punctuation">.</span>v<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>selfRules <span class="token operator">||</span> formRules <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>requiredRule<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">addValidateEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> rules <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rules<span class="token punctuation">.</span>length <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>required <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'el.form.blur'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onFieldBlur<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'el.form.change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onFieldChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>prop<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addValidateEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><p>从上面可以很清晰的看到，在 <code>el-form-item</code> 组件 <code>mounted</code> 的时候会添加 <code>el.form.blur</code> 和 <code>el.form.change</code> 事件监听，由表单组件内部 <code>dispatch</code>。<code>然而...🤔🤔🤔，它有个很致命的前提：rules.length</code></p><p>继续分析：<code>getRules</code> 中，会优先从 <code>formRules 和 selfRules</code> 读取 rules<code>，然后根据 </code>required<code>决定是否生成</code>require rule<code>，最后返回新的 </code>rules&#96;。</p><p><strong>这也是为什么我说 <code>rules</code> 绑定到 <code>el-form</code> 和 <code>el-form-item</code> 和这个 <code>bug</code> 不冲突</strong></p><p>综上不难发现，由于我前面添加了 <code>formItemRules</code> 在非 <code>EDIT</code> 的时候，<strong>返回了空的 <code>rules</code>，<code>el-form-item</code> 未绑定 <code>change | blur</code> 的回调，导致就算 <code>rules</code> 新增 <code>change</code> 类的 <code>trigger</code>，也不会触发即时校验</strong>。</p><p>为了解决这个问题，我就添加了一个空对象的 <code>rules</code>，即：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">public</span> <span class="token keyword">get</span> <span class="token function">formItemRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>你以为这个问题就算解决了？其实没有！ 🤗🤗🤗</strong></p><h4 id="refs-childrenRef-no-reactive"><a href="#refs-childrenRef-no-reactive" class="headerlink" title="refs.childrenRef no-reactive"></a><code>refs.childrenRef no-reactive</code></h4><p>由于需要从子组件本身获取自定义的 <code>customRules</code> 属性，所以这里采用了 <code>refs</code> 去找组件实例，从实例属性中获取，然而…<code>refs</code> 并非是响应式的….<del>乌鱼子啊兄弟们 😗😗😗</del></p><p>怎么解决？🤨 它不是响应式的那我们就用其他的代替咯…比如标志位：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">public</span> itemRulesReady <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">get</span> <span class="token function">formItemRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>itemRulesReady <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>privilege <span class="token operator">===</span> <span class="token string">'EDIT'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFormItemRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>itemRulesReady <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>通过标志位 <code>itemRulesReady</code> 来标识组件实例 <code>ref</code> 已完成加载，又由于 <code>itemRulesReady</code> 是响应式的，变更后计算属性就会重新计算，这个问题也就解决了。</p><p>话又说回来，前面为什么我会说“不触发校验”没有彻底解决，请往下看…</p><h4 id="is-not-a-string-number-array"><a href="#is-not-a-string-number-array" class="headerlink" title="is not a string/number/array"></a><code>is not a string/number/array</code></h4><p>虽然…添加了 <code>[&#123;&#125;]</code> 后，会触发即时校验了，但是当我 <code>submit</code> 表单的时候，却出现了 <code>is not a string/number/array</code> 的错误。<code>why???😫😫😫</code></p><p>只有继续调试了，通过 <code>debug</code> 找到出现该校验提示的组件，发现它的 <code>rules</code> 是之前我设置的 <code>[&#123;&#125;]</code>，嘿~难不成是因为我传了空对象的原因？</p><p>点击提交，代码执行调用了 <code>validateForm</code>，而 <code>validateForm</code> 的作用就是触发 <code>elForm.validate</code>，最后抛出校验结果：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">private</span> <span class="token function">validateForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> form <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>formRef <span class="token keyword">as</span> ElForm<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token builtin">boolean</span><span class="token punctuation">,</span> FieldErrorList<span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> FieldErrorList<span class="token punctuation">]</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    form<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>isValid<span class="token punctuation">,</span> errors<span class="token punctuation">,</span> isNoWarning<span class="token punctuation">,</span> warnings<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span>isValid<span class="token punctuation">,</span> errors <span class="token keyword">as</span> FieldErrorList<span class="token punctuation">,</span> isNoWarning<span class="token punctuation">,</span> warnings <span class="token keyword">as</span> FieldErrorList<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>去翻源码…找到 <code>el-form</code> 的 <code>validate</code> 方法，<strong>我这里移除了一些干扰代码并写了注释：比如不会进入的 <code>if</code> 语句和其他变量</strong></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">validate</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>fields<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>field <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这里的 field 为 el-form-item 的 ref 组件实例，调用组件自身的 validate 方法</span>    field<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>message<span class="token punctuation">,</span> field<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 当所有组件的 validate 方法执行完成后触发外部回调</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callback <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">++</span>count <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fields<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 进入 el-form-item 的 validate 方法。 目前就是 age 所在组件的校验异常了...</span><span class="token function">validate</span><span class="token punctuation">(</span>trigger<span class="token punctuation">,</span> callback <span class="token operator">=</span> noop<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> rules <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFilteredRule</span><span class="token punctuation">(</span>trigger<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这个方法是对 rules 进行过滤，返回的其实还是 [&#123;&#125;]</span>  <span class="token keyword">const</span> descriptor <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  descriptor<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> rules<span class="token punctuation">;</span> <span class="token comment">// descriptor => &#123; age: [&#123;&#125;] &#125;</span>  <span class="token keyword">const</span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncValidator</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> model <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  model<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fieldValue<span class="token punctuation">;</span> <span class="token comment">// age 值是数字类型 => model: &#123; age: 18 &#125;</span>  validator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> firstFields<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>errors<span class="token punctuation">,</span> invalidFields<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>validateMessage <span class="token operator">=</span> errors <span class="token operator">?</span> errors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>message <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token comment">// 这里就是触发外部回调，并把校验失败的字段传递出去</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>validateMessage<span class="token punctuation">,</span> invalidFields<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>好像越来越接近真相了，有点兴奋…😯😯😯，既然 <code>message</code> 是 <code>asyncValidator</code> 抛出的，那就找到 <code>AsyncValidator</code> 的 <code>validate</code> 实现 <del>篇幅有点长</del>：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// new 了一个 AsyncValidator 实例</span><span class="token function">constructor</span><span class="token punctuation">(</span>descriptor<span class="token operator">:</span> Rules<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">define</span><span class="token punctuation">(</span>rules<span class="token operator">:</span> Rules<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>rules <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 这一步做完，this.rules = &#123; age: [&#123;&#125;] &#125;</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> item<span class="token operator">:</span> Rule <span class="token operator">=</span> rules<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>rules<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">?</span> item <span class="token operator">:</span> <span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 下面看 validate 实现，不用太关注其他配置，所以我删了些许代码</span><span class="token function">validate</span><span class="token punctuation">(</span>source_<span class="token operator">:</span> Values<span class="token punctuation">,</span> o<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> oc<span class="token operator">:</span> <span class="token function-variable function">any</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Values<span class="token operator">></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> source<span class="token operator">:</span> Values <span class="token operator">=</span> source_<span class="token punctuation">;</span> <span class="token comment">// &#123; age: 18 &#125;</span>  <span class="token keyword">let</span> options<span class="token operator">:</span> ValidateOption <span class="token operator">=</span> o<span class="token punctuation">;</span> <span class="token comment">// &#123; firstFields: true &#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>messages<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ... 进入 else，设置 options.messages</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    options<span class="token punctuation">.</span>messages <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">messages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// _messages === defaultMessages ===  如下</span>    <span class="token comment">// &#123;</span>    <span class="token comment">//   types: &#123;</span>    <span class="token comment">//     string: '%s is not a %s',</span>    <span class="token comment">//     method: '%s is not a %s (function)',</span>    <span class="token comment">//     array: '%s is not an %s',</span>    <span class="token comment">//     object: '%s is not an %s',</span>    <span class="token comment">//     ...</span>    <span class="token comment">//   &#125;,</span>    <span class="token comment">//  ...</span>    <span class="token comment">// &#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> series<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> RuleValuePackage<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> keys <span class="token operator">=</span> options<span class="token punctuation">.</span>keys <span class="token operator">||</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rules<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['age']</span>  keys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>z <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rules<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [&#123;&#125;]</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> source<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 18</span>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>r <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> rule<span class="token operator">:</span> InternalRuleItem <span class="token operator">=</span> r<span class="token punctuation">;</span> <span class="token comment">// &#123;&#125;</span>      <span class="token comment">// rule.validator: https://github.com/yiminghe/async-validator/blob/HEAD/src/validator/string.ts</span>      rule<span class="token punctuation">.</span>validator <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getValidationMethod</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// getValidationMethod(rule: InternalRuleItem) &#123;</span>      <span class="token comment">//   ...</span>      <span class="token comment">//   return validators[this.getType(rule)] || undefined; // asyncValidator 提供的 string 默认校验函数</span>      <span class="token comment">// &#125;</span>      <span class="token comment">// getType(rule: InternalRuleItem) &#123;</span>      <span class="token comment">//   ...</span>      <span class="token comment">//   由于 rule 是个 &#123;&#125;，不存在 type, getType(rule) 返回了默认值 string</span>      <span class="token comment">//   return rule.type || 'string';</span>      <span class="token comment">// &#125;</span>      rule<span class="token punctuation">.</span>field <span class="token operator">=</span> z<span class="token punctuation">;</span> <span class="token comment">// age</span>      rule<span class="token punctuation">.</span>fullField <span class="token operator">=</span> rule<span class="token punctuation">.</span>fullField <span class="token operator">||</span> z<span class="token punctuation">;</span> <span class="token comment">// age</span>      rule<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>      series<span class="token punctuation">[</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> series<span class="token punctuation">[</span>z<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// series: &#123; age: [] &#125;</span>      series<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        rule<span class="token punctuation">,</span>        value<span class="token punctuation">,</span>        source<span class="token punctuation">,</span>        field<span class="token operator">:</span> z<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// series: &#123; age: [&#123; rule: &#123; field: 'age', type: 'string', fullField: 'age'， validator: ... &#125;, value: 18, source: &#123; age: 18 &#125;, field: 'age' &#125;] &#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">asyncMap</span><span class="token punctuation">(</span>    series<span class="token punctuation">,</span>    options<span class="token punctuation">,</span>    <span class="token punctuation">(</span>data<span class="token punctuation">,</span> doIt<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> rule <span class="token operator">=</span> data<span class="token punctuation">.</span>rule<span class="token punctuation">;</span> <span class="token comment">// 拿到处理后的 rule: &#123; field: 'age', type: 'string', fullField: 'age'， validator: ... &#125;</span>      <span class="token keyword">let</span> res<span class="token operator">:</span> ValidateResult<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>rule<span class="token punctuation">.</span>asyncValidator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rule<span class="token punctuation">.</span>validator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 执行 validate</span>        res <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">validator</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> data<span class="token punctuation">.</span>value<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> data<span class="token punctuation">.</span>source<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    results <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    source<span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 进入默认生成的 rule.validator 即 https://github.com/yiminghe/async-validator/blob/HEAD/src/validator/string.ts</span><span class="token keyword">const</span> <span class="token builtin">string</span><span class="token operator">:</span> <span class="token function-variable function">ExecuteValidator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> source<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> errors<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> validate <span class="token operator">=</span>    rule<span class="token punctuation">.</span>required <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>rule<span class="token punctuation">.</span>required <span class="token operator">&amp;&amp;</span> source<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span>field<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// validate：true</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>validate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmptyValue</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      rules<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> source<span class="token punctuation">,</span> errors<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">callback</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 进入 rules.type</span><span class="token class-name"><span class="token keyword">const</span></span> type<span class="token operator">:</span> <span class="token function-variable function">ExecuteRule</span> <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> source<span class="token punctuation">,</span> errors<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> custom <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'integer'</span><span class="token punctuation">,</span> <span class="token string">'float'</span><span class="token punctuation">,</span> <span class="token string">'array'</span><span class="token punctuation">,</span> <span class="token string">'regexp'</span><span class="token punctuation">,</span> <span class="token string">'object'</span><span class="token punctuation">,</span> <span class="token string">'method'</span><span class="token punctuation">,</span> <span class="token string">'email'</span><span class="token punctuation">,</span> <span class="token string">'number'</span><span class="token punctuation">,</span> <span class="token string">'date'</span><span class="token punctuation">,</span> <span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token string">'hex'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> ruleType <span class="token operator">=</span> rule<span class="token punctuation">.</span>type<span class="token punctuation">;</span>  <span class="token comment">// 下面都是做值和 ruleType 类型比对，只不过单独把 string 区分开了，string 类型直接通过 typeof 进行比对判断</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>custom<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ruleType<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ruleType <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> value <span class="token operator">!==</span> rule<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    errors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>      <span class="token comment">// format 是将 %s is not a %s 中的特殊字符进行替换，返回一个完整的 error message</span>      <span class="token function">format</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>messages<span class="token punctuation">.</span>types<span class="token punctuation">[</span>ruleType<span class="token punctuation">]</span><span class="token punctuation">,</span> rule<span class="token punctuation">.</span>fullField<span class="token punctuation">,</span> rule<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// age is not a string</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><code>ok...我滴妈 终于找到源头了...</code></p><p>因为空的 <code>rules: [&#123;&#125;]</code> 会在 <code>asyncValidator</code> 内生成 <code>[&#123; type: string, validator: ... &#125;]</code> 的默认 <code>rule</code>，那么怎么样才能让 <code>rules</code> 同 <code>[&#123;&#125;]</code> 不参与校验，同时也不会导致其他异常出现呢？<strong>总不能根据组件的类型，动态生成 type 再传进去吧？</strong></p><p>细看上述源码，不可避免的会生成 <code>validator</code> 校验方法，目前能做的貌似只有让这个 <code>[&#123;&#125;]</code> 能够不影响校验结果，能够正常使用，那么就得先分析 <code>getValidationMethod</code> 方法了，毕竟所有的 <code>validator</code> 都是基于这个方法获取的：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">getValidationMethod</span><span class="token punctuation">(</span>rule<span class="token operator">:</span> InternalRuleItem<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> rule<span class="token punctuation">.</span>validator <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> rule<span class="token punctuation">.</span>validator<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> messageIndex <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>messageIndex <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    keys<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>messageIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> keys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'required'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> validators<span class="token punctuation">.</span>required<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> validators<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 之前 [&#123;&#125;] 的步骤就走到这里，也就是返回了基于 string 的默认 validator 函数</span><span class="token punctuation">&#125;</span></code></pre><p>很明朗了，只要不走默认的 <code>return</code> 貌似都能绕过去…</p><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>附上之前的临时解决办法：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">public</span> <span class="token keyword">get</span> <span class="token function">formItemRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>终极方案：</p><ul><li><strong>方案一：将 <code>[&#123;&#125;]</code> 替换为 <code>[&#123; required: false &#125;]</code></strong>. （当只提供 <code>required</code>，的时候，<code>asyncValidator</code> 会采用默认的 <code>required</code> 的校验方法，即：）</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> keys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'required'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> validators<span class="token punctuation">.</span>required<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// validators.required 如下： 传入 false，永远都不会影响校验</span><span class="token keyword">const</span> required<span class="token operator">:</span> <span class="token function-variable function">ExecuteRule</span> <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> source<span class="token punctuation">,</span> errors<span class="token punctuation">,</span> options<span class="token punctuation">,</span> type<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>    rule<span class="token punctuation">.</span>required <span class="token operator">&amp;&amp;</span>    <span class="token punctuation">(</span><span class="token operator">!</span>source<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span>field<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isEmptyValue</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> type <span class="token operator">||</span> rule<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    errors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">format</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>messages<span class="token punctuation">.</span>required<span class="token punctuation">,</span> rule<span class="token punctuation">.</span>fullField<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><ul><li><strong>方案二：传入自定义的 <code>validator</code>，将 [{}] 替换为 [{ validator: () &#x3D;&gt; {} }]</strong></li></ul><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><blockquote><p>如果你的项目在开发过程中有使用到 <code>elForm</code>，同时又有动态生成修改 <code>rules</code> 的需求：<strong>首先必须要为绑定的 <code>rules</code> 提供默认值，且默认值不能为空，否则会导致校验异常；其次为满足提供的默认 <code>rules</code> 不影响校验结果，不能直接传入 <code>[&#123;&#125;]</code>，而是采用上面两种解决方法避免影响.</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 踩坑记录 </category>
          
          <category> ElementUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elForm </tag>
            
            <tag> rule </tag>
            
            <tag> validate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>由 Notification 引起的奇葩问题</title>
      <link href="/bugs/notification/"/>
      <url>/bugs/notification/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>一大早到公司上班，就被告知有一个看似无厘头的 <code>bug</code> 需要解决？</p><blockquote><p>原话是：在电脑浏览器上能够正常访问？甚至是打开调试工具，模拟手机进行调试也可以访问，无任何异常信息…<code>but...</code>，当同样的链接放到手机真机上时，不能正常访问服务，页面一片空白？</p></blockquote><p>其实要解决 <code>bug</code>，只要能发现原因所在，就算解决一半了。</p><p>然而…<code>目前只有..猜测？程序员怎么能靠猜呢？</code>，是不是也得<code>断点调试debugger</code>一套流程走下来…</p><p><code>ok，如果你真的这么做了，你会发现...嘿嘿 毫无收获...😉😉😉</code> 因为它不抛异常，也不报错，连 <code>vConsole</code> 都没能让它在控制台留下任何异常输出.</p><blockquote><p><code>vConsole:</code> 一个轻量、可拓展、针对手机网页的前端开发者调试面板。同样的，目前也是微信小程序的官方调试工具</p></blockquote><span id="more"></span><h3 id="定位问题"><a href="#定位问题" class="headerlink" title="定位问题"></a>定位问题</h3><p>听上去有些无厘头，甚至我和大家开始的想法一样，无从下手进行调试，我寻思…</p><blockquote><p>网页白屏很大程度上都是由于程序出错导致的运行中断引起的，需要重点排查。</p><p>再加之 <code>PC</code> 甚至模拟手机调试都能够正常访问，且没有任何异常提示和报错，而部分手机浏览器又可以正常访问，更大概率是浏览器兼容性引起的。</p></blockquote><p>因为懒，不想一个个版本切换去找哪次提交产生的问题，也没有很好的思路，就在手机浏览器上访问本地服务<del>先连上内网 wifi</del>，刷新了几次链接，无意间发现有一瞬间的页面错误消息提示<del>就一瞬间…零点几秒的出现时间，还是刷新后偶现的…无语 😅😅😅</del>，然后就白屏了，根本就看不清错误消息。</p><p>没办法，我就打开了手机录屏，复现了，然后就在录制的视频里找关键帧…发现了这样的一句错误信息：</p><blockquote><p><code>can not find variable Notification eval code...</code></p></blockquote><p>有错误消息，接下来就好办多了，根据提示，定位到文件，原文<del>原文？<code>bug</code>文才对 😒😒😒</del>如下：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> InfiniteScroll<span class="token punctuation">,</span> Loading<span class="token punctuation">,</span> Message<span class="token punctuation">,</span> MessageBox <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Loading<span class="token punctuation">.</span>directive<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>InfiniteScroll<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$loading <span class="token operator">=</span> Loading<span class="token punctuation">.</span>service<span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$msgbox <span class="token operator">=</span> MessageBox<span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$alert <span class="token operator">=</span> MessageBox<span class="token punctuation">.</span>alert<span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$confirm <span class="token operator">=</span> MessageBox<span class="token punctuation">.</span>confirm<span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$prompt <span class="token operator">=</span> MessageBox<span class="token punctuation">.</span>prompt<span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$notify <span class="token operator">=</span> Notification<span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$message <span class="token operator">=</span> Message<span class="token punctuation">;</span><span class="token operator">...</span></code></pre><p>找到文件后，一眼就看到了 <code>Notification</code>，这里并没有从 <code>element-ui</code> 导入…</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>问题本身并不难解决和发现，但是当程序不抛异常，又或者哪个结构比较深的文件也出现如上的用法，挨个版本改动对比，会让你找到怀疑人生…</p><p>由于没有导入，编辑器此时把 <code>Notification</code> 当做是 <code>web Notification</code> 了。这也是为什么编辑器没有报错，能正常打包…<del>心中顿时一万个曹尼玛奔腾而过 🙄🙄🙄</del></p><p>查阅文档后，发现了该 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Notification">web Notification</a> 在 <code>android webview</code> 和部分浏览器存在兼容性问题。</p><p>大多时候，其实兼容性并不会影响程序运行。本文场景是在入口文件全局挂载 <code>$notify</code>，而由于 <code>Notification</code> 的局限性，部分浏览器环境下没有该 <code>API</code> 识别不了，会当做是未声明的变量，从而抛出异常中断程序运行。</p><p>解决的方法很简单，正常导入就可以了：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Notification <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$notify <span class="token operator">=</span> Notification<span class="token punctuation">;</span></code></pre><blockquote><p><strong>本文旨在提示 <code>element-ui Notification</code> 和 <code>web Notification</code> 两者共同存在，在编码过程中容易忽视混淆，而编辑器并不会给出相应提示，后续出现问题也会很难排查定位</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 踩坑记录 </category>
          
          <category> ElementUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> notification </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络请求之响应异常处理拦截器</title>
      <link href="/share/response-interceptors/"/>
      <url>/share/response-interceptors/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="背景前提"><a href="#背景前提" class="headerlink" title="背景前提"></a>背景前提</h3><p>不管是使用 <code>axios</code> 还是类似 <code>umi-request</code> 进行网络请求，在实际开发中，我们都需要对请求异常进行处理，<code>eg.</code> <strong>请求超时</strong>、<strong>网络错误</strong>等。</p><p>针对不同类型的异常，可以采取不同的措施，<code>eg.</code> <strong>弹出消息提示</strong>、<strong>跳转到错误页面</strong>、<strong>重新请求</strong>等。</p><span id="more"></span><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><p>针对 <code>axios</code> 的 <code>Interceptors</code>，我们可以通过定义并导出自定义的 <code>axios</code> 实例，并在实例中配置 <code>Interceptors.response</code> 来实现。</p><p>然后在项目中，使用导出的 <code>axios</code> 进行网络请求，即可实现全局对请求异常的统一处理。</p><h4 id="axios-interceptors-response"><a href="#axios-interceptors-response" class="headerlink" title="axios.interceptors.response"></a><code>axios.interceptors.response</code></h4><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Message <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">;</span><span class="token comment">// axios other configs...</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">,</span>  <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 被取消的请求不弹出message. 一般发生在页面跳转时</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">isCancel</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 处理未登录 401 问题，跳转到登录页</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      <span class="token punctuation">(</span>error<span class="token operator">?.</span>response<span class="token operator">?.</span>status <span class="token operator">===</span> <span class="token number">400</span> <span class="token operator">&amp;&amp;</span>        error<span class="token operator">?.</span>response<span class="token operator">?.</span>data<span class="token operator">?.</span>error<span class="token operator">?.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'invalid_token'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>      error<span class="token operator">?.</span>response<span class="token operator">?.</span>status <span class="token operator">===</span> <span class="token number">401</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'/login'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> message <span class="token operator">=</span> error<span class="token operator">?.</span>response<span class="token operator">?.</span>data<span class="token operator">?.</span>message <span class="token operator">||</span> <span class="token string">'网络请求异常'</span><span class="token punctuation">;</span>      Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> message<span class="token punctuation">,</span> duration<span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span> offset<span class="token operator">:</span> <span class="token number">70</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> axios<span class="token punctuation">;</span></code></pre><p>以上就是比较通用一点的拦截处理。</p><h3 id="拦截器优化"><a href="#拦截器优化" class="headerlink" title="拦截器优化"></a>拦截器优化</h3><p>在实际使用中，我们可能需要对部分定制的请求有单独的处理，以下是列出的可能需要优化的点：</p><ul><li><p>基于 <code>blob</code> 类型请求的错误处理</p></li><li><p>有多条错误消息时，提示期间只显示一条</p></li><li><p>不显示异常消息，或者不做任何拦截处理</p></li><li><p>请求超时重试</p></li><li><p>…</p></li></ul><h4 id="扩展请求配置"><a href="#扩展请求配置" class="headerlink" title="扩展请求配置"></a>扩展请求配置</h4><p>可以在 <code>axios</code> 请求函数里添加单独的 <code>config</code> 配置，在 <code>error.config</code> 中拿到请求时传入的参数，实现特殊处理：</p><p><code>axios-extend.d.ts</code>：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> AxiosRequestConfig <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">'axios'</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">AxiosRequestConfig</span> <span class="token punctuation">&#123;</span>    metadata<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      start<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">/**     *  用于控制该请求出现错误时， 是否由默认message显示错误信息     *     * @type &#123;boolean&#125;     * @memberof AxiosRequestConfig     */</span>    suppressError<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 用于请求在401状态码时， 是否自动重定向到登陆页。     *     * @type &#123;boolean&#125;     * @memberof AxiosRequestConfig     */</span>    suppressUnauthRedirect<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><code>request.ts</code>：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'@/plugin/axios'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkAppTemplate</span><span class="token punctuation">(</span>code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/xxx/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>code<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> suppressError<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>从上面可以看到，请求的时候 <code>axios</code> 的 <code>config</code> 配置里，添加了 <code>suppressError</code>参数，在 <code>Interceptors</code> 中只需要判断是否含有该参数, 如果为 <code>true</code>，则不提示 <code>message</code>，否则提示，<code>suppressUnauthRedirect</code> 同理。</p><p>上面的 <code>axios.ts</code> 做以下调整：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token operator">?.</span>config<span class="token punctuation">.</span>suppressError<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> message <span class="token operator">=</span> error<span class="token operator">?.</span>response<span class="token operator">?.</span>data<span class="token operator">?.</span>message <span class="token operator">||</span> <span class="token string">'网络请求异常'</span><span class="token punctuation">;</span>  Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> message<span class="token punctuation">,</span> duration<span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span> offset<span class="token operator">:</span> <span class="token number">70</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="基于-blob-的请求错误消息处理"><a href="#基于-blob-的请求错误消息处理" class="headerlink" title="基于 blob 的请求错误消息处理"></a>基于 <code>blob</code> 的请求错误消息处理</h4><p>前端在下载文件时，通常会基于 <code>blob</code> 的方式，当我们设置了 <code>responseType</code> 为 <code>blob</code>的时候，如果接口抛出异常并返回了例如下面的错误消息，由于返回的是 <code>Blob</code> 对象，所以无法同其他请求一样去解析 <code>message</code>：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>  <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"下载异常"</span><span class="token punctuation">,</span>  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">&#125;</span></code></pre><p>为了能够解析返回的 <code>message</code>，需要扩展上面提到的通用的 <code>interceptors</code>:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> message <span class="token operator">=</span> error<span class="token operator">?.</span>response<span class="token operator">?.</span>data<span class="token operator">?.</span>message <span class="token operator">||</span> <span class="token string">'网络请求异常'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token operator">?.</span>data <span class="token keyword">instanceof</span> <span class="token class-name">Blob</span> <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token operator">?.</span>data<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> resText <span class="token operator">=</span> <span class="token keyword">await</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  message <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>resText<span class="token punctuation">)</span><span class="token punctuation">.</span>message <span class="token operator">||</span> message<span class="token punctuation">;</span> <span class="token comment">// 下载异常</span><span class="token punctuation">&#125;</span>Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> message<span class="token punctuation">,</span> duration<span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span> offset<span class="token operator">:</span> <span class="token number">70</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="message-防抖处理"><a href="#message-防抖处理" class="headerlink" title="message 防抖处理"></a><code>message</code> 防抖处理</h4><p>通过外部变量来标识是否正处于 <code>message</code> 提示中：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> isErrorShowing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// axios.interceptors.response.use(....</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isErrorShowing<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> message <span class="token operator">=</span> error<span class="token operator">?.</span>response<span class="token operator">?.</span>data<span class="token operator">?.</span>message <span class="token operator">||</span> <span class="token string">'网络请求异常'</span><span class="token punctuation">;</span>  Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> message<span class="token punctuation">,</span> duration<span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span> offset<span class="token operator">:</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token function-variable function">onClose</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>isErrorShowing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="请求超时重试"><a href="#请求超时重试" class="headerlink" title="请求超时重试"></a>请求超时重试</h4><h5 id="基于-axios-请求重试"><a href="#基于-axios-请求重试" class="headerlink" title="基于 axios 请求重试"></a>基于 <code>axios</code> 请求重试</h5><p>可以参考 <a href="https://github.com/softonic/axios-retry">axios-retry</a> 实现。</p><h5 id="基于-umi-request-的请求重试"><a href="#基于-umi-request-的请求重试" class="headerlink" title="基于 umi-request 的请求重试"></a>基于 <code>umi-request</code> 的请求重试</h5><p>借鉴了 <code>axios-retry</code>，具体实现如下：</p><p><code>umiRequestConfig.ts</code>：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> RequestConfig <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'umi'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> RequestOptionsInit <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'umi-request'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">RequestOptions</span> <span class="token keyword">extends</span> <span class="token class-name">RequestOptionsInit</span> <span class="token punctuation">&#123;</span>  retryConfig<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> retryCount<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> retryCondition<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>res<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">boolean</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">CRequestConfig</span> <span class="token keyword">extends</span> <span class="token class-name">RequestConfig</span> <span class="token punctuation">&#123;</span>  requestInterceptors<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>    url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>    options<span class="token operator">:</span> RequestOptions<span class="token punctuation">,</span>  <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    url<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    options<span class="token operator">?</span><span class="token operator">:</span> RequestOptions<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  responseInterceptors<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>    response<span class="token operator">:</span> Response<span class="token punctuation">,</span>    options<span class="token operator">:</span> RequestOptions<span class="token punctuation">,</span>  <span class="token punctuation">)</span> <span class="token operator">=></span> Response <span class="token operator">|</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Response<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><code>app.tsx</code>:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 超时重试的最大次数</span><span class="token keyword">const</span> <span class="token constant">TIMEOUT_MAX</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">// 超时重试延迟</span><span class="token keyword">const</span> <span class="token constant">TIMEOUT_RETRY_DELAY</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">shouldRetry</span><span class="token punctuation">(</span>res<span class="token operator">:</span> Response<span class="token punctuation">,</span> retryCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> retryCondition<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>r<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">504</span> <span class="token operator">&amp;&amp;</span> retryCount <span class="token operator">&lt;</span> <span class="token constant">TIMEOUT_MAX</span><span class="token punctuation">)</span> <span class="token operator">||</span> retryCondition<span class="token operator">?.</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">requestRetry</span><span class="token punctuation">(</span>  res<span class="token operator">:</span> Response<span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> prefix<span class="token punctuation">,</span> retryConfig<span class="token punctuation">,</span> <span class="token operator">...</span>retryOption <span class="token punctuation">&#125;</span><span class="token operator">:</span> RequestOptions<span class="token punctuation">,</span> <span class="token comment">// 移除 prefix，避免 retry 的时候重复添加</span><span class="token punctuation">)</span><span class="token operator">:</span> Response <span class="token operator">|</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Response<span class="token operator">></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> retryCount <span class="token operator">=</span> retryConfig<span class="token operator">?.</span>retryCount <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>requestHelper<span class="token punctuation">.</span><span class="token function">shouldRetry</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> retryCount<span class="token punctuation">,</span> retryConfig<span class="token operator">?.</span>retryCondition<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=></span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>          <span class="token function">umiRequest</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>pathname<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token operator">...</span>retryOption<span class="token punctuation">,</span>            retryConfig<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span><span class="token punctuation">(</span>retryConfig <span class="token operator">??</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> retryCount<span class="token operator">:</span> retryCount <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">as</span> RequestOptions<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token constant">TIMEOUT_RETRY_DELAY</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> request<span class="token operator">:</span> CRequestConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// errorHandler:</span>  <span class="token comment">// requestInterceptors: []</span>  responseInterceptors<span class="token operator">:</span> <span class="token punctuation">[</span>requestRetry<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 网络请求 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Axios </tag>
            
            <tag> UmiRequest </tag>
            
            <tag> BlobError </tag>
            
            <tag> RequestRetry </tag>
            
            <tag> Interceptors </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Ts-Decorator 类组件装饰器使用</title>
      <link href="/share/vue-ts-decorator/"/>
      <url>/share/vue-ts-decorator/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>目前 <code>vue</code> 组件的主流开发风格是基于 <code>ts setup</code> 语法的 <code>composition api</code>，<code>composition api</code> 相对于 <code>options api</code> 来说，更加灵活，代码更加简洁。</p><p>由于历史原因，仍有很多项目技术栈使用的是 <code>vue2</code>。本篇文章也旨在介绍 <code>vue-ts-decorator</code> 类组件装饰器的使用和优化。</p><span id="more"></span><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p><code>vue-ts</code> 项目构建就不做细讲了，根据 <code>vue-cli</code> 提供的选项选择并创建项目，只需要注意在选择 <code>Use class-style component syntax? (Y/n)</code> 选择 <code>Y</code> 即可。</p><p>又或者如果项目是之前并没有使用 <code>decorator</code> 的老项目，可以比对和上面脚手架创建的项目的 <code>package</code> 依赖，手动安装没有的包即可。</p><p>值得注意的库：</p><blockquote><p><code>vue-class-component</code> (类的装饰器)、 <code>vue-property-decorator</code> (类似 <code>Component Prop Emit...</code> 等装饰器从这里导出，是基于 <code>vue-class-component</code> 扩展的)、此外还有 <code>vuex-module-decorators</code> (可选择性安装使用的 <code>vuex</code> 库)</p></blockquote><p>目前仍在使用<code>decorator</code> 进行开发的大多是老项目，新项目可以尝试直接拥抱 <code>vue3-ts</code> 的 <code>setup</code>。</p><h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><p>在此之前，<code>.vue</code> 组件的常见写法是：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clickHandle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; msgSync &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">flag</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">msgSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">?</span> <span class="token string">'Hello Boy'</span> <span class="token operator">:</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">ss</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">clickHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>现在我们把它转为类组件实现：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clickHandle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; msgSync &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Component<span class="token punctuation">,</span> Vue <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-property-decorator'</span><span class="token punctuation">;</span>  @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>    <span class="token comment">// 可以传入其他的一些选项 ... 例如 computed/components...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">get</span> <span class="token function">msgSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">?</span> <span class="token string">'Hello Boy'</span> <span class="token operator">:</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果需要设置 set</span>    <span class="token comment">// public set msgSync(value: string) &#123;&#125;</span>    <span class="token keyword">public</span> <span class="token function">clickHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>不难发现两者的区别，<code>data</code> 对象的属性变成了类的属性，<code>ss</code> 变成了类的方法，<code>computed</code> 变成了 <code>get(set) function</code>。</p><p>当然除了 <code>class</code> 导致的一些变化外，在 <code>@Component</code> 中，可以传入以前选项式的其他 <code>options</code> 配置，例如组件名称、子组件注册，又或者需要使用 <code>vuex</code> 提供的一些 <code>map</code>方法时：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> mapState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Component<span class="token punctuation">,</span> Vue <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-property-decorator'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Children1 <span class="token keyword">from</span> <span class="token string">'@/components/Children1.vue'</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    Children1<span class="token punctuation">,</span>    <span class="token function-variable function">Children2</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/components/Children2.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token function-variable function">msg</span><span class="token operator">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>msg<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>常规用法和全部装饰器详见 <a href="https://github.com/kaorun343/vue-property-decorator">https://github.com/kaorun343/vue-property-decorator</a></p><p><del>很无语子…之前我在使用的时候，貌似并没有发现 <code>Ref 和 VModel</code> 的装饰器 🤐🤐🤐</del></p><p>官方文档其实已经把装饰器用法说的很详细了，我补充一些注意的点：</p><h4 id="类型为-Boolean-的-Prop"><a href="#类型为-Boolean-的-Prop" class="headerlink" title="类型为 Boolean 的 Prop"></a>类型为 <code>Boolean</code> 的 <code>Prop</code></h4><p>形如：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> checked<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在我们在使用装饰器的时候，由于 <code>ts</code> 的类型约束，即如上：<code>checked!: boolean</code>，很容易使我们忽略掉 <code>@Prop()</code> 自身需要的 <code>Type</code>，如果没有指定类型，那么在形如下面的方式传入时会导致不可预知的异常：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CustomComponent</span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CustomComponent</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 等价于 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CustomComponent</span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CustomComponent</span><span class="token punctuation">></span></span></code></pre><p>原因就是没有指定 <code>Prop</code> 的类型。能不能就像上面这种方式传入值呢？当然可以，但需要指定 <code>Prop</code> 类型，即：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> checked<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  <span class="token comment">// 或者</span>  <span class="token comment">// @Prop(&#123; type: Boolean &#125;) public readonly checked!: boolean;</span><span class="token punctuation">&#125;</span></code></pre><p>只有这样，才能拿到正确的 <code>Prop</code> 值，如下：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CustomComponent</span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CustomComponent</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 等价于 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CustomComponent</span> <span class="token attr-name">:checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CustomComponent</span><span class="token punctuation">></span></span></code></pre><blockquote><p>如果你在使用的时候，都是严格按照 <code>:checked=&quot;true&quot;</code> 这种方式传递，那么不写 Type 也不会影响</p></blockquote><h4 id="PropSync-和-ModelSync-的优势"><a href="#PropSync-和-ModelSync-的优势" class="headerlink" title="PropSync 和 ModelSync 的优势"></a><code>PropSync 和 ModelSync</code> 的优势</h4><p>在推出装饰器之前，如果需要对 <code>Prop</code> 的值进行修改，我们需要在每一次变更的时候 <code>emit</code> 一个事件，然后在父组件中修改：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    checked<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">changeChecked</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'changeChecked'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>针对这种需求，官方提供了 <code>.sync</code> 修饰符，即在传入 <code>prop</code> 的时候添加 <code>.sync</code> 修饰符，如下：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CustomComponent</span> <span class="token attr-name">:checked.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CustomComponent</span><span class="token punctuation">></span></span></code></pre><p>在组件中如果需要修改 <code>checked</code> 的值，只需要 <code>emit(&#39;update:&#39; + propName, value)</code> 即可，如下：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">&#123;</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">changeChecked</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'update:checked'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p>这样确实已经解决了父组件在收到事件过后不用再赋值的问题，但是 <code>PropSync 和 ModelSync</code> 的出现，还能继续省略优化我们的代码：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Vue<span class="token punctuation">,</span> Component<span class="token punctuation">,</span> ModelSync <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-property-decorator'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>    @<span class="token function">ModelSync</span><span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">,</span> <span class="token string">'input'</span><span class="token punctuation">)</span> <span class="token keyword">public</span> myValue<span class="token operator">!</span><span class="token operator">:</span> string<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>其父组件：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HelloWorld</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>你应该也发现了，<code>ModelSync PropSync</code> 的出现，让我们在子组件中可以直接修改 <code>Model 和 Prop</code> 而不需要再手动执行 <code>emit</code>：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">PropSync</span></span><span class="token punctuation">(</span><span class="token string">'checked'</span><span class="token punctuation">)</span> <span class="token keyword">public</span> myChecked<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">changeChecked</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 会同步修改父组件传入的 checked 等价 $emit('update:checked', val);</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>myChecked <span class="token operator">=</span> val<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="VModel-装饰器"><a href="#VModel-装饰器" class="headerlink" title="VModel 装饰器"></a><code>VModel</code> 装饰器</h4><p>和 <code>ModelSync</code> 装饰器作用差不大多，我理解下来其实就是<strong>省略了子组件添加计算属性作为 <code>VModel</code> 的过程</strong>，让我们得益于直接操作 <code>VModel</code> 传入的 <code>Prop</code>.</p><h4 id="Ref-装饰器"><a href="#Ref-装饰器" class="headerlink" title="Ref 装饰器"></a><code>Ref</code> 装饰器</h4><p>这个我之前使用的时候确实没有看到，应该是官方后面补充的，但这并不影响它的实用性。下面我就沿用上面的一个例子来说明：</p><p><code>HelloWorld</code> 组件实现：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">PropSync</span></span><span class="token punctuation">(</span><span class="token string">'checked'</span><span class="token punctuation">)</span> <span class="token keyword">public</span> myChecked<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> message <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">changeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">'hello vue'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">changeChecked</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 会同步修改父组件传入的 checked 等价 $emit('update:checked', val);</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>myChecked <span class="token operator">=</span> val<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在我们需要操作子组件，调用子组件的 <code>API</code>， 或者获取子组件的属性和方法的时候，我们可以为组件绑定 <code>ref</code> 属性，如下：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HelloWorld</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>HelloWorld</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Vue<span class="token punctuation">,</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-property-decorator'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'HelloWorld.vue'</span><span class="token punctuation">;</span>  @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Parent'</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      HelloWorld<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token function">setHelloWorldMessage</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">v</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>hello<span class="token punctuation">.</span><span class="token function">changeMessage</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>但通常，我们需要为 <code>hello</code> 指定类型，否则在 <code>ts</code> 环境下会报错：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">public</span> <span class="token function">setHelloWorldMessage</span><span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>hello <span class="token keyword">as</span> HelloWorld<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">changeMessage</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>此时，我们可以使用 <code>Ref</code> 装饰器来指定类型，避免过多的 <code>as</code> 语句：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Vue<span class="token punctuation">,</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-property-decorator'</span><span class="token punctuation">;</span><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'HelloWorld.vue'</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Parent'</span><span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    HelloWorld<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 当然你也可以设置 ref 别名</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Ref</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">readonly</span> hello<span class="token operator">!</span><span class="token operator">:</span> HelloWorld<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">setHelloWorldMessage</span><span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hello<span class="token punctuation">.</span><span class="token function">changeMessage</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Mixins-不推荐"><a href="#Mixins-不推荐" class="headerlink" title="Mixins 不推荐"></a><code>Mixins</code> 不推荐</h4><p><code>Mixins</code> 由于使用较少和局限性，<del>更不推荐使用<code>mixins</code>的功能</del>：</p><p><code>建议更多地使用组件组合、插槽和Vuex等更可控的方式来处理代码复用和共享状态.</code></p><blockquote><p>缺陷：命名冲突、隐式依赖、代码复杂性增加、耦合度增加、维护困难、不利于组件重用、混合的顺序问题….</p></blockquote><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>还有<code>Prop/Watch/Emit</code>装饰器都很适用， 除此之外剩下的几个装饰器也都有各自的使用场景，由于没有什么比较凸出的优化点，就不一一阐述了，详细可看官方文档.</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> decorator </tag>
            
            <tag> 类装饰器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Directive 指令的自定义封装案例</title>
      <link href="/share/vue-directive/"/>
      <url>/share/vue-directive/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="了解更多"><a href="#了解更多" class="headerlink" title="了解更多"></a>了解更多</h3><p>一个自定义指令由一个包含类似组件生命周期钩子的对象来定义.</p><blockquote><p><a href="https://vuejs.org/guide/reusability/custom-directives.html">自定义指令： https://vuejs.org/guide/reusability/custom-directives.html</a></p></blockquote><p>下面是在 <code>vue</code> 中可能用到的一些自定义指令实现：</p><span id="more"></span><h3 id="容器遮罩"><a href="#容器遮罩" class="headerlink" title="容器遮罩"></a>容器遮罩</h3><p>部分组件场景需要给元素添加遮罩层，禁止用户点击。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'mask'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">bind</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> maskDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> position <span class="token operator">=</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">.</span>position<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token string">'relative, absolute'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">'relative'</span><span class="token punctuation">;</span> <span class="token comment">// 给父元素设置定位</span>    <span class="token punctuation">&#125;</span>    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>maskDiv<span class="token punctuation">.</span>style<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      height<span class="token operator">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span>      width<span class="token operator">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span>      position<span class="token operator">:</span> <span class="token string">'absolute'</span><span class="token punctuation">,</span>      top<span class="token operator">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span>      left<span class="token operator">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span>      background<span class="token operator">:</span> <span class="token string">'transparent'</span><span class="token punctuation">,</span>      zIndex<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>maskDiv<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="按钮权限"><a href="#按钮权限" class="headerlink" title="按钮权限"></a>按钮权限</h3><p>在实际项目中，有很多根据用户权限进行展示的操作按钮，比如某些按钮只有管理员才能操作，那么我们可以通过自定义指令来实现。</p><p>在这个指令中，接受的参数就是当前按钮的所需权限和用户已有权限(也可直接从 store 中获取用户已有权限)，如果用户权限中包含按钮所需权限，则显示按钮，否则不显示。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'permissions'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">bind</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> banding<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> permission<span class="token punctuation">,</span> userPermission <span class="token punctuation">&#125;</span> <span class="token operator">=</span> banding<span class="token punctuation">.</span>value <span class="token keyword">as</span> <span class="token punctuation">&#123;</span>      permission<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>      userPermission<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 实际需要根据 permission 的结构和类型进行判断处理，我这里示例给出的 string</span>    <span class="token keyword">const</span> isPermission <span class="token operator">=</span> userPermission<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>permission<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isPermission<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> Vue<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      el<span class="token punctuation">.</span>parentNode<span class="token operator">?.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="空状态文字显示"><a href="#空状态文字显示" class="headerlink" title="空状态文字显示"></a>空状态文字显示</h3><p>部分组件容器在没有获取到值，或者没有子组件的时候，需要向用户展示一个空状态的文字，那么我们可以通过自定义指令来实现。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> CSSProperties <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue/types/jsx'</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Empty</span> <span class="token punctuation">&#123;</span>  content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  visible<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">createEmptySpanCtx</span><span class="token punctuation">(</span>content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> className<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> emptyEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  emptyEl<span class="token punctuation">.</span>innerText <span class="token operator">=</span> content<span class="token punctuation">;</span>  emptyEl<span class="token punctuation">.</span>className <span class="token operator">=</span> className<span class="token punctuation">;</span>  Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>emptyEl<span class="token punctuation">.</span>style<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    position<span class="token operator">:</span> <span class="token string">'absolute'</span><span class="token punctuation">,</span>    top<span class="token operator">:</span> <span class="token string">'50%'</span><span class="token punctuation">,</span>    left<span class="token operator">:</span> <span class="token string">'50%'</span><span class="token punctuation">,</span>    transform<span class="token operator">:</span> <span class="token string">'translate(-50%, -50%)'</span><span class="token punctuation">,</span>    fontSize<span class="token operator">:</span> <span class="token string">'14px'</span><span class="token punctuation">,</span>    color<span class="token operator">:</span> <span class="token string">'#909399'</span><span class="token punctuation">,</span>    background<span class="token operator">:</span> <span class="token string">'transparent'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">as</span> CSSProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> emptyEl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">triggerEmptyEl</span><span class="token punctuation">(</span>containerEl<span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> bindValue<span class="token operator">:</span> Empty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> emptyClassName <span class="token operator">=</span> <span class="token string">'empty-span'</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> emptyEls <span class="token operator">=</span> containerEl<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>emptyClassName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>bindValue<span class="token punctuation">.</span>visible <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>emptyEls<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> emptyEl <span class="token operator">=</span> <span class="token function">createEmptySpanCtx</span><span class="token punctuation">(</span>bindValue<span class="token punctuation">.</span>content<span class="token punctuation">,</span> emptyClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>    containerEl<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>emptyEl<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bindValue<span class="token punctuation">.</span>visible <span class="token operator">&amp;&amp;</span> emptyEls<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    emptyEls<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      containerEl<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'empty'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">bind</span><span class="token punctuation">(</span>el<span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> binding<span class="token operator">:</span> <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> Empty <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> position <span class="token operator">=</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">.</span>position<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token string">'relative, absolute'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">'relative'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">triggerEmptyEl</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">update</span><span class="token punctuation">(</span>el<span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> binding<span class="token operator">:</span> <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> Empty <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">triggerEmptyEl</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 指令 </tag>
            
            <tag> directive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSE 和 WebSocket 通信以及它们之间的区别</title>
      <link href="/share/sse-websocket/"/>
      <url>/share/sse-websocket/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="What？"><a href="#What？" class="headerlink" title="What？"></a><code>What</code>？</h3><p><code>SSE</code>又称<code>Server-Sent-Events</code>，是一种基于 <code>HTTP</code> 的单向通信协议，允许服务器向客户端发送异步事件流。它是 <code>HTML5</code> 规范的一部分，通过常规的 <code>HTTP</code> 连接（使用”长轮询”技术）从服务器向客户端推送数据。<code>SSE</code> 不需要额外的协议切换，因为它构建在现有的 <code>HTTP</code> 协议之上。</p><p><code>WebSocket</code> 是一种全双工通信协议，允许在单个 <code>TCP</code> 连接上进行双向通信。它提供了一个持久化的连接，可以在客户端和服务器之间实时地双向传输数据，而不需要像 <code>HTTP</code> 请求那样频繁地创建和关闭连接。</p><span id="more"></span><h3 id="SSE"><a href="#SSE" class="headerlink" title="SSE"></a><code>SSE</code></h3><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><ul><li><p>客户端通过简单的 <code>EventSource API</code> 连接到服务器。</p></li><li><p>一旦连接建立，服务器可以在任何时候异步地向客户端发送事件数据。</p></li><li><p>客户端通过监听 <code>onmessage</code> 事件来接收来自服务器的消息。</p></li></ul><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li><p>简单易用，不需要特殊的协议或库。</p></li><li><p>服务器向客户端推送数据时比传统轮询（<code>polling</code>）更高效。</p></li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li><p>只能由服务器单向向客户端发送数据，客户端无法直接向服务器发送消息。</p></li><li><p>支持度较低：虽然主流浏览器都支持 <code>SSE</code>，但在一些旧版本或特定情况下可能不兼容。</p></li></ul><h4 id="API"><a href="#API" class="headerlink" title="API"></a><code>API</code></h4><h5 id="EventSource-实例对象"><a href="#EventSource-实例对象" class="headerlink" title="EventSource 实例对象"></a><code>EventSource</code> 实例对象</h5><p><code>client</code> 生成实例对象，建立 <code>SSE</code> 连接</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> eventSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span><span class="token string">'https://example.com/events'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 表示当前实例是否开启 CORS 的 withCredentials</span><span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> withCredentials<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="EventSource-实例对象属性"><a href="#EventSource-实例对象属性" class="headerlink" title="EventSource 实例对象属性"></a><code>EventSource</code> 实例对象属性</h5><h6 id="readyState"><a href="#readyState" class="headerlink" title="readyState"></a><code>readyState</code></h6><p>表明连接的当前状态。该属性只读，可以取以下值：</p><ul><li><p><code>0</code>：相当于常量 <code>EventSource.CONNECTING</code>，表示连接还未建立，或者断线正在重连。</p></li><li><p><code>1</code>：相当于常量 <code>EventSource.OPEN</code>，表示连接已经建立，可以接受数据。</p></li><li><p><code>2</code>：相当于常量 <code>EventSource.CLOSED</code>，表示连接已断，且不会重连。</p></li></ul><h6 id="onopen"><a href="#onopen" class="headerlink" title="onopen"></a><code>onopen</code></h6><p>连接一旦建立，就会触发 <code>open</code> 事件，可以在 <code>onopen</code> 属性定义回调函数。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript">source<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 另一种写法</span>source<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="onerror"><a href="#onerror" class="headerlink" title="onerror"></a><code>onerror</code></h6><p>如果发生通信错误（比如连接中断），就会触发 <code>error</code> 事件，可以在 <code>onerror</code> 属性定义回调函数。用法同上。</p><h6 id="onmessage"><a href="#onmessage" class="headerlink" title="onmessage"></a><code>onmessage</code></h6><p>客户端收到服务器发来的数据，就会触发 <code>message</code> 事件，可以在 <code>onmessage</code> 属性定义回调函数。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript">source<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token keyword">const</span> origin <span class="token operator">=</span> event<span class="token punctuation">.</span>origin<span class="token punctuation">;</span>  <span class="token keyword">const</span> lastEventId <span class="token operator">=</span> event<span class="token punctuation">.</span>lastEventId<span class="token punctuation">;</span>  <span class="token comment">// handle message</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 另一种写法</span>source<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>  <span class="token string">'message'</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token keyword">const</span> origin <span class="token operator">=</span> event<span class="token punctuation">.</span>origin<span class="token punctuation">;</span>    <span class="token keyword">const</span> lastEventId <span class="token operator">=</span> event<span class="token punctuation">.</span>lastEventId<span class="token punctuation">;</span>    <span class="token comment">// handle message</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="EventSource-实例对象方法-close"><a href="#EventSource-实例对象方法-close" class="headerlink" title="EventSource 实例对象方法 close"></a><code>EventSource</code> 实例对象方法 <code>close</code></h5><p><code>close</code> 方法用于关闭 <code>SSE</code> 连接。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript">source<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>除此之外，还支持发送自定义事件…</p><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a><code>WebSocket</code></h3><h4 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h4><ul><li><p>客户端通过 <code>WebSocket API</code> 与服务器建立 <code>WebSocket</code> 连接。</p></li><li><p>一旦连接建立，客户端和服务器可以在任何时候通过发送消息进行双向通信。</p></li><li><p>连接保持打开状态，直到其中一方显式关闭连接。</p></li></ul><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li><p>实时性和效率高：由于 <code>WebSocket</code> 建立一次连接后就保持打开状态，可以实时地在客户端和服务器之间传递数据，减少了额外的连接建立和 <code>HTTP</code> 头信息的开销。</p></li><li><p>双向通信：服务器和客户端之间可以实现双向实时通信。</p></li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li><p>实现复杂一些：相对于 <code>SSE，WebSocket</code> 的实现可能需要一些额外的编程工作。</p></li><li><p>兼容性问题：虽然现代浏览器普遍支持 <code>WebSocket</code>，但在一些特殊情况下，可能需要处理一些兼容性问题。</p></li></ul><h4 id="API-1"><a href="#API-1" class="headerlink" title="API"></a><code>API</code></h4><h5 id="WebSocket-实例对象"><a href="#WebSocket-实例对象" class="headerlink" title="WebSocket 实例对象"></a><code>WebSocket</code> 实例对象</h5><p><code>WebSocket</code> 对象作为一个构造函数，用于新建 <code>WebSocket</code> 实例。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 执行语句之后，客户端就会与服务器进行连接。</span><span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://localhost:8080'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id=""><a href="#" class="headerlink" title=""></a></h5><p>属性</p><h6 id="readyState-1"><a href="#readyState-1" class="headerlink" title="readyState"></a><code>readyState</code></h6><p>属性返回实例对象的当前状态，共有四种。</p><ul><li><p><code>0</code>：<code>CONNECTING</code>，表示正在连接。</p></li><li><p><code>1</code>：<code>OPEN</code>，表示连接成功，可以通信了。</p></li><li><p><code>2</code>：<code>CLOSING</code>，表示连接正在关闭。</p></li><li><p><code>3</code>：<code>CLOSED</code>，表示连接已经关闭，或者打开连接失败。</p></li></ul><h6 id="onopen-和-onclose、-onerror"><a href="#onopen-和-onclose、-onerror" class="headerlink" title="onopen 和 onclose、 onerror"></a><code>onopen</code> 和 <code>onclose</code>、 <code>onerror</code></h6><p>指定连接成功后和连接关闭后、报错时的回调函数。用法同上</p><h6 id="onmessage-1"><a href="#onmessage-1" class="headerlink" title="onmessage"></a><code>onmessage</code></h6><p>用于指定收到服务器数据后的回调函数</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript">ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token comment">// 处理数据</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>ws<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token comment">// 处理数据</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>服务器数据可能是文本，也可能是二进制数据（<code>blob</code> 对象或 <code>arraybuffer</code> 对象）</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 收到的是 blob 数据</span>ws<span class="token punctuation">.</span>binaryType <span class="token operator">=</span> <span class="token string">'blob'</span><span class="token punctuation">;</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 收到的是 ArrayBuffer 数据</span>ws<span class="token punctuation">.</span>binaryType <span class="token operator">=</span> <span class="token string">'arraybuffer'</span><span class="token punctuation">;</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>byteLength<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h6 id="bufferedAmount"><a href="#bufferedAmount" class="headerlink" title="bufferedAmount"></a><code>bufferedAmount</code></h6><p>表示还有多少字节的二进制数据没有发送出去。它可以用来判断发送是否结束。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>socket<span class="token punctuation">.</span>bufferedAmount <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 发送完毕</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 发送还没结束</span><span class="token punctuation">&#125;</span></code></pre><h6 id="WebSocket-实例对象方法-send"><a href="#WebSocket-实例对象方法-send" class="headerlink" title="WebSocket 实例对象方法 send"></a><code>WebSocket</code> 实例对象方法 <code>send</code></h6><p>用于向服务器发送数据。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 发送文本</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'your message'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 发送 Blob</span><span class="token keyword">const</span> file <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input[type="file"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 发送 ArrayBuffer</span><span class="token keyword">const</span> img <span class="token operator">=</span> canvas_context<span class="token punctuation">.</span><span class="token function">getImageData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> binary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> img<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  binary<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> img<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>binary<span class="token punctuation">.</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="SSE-和-WebSocket-的区别"><a href="#SSE-和-WebSocket-的区别" class="headerlink" title="SSE 和 WebSocket 的区别?"></a><code>SSE</code> 和 <code>WebSocket</code> 的区别?</h3><ul><li><p><code>SSE</code> 使用 <code>HTTP</code> 协议，现有的服务器软件都支持。<code>WebSocket</code> 是一个独立协议。</p></li><li><p><code>SSE</code> 是单工通信，只能服务器向浏览器推送，<code>WebSocket</code> 是双向通信。</p></li><li><p><code>SSE</code> 属于轻量级，使用简单；<code>WebSocket</code> 协议相对复杂。</p></li><li><p><code>SSE</code> 默认支持断线重连，<code>WebSocket</code> 需要自己实现。</p></li><li><p><code>SSE</code> 一般只用来传送文本，二进制数据需要编码后传送，<code>WebSocket</code> 默认支持传送二进制数据。</p></li><li><p><code>SSE</code> 支持自定义发送的消息类型。</p></li></ul><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><h4 id="SSE-优化登录状态心跳检测"><a href="#SSE-优化登录状态心跳检测" class="headerlink" title="SSE 优化登录状态心跳检测"></a><code>SSE</code> 优化登录状态心跳检测</h4><p><code>client</code> 实现：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">checkingLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  sseChecker<span class="token punctuation">.</span>value<span class="token operator">?.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sseChecker<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/authorize/session-auth-status</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sseChecker<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">message</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ev<span class="token operator">:</span> MessageEvent<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>ev<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token keyword">as</span> SessionStatusResponse<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Detected session token expired'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      sseChecker<span class="token punctuation">.</span>value<span class="token operator">?.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      unauthorized<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> MessageBox<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'当前账号已在别处登录，是否重新登录？'</span><span class="token punctuation">,</span> <span class="token string">'提示'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        showClose<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        showCancelButton<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        cancelButtonText<span class="token operator">:</span> <span class="token string">'退出'</span><span class="token punctuation">,</span>        type<span class="token operator">:</span> <span class="token string">'warning'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'/authorize/logout'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>基于 <code>nestJs</code> 的 <code>server</code> 实现：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> Axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Observable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Sse <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Sse</span></span><span class="token punctuation">(</span><span class="token string">'session-auth-status'</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token function">checkSessionTokenStatus</span><span class="token punctuation">(</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Req</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> req<span class="token operator">:</span> Request<span class="token punctuation">,</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Res</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> res<span class="token operator">:</span> Response<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>Partial<span class="token operator">&lt;</span>MessageEvent<span class="token operator">>></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 出于http连接问题， sse连接在5分钟后自动断开</span>  <span class="token keyword">const</span> maxCheckDuration <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">// 每两秒检查一次</span>  <span class="token keyword">const</span> checkInterval <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> checkedCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> needDispose <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Observable<span class="token operator">&lt;</span>Partial<span class="token operator">&lt;</span>MessageEvent<span class="token operator">>></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">doCheck</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>needDispose<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          checkedCount<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            req<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getAccessToken</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnauthorizedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">AuthorizeService</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMeInfo</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          sub<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>              message<span class="token operator">:</span> <span class="token string">'OK'</span><span class="token punctuation">,</span>              status<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>              payload<span class="token operator">:</span> res<span class="token punctuation">.</span>data<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 控制前端断开后重连间隔时机</span>            retry<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">await</span> <span class="token function">delayMs</span><span class="token punctuation">(</span>checkInterval<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">'failed to do check'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Axios<span class="token punctuation">.</span><span class="token function">isAxiosError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          message <span class="token operator">=</span> <span class="token string">'Token is expired'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token keyword">instanceof</span> <span class="token class-name">UnauthorizedException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          message <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Got empty token</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        sub<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            message<span class="token punctuation">,</span>            status<span class="token operator">:</span> <span class="token number">401</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          retry<span class="token operator">:</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">,</span><span class="token operator">~</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'failed to do check %o'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>        needDispose <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>needDispose <span class="token operator">||</span> checkedCount <span class="token operator">*</span> checkInterval <span class="token operator">>=</span> maxCheckDuration<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          sub<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">doCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      needDispose <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h3><h4 id="连接数限制"><a href="#连接数限制" class="headerlink" title="连接数限制"></a>连接数限制</h4><p><code>SSE</code> 基于常规的 <code>HTTP</code> 连接，受制于浏览器对同一域名下的并发连接数限制，通常为 6-8。<strong>错误的使用 sse，不及时关闭造成连接数超出限制时，浏览器页面会卡顿异常</strong></p><p><code>WebSocket</code> 建立持久化的全双工连接，通常不受 HTTP 连接数限制，但服务器和操作系统可能有自己的并发连接数限制。</p><blockquote><p>更详细的 <code>API</code> 使用教程参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventSource">EventSource</a> 、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket">WebSocket</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 网络请求 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络通信 </tag>
            
            <tag> SSE </tag>
            
            <tag> WebSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成长：一次自我救赎</title>
      <link href="/diary/self-redemption/"/>
      <url>/diary/self-redemption/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>感性的人，往往才是走不出来的那个。</p></blockquote><p><code>很遗憾，从认识到结束，我们只用了不到半年时间。也很感激，你让我真正的反思了如何去爱一个人。</code></p><span id="more"></span><h3 id="过往总结"><a href="#过往总结" class="headerlink" title="过往总结"></a>过往总结</h3><p>从最初相识到热恋再到厌烦分手，来得快去的也快。</p><p>无数个夜晚，我都在问自己，我到底有被深爱过吗？我有深爱过她吗？</p><p>为了追寻这个答案，我从翻阅聊天记录，到走遍共同经历的地方场景，回忆着我们的过往。</p><p>从聊天最开始的小心翼翼，再到彼此暧昧心动，彼此许下承诺。</p><p>再到牵手成功，对见面的期待，对交往过程中的仪式感重视。</p><p>最后是分别时的恋恋不舍，仿佛都印证着彼此的真心，彼此对爱的真诚。</p><p>随着时间流逝，是新鲜感淡去吗？还是两个人终于有了第一次矛盾了？</p><p>感觉从那时候开始，就埋下了分离的种子，我也没想到我们的关系是如此的不堪一击。</p><p>我高估了你和我走下去的决心，你也低估了我在这段感情中的投入。</p><p>也正是闹过矛盾那段时间，我见过了她的亲人，我小心翼翼的面对，只想能留下好的印象，想让以后正式见家长能更加顺利。</p><hr><p>这里我不得不说一声我的情商，忽然不在线了，第二次见面的时候没有处理好。</p><p>这应该也算是让她产生压力的一个原因吧。</p><p>从后面一次偶然机会，她家里人给她介绍对象就可以看出来，其实应该是不满意了。</p><p>我不知道该怎么补救，我和她从那时候开始，感觉到她已经不怎么在这段感情中投入了。</p><p>也是从那段时间开始，我感受到了她若有若无的对我不满了，同时也不再将就我的一些毛病了。</p><p>后面刚好也是那段时间开始，我俩开始同居了，每天柴米油盐过着平淡的生活。</p><p>现在回想，我也是在那段时间开始变得有恃无恐了，没给她该有的惊喜。</p><p>节日没有给到她该有的礼物，虽然提前有送，但并没有说明是节日礼物。</p><p>付出是双向的，从那以后，她也没有给过我任何东西，在交往中她也会经常表现出厌烦的情绪，甚至我对她也是。</p><p>也怪我，没有即时的捕捉到这份感情危机，没能即时的补救。</p><p>我天真的以为，我和她的感情慢慢的变淡是进入平淡期了。</p><hr><p>后面的一次导火索，我们彻底闹掰了。</p><p>在闹矛盾之后，我一直在尝试着道歉挽回，放下自尊去讨好，可是反馈并不是很好。</p><p>她和别人打游戏到深夜，我不做过多的评价，有可能是她想放下，痛苦失眠，所以找人打游戏转移注意力也说不定。</p><p>从她离开的决心，对我的厌烦冷漠，我其实也能想到，她真的是被我伤透心了。</p><hr><p>卑微挽回那段时间，我甚至差点也以为我是不甘心在作祟，不甘心失去？不甘心自己的感情投入？还是害怕单身孤独？</p><p>不止我自己在追寻这个答案，同时这也是过来人问我的问题。</p><p>所以我开始问自己，我真的喜欢吗？还是说真的是爱她吗？</p><p>直到从她同意我和好的那天开始，我好像慢慢找到了答案。</p><p>我会因为和好了而开心高兴很久，并不会因为她的同意和好而突然的就乏味。</p><p>我会因为她难受而难过，我会因为她开心而高兴，哪怕是目前已经分开了。</p><p>还是会心甘情愿的付出，这应该算是爱吧？</p><hr><p>我听过一个教授关于喜欢和爱的定义：爱是排她性和共享性。</p><p>排她就是和她相处的时候不喜欢有别的朋友掺杂进来，比如吃饭？玩耍？</p><p>共享就是在最黑暗和最孤独的时候，我第一个想到的人，就是她。我看到美景第一时间想到的也是和她分享。</p><p>喜欢是占有，爱是成就，我想最开始我应该是喜欢吧，占有欲强，爱吃醋，喜欢到极致了。</p><p>失去后才懂得珍惜，才懂得她对我的好，虽然我同样的付出了真心，但是最后那段日子，我确实是没照顾好她。</p><p>现在我对她的感觉更多的是爱吧，既然不能在一起了，我想的是希望她以后变得更好，更优秀，可以幸福。</p><p>我甚至问过自己：假如哪天她生重病了，需要我花费所有积蓄去医治，我应该不会犹豫吧。</p><p>我不在意她的外表变成什么样，不在意她的性格，甚至不在意她曾经对我的<code>pua</code>的行为。</p><p>尽管不断地警醒自己，避免以后再犯同样的错，现在想起来，心还是会抽抽的疼…</p><hr><p>我不知道怎么处理这段关系了，也正如她不知道怎么回应我一样，她也不知道怎么面对我了。</p><p>我的视角下，她如此冷漠无情，对我甚至是厌烦，但是她没有拉黑删除，也没有直接回绝我。</p><p>我想她应该是被我伤得太深，纠缠的太烦导致的吧…</p><p>也如同后面这段时间她感受不到爱了一样，对我甚至是无感了。</p><p>我好像有些失败，真心对待的一段感情就这样搞砸了。</p><p>有些以自我为中心，没有弄清楚她想要的爱情是怎样的了，一直都是按照我的模式去经营的这段感情。</p><hr><h3 id="我的视角"><a href="#我的视角" class="headerlink" title="我的视角"></a>我的视角</h3><p>我能够感受到她对我的真心，她一开始的两个月，其实都是全身心的投入到了这段感情里。</p><p>她爱我爱的真切，我回应也很热烈。</p><p>后面两个人因为矛盾和纠纷，让我们的爱意被消磨了。</p><p>也正是那段时间的平淡相处，生活缺乏惊喜，一度让她认为我们是在搭伙过日子。</p><p>然后我一系列的没有达到他的心里预期，让她产生失望的情绪。</p><p>各种压力下，让她想要抽离这段感情了。</p><p>她主动抽离的时候，又被我各种挽留各种小作文，上门找她，她心里虽然会烦，但应该是能够感受得到我是在意她的吧。</p><p>后面就是她陷入纠结的情绪，想和继续我在一起，又不想轻易原谅，又各种压力下想离开？</p><p>也就是她想静静的那段时间了，那段时间我一直在挽回，一直在讨好，送礼物？上门找她？好像效果都不怎么好？</p><p>换做是我，应该也是不想被打扰然后很烦吧？</p><hr><p>然后就是短暂的和好了，感觉她没有做好继续的准备？总之感觉两个人心里都堵着一股气没排出去。</p><p>再之后不知道是她真的觉得没什么？还是有意的预谋？还是我真的误会她了，那天因为我自认为的第三者，我感觉被无缝衔接了，一气之下提了分手。</p><p>再然后，我认真的考虑了她的品性和过往相处给我的感觉，我觉得还是我误会她了，我往好的方向想，我也还是很爱她，然后我开始了我的纠缠挽回之路。</p><p>经过了没食欲日夜难寐的时光，我接受了分手的事实，差点人送医院去了，我也慢慢情绪稳定了，她也会慢慢的和我说话了，尽管还是忽冷忽热的。</p><p>再后面一次偶然的机会下复合了，是我主动提的，她犹犹豫豫的同意了，也就是说，她其实还没考虑好，又或者突然间被我感动到了，再或者只是给我一个表现的机会。</p><p>后面她连着一周换了两次情侣头像，我不清楚她是一个人用还是和别人用，我也没有问，我想万一是她考察我的态度呢？</p><p>一直持续了十多天，因为是我的主动卑微挽回，造就了我的低位，她开始变得无所谓了。自从和好后晚上也不会和我视频和语音了，也不会和我分享日常，回消息也很敷衍冷淡。</p><p>我接受不了这种方式的和好，我很难受，但又不敢太过分主动，每次表现的过于主动她就烦，我已经条件反射的不敢违背她的意愿了，我很压抑，这种对我来说像是施舍的爱。</p><p>刚好有天晚上她说鞋穿着脚痛，我给她送她的运动鞋上门找她了。但是没有给她回微信消息，我想给她一个惊喜。</p><p>我没想到，没有想象中的她被感动的画面，我想试着和她再沟通沟通，她拒绝了，我又不甘心我们就这样彼此消耗感情，就又给她打微信电话了，她更加的厌烦了，对我说了些难听的话。</p><p>然后就是我受不了的情况下又说出祝她幸福的话，说给她寄了在我这的所有东西。<del>既然舍不得为什么又要说这些气话呢</del></p><p>好朋友处于关心问我，得知我分手了还在纠缠，叫我放弃，可只有我自己知道她在我心里的分量，早就和家人没啥区别了。</p><p>一切的一切就这样发生着，现在也就联系方式还保存着，她也不再回复我的任何消息了，两个人就像是最熟悉的陌生人。</p><p>我现在在她眼里应该是毫无吸引力了吧，有的话可能也只是剩下的一点点曾经在一起过的留恋。</p><h3 id="将心比心"><a href="#将心比心" class="headerlink" title="将心比心"></a>将心比心</h3><p>做任何事情，都应该谋定而后动，既然分手是她的选择，那就一定有她的道理。</p><p>可能是我无止境的纠缠一步步推远了她，她也还保留有爱意。</p><p>只不过她觉得和我相处太累了，因为我的一些小作文，一些有的没的，让她觉得很幼稚。</p><p>复合没有这么简单，既然是我求回来的，那她就自然心里还是会有芥蒂。</p><p>可能也曾后悔，但基于答应了我和好，所以选择走一步看一步，看我后续的表现再决定继不继续。</p><p>这个期间她也曾给我过机会，因为还有些芥蒂，所以冷淡，但因为我急切的想要关系回到最初，被我搞砸了。</p><p>所以她选择了逃避，选择了避而不见，选择让我自己徒劳而放弃，选择漠视。</p><p>她现在没有拉黑删除，是留了一个窗口，给自己，给对方一个机会，也算是内心深处保留的一丝期待。</p><p>她只是累了，负面情绪压抑太久了，我应该给她时间和空间，让她淡化这段时间我纠缠的负面印象，自我愈合。</p><p>也算是失望了吧，对我的不成熟，对我的无奈，所以才选择现在这样。</p><h3 id="我目前应该怎么做"><a href="#我目前应该怎么做" class="headerlink" title="我目前应该怎么做"></a>我目前应该怎么做</h3><p>不要再小作文了，真的只会增加她的压力。<del>一次两次还好，她已经明白了我的心意，次数多了只会让她觉得我反复无常，情绪不稳定。</del></p><p>暂时性的退去，给她时间和空间抵消对我的负面情绪，不再增加压力。</p><p>做回自己，积极正能量，重新构建吸引力，让她看到我的变化。<del>整天围着她转，真的会让对方窒息，消极的情绪真的可以传染给别人</del></p><p>不要纠缠也不要反复性的提感情话题和保证承诺，爱是需要体会的，而不是靠嘴。<del>反复的提真的只会让人觉得你只会画饼，也就嘴上说说</del></p><p>不要总活在过去，不用纠结曾经犯得错了。</p><p>少说多做，放低期待，期待越高没有满足越容易失望然后冲动。<del>和她情感同频吧，强扭的瓜也不甜</del></p><p>不主动提感情的事，她想明白了记起我的好了自然会主动找我。<del>她想通了自然会找我，或是删除拉黑好友，或是做普通朋友，或是和好如初</del></p><p>爱她就该相信她，她还爱我或者自爱短期内也就会自动保持距离，从现在做起，转移注意力，不要去分析她的朋友圈，不用偷看她的游戏日常。<del>这些是控制和占有欲强的表现，也是患得患失不信任的猜测的表现，她有自己的私人空间，这也是她的自由</del></p><p>吸收教训，提升自己的恋商，明白自己这段感情的问题和不足，潜移默化的改正，并有自己的原则底线。</p><p>要有她可能会走，我会失去她的心理准备，不强人所难，将心比心。<del>尽管我始至终我都没想过放弃</del></p><p>这个期间，她有选择更好的人的权力，如果有别的人追她她同意了这是她的自由。<del>但会把爱彻底的留在心底，不会再轻易去爱了</del></p><p><strong>先学会爱自己，再去爱别人。</strong></p><h3 id="成长和反省"><a href="#成长和反省" class="headerlink" title="成长和反省"></a>成长和反省</h3><blockquote><p><strong>一段感情的崩坏绝非一朝一夕，一段感情的经营更需要正确的恋爱观维持。</strong></p></blockquote><p>及时响应情感诉求，对方很累很疲惫，学会安慰和消除疲惫：比如相拥相依，告诉她我是她的依靠，一起去玩散散心？</p><p>在一起的日子要制造惊喜和情绪价值，让生活过的有期待。<del>惊喜不一定是礼物，可以是一起做某件事？</del></p><p>分开的日子要有自己独处的空间，不过分干涉，不猜忌。<del>既然在一起了爱着对方，就应该相信对方的人品</del></p><p>想她就打视频打语音，聊天注意质量，可以是分享日常。<del>不克制不压抑</del></p><p>学会倾听需求，对方提出的想法，一定要落实。<del>比如一起出门的时候要有主见，要有计划</del></p><p>尊重对方，信任对方，给对方安全感。<del>任何不信任的行为都会无形中伤害到爱你的人</del></p><p>付出是双向的，可以是时间也可以是金钱也可以是情绪。<del>一个人可以走的很快，两个人才能走的更远</del></p><p>恋爱是双向考察的过程，爱是个过程，而不是结果，要学会享受和呵护爱。<del>没有人会在原地等你改变，相爱可以分手，结婚也能离婚，没有人是非你不可</del></p><p>该有的仪式感不能忘记，该有的节日惊喜要准备好。<del>仪式感是相互的，也是对对方的肯定</del></p><p>恋爱不能丢失自我，就像放风筝，要回会一收一放。<del>有自己的原则，不能一味迎合放纵</del></p><p><strong>在一起之后要给双方立规矩，什么底线不能碰。</strong></p><p>不能太过油腻，不要围着对方转，要有自己的生活，不能有太强的控制欲。</p><p>更新相处模式，让爱保持新鲜感</p><p><strong>吵架是很伤感情的事</strong>，如果觉得违背了原则，可以尝试在双方心情不错的时候再沟通。</p><p>学会<strong>避免问题、解决问题、反思问题，不要有隔夜的情绪，不要拉旧账</strong></p><h3 id="致自己"><a href="#致自己" class="headerlink" title="致自己"></a>致自己</h3><blockquote><p><strong>爱之前很理智，爱之后更多的是需要自我克制和自我调节</strong>。<del>好比在理智情况下，面对感觉对方可能被撬墙角的行为，应该投入更多的关心和爱，让对方无墙脚可挖。非理智的情况下，会生气吃醋责怪，被对方认为不成熟</del></p></blockquote><p>爱是会丢失理智，但不能丢的太彻底。</p><p>这段时间承受的分手之苦，相思之痛，已经足够偿还曾经犯下的错了，放过自己。</p><p>改掉付出式的说话方式，不要把关系代入到“你用付出”去交换“她什么也不用做”中，也不要代入到“你做了什么，她就一定非要满足你什么的交换中”。</p><p>在需要的时候提供高价值的情绪关怀，非必要的时候有彼此的空间。</p><p>溢出来的爱很廉价，恰到好处的关心和体贴，爱情才能更长久。</p><p>有些人注定只是陪你走上一程，教会你怎么谈恋爱，留下来相守一生的才是伴侣。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 与她 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程调试 NodeJS 程序的几种姿势</title>
      <link href="/tools/node-remote-debug/"/>
      <url>/tools/node-remote-debug/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="Before"><a href="#Before" class="headerlink" title="Before?"></a><code>Before?</code></h3><p>在学习这篇文章之前，请先了解如何在 <code>vscode</code> 中调试一个 <code>Node</code> 程序，学会基础的调试参数配置和调试技能。详细请参考：<a href="/share/vscode-debug">在 VScode 中调试 NodeJS 程序</a></p><p>在此基础上，学习如何在 <code>vscode</code> 本地调试远程运行中的 <code>Node</code> 程序。</p><span id="more"></span><h3 id="基于-vscode-本地进行远程调试"><a href="#基于-vscode-本地进行远程调试" class="headerlink" title="基于 vscode 本地进行远程调试"></a>基于 <code>vscode</code> 本地进行远程调试</h3><h4 id="添加-debug-脚本命令"><a href="#添加-debug-脚本命令" class="headerlink" title="添加 debug 脚本命令"></a>添加 <code>debug</code> 脚本命令</h4><p>在 <code>package.json</code> 添加调试端口和脚本命令，如下，添加 <code>9229 debug</code> 监听端口：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"start:debug"</span><span class="token operator">:</span> <span class="token string">"nest start --debug 0.0.0.0:9229 --watch"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>当程序打包成镜像后，通常会写入启动脚本，在启动脚本中执行<code>npm run start:prod</code>。</p><p>那么我们需要在这个基础上，通过标识环境变量，区分是否执行<code>npm run start:debug</code></p><p>例如：<code>start.sh</code> 中，通过 <code>RUN_ENV = TEST</code> 启动 <code>debug 命令</code></p><pre class="language-sh" data-language="sh"><code class="language-sh">#!&#x2F;bin&#x2F;shif [ &quot;$RUN_ENV&quot; !&#x3D; &quot;&quot; ] &amp;&amp; [ $(echo $RUN_ENV | tr [a-z] [A-Z]) &#x3D;&#x3D; &quot;TEST&quot; ];then    yarn --production&#x3D;false    npm run start:debugelse    npm run start:prodfi</code></pre><p><code>ok</code>，本地项目配置完成…下面看 <code>rancher</code> 中又该如何配置？</p><h4 id="Rancher-配置变更"><a href="#Rancher-配置变更" class="headerlink" title="Rancher 配置变更"></a><code>Rancher</code> 配置变更</h4><p>如图：进入工作负载，先添加环境变量 <code>RUN_ENV</code>，然后关闭健康检查，方便重新部署时执行上面配置的 <code>npm run start:debug</code>.</p><blockquote><p>关闭健康检查：在调试模式下，服务可能会进行一些非标准的操作或处于不稳定状态，这可能导致健康检查失败</p></blockquote><p><a href="/images/tools/node-remote-debug/p1.png"><img src="/images/tools/node-remote-debug/p1.png" alt="node-remote-debug-p1" loading="lazy"></a></p><p>然后打开服务发现，在高级选项中配置端口映射规则：注意服务端口和主机端口的区别：</p><blockquote><p>服务端口：指在 <code>Rancher</code> 中定义的服务对外暴露的端口，主机端口：指在运行服务的主机上实际使用的端口</p></blockquote><blockquote><p>当容器内的服务监听特定的端口时，主机端口可以将外部请求映射到容器内的服务</p></blockquote><p><a href="/images/tools/node-remote-debug/p2.png"><img src="/images/tools/node-remote-debug/p2.png" alt="node-remote-debug-p2" loading="lazy"></a></p><p>然后重启容器服务，接着处理本地 <code>vscode</code> 配置：</p><h4 id="配置-launch-json"><a href="#配置-launch-json" class="headerlink" title="配置 launch.json"></a>配置 <code>launch.json</code></h4><p>在<code>.vscode/launch.json</code>中添加调试配置项，如下所示：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>  <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"172.16.148.25"</span><span class="token punctuation">,</span>      <span class="token property">"localRoot"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Attach to Remote - 172.16.148.25"</span><span class="token punctuation">,</span>      <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">32145</span><span class="token punctuation">,</span>      <span class="token property">"remoteRoot"</span><span class="token operator">:</span> <span class="token string">"/usr/src/app"</span><span class="token punctuation">,</span>      <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"attach"</span><span class="token punctuation">,</span>      <span class="token property">"skipFiles"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;node_internals>/**"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>      <span class="token property">"restart"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>注意配置的<code>address、port、request</code>字段，因为是对远程已经运行中的程序追加调试，所以使用<code>attach</code>，<code>port</code>对应上面配置服务发现中的主机<code>port</code>.</p><p>配置好后，记得先执行<code>npm run build</code>，<code>why?</code></p><blockquote><p>构建生成的 <code>map</code> 文件包含代码映射信息的文件，用于帮助调试器在构建后的代码和源代码之间建立映射关系。</p></blockquote><p>最后在本地源代码添加断点(断言、表达式、日志…)等等，启动和运行调试.</p><h3 id="基于浏览器进行远程调试"><a href="#基于浏览器进行远程调试" class="headerlink" title="基于浏览器进行远程调试"></a>基于浏览器进行远程调试</h3><ul><li><p>点击<code>F12</code>或者鼠标右键打开控制台，控制台右侧有个设置按钮，点击选择源代码，启用<code>javascript</code>源映射</p></li><li><p>访问：<code>edge://inspect</code>，<code>edge://</code>根据你使用的浏览器决定</p></li><li><p>点击 <code>Open dedicated DevTools for Node</code></p></li></ul><p><a href="/images/tools/node-remote-debug/p3.png"><img src="/images/tools/node-remote-debug/p3.png" alt="node-remote-debug-p3" loading="lazy"></a></p><ul><li>添加连接</li></ul><p><a href="/images/tools/node-remote-debug/p4.png"><img src="/images/tools/node-remote-debug/p4.png" alt="node-remote-debug-p4" loading="lazy"></a></p><ul><li>添加断点</li></ul><p><a href="/images/tools/node-remote-debug/p5.png"><img src="/images/tools/node-remote-debug/p5.png" alt="node-remote-debug-p5" loading="lazy"></a></p><p>当用户下次访问该服务时，效果如下：</p><p><a href="/images/tools/node-remote-debug/p6.png"><img src="/images/tools/node-remote-debug/p6.png" alt="node-remote-debug-p6" loading="lazy"></a></p><p>这种方式虽然也能实现远程调试的效果，但是它是基于<code>build</code>后的产物调试的，不方便阅读和定位.</p>]]></content>
      
      
      <categories>
          
          <category> 工具学习 </category>
          
          <category> 程序调试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
            <tag> 远程调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 VScode 中调试 NodeJS 程序</title>
      <link href="/tools/vscode-debug/"/>
      <url>/tools/vscode-debug/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><code>代码调试在开发工程中必不可少</code>.</p><p>通常情况下我们会通过 <code>Chrome</code> 开发者工具在浏览器里进行调试，或者在代码里写入 <code>console</code> 语句打印输出观察变更。除此之外呢，就是在开发工具中对源代码断点调试。</p><p>本篇文章就以 <code>nodejs</code> 为例，介绍在 <code>vscode</code> 中调试代码的操作方法，具体参数配置可参考 <a href="https://code.visualstudio.com/docs/editor/variables-reference">官方文档</a></p><span id="more"></span><h3 id="调试的作用"><a href="#调试的作用" class="headerlink" title="调试的作用"></a>调试的作用</h3><ul><li><p>程序出现 <code>bug</code>，找出现 <code>bug</code> 的原因</p></li><li><p>学习源代码，理清代码的逻辑</p></li></ul><h3 id="调试需要满足的条件？"><a href="#调试需要满足的条件？" class="headerlink" title="调试需要满足的条件？"></a>调试需要满足的条件？</h3><p>任何程序语言，在 <code>vscode</code> 中调试，大多需要满足下面三个条件：</p><ul><li><p>搭建相应的编程语言的开发环境。例如 <code>node</code> 环境搭建可参考：<a href="/envConstruct/nvm-and-node-install">Nvm 安装及 Node 环境搭建</a></p></li><li><p>安装相应编程语言用于调试的扩展。（<code>vscode</code>内置了很多程序语言的 <code>debugger</code> 插件，例如 <code>JavaScript Debugger</code>）</p></li><li><p>配置 <code>launch.json</code> 程序</p></li></ul><p>由于 <code>vscode</code> 对 <code>node</code> 的支持特别友好，所以无需我们单独去安装扩展和配置 <code>launch.json</code></p><h3 id="创建程序并开始调试-Demo"><a href="#创建程序并开始调试-Demo" class="headerlink" title="创建程序并开始调试-Demo"></a>创建程序并开始调试-<code>Demo</code></h3><p>在此之前，请先确保 <code>node</code> 环境正常.</p><h4 id="创建一个程序"><a href="#创建一个程序" class="headerlink" title="创建一个程序"></a>创建一个程序</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建调试程序项目文件夹</span><span class="token function">mkdir</span> debug-demo<span class="token builtin class-name">cd</span> debug-demo<span class="token comment"># 创建并写入程序入口文件和代码</span><span class="token function">vi</span> test.js<span class="token comment"># 写入程序代码....这里省略代码部分</span><span class="token comment"># 用 vscode 打开项目，并测试是否正常运行</span>code <span class="token builtin class-name">.</span><span class="token function">node</span> test.js</code></pre><h4 id="添加断点"><a href="#添加断点" class="headerlink" title="添加断点"></a>添加断点</h4><p>断点位置在<strong>代码行号的左侧，鼠标覆盖上去有个红色的点</strong>，点击，红色点常亮表示断点添加成功</p><h4 id="进入Debug-并执行-Run"><a href="#进入Debug-并执行-Run" class="headerlink" title="进入Debug 并执行 Run"></a>进入<code>Debug</code> 并执行 <code>Run</code></h4><p>如下图所示，选择调试器 <code>Nodejs</code> 开始调试，或者键盘键入 <code>F5</code> 启动。这种方式是最简单的一种，使用了 <code>vscode</code> 内置的调试配置，不会生成 <code>launch.json</code>.</p><p><a href="/images/tools/vscode-debug/p1.png"><img src="/images/tools/vscode-debug/p1.png" alt="vscode-debug-p1" loading="lazy"></a></p><h4 id="调试面板功能介绍和使用"><a href="#调试面板功能介绍和使用" class="headerlink" title="调试面板功能介绍和使用"></a>调试面板功能介绍和使用</h4><p>启动调试后，面板会包含：代码区、调试工具栏、调试输出面板、左侧的调试工具栏等等，具体功能介绍如下图所示：</p><p><a href="/images/tools/vscode-debug/p2.png"><img src="/images/tools/vscode-debug/p2.png" alt="vscode-debug-p2" loading="lazy"></a></p><h3 id="自定义调试-launch-json-配置介绍"><a href="#自定义调试-launch-json-配置介绍" class="headerlink" title="自定义调试 launch.json 配置介绍"></a>自定义调试 <code>launch.json</code> 配置介绍</h3><h4 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h4><ul><li><p>指定语言类型</p></li><li><p>指定调试类型 <code>launch</code> or <code>attach</code></p></li><li><p>远程调试…</p></li></ul><h4 id="创建-launch-json"><a href="#创建-launch-json" class="headerlink" title="创建 launch.json"></a>创建 <code>launch.json</code></h4><p>可以手动点击 <code>vscode</code> 左侧的调试按钮后，再点击左侧工具栏出现的 <code>创建 launch.json 文件</code>，选择 <code>Nodejs</code> 调试器后，会在项目根目录生成 <code>.vscode/launch.json</code> 文件，如图所示</p><blockquote><p><code>.vscode</code> 是 <code>vscode</code> 的配置文件夹</p></blockquote><p><a href="/images/tools/vscode-debug/p3.png"><img src="/images/tools/vscode-debug/p3.png" alt="vscode-debug-p3" loading="lazy"></a></p><p>右下角的 <code>添加配置</code> 按钮，可以很方便的为我们自动化添加各种调试预配置。</p><h4 id="configurations-配置"><a href="#configurations-配置" class="headerlink" title="configurations 配置"></a><code>configurations</code> 配置</h4><p>我们需要重点关注 <code>configurations</code> 字段，<code>version</code> 可以忽略.</p><p><code>configurations</code> 是一个数组对象，因为一个项目可能存在多种调试模式，比如调试开发时调试，也可以是远程调试.又或者 <code>launch 和 attach 两种模式调试</code></p><p>每个调试配置项是一个对象，包含了基础的 <code>type(指定编译环境 node、go、php...)、request(调试模式：launch、attach)、name(自定义配置项名称)</code>.和 <a href="https://code.visualstudio.com/docs/editor/variables-reference">其他配置项</a></p><h5 id="调试模式选择"><a href="#调试模式选择" class="headerlink" title="调试模式选择"></a>调试模式选择</h5><p><strong>根据不同调试模式选择其他的配置项</strong>内容，注意两种调试模式的区别：</p><blockquote><p><strong><code>launch</code> 是启动程序并添加调试器，<code>attach</code> 是在已经运行中的程序添加调试器</strong>。</p></blockquote><p>通俗的讲，<code>launch</code> 是先将程序重新启动，然后给程序搭配调试器并开始调试，意味着不需要再手动执行 <code>npm run start</code> 了，如果此前已经启动了，可能还会存在端口冲突… 另外：只执行 <code>npm run start</code> 是不会停在断点位置的.</p><p><code>attach</code> 是在已经运行的程序基础上追加调试器，这种模式需要我们手动先 <code>npm run start</code> 把程序跑起来，然后再 <code>F5</code> 启动调试。所以后者这种模式通常也用于进行远程调试</p><h5 id="配置项示例"><a href="#配置项示例" class="headerlink" title="配置项示例"></a>配置项示例</h5><p>需要注意的是，使用 <code>attach</code> 调试模式，需要 <code>Run</code> 启动程序时添加一个 <code>debug</code> 的监听端口(需要将 <code>9229</code> 端口对外开放)，<code>package.json</code> 如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"nest start"</span><span class="token punctuation">,</span>  <span class="token property">"start:dev"</span><span class="token operator">:</span> <span class="token string">"nest start --watch"</span><span class="token punctuation">,</span>  <span class="token comment">// 默认的 debug ip 地址为 127.0.0.1，即本机ip。 但是在 docker 容器中，本机 ip 只对自己生效。所以在启动 debug 的时候，需要将地址指定为：0.0.0.0</span>  <span class="token property">"start:debug"</span><span class="token operator">:</span> <span class="token string">"nest start --debug 0.0.0.0:9229 --watch"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p>项目中具体配置要根据实际需求进行调整，我只是简单列举一些常用配置：更多请<a href="https://code.visualstudio.com/docs/editor/variables-reference">参考官网</a></p><blockquote><p><code>start:debug</code> 指令添加 <code>9229</code> 端口，映射到下面第一个调试配置：</p></blockquote><blockquote><p><code>0.0.0.0</code> 是路由表的默认路由，表示整个网络，即网络内的所有主机</p></blockquote><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>  <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>      <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"attach"</span><span class="token punctuation">,</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Attach attach localhost"</span><span class="token punctuation">,</span>      <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">9229</span><span class="token punctuation">,</span>      <span class="token property">"skipFiles"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;node_internals>/**"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"timeout"</span><span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>      <span class="token property">"restart"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"172.16.148.220"</span><span class="token punctuation">,</span>      <span class="token property">"localRoot"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Attach to Remote - 172.16.148.220"</span><span class="token punctuation">,</span>      <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">30229</span><span class="token punctuation">,</span> <span class="token comment">// 9229 映射到主机服务对外发现的端口</span>      <span class="token property">"remoteRoot"</span><span class="token operator">:</span> <span class="token string">"/usr/src/app"</span><span class="token punctuation">,</span> <span class="token comment">// 是 docker 容器里面代码存放的位置</span>      <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"attach"</span><span class="token punctuation">,</span>      <span class="token property">"skipFiles"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;node_internals>/**"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>      <span class="token property">"restart"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>      <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Debug Nest Framework"</span><span class="token punctuation">,</span>      <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"$&#123;workspaceFolder&#125;/src/main.ts"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"runtimeArgs"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"--nolazy"</span><span class="token punctuation">,</span> <span class="token string">"-r"</span><span class="token punctuation">,</span> <span class="token string">"ts-node/register/transpile-only"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"sourceMaps"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceRoot&#125;"</span><span class="token punctuation">,</span>      <span class="token property">"outputCapture"</span><span class="token operator">:</span> <span class="token string">"std"</span><span class="token punctuation">,</span>      <span class="token property">"stopOnEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>当我们配置了类似如上多个调试项后，点击 <code>vscode</code> 左侧调试图标，可以发现启动运行和调试的按钮旁边多了个下拉选项(展示的调试配置项名称)，我们可以选择其中配置的某一个调试配置并启动调试.</p><h3 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h3><p>找到断点位置，鼠标指中红色断点并右键，会出现：“编辑断点”、“删除断点”、“禁用断点”三种操作</p><p>编辑断点，可以选择“表达式”、“命中次数”和“日志信息”，如下图所示：</p><p><a href="/images/tools/vscode-debug/p4.png"><img src="/images/tools/vscode-debug/p4.png" alt="vscode-debug-p4" loading="lazy"></a></p><ul><li><p>表达式：当条件表达式值为真时，断点才会生效，否则断点不会生效. 例如：<code>req.headers[&#39;user-agent&#39;].includes(&#39;iPhone&#39;)</code>，又或者 <code>i === 50</code></p></li><li><p>命中次数：当命中次数满足条件才会中断，也就是满足条件后，断点才会生效，例如：<code>== 5</code> 或者 <code>&gt;= 7</code> 这种格式</p></li><li><p>日志消息：类似模板字符串，变量替换符 <code>&#123;&#125;</code>，将结果打印输出到调试控制台，<strong>它并不会阻塞程序运行</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具学习 </category>
          
          <category> 程序调试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mobile 端的级联选择单多选组件实现</title>
      <link href="/share/mobile-cascader-multiple/"/>
      <url>/share/mobile-cascader-multiple/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a><code>Why?</code></h3><p>级联选择组件在<code>UI</code>库中很常见，几乎所有的<code>UI</code>库都支持。但是你会发现几乎所有用于 <code>PC</code> 端的 <code>Cascade</code> 组件都支持对选项多选和搜索，而 <code>Mobile</code> 端的 <code>Cascade</code> 组件，更多的是以 <code>picker</code> 的形式仅支持单选。</p><p>局限性大，同时在部分业务场景下，例如表单组件，在 <code>PC</code> 和 <code>Mobile</code> 端的不同呈现兼容，需要我们不得不支持多选这一要求…</p><p>如果使用传统的 <code>picker</code> 形式，那么在交互上它不可能实现多选操作，此外如果级联层级过深甚至无法在手机端友好展示，所以我另辟蹊径，参考了目前部分<code>Mobile-UI</code> 库对“地址选择器”的交互效果，即：通过 <code>tab</code> 渲染不同层级实现选项选择。🤨🤨🤨</p><span id="more"></span><h3 id="需要准备什么？"><a href="#需要准备什么？" class="headerlink" title="需要准备什么？"></a>需要准备什么？</h3><p>由于我的案例中使用了基础的<code>UI</code>库组件，所以需要你的项目引入才能使用，例如 <code>tabs、cell、checkbox</code>…</p><p>当然这些基础组件也可以由你自己去封装，为了节约案例功能的实现成本，我这使用的 <code>element 和 vant</code><del>使用 vant 是因为项目里移动端用的 vant 库，同时使用 element 是因为 vant 的 checkbox 没有提供半选状态，这个也可以自己实现</del>😅😅😅…</p><h3 id="实现思路？"><a href="#实现思路？" class="headerlink" title="实现思路？"></a>实现思路？</h3><ul><li><p>明确需要接受的 <code>props</code> 和向外传播的 <code>event</code></p></li><li><p>明确 <code>v-model</code> 变量类型和变更条件，例如点击 <code>cell</code> ? 还是点击 <code>cell-right-slot</code>?</p></li><li><p>明确当前交互状态，即：用户的每一次点击操作，我们都应该记录下当前操作的选项路径 <code>currentSelectPath</code></p></li><li><p>根据上一步的路径，我们可以很轻松的拿到需要渲染的可选层级 <code>selectableOptions</code> 和渲染的 <code>tabs</code> ，如果 <code>currentSelectPath</code> 为空，则展示根层级即可。至此，我们可以很轻松的实现选项切换这一交互效果和呈现</p></li><li><p>下一步是值绑定，我们需要根据 <code>currentSelectPath</code> 和当前点击的 <code>option</code> 推断它的完整路径，并 <code>emit:input</code> 实现数据双向绑定</p></li><li><p>上面是传统 <code>Mobile-Cascade</code> 的交互实现，下面开始优化升级</p></li><li><p>添加计算属性，计算每个选项是否被全选、半选，并展示对应的 <code>icon</code> 和被选中样式</p></li><li><p>添加单多选支持，单选时点击叶子节点选中，点击父节点则展开子节点。多选时，仅点击 <code>icon</code> 选中所有叶子节点</p></li><li><p>递归计算已选项的<code>label</code>，并用于界面呈现</p></li><li><p>支持 <code>filterable</code> 对级联选项进行搜索选中，交互参考自 <code>element</code></p></li></ul><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p><code>代码基于 Vue2 ts decorator 语法实现，可根据自己需要，对应调整技术栈.</code></p><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p><code>input 组件用于对已选项进行呈现，你可以切换成 tags。</code></p><p><code>另外该例子仅对核心功能做实现，如有需要你可以添加一些额外的交互和 props</code></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mobile-cascader<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>readonly<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectedLabel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; selectedLabel &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>暂无内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cascade-input<span class="token punctuation">"</span></span>        <span class="token attr-name">readonly</span>        <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectedLabel<span class="token punctuation">"</span></span>        <span class="token attr-name">:placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>placeholder<span class="token punctuation">"</span></span>        <span class="token attr-name">@focus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showPicker = true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>suffix</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span>            <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectedLength<span class="token punctuation">"</span></span>            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-circle-close<span class="token punctuation">"</span></span>            <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span> <span class="token property">right</span><span class="token punctuation">:</span> 4px</span><span class="token punctuation">"</span></span></span>            <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>innerValue = []<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-popup</span>        <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showPicker<span class="token punctuation">"</span></span>        <span class="token attr-name">:lazy-render</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom<span class="token punctuation">"</span></span>        <span class="token attr-name">get-container</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span>        <span class="token attr-name">round</span>        <span class="token attr-name">closeable</span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>popover<span class="token punctuation">"</span></span>        <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; height: <span class="token punctuation">'</span>486px<span class="token punctuation">'</span> &#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>innerOptions.length<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title p-16<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;&#123; title &#125;&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>(已选择 &#123;&#123; selectedLength &#125;&#125; 项)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>搜索选项<span class="token punctuation">"</span></span> <span class="token attr-name">prefix-icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-search<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>optionFilterKey<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SelectorList</span>            <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>optionFilterKey<span class="token punctuation">"</span></span>            <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filterValue<span class="token punctuation">"</span></span>            <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filterOptions<span class="token punctuation">"</span></span>            <span class="token attr-name">:multiple</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multiple<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-tabs</span>            <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!optionFilterKey<span class="token punctuation">"</span></span>            <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>activeTab<span class="token punctuation">"</span></span>            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p-6<span class="token punctuation">"</span></span>            <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#02A7F0<span class="token punctuation">"</span></span>            <span class="token attr-name">title-active-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#02A7F0<span class="token punctuation">"</span></span>            <span class="token attr-name">title-inactive-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- FIX: value is not unique --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-tab</span>              <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(tab, tabIdx) in selectableOptions<span class="token punctuation">"</span></span>              <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getTabTitle(tab, tabIdx)<span class="token punctuation">"</span></span>              <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>`$&#123;getTabPrePath(tabIdx)&#125;_$&#123;tabIdx&#125;`<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-cell-group</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option-wrapper<span class="token punctuation">"</span></span> <span class="token attr-name">:border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-cell</span>                  <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(option, optionIdx) in tab<span class="token punctuation">"</span></span>                  <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>`$&#123;tabIdx&#125;-$&#123;optionIdx&#125;-$&#123;option.value&#125;`<span class="token punctuation">"</span></span>                  <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option.label<span class="token punctuation">"</span></span>                  <span class="token attr-name">:title-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; selectedCell: checkSelected(option, tabIdx) &#125;<span class="token punctuation">"</span></span>                  <span class="token attr-name">clickable</span>                  <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>optionClickHandle(option, tabIdx)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>right-icon</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-checkbox</span>                      <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showableCheckbox(option, tabIdx)<span class="token punctuation">"</span></span>                      <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getOptionSelectedStatus(option, tabIdx).selectAll<span class="token punctuation">"</span></span>                      <span class="token attr-name">:indeterminate</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getOptionSelectedStatus(option, tabIdx).indeterminate<span class="token punctuation">"</span></span>                      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>check-box<span class="token punctuation">"</span></span>                      <span class="token attr-name">@click.native.stop</span>                      <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>optionSelectChange(option, tabIdx)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-icon</span>                      <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>arrow<span class="token punctuation">"</span></span>                      <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option.children &amp;&amp; option.children.length<span class="token punctuation">"</span></span>                      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>arrow-icon<span class="token punctuation">"</span></span>                      <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>16<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-cell</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-cell-group</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-tab</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-tabs</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-empty</span>          <span class="token attr-name">v-else</span>          <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>暂无数据<span class="token punctuation">"</span></span>          <span class="token attr-name">:image</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>require(<span class="token punctuation">'</span>@/assets/images/empty-image-default.png<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-popup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h4 id="核心逻辑"><a href="#核心逻辑" class="headerlink" title="核心逻辑"></a>核心逻辑</h4><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> CascaderOption <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-ui/types/cascader'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> cloneDeep <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'lodash'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Component<span class="token punctuation">,</span> ModelSync<span class="token punctuation">,</span> Prop<span class="token punctuation">,</span> Vue <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-property-decorator'</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token comment">// 这个是对选项搜索后，展示拉平后的选项列表</span><span class="token keyword">import</span> SelectorList <span class="token keyword">from</span> <span class="token string">'./selectorList.vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">ROOT</span> <span class="token operator">=</span> <span class="token string">'_ROOT_'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">SPLIT_CHAR</span> <span class="token operator">=</span> <span class="token string">'|'</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'MobileCascade'</span><span class="token punctuation">,</span>  components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    SelectorList<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">MobileCascade</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ModelSync</span></span><span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">,</span> <span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token builtin">Array</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">public</span> innerValue<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> innerOptions<span class="token operator">!</span><span class="token operator">:</span> CascaderOption<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> placeholder<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> title<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token keyword">readonly</span><span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> type<span class="token operator">:</span> Boolean <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> multiple<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> activeTab <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> showPicker <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> optionFilterKey <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> currentSelectPath<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">/* ---------- filter v-model start --------- */</span>  <span class="token keyword">public</span> <span class="token keyword">get</span> <span class="token function">filterValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">innerValue2Value</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>innerValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">set</span> <span class="token function">filterValue</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>innerValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">value2InnerValue</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/* ------ end ---------- */</span>  <span class="token keyword">public</span> <span class="token keyword">get</span> <span class="token function">selectedLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> innerVal <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>multiple <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>innerValue <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>innerValue<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> innerVal<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOptionPathLabel</span><span class="token punctuation">(</span>v <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'、'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">get</span> <span class="token function">selectedLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>multiple <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>innerValue<span class="token punctuation">.</span>length <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>innerValue<span class="token operator">?.</span>length <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">get</span> <span class="token function">selectableOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token constant">ROOT</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentSelectPath<span class="token punctuation">]</span>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOptionChildrenByPath</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span><span class="token operator">!</span>o<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">get</span> <span class="token function">filterOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> flatterOption <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFlatterOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>innerOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> flatterOption<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=></span> o<span class="token punctuation">.</span>label<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>optionFilterKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>currentSelectPath <span class="token operator">=</span> <span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>multiple <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>innerValue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>innerValue    <span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">value2InnerValue</span><span class="token punctuation">(</span>val<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> tv <span class="token operator">=</span> val<span class="token operator">?.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=></span> v<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token constant">SPLIT_CHAR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>multiple <span class="token operator">?</span> tv <span class="token operator">:</span> tv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">innerValue2Value</span><span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> tv <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>multiple <span class="token operator">?</span> v <span class="token operator">:</span> v<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tv<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>o <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token constant">SPLIT_CHAR</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">getOptionChildrenByPath</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span>prev<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token operator">=></span>        current <span class="token operator">===</span> <span class="token constant">ROOT</span> <span class="token operator">?</span> prev <span class="token operator">:</span> prev<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=></span> o<span class="token punctuation">.</span>value <span class="token operator">===</span> current<span class="token punctuation">)</span><span class="token operator">?.</span>children <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>innerOptions<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">getOptionPathLabel</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>innerOptions<span class="token punctuation">;</span>    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>labels<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> opt <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=></span> o<span class="token punctuation">.</span>value <span class="token operator">===</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>      options <span class="token operator">=</span> opt<span class="token operator">?.</span>children <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>labels<span class="token punctuation">,</span> opt<span class="token operator">?.</span>label <span class="token operator">??</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">getTabPrePath</span><span class="token punctuation">(</span>tabIdx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentSelectPath<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> tabIdx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token constant">SPLIT_CHAR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">getOptionPath</span><span class="token punctuation">(</span>option<span class="token operator">:</span> CascaderOption<span class="token punctuation">,</span> tabIdx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> prePath <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTabPrePath</span><span class="token punctuation">(</span>tabIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> prePath <span class="token operator">?</span> prePath <span class="token operator">+</span> <span class="token constant">SPLIT_CHAR</span> <span class="token operator">+</span> option<span class="token punctuation">.</span>value <span class="token operator">:</span> option<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">getTabTitle</span><span class="token punctuation">(</span>tab<span class="token operator">:</span> CascaderOption<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tabIdx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> tab<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=></span> o<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentSelectPath<span class="token punctuation">[</span>tabIdx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?.</span>label <span class="token operator">??</span> <span class="token string">'---'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">showableCheckbox</span><span class="token punctuation">(</span>option<span class="token operator">:</span> CascaderOption<span class="token punctuation">,</span> tabIdx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>multiple <span class="token operator">||</span>      <span class="token punctuation">(</span><span class="token operator">!</span>option<span class="token punctuation">.</span>children<span class="token operator">?.</span>length <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOptionSelectedStatus</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> tabIdx<span class="token punctuation">)</span><span class="token punctuation">.</span>selectAll<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">checkSelected</span><span class="token punctuation">(</span>option<span class="token operator">:</span> CascaderOption<span class="token punctuation">,</span> tabIdx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> optionPath <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOptionPath</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> tabIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">innerValue2Value</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>innerValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=></span> p<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>optionPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">setCurrentPath</span><span class="token punctuation">(</span>option<span class="token operator">:</span> CascaderOption<span class="token punctuation">,</span> tabIdx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> skip <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>currentSelectPath <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentSelectPath<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> tabIdx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>option<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// update tab after tabs(dependences currentSelectPath) rerender.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token punctuation">.</span>children<span class="token operator">?.</span>length <span class="token operator">&amp;&amp;</span> skip<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>activeTab <span class="token operator">=</span> tabIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">optionClickHandle</span><span class="token punctuation">(</span>option<span class="token operator">:</span> CascaderOption<span class="token punctuation">,</span> tabIdx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setCurrentPath</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> tabIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// single selection and leaf node, click the cell to automatically select</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>multiple <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>option<span class="token punctuation">.</span>children<span class="token operator">?.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">optionSelectChange</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> tabIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">getOptionSelectedStatus</span><span class="token punctuation">(</span>option<span class="token operator">:</span> CascaderOption<span class="token punctuation">,</span> tabIdx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> prePath <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTabPrePath</span><span class="token punctuation">(</span>tabIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> leafValues <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findAllLeafNodesPath</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> prePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">innerValue2Value</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>innerValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> selectAll <span class="token operator">=</span> leafValues<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=></span> value<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> indeterminate <span class="token operator">=</span> <span class="token operator">!</span>selectAll <span class="token operator">&amp;&amp;</span> leafValues<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=></span> value<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> selectAll<span class="token punctuation">,</span> indeterminate <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// option is a leaf node, it's includes itself. and only one</span>  <span class="token keyword">public</span> <span class="token function">findAllLeafNodesPath</span><span class="token punctuation">(</span>root<span class="token operator">:</span> CascaderOption<span class="token punctuation">,</span> prePath <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> values<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> queue<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>CascaderOption <span class="token operator">&amp;</span> <span class="token punctuation">&#123;</span> prePath<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>root<span class="token punctuation">,</span> prePath <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> path <span class="token operator">=</span> node<span class="token punctuation">.</span>prePath <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token punctuation">.</span>prePath<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">SPLIT_CHAR</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">?.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>n<span class="token punctuation">,</span> prePath<span class="token operator">:</span> path <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        values<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> values<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">optionSelectChange</span><span class="token punctuation">(</span>option<span class="token operator">:</span> CascaderOption<span class="token punctuation">,</span> tabIdx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>multiple <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span>option<span class="token punctuation">.</span>children<span class="token operator">?.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setCurrentPath</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> tabIdx<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> prePath <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTabPrePath</span><span class="token punctuation">(</span>tabIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> leafValues <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findAllLeafNodesPath</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span> prePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">innerValue2Value</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>innerValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> isCheckedAll <span class="token operator">=</span> leafValues<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=></span> value<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> newChecked <span class="token operator">=</span> <span class="token operator">!</span>isCheckedAll<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>multiple<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// single-selecting，the clicked option is always selected</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>innerValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">value2InnerValue</span><span class="token punctuation">(</span>leafValues<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      leafValues<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newChecked <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>value<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newChecked <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">=></span> o <span class="token operator">!==</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>innerValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">value2InnerValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">getFlatterOptions</span><span class="token punctuation">(</span>opts<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>CascaderOption <span class="token operator">&amp;</span> <span class="token punctuation">&#123;</span> preValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> preLabel<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> cloneOpt <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> options<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> label<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> value<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cloneOpt<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> node <span class="token operator">=</span> cloneOpt<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> optVal <span class="token operator">=</span> node<span class="token punctuation">.</span>preValue <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token punctuation">.</span>preValue<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">SPLIT_CHAR</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>      <span class="token keyword">const</span> optLabel <span class="token operator">=</span> node<span class="token punctuation">.</span>preLabel <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token punctuation">.</span>preLabel<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token punctuation">.</span>label<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> node<span class="token punctuation">.</span>label<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cloneOpt<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>          <span class="token operator">...</span>node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>n<span class="token punctuation">,</span> preValue<span class="token operator">:</span> optVal<span class="token punctuation">,</span> preLabel<span class="token operator">:</span> optLabel <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        options<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> label<span class="token operator">:</span> optLabel<span class="token punctuation">,</span> value<span class="token operator">:</span> optVal <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> options<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="样式文件"><a href="#样式文件" class="headerlink" title="样式文件"></a>样式文件</h4><pre class="language-less" data-language="less"><code class="language-less"><span class="token selector">.popover</span> <span class="token punctuation">&#123;</span>  <span class="token selector">.title</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 48px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 48px<span class="token punctuation">;</span>    <span class="token selector">.selected</span> <span class="token punctuation">&#123;</span>      <span class="token property">margin-left</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>      <span class="token property">color</span><span class="token punctuation">:</span> #427daf<span class="token punctuation">;</span>      <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.check-box</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0 5px 0 10px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.option-wrapper</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 350px<span class="token punctuation">;</span>    <span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.selectedCell</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #409eef<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.arrow-icon</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">.p-6</span> <span class="token punctuation">&#123;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0 6px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.p-16</span> <span class="token punctuation">&#123;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0 16px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">/deep/.cascade-input</span> <span class="token punctuation">&#123;</span>  <span class="token selector">input</span> <span class="token punctuation">&#123;</span>    <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">/deep/.van-cell:active</span> <span class="token punctuation">&#123;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #f2f3f5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">/deep/.van-tab</span> <span class="token punctuation">&#123;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0 10px <span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0 5px <span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> 0 0 auto <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="SelectorList-组件源码"><a href="#SelectorList-组件源码" class="headerlink" title="SelectorList 组件源码"></a><code>SelectorList</code> 组件源码</h4><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>select-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-checkbox-group</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-cell-group</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-cell</span>          <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in options<span class="token punctuation">"</span></span>          <span class="token attr-name">clickable</span>          <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.value<span class="token punctuation">"</span></span>          <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.label<span class="token punctuation">"</span></span>          <span class="token attr-name">:title-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; selectedCell: computeShow(item) &#125;<span class="token punctuation">"</span></span>          <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleClick(item)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#right-icon</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-checkbox</span> <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkboxes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#icon</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-icon</span>                  <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>computeShow(item)<span class="token punctuation">"</span></span>                  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span>                  <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000<span class="token punctuation">"</span></span>                  <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span> <span class="token property">border</span><span class="token punctuation">:</span> none</span><span class="token punctuation">"</span></span></span> <span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-checkbox</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-cell</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-cell-group</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-checkbox-group</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Component<span class="token punctuation">,</span> ModelSync<span class="token punctuation">,</span> Prop<span class="token punctuation">,</span> Vue <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-property-decorator'</span><span class="token punctuation">;</span>  @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'selector-list'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">SelectorList</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>    @<span class="token function">ModelSync</span><span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">,</span> <span class="token string">'input'</span><span class="token punctuation">)</span> <span class="token keyword">public</span> innerValue<span class="token operator">!</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    @<span class="token function">Prop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> readonly options<span class="token operator">?</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> string<span class="token punctuation">;</span> value<span class="token operator">:</span> string <span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">;</span>    @<span class="token function">Prop</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> <span class="token keyword">public</span> readonly multiple<span class="token operator">!</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">opt</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> string<span class="token punctuation">;</span> value<span class="token operator">:</span> string <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> innerVal <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>innerValue <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>innerValue<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>multiple<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        innerVal <span class="token operator">=</span> <span class="token punctuation">[</span>opt<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> idx <span class="token operator">=</span> innerVal<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=></span> o <span class="token operator">===</span> opt<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          innerVal<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          innerVal<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>opt<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>innerValue <span class="token operator">=</span> innerVal<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">computeShow</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">opt</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">label</span><span class="token operator">:</span> string<span class="token punctuation">;</span> value<span class="token operator">:</span> string <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>innerValue<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=></span> o <span class="token operator">===</span> opt<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.select-group</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">-webkit-overflow-scrolling</span><span class="token punctuation">:</span> touch<span class="token punctuation">;</span>    <span class="token selector">.selectedCell</span> <span class="token punctuation">&#123;</span>      <span class="token property">color</span><span class="token punctuation">:</span> #409eef<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.van-cell</span> <span class="token punctuation">&#123;</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> 5px 16px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p><a href="/images/share/mobile-cascader-multiple/p1.png"><img src="/images/share/mobile-cascader-multiple/p1.png" alt="mobile-cascader-multiple-p1" loading="lazy"></a></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 组件封装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cascade </tag>
            
            <tag> Mobile-UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>惊喜盲盒：一天一个小故事</title>
      <link href="/diary/joke-story/"/>
      <url>/diary/joke-story/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>本文故事均抄录自互联网，仅个人收藏收录，方便给她讲故事的时候不用临时去找，不做任何商业用途使用，部分故事文末有标注来源</p></blockquote><p><code>收录一些幽默搞笑的睡前故事，我想在她想听的时候可以及时的讲给她...</code></p><span id="more"></span><h2 id="笑话"><a href="#笑话" class="headerlink" title="笑话"></a>笑话</h2><h3 id="意外的骨折"><a href="#意外的骨折" class="headerlink" title="意外的骨折"></a>意外的骨折</h3><p>医生问病人是怎么骨折的？</p><p>病人说：我觉得鞋里有沙子，就扶着电线杆抖鞋。</p><p>有个人经过那里，以为我触电了，便抄起木棍给了我两棍子</p><h3 id="大象与蚂蚁"><a href="#大象与蚂蚁" class="headerlink" title="大象与蚂蚁"></a>大象与蚂蚁</h3><p>有一天，大象不小心踩到蚂蚁窝了</p><p>蚂蚁倾巢而出，纷纷爬到大象身上</p><p>大象抖了抖身子，很多蚂蚁都掉下来了，此时还有一只在大象脖子上</p><p>掉下来的蚂蚁就大声的说道：掐死它，掐死它…嘻嘻</p><h3 id="小明和妈妈"><a href="#小明和妈妈" class="headerlink" title="小明和妈妈"></a>小明和妈妈</h3><p>小明：妈妈，同学们都说我丑，他们说的是真的吗</p><p>妈妈：好孩子，妈妈和你说了多少遍了，在人多的地方不用叫我妈妈</p><h3 id="女友放屁"><a href="#女友放屁" class="headerlink" title="女友放屁"></a>女友放屁</h3><p>一对情侣在公园约会，突然女生想要放屁</p><p>于是就对男生说：亲爱的，我学布谷鸟给你听好吗？</p><p>男生说：好呀好呀，于是女生一边布谷布谷一边放着屁</p><p>然后完了问男生：亲爱的，我学布谷鸟像吗？</p><p>男生摇了摇头说：屁声太大我没听清…</p><h3 id="蚊子干饭"><a href="#蚊子干饭" class="headerlink" title="蚊子干饭"></a>蚊子干饭</h3><p>有一天苍蝇妈妈带着小苍蝇去吃屎</p><p>小苍蝇问：妈妈妈妈，我们为什么要吃屎？</p><p>妈妈说：吃饭的时候不要说这么恶心的话</p><h3 id="记者采访沙尘暴的影响"><a href="#记者采访沙尘暴的影响" class="headerlink" title="记者采访沙尘暴的影响"></a>记者采访沙尘暴的影响</h3><p>有个记者对着路人问：大妈，沙尘暴天气对您有什么影响</p><p>大妈说：那影响可大了，首先就是你得先清楚，我是你大爷</p><h3 id="电动车"><a href="#电动车" class="headerlink" title="电动车"></a>电动车</h3><p>在公园看大爷们下象棋</p><p>我说：大爷，你车<code>(che)</code>没了</p><p>大爷说：你不懂吧，那叫<code>(ju)</code></p><p>我说：好的大爷，您旁边的电动<code>(ju)</code>没了</p><h2 id="主题睡前故事"><a href="#主题睡前故事" class="headerlink" title="主题睡前故事"></a>主题睡前故事</h2><h3 id="小白兔和小灰兔"><a href="#小白兔和小灰兔" class="headerlink" title="小白兔和小灰兔"></a>小白兔和小灰兔</h3><p>从前，在一个美丽的森林里，有一只叫小白的小兔子和一只叫小灰的小兔子，它们是最好的朋友。每天，它们都一起在森林里玩耍，探索新的冒险。</p><p>一天晚上，小白和小灰决定进行一次特别的冒险。他们听说在森林深处有一个神奇的花园，据说那里的花朵有神奇的力量，可以帮助人们实现愿望。</p><p>小白和小灰兴奋地跳着，迈开了脚步，踏上了前往花园的旅程。他们穿过茂密的树林，跳过清澈的小溪，终于来到了花园的入口。</p><p>花园里的花朵真是美不胜收！有红色的玫瑰、蓝色的风铃草、粉色的康乃馨，还有金黄色的向日葵。小兔子们被这些美丽的花朵所吸引，它们纷纷散发出迷人的香气。</p><p>小白和小灰仔细观察了每一朵花，然后小白突然想到了她的愿望。她渴望拥有一双可以飞翔的翅膀，这样她就可以在天空中自由自在地飞翔了。</p><p>小白小心翼翼地对最亮最美的蓝色风铃草说出了她的愿望。就在她说完的瞬间，神奇的事情发生了！风铃草的花瓣变成了蓝色的羽毛，小白的背上长出了一对雪白的翅膀。</p><p>小白兴奋地跳起来，展翅高飞，她在天空中自由自在地飞翔，感受着那美丽而自由的感觉。</p><p>看到小白的愿望实现，小灰也迫不及待地对一朵粉色康乃馨许下了他的愿望。康乃馨的花瓣变成了灰色的毛发，小灰的背上也长出了一对灰色的翅膀。</p><p>现在，小白和小灰都变成了会飞翔的小兔子。他们在花园中翱翔，一起欢笑着，享受这美好而奇妙的时刻。</p><p>终于，天空渐渐亮了起来，太阳的第一缕阳光洒在了小白和小灰身上。他们的翅膀慢慢地消失了，变回了原来的样子。但是，他们不再感到失望，因为他们体会到了飞翔的快乐，和友谊的力量。</p><p>小白和小灰紧紧地握着彼此的爪子，一起回到了家。在他们的梦中，他们会一直记得那个美丽的花园和他们的冒险经历。</p><p>故事讲完了，亲爱的，希望这个故事带给你美好的梦境和温暖的心情。晚安，我爱你！</p><h3 id="友谊和勇气"><a href="#友谊和勇气" class="headerlink" title="友谊和勇气"></a>友谊和勇气</h3><p>在一个古老的王国里，有两只小动物，一只是名叫小熊的小熊猫，另一只是名叫小虎的小老虎。他们从小一起长大，成为了最好的朋友。</p><p>小熊和小虎住在一个安静的山谷里，他们每天都一起玩耍，探索周围的森林和河流。他们共享快乐，也一起面对挑战。</p><p>有一天，小熊和小虎听说王国里有一座神秘的山峰，据说山峰上有一颗能实现愿望的神奇宝石。他们决定一起去寻找这颗宝石，希望能够实现各自的心愿。</p><p>小熊希望能够学会弹奏美妙的音乐，而小虎则渴望变得更加勇敢和强壮。他们充满了希望和激动地踏上了前往山峰的旅程。</p><p>旅途中，他们面临了许多困难和障碍。有陡峭的山路、汹涌的河流和茂密的丛林。但是，小熊和小虎都展现出了无畏和坚韧的勇气。他们互相鼓励，共同克服了一个个困难。</p><p>最终，小熊和小虎终于来到了山峰的巅峰。他们发现了那颗闪耀着光芒的宝石。宝石散发出神奇的力量，充满了友谊和勇气的能量。</p><p>小熊抱着宝石，心满意足地弹奏起美妙的音乐，每一个音符都充满了温暖和欢乐。小虎感受到了小熊音乐中的力量，他感到自己变得更加勇敢和强壮了。</p><p>小熊和小虎高兴地笑了，他们知道自己的心愿已经实现了。但更重要的是，他们发现了友谊和勇气的真正意义。</p><p>小熊和小虎手牵着手，怀着满心的感激和喜悦，回到了他们的家。从那天起，小熊和小虎一直是彼此最好的朋友，他们共同分享着音乐的美妙和勇气的力量。</p><p>故事讲完了，亲爱的，希望这个故事能够给你带来勇气和友谊的力量。晚安，我永远爱你！</p><h3 id="亚历克斯和爱丽丝"><a href="#亚历克斯和爱丽丝" class="headerlink" title="亚历克斯和爱丽丝"></a>亚历克斯和爱丽丝</h3><p>从前，在一个远离尘嚣的小村庄里，住着一位年轻的画家，名叫亚历克斯。亚历克斯是一个心灵手巧的人，他用画笔和颜料创造出美丽的艺术作品。</p><p>有一天，亚历克斯在森林中的小溪边发现了一只受伤的小鸟。它的羽毛被狡猾的猎人射中，无助地倒在了地上。</p><p>亚历克斯立刻冲过去，轻轻地抱起了小鸟。他心疼地看着它，决定带它回家并照顾好它。他给它起了一个名字，叫做爱丽丝。</p><p>亚历克斯对爱丽丝充满了爱和关怀。他每天给她喂食，为她治疗伤口，并用画笔为她画了一张美丽的画像。</p><p>随着时间的推移，爱丽丝的伤口渐渐愈合，她的羽毛重新长出，变得美丽而闪亮。亚历克斯和爱丽丝之间建立起了一种特殊的联系，他们互相陪伴和照顾。</p><p>有一天，当亚历克斯正在画画的时候，他突然发现自己画出了一只神奇的小鸟。它的羽毛绚丽多彩，充满了爱和温暖的气息。亚历克斯惊讶地发现，这正是他和爱丽丝之间的纽带。</p><p>随着时间的推移，亚历克斯的画作变得越来越有名。人们纷纷前来欣赏他的作品，并被其中流淌的爱所感动。亚历克斯的艺术成为了一个温暖和鼓舞人心的力量。</p><p>而在亚历克斯的作品中，爱丽丝成为了他最珍贵的灵感之源。他用画笔将爱丽丝的美丽展现在世人面前，传递着爱的力量和奇迹的存在。</p><p>亚历克斯的成功并没有让他忘记爱丽丝。每当他画完一幅作品，他都会对着画中的爱丽丝微笑，感激地说：“是你给了我勇气和灵感，让我的作品闪耀出爱的光芒。”</p><h3 id="奇迹之花"><a href="#奇迹之花" class="headerlink" title="奇迹之花"></a>奇迹之花</h3><p>从很久很久以前开始，有一个神奇的花园，里面生长着各种各样美丽的花朵。在这个花园里，有一朵非常特别的花，它的名字叫做”爱之花”。</p><p>“爱之花”被认为是世界上最纯洁和真挚的爱的象征。这朵花只会在真正纯粹的爱情出现的时候绽放。</p><p>有一天，一对年轻人，他们分别是约翰和艾米，走进了这个花园。他们是一对相爱的情侣，彼此深深地爱着对方。</p><p>约翰和艾米手牵着手，欣赏着花园里的美景，直到他们来到了”爱之花”的面前。当他们靠近这朵花的时候，”爱之花”开始发出温暖的光芒，绽放出美丽的花朵。</p><p>约翰和艾米被这个奇迹所吸引，他们感受到了爱的力量。他们相信这朵花是对他们真爱的祝福。</p><p>于是，约翰和艾米决定将”爱之花”的花瓣保存下来，作为他们爱情的象征。每当他们面临困难和挑战时，他们会回想起那个特殊的时刻，那束闪耀的花瓣会给予他们力量和勇气。</p><p>年复一年，约翰和艾米的爱情像”爱之花”一样持久而美丽。他们一起经历了许多冒险和考验，但他们的爱情始终坚不可摧。</p><p>他们的爱情故事传遍了整个国度，成为了一段经典的爱情传说。人们对他们的爱情充满敬意和羡慕。</p><p>而在他们的故事中，每个夜晚，约翰和艾米会拥抱着，温柔地回忆起他们第一次来到”爱之花”的花园的时刻。他们相信真爱是一种奇迹，可以超越时间和空间，永远存在。</p><h3 id="红玫瑰和白玫瑰"><a href="#红玫瑰和白玫瑰" class="headerlink" title="红玫瑰和白玫瑰"></a>红玫瑰和白玫瑰</h3><p>从前，在一个远离尘嚣的村庄里，有一位年轻而美丽的姑娘，名叫梦儿。梦儿有一颗善良而纯洁的心，她一直梦想着找到真爱。</p><p>有一天，梦儿听说在村庄的尽头有一片神奇的花园，据说只有那些纯真而真诚的心灵才能找到。梦儿立刻决定前往花园，希望能找到属于她的真爱。</p><p>梦儿穿过茂密的树林，跨过清澈的小溪，来到了花园的入口。她被眼前的景象惊艳到了，花园里开满了各种各样的鲜花，每一朵都散发着迷人的香气。</p><p>在花园的中心，梦儿看到了一朵最美的红玫瑰。她走过去，小心翼翼地抚摸着玫瑰的花瓣，然后向它倾诉了她的心愿，希望能够找到真爱。</p><p>就在那一刻，奇迹发生了。红玫瑰的花瓣开始发光，梦儿感到自己被一股温暖的力量环绕着。突然，花园的另一边出现了一朵白玫瑰，它散发着柔和的光芒。</p><p>梦儿走过去，惊喜地发现那朵白玫瑰中，站着一位英俊而善良的年轻人，名叫晨阳。他们的目光交汇，仿佛两颗心灵在这一刻彼此相识。</p><p>梦儿和晨阳迅速坠入爱河。他们一起探索花园，分享彼此的梦想和希望。他们的爱情像花园里盛开的鲜花一样美丽，充满了温馨和幸福。</p><p>然而，命运并不总是顺利的。晨阳被迫离开村庄，前往远方寻找自己的命运。梦儿心痛不已，但她深信他们的爱情是坚不可摧的。</p><p>梦儿决定等待晨阳的归来。她每天都来到花园，静静地注视着那朵白玫瑰，坚信有一天他们将再次相聚。</p><p>岁月匆匆流转，花园里的鲜花开放过又谢落，但梦儿的心始终如一。终于，一天清晨，晨阳回到了村庄。他找到了梦儿，两人紧紧拥抱，泪水和喜悦交织在一起。</p><p>从那一刻起，梦儿和晨阳决定永远在一起，他们的爱情更加坚定而珍贵。他们一起建立了幸福的家庭，共同度过了一生的点滴时光。</p><h3 id="小猫咪"><a href="#小猫咪" class="headerlink" title="小猫咪"></a>小猫咪</h3><p>在一个小镇上，有一只叫小咪的小猫。小咪是一只非常害羞和胆怯的猫，她总是躲在角落里，不敢和其他动物交流。</p><p>有一天，小咪听说小镇上将举办一场才艺表演，每个动物都可以展示自己的特长。小咪心里很想参加，但她一想到要站在众人面前表演，就感到十分害怕。</p><p>小咪徘徊了很久，最终下定决心克服自己的害羞。她开始每天练习歌唱，因为她深知自己有一副美妙的嗓音。虽然刚开始的时候声音有些颤抖，但小咪不断努力，坚持练习。</p><p>表演的日子终于到来了，小咪站在舞台上，她的心跳得很快，但她鼓起勇气，开始唱歌。随着歌声的传出，小咪渐渐放开了自己，她唱得越来越自信，也越来越动情。</p><p>观众们被小咪美妙的歌声所吸引，他们为她鼓掌欢呼。</p><p>从那以后，小咪不再害怕和其他动物交流，她变得开朗而友善。她开始参加更多的表演和社交活动，与大家分享她的才艺和快乐。</p><h2 id="原创睡前小故事"><a href="#原创睡前小故事" class="headerlink" title="原创睡前小故事"></a>原创睡前小故事</h2><h3 id="失踪的胡萝卜"><a href="#失踪的胡萝卜" class="headerlink" title="失踪的胡萝卜"></a>失踪的胡萝卜</h3><p>前几天还烈日当空，热得让人心烦意乱的天气突然降了温，刮起了冷风，这让刚穿上小裙子的小兔子手足无措，不出意外的感冒了。</p><p>打开门的那一刻，寒风迫不及待的从外面钻了进来，小兔子打了个寒颤，缩了缩小脑袋硬着头皮出门了。她要去菜地里给自己的胡萝卜浇水，顺便去山羊伯伯的超市瞅瞅有没有胡萝卜，因为橱柜里的胡萝卜都吃完了，再不去找胡萝卜小兔子就要饿坏了。</p><p>小兔子顶着寒风一路小跑来到菜地里，看到胡萝卜苗东倒西歪，不少幼苗甚至被风拦腰斩断，她难过极了。</p><p>可是更让小兔子绝望的还在后面，超市里的胡萝卜都卖光了。</p><p>山羊伯伯告诉小兔子从昨天起就有好多小动物来买胡萝卜，大概是大家的菜地都收到寒风的攻击，于是开始储存粮食了吧。小兔子只得提着最后一颗白菜垂头丧气的回了家。</p><p>“失踪”的胡萝卜都到哪里去了，小兔子想不明白。“噔噔噔”，门外传来一阵急促的敲门声，小兔子急急忙忙从被窝里出来打开了门。</p><p>门外的小熊迫不及待地探出个脑袋问道：“小兔子，小兔子，你还有胡萝卜吗？</p><p>“咦？我记得你不吃胡萝卜呀？你要胡萝卜干什么呢？”小兔子挠了挠自己的小脑袋。</p><p>“我要拿胡萝卜和小狐狸交换他收藏的手办！”</p><p>小兔子不好意思地如实回答道：“我的胡萝卜也吃完啦，现在也没有了呢。”</p><p>“可是小狐狸要胡萝卜做什么呢？”小兔子望着没有拿到胡萝卜失望离开的小熊，陷入深思。</p><p>为了一探究竟，小兔子趁第二天风小点的时候来到小狐狸家，还没进门小兔子就惊呆了，小狐狸门外摆着好几筐胡萝卜。</p><p>看到小兔子的小狐狸激动的跑了过来，揉了揉小兔子的小脑袋，一脸自豪，邀功道：“我看到你菜地里的胡萝卜苗都坏了，害怕你没粮食了，就为你攒了这些胡萝卜。”</p><p>小兔子看着眨巴着眼睛的小狐狸哭笑不得，一时间不知道说什么，扑进了小狐狸的怀里。</p><p>小狐狸抱住小兔子，依旧喋喋不休道：“今天下午我去镇上给你买了感冒药，一会儿记得喝呀。”</p><p>其实真正被爱的时候真的不需要有太多顾虑，因为你只要相信，只要你需要，他就一直在。</p><h3 id="因为是你呀"><a href="#因为是你呀" class="headerlink" title="因为是你呀"></a>因为是你呀</h3><p>“你好，我想问一下还有今天上午的电影票吗？”小兔子眨着闪闪发光大眼睛问道。</p><p>前台服务的小松鼠微笑道：“还有呢。”</p><p>但是小兔子并没有买下电影票，而是蹦蹦跳跳来到外面的长椅旁，一屁股坐了下去。她无聊的来回搓着自己的小手，眼睛还时不时的望向电影院门口。</p><p>太阳渐渐爬上了头顶，小兔子依旧坐在长椅上，屁股慢慢挪了挪，让自己处在树荫下。接着继续对着电影院的大门口发呆。再后来呢，太阳暖洋洋的，小兔子靠着椅子，晒着太阳，上下眼皮开始打架……</p><p>突然一个温柔的声音在她耳边响起：“小兔子醒醒，我来啦！”</p><p>小兔子揉了揉自己的眼睛，定睛一看，原来是小狐狸来了！她激动地坐起身来，意外发现今天的小狐狸与平时不太一样，今天的小狐狸格外帅气，一身西装，手里捧花束，把自己收拾的干干净净。</p><p>要知道在平时，小狐狸不是在田里帮山羊伯伯拔草，就是爬上树帮小袋鼠捡风筝……经常把自己弄得脏兮兮的回家，然后骄傲的告诉小兔子：“作为一名合格的森林警察，我这可是为人民服务。”</p><p>小兔子第一次见小狐狸这么正式，都有点不好意思了，脸越来越红，红的发烫，好像有一团火在脸上燃烧。</p><p>再后来呢，只听见“砰”一声，小兔子眼前一黑，再一睁眼才发现原来自己在长椅上睡着了，头撞在一旁的树枝上才醒了过来朝空荡荡的大门看了一眼，不由得长叹一口气。</p><p>又过了好长好长时间，半山腰只留住太阳公公半个脸的时候，一个黑色的身影伴着余晖一路小跑来到电影院，他一如既往的脏兮兮的，只是在小兔子眼里，他身上的泥土伴着夕阳，就像是一副金色的铠甲。</p><p>小狐狸气喘吁吁，不好意思的挠了挠脑袋：“宝贝，对不起，我真的超级努力了，让你久等了。”</p><p>虽然小兔子心里有些生气，可是一想到自己喜欢小狐狸，正是喜欢他认真负责，乐于助人的样子，就没有那么生气了。</p><p>撅着嘴道：“那就罚你陪我看一晚上电影。”小狐狸耳朵立马竖起来，开心道：“真的吗？可是宝贝不是最讨厌迟到的人吗？我还迟到这么久……”说着说着小狐狸越来越没有底气，耳朵又耷拉下来了。</p><p>小兔子笑着踮起脚揉了揉小狐狸的脑袋，轻声道：“因为是你呀，是我最喜欢的小狐狸呀！”</p><p>我原来设想过很多另一半的的样子，也有很多理想型，直到遇到你，我放下了很多原则，只因为对比起那些原则，我好像最喜欢的是你。</p><h3 id="跨年夜"><a href="#跨年夜" class="headerlink" title="跨年夜"></a>跨年夜</h3><p>小狐狸和小兔子坐在桌子边，听着钟摆滴答滴答的响。</p><p>小兔子盯着桌子上摆的巧克力甜甜圈咽了咽口水：“要什么时候才能吃呀。”</p><p>小狐狸看了看墙上的挂钟认真的说“还有一个小时了，很快的。”⏲️</p><p>“我先吃一口嘛，就吃一小块。”小兔子瞪着大大的眼睛委屈巴巴的望着小狐狸。</p><p>小狐狸抬手摸了摸小兔子的脑袋：“不可以，新年的第一分钟一定要吃甜甜的东西，这样一整年都是甜甜的，提前吃了就不算数了。”</p><p>“哪里来的道理。”小兔子瘪着嘴一脸不开心的趴在桌子上。</p><p>小狐狸看着小兔子的样子无奈的摇了摇头，他伸手把小兔子拽进怀里，轻轻的摸着他背上的绒毛：“很快的，给小兔子讲个故事好不好，故事听完了，就可以吃甜甜圈了。”</p><p>“那好啵。”小兔子在小狐狸怀里缩成一圈，找了个最舒服的姿势。</p><p>小狐狸想了想，给小兔子讲了一个自己小的时候，奶奶讲给他的故事。</p><p>故事讲完了，小兔子窝在温暖的怀抱里昏昏欲睡，零点的钟声敲了起来，是新的一年了。</p><p>小兔子顺着钟声探出脑袋，伸出小爪子如愿以偿的吃到了甜甜圈，他舔了舔嘴边的巧克力酱突然直起身子亲了亲小狐狸。</p><p>“这样我们两个都是甜甜的了。”小兔子一本正经的点了点头。</p><p>晚安</p><h3 id="伴你入眠"><a href="#伴你入眠" class="headerlink" title="伴你入眠"></a>伴你入眠</h3><p>在森林里有一个美丽的村子，村子里住着一只特别贪玩的小兔子。</p><p>小兔子每天都会在外面玩很久，至到月亮在天空高高的挂起才会回家。</p><p>后来有一天她遇到了小狐狸，小白兔渐渐不再那么贪玩，每天早早的就会回到家里，在沙发上舒舒服服得窝着等小狐狸给她做她最爱喝的胡萝卜浓汤。</p><p>每晚睡前，小狐狸都会给她讲一个非常甜蜜美好的睡前小故事。</p><p>每次看见小白兔带着甜甜的微笑睡去，小狐狸都会在她的脸颊上轻轻的落上一个吻，满脸都是幸福。</p><p>突然有一天，小狐狸要去很远很远的地方，家里只剩下小白兔在孤零零得等着小狐狸回来，没有了好喝的胡萝卜浓汤。</p><p>也没有了甜甜的睡前小故事，屋里空荡荡的没有声音，安静的可怕。</p><p>“不是说好只去三天的吗，怎么去了五天了还没有回来呢?</p><p>小白兔爬在窗户边上，手里拿着小狐狸的照片，呆呆得看着远方，哭着睡着了。</p><p>天色渐渐暗了下来，森林里青蛙和蛐蛐的叫声交汇在一起，把小白兔从睡梦中吵醒。</p><p>从厨房传出了一股很浓烈的香气，小白兔揉揉眼睛，起来一看。</p><p>原来是小狐狸回来了，正拴着围裙蹑手蹑脚的煮着胡萝卜浓汤。</p><p>小兔子红着眼眶跑过去从背后抱住小狐狸，说:以后不要再把我丢下了好吗?我们要永远在一起。</p><p>小狐狸没有说话，转过身来紧紧地抱住她。</p><p>吻了一下她的额头，在心里念道:会的，傻丫头。</p><p>晚安</p><h3 id="我一直陪着你"><a href="#我一直陪着你" class="headerlink" title="我一直陪着你"></a>我一直陪着你</h3><p>小兔子感冒了，已经赖在床上一整天了，小狐狸一大早就打电话请了假坐在床边照顾着他。</p><p>“感冒了也不可以不吃饭，总要吃点东西才能好。”小狐狸坐在床边摸了摸小兔子的额头。</p><p>小兔子摇摇头把被子往上拽了拽盖住半张脸:“不要吃饭，不要吃药，我睡一会儿醒来就好了。”</p><p>小狐狸叹口气伸手拿了床头柜上的杯子吹了吹:“已经不热了，乖乖起来把药喝了在睡，这个不苦的。”</p><p>小兔子偏着头看了看小狐狸，他觉得小狐狸看起来有点严肃，在闹一会恐怕要生气了，他也只好支着身子坐起来:“真的不苦么?药哪有不苦的。</p><p>小狐狸弯眸拍了拍小兔子的脑袋，他端着杯子抿了一口里面褐色的药汁，又凑上去在小兔子嘴角亲了亲:“你看,是不是不苦的。</p><p>小兔子连忙捂着嘴一脸惊恐的看着小狐狸:“会传染的!</p><p>“那还不乖乖喝药，是不是最近都不想让我亲你了。”小狐狸戳了戳小兔子的脑门把药递给他。</p><p>唔..小兔子抬眸看了看小狐狸也只好仰头把药喝了下去。</p><p>小狐狸坐在一边伸手剥了颗糖，看着小兔子吃完药把糖喂他嘴里。</p><p>“吃了糖就不苦了，明天感冒好了带你去买凤梨酥吃。”小狐狸让小兔子躺好，伸手给他掖好被角俯身亲了亲他。</p><p>“不要亲我了，会传染给你的，狐狸真笨这都不知道。”小兔子撅着嘴盯着小狐狸看。</p><p>小狐狸挠了挠头咧开嘴角冲小兔子笑:“ 那我就跟你一起吃药嘛。”</p><p>晚安</p><h3 id="不一样的喜欢"><a href="#不一样的喜欢" class="headerlink" title="不一样的喜欢"></a>不一样的喜欢</h3><p>窗外黑黑的，天还没亮，小狐狸都还没醒，小兔子就睁开了眼。</p><p>“亲爱的，亲爱的!起床啦！”小兔子爬起来推了推小狐狸，“醒醒呀！起床收拾东西啦！”</p><p>小狐狸揉了揉眼睛道：“宝贝，天还没亮呢，再睡会呀。”</p><p>“可是……”还没等小兔子说完，小狐狸一只爪子一拽就把小兔子强行搂在怀里。</p><p>小狐狸怀里好暖和呀，睡意来袭，小兔子的上下眼皮开始打架，不一会儿就睡着了。</p><p>原来小兔子昨天和自己好久没见的好朋友小猫在电话里约好了，今天小猫来小兔子家拜访，小兔子开心极了，昨天晚上激动的睡不着，今天早早的就醒了。</p><p>她真的好想念小猫呀，小猫是她从小到大的小伙伴，但是后来小猫一家要搬去镇上就离开了森林，小兔子就再也没有见到小猫了。现在终于能见到小猫了，小兔子别提有多开心了。</p><p>等小兔子再醒来的时候，厨房里早已经满香扑鼻。睡醒的小兔子发现小狐狸已经把家里收拾的干干净净，还去菜园子里摘了菜，买了几条鱼，午餐也准备好了。</p><p>“宝贝，醒啦。”看到厨房门口的小兔子后，小狐狸宠溺地揉了揉小兔子的脑袋道：“收拾收拾我们去接小猫吧。”</p><p>小兔子点着小脑袋赶紧跑去换好衣服就和小狐狸来到车站。</p><p>不一会儿，从公交上下来的小猫和黑熊打打闹闹。这让小兔子感到疑惑，因为她和小狐狸每次坐公交下车的时候，小狐狸都会走在他前面小心地拉着她的小手，生怕她摔倒。真是个粗心的男朋友，小兔子对黑熊心生不满。</p><p>没有在意黑熊的自我介绍，小兔子直接忽略黑熊去拉小猫的手，两个好姐妹一路上都喋喋不休。小狐狸和黑熊呢，在后面提着大包小包，慢慢悠悠的有一搭没一搭的聊着天。</p><p>回到家，小兔子迫不及待拉着小猫尝一尝小狐狸的手艺。</p><p>“这是小狐狸做的吗？”小猫不敢相信，无奈摇摇头道：“真好吃，不像黑熊，焖个饭都能糊了。”</p><p>“那那那，你们家不会是你做饭吧！”小兔子非常震惊。</p><p>在得到小猫肯定的回答后，小兔子懵了，有点心疼小猫，每天要早起做饭，不可以睡懒觉，想想都痛苦。也偷偷在心里给小狐狸加分。</p><p>吃饭的时候呢，黑熊老是顽皮的抢小猫要夹的鱼，小猫也不甘示弱抢黑熊喜欢吃的竹笋，两人打打闹闹。再看小狐狸一直不停地给小兔子夹她喜欢的胡萝卜。</p><p>小兔子不理解，在思考了半天后得出一个结论：黑熊根本不喜欢小猫，不然怎么可能抢小猫的鱼嘞。想到这里，小兔子开始担心小猫，耳朵一直耷拉着，顿时觉得胡萝卜也没那么好吃了。</p><p>虽然见到了小猫，可是小兔子心里却多了块大石头，沉甸甸的。</p><p>晚上送别了小猫和黑熊，小狐狸拉着小兔子的小手问道：“宝贝是不是有什么心事呢？看你今天下午一直闷闷不乐哎。”</p><p>小兔子长叹一口气说出了自己的困惑和担心。</p><p>“傻瓜，黑熊超级喜欢小猫的呢，你是没看到下车打闹前黑熊用胳膊围住小猫，另一只爪子拉紧扶手，直到车停了才撒手和小猫玩闹呢，还有你只看到他抢小猫的鱼肉，没看到他小心翼翼挑出鱼肉的小刺夹给了小猫呀。”</p><p>小狐狸宠溺地看着小兔子耐心解释道：“关于做饭这件事呢据我所知，黑熊也在努力学习做菜，而且每次吃完饭就像你一样抢着洗碗呢。每对情侣的相处方式都不一样，但这并不影响他们对彼此的爱呀。”</p><p>也许这世间的情爱有所不同，但爱对方的心都是深沉而热烈的吧。</p><h3 id="春风十里不如你"><a href="#春风十里不如你" class="headerlink" title="春风十里不如你"></a>春风十里不如你</h3><p>最近小兔子也不知道从哪里听来的消息，说和心爱的人一起看日出就会在一起一辈子。于是她撒着欢的跑到小狐狸家，疯狂敲门。</p><p>小狐狸小狐狸在家吗</p><p>小狐狸迷茫的打开门，他不知道有什么样的事情值得小兔子这么急。怎么了小兔子，是出什么事了吗。</p><p>哎呀不是啦笨狐狸，是我想和你明天在森林尽头的山上看日出。</p><p>我当是什么事儿呢，当然可以啦，那我们明天早上见。</p><p>第二天一早小兔子便带好了各种东西跑到了小狐狸家和小狐狸一起出发了。可是天不遂人愿，他们越往山上走发现天气越阴沉，快到山顶的时候竟然下起了小雨，把小兔子兴奋的心也浇灭了。小兔子的眼泪也不自觉的从眼角滑落了下来。</p><p>小狐狸看到小兔子哭了，急忙问，小兔子你怎么了啊，怪我没有看好天气就来，你不要哭好不好。</p><p>可是可是，小兔子却哭的更厉害了。过了好一会儿，她才说。因为大家都说和心爱的人一起看日出就会在一起一辈子，我怕我不能和你一直一直在一起了。</p><p>小狐狸却突然笑了，擦了小兔子眼角边的眼泪，抱着她说：“傻兔子，虽然没有看到日出很遗憾，可是这世界上最遗憾的事情却是没有你，我会一直一直和你在一起，看很多很多次日出，把这世间的美好都和你一起走完，这样是不是就没有遗憾了。”</p><p>小兔子看着眼前认真而深情的小狐狸停止了哭泣，温柔的对他说：“那你，可不许反悔哦”</p><h3 id="甜甜的梦分你一半"><a href="#甜甜的梦分你一半" class="headerlink" title="甜甜的梦分你一半"></a>甜甜的梦分你一半</h3><p>这么晚了让我看看那个不乖的小宝贝还没有睡觉呀。</p><p>“嘿嘿小狐狸，你要陪我熬夜嘛，今晚我甜甜的梦都被邻居的小刺猬抢走了，害得我呀睡不着。 ”</p><p>“你，你又在找借口，记得上次我陪你熬了一次夜，第二天差点被别人当成国宝抓走了，这次再怎么说你都得乖乖睡觉，这支胳膊今晚是你的了，我保证胳膊麻了我都不会拿走，快乖乖躺下来。”</p><p>“小狐狸你真好，我们来聊聊天吧，我又想起了上次，我们一起偷胡萝卜，你当时看我想吃胡萝卜，后来我们被泥弄了一身……..”</p><p>“我还是第一次看到你生气呢，以为你不会要我了呢，谁想到你个呆子，说不管我变成什么样，你都会娶我，还说你永远记得我美丽的样子，你说完这句话的时候，我当时心里特感动，我觉得我这辈子啊就认定了你”</p><p>“你这么一说，我也想起来了，那天就是生气了，我自己不知道，然后你也跟我一起生气，哈哈哈，那我也不会不要你，我要每天都陪着你”</p><p>“小狐狸我们睡觉觉吧，我感觉甜甜的梦又回来找我了呢，明天不准睡懒觉听到没，陪我出去玩，出去吃好多好多东西，我要吃糖，七彩的棉花糖，”</p><p>“好，明天我一定不睡懒觉， 带你去吃好多你没吃过的东西，奥还有你想吃的七彩棉花糖”</p><p>“看在你这么好的份上，我把甜甜梦分你一半”</p><p>晚安</p><h3 id="属于你的小精灵"><a href="#属于你的小精灵" class="headerlink" title="属于你的小精灵"></a>属于你的小精灵</h3><p>从前在在大森林里有一只小兔子和小狐狸生活在一起。秋天快到了，小兔最近外出总是挖不到品相姣好的胡萝卜，晚上回到家有些不开心。</p><p>小狐狸看到小兔子闷闷不乐的，傍晚吃完晚饭去森林里面找到会魔法的猫头鹰大叔。</p><p>猫头鹰大叔听了小狐狸的请求，想了一会从库房翻找出一块白色的布递给小狐狸，并在他的耳朵边轻轻嘱咐一番，小狐狸抱着布兴高采烈地回家了。</p><p>晚上，小狐狸对小兔子神秘的说:“听猫头鹰大叔说今晚会有快乐的小精灵给森林里面幸运的小动物送上小礼物，你晚上盯着点窗户外面，说不定好运就会降临呢。”</p><p>“嗯嗯。”小兔子将信将疑地点点头。</p><p>小狐狸退出小兔子的卧室，看看墙上钟表的时间，把白色的床单披在身上，用剪刀剪出鼻子眼睛和耳朵的窟窿，照着镜子看了看，觉得挺像个小精灵。</p><p>接着蹑手蹑脚推开小屋的门，走到小兔子卧室的窗前。</p><p>屋里的小兔子正坐在灯下看书，忽然窗户前一道影子闪过。</p><p>小兔子吓了一-跳，可是又想到小狐狸晚上跟她说过的话，她打开卧室门大喊:“小狐狸，小精灵来了，你也过来看看呀。”可是并没有小狐狸的回应。</p><p>小兔子壮壮胆子往窗户前凑凑，“嗖”一 只又红又大的胡萝卜从窗户飞了进来，还没等小兔子反应过来“嗖”，有一只胡萝 卜飞了进来。</p><p>不一会儿，十几只胡萝卜已经堆在小兔子的面前，“谢谢你，小精灵能让我看看你嘛，我家的小狐狸也想见见你，不知道你有没有准备他的礼物。”</p><p>这时披着白床单的小狐狸推开卧室门走进来，小兔子一愣尖叫道:“鬼呀!”</p><p>小狐狸掀开床单抱住了小兔子:“嘿，我的小兔子，我是你的小精灵呀。”</p><p>晚安</p><h3 id="情不知所起，一往而深"><a href="#情不知所起，一往而深" class="headerlink" title="情不知所起，一往而深"></a>情不知所起，一往而深</h3><p>天晴得像一张蓝纸，几片薄薄的白云，像被阳光晒化了似的，随风缓缓浮游着。小兔子正看着窗外百无聊赖的发着呆，这时一阵电话铃声结束了这片寂静。</p><p>“小兔子，我们这个周末出去玩儿吧！”好朋友小松鼠兴奋的在电话里说到。“去哪里，和谁啊？”小兔子问。“就去咱们附近很知名的那座山上野炊，和…和我一直喜欢的那个男生小猴子。”</p><p>小松鼠不好意思的说到。“那我去干嘛啊，会当电灯泡。”小兔子嘟囔到。“不会啦不会啦，他也带着一个朋友，咱们四个人呢。去吧去吧，听说他那个朋友很帅哦，你也单身这么久了，搞不好有戏呢？”小松鼠坏坏的说到。</p><p>小兔子听到这里还是有所顾忌，不过小松鼠说的也对，自从上一段恋爱之后，小兔子就很少和男生接触了，更别提恋爱一说。小兔子听到这里叹了口气说：“那好吧，但是说好了只是见一见哦。”</p><p>就这样，周末很快到来了。天气预报说今天一整天都会是好天气，小兔子和小松鼠碰面以后很快就来到了四人约定的地方。不一会儿两个男生走来了，其中一个男生很大方的介绍到：“你好，我是小狐狸，是小猴子的朋友。”</p><p>小兔子看到男生帅气的脸庞，突然害羞了起来，支支吾吾道：“你…你好，我是小兔子，很高兴认识你。”</p><p>就这样四人一起开开心心的上了山，两两成对有说有笑。但是天公不作美，不一会儿天气便变得阴云密布了起来，“果然是不能相信天气预报呢，好在该看的景色也看的差不多了。”小松鼠叹息到。</p><p>说着四人就商量马上下山，在下山的过程中，淅淅沥沥的小雨便下了起来，路面变得湿滑了起来，小松鼠和小猴子也不见了身影，小兔子和小狐狸只能慢慢的走着下山。</p><p>因为道路的难走，两人靠的很近很近，有的路段也互相搀扶。通过一天的相处两个人的心里也都对对方有了依赖和好感，但是都不知道该怎么开口。</p><p>这时小兔子突然滑了一下，小狐狸赶紧抓住了她的手。“你没事吧！”小狐狸紧张的问到。小兔子摇摇头说：“没事没事，继续走吧。”</p><p>可是小狐狸拉紧的手却再也没有放开，反而越来越紧，就连手心出汗了也舍不得松开。安全下山后，两个人互相留了联系方式后，便离开了。</p><p>之后小兔子每几分钟就要看一眼手机，看看小狐狸有没有给自己发消息，几个小时过去了，还是没有动静。</p><p>小兔子开始想是不是小狐狸只是担心她的安危，而不是她想的那个意思。正胡思乱想到这里，小狐狸的电话便来了，小兔子又紧张又兴奋，但还是故作镇静的接起来问：“这么晚了有什么事儿吗？”</p><p>对面的小狐狸说到：“我想了很久怎么给你编辑一段话，可是思来想去这种事应该去正式的说一下才算能表达我的真心。所以…我喜欢你，你可以…做我的女朋友吗？”此时的小兔子紧张到都能听到自己的心跳声，她平复了一下心情才说到：“嗯，我愿意。”</p><p>后来小兔子问小狐狸：“你当时为什么要抓那么紧啊？”小狐狸认真的想了想说：“因为抓住了，就再也不想放开。”</p><p>晚安</p><h3 id="很幸运能有你"><a href="#很幸运能有你" class="headerlink" title="很幸运能有你"></a>很幸运能有你</h3><p>等了好久好久，终于到了小兔子和小狐狸见面的日子，虽然这一天特别热，小兔子站在外面汗直流，但也抵挡不了她的开心。</p><p>抱着花等待的小兔子在看到小狐狸的那一刻就扑进了他的怀里，努力蹭了蹭，然后手牵着手回到了住的地方。</p><p>第二天小兔子跟小狐狸在外面逛了一天，回到家里洗洗就躺在床上了，这一天可太累了，月亮已经挂上了天空，小狐狸看了看窗外满天的星星:“外面的月亮都要睡觉了，我的小宝贝什么时候睡呀?”</p><p>小兔子在小狐狸怀里揉了揉眼睛，撒娇道:那你哄我睡觉吧。</p><p>“从前有一只小狐狸，他很喜欢小兔子，喜欢到时时刻刻想和小兔子待在–起，他会因为小兔子睡不好而给她温柔讲睡前故事。</p><p>即使自己很忙，他会记住小兔子的口味，给她买她爱吃的，他会温柔耐心地给小兔子讲道理，不会凶她….</p><p>小兔子呢，也很喜欢小狐狸，但是小兔子不善于表达自己的情感以至于有时候小狐狸觉得她不喜欢自己，因为小兔子觉得，自己只要在心里越来越喜欢小狐狸就行了，不需要说出来。</p><p>所以小狐狸总是会怀疑小兔子到底喜不喜欢他，总是会想办法去得到自己想要的答案，去确认小兔子是不是真的喜欢自己，天天缠着小兔子，后来…..”</p><p>故事刚讲到一半，小狐狸发现小兔子已经在怀里睡着了。</p><p>看着她微微发红的脸颊，听着她轻微的呼吸声，小狐狸觉得好安心。</p><p>小狐狸凑上前亲了一个，“笨蛋， 故事我还没讲完呢，你就睡着啦，好在我爱你你都知道不用怀疑，好幸运遇见了你。</p><p>晚安</p><h3 id="我想走近你"><a href="#我想走近你" class="headerlink" title="我想走近你"></a>我想走近你</h3><p>今天…小狐狸和小兔子吵架了，两个人吵得不可开交，至于是什么原因呢，就是小狐狸最近太忙了，时常忙到深夜，总是顾不上小兔子，就连最近一次的节日都没能陪小兔子好好过。</p><p>一边小狐狸觉得自己也尽力在陪小兔子了，想早点做完工作陪着小兔子，可是小兔子却觉得他已经忙了太久了，这次还不知道什么时候才能结束。</p><p>最后两个人都不和对方说话了，小狐狸继续在忙着些什么不说话，而小兔子更是收拾好随身东西从家里离开了。两个人的争执以关门声作为结束。</p><p>外面热浪来袭，蝉鸣声这时格外刺耳，在家的小狐狸逐渐按耐不住，小狐狸开始不停的在家里踱步，不知道小兔子在外面有没有危险，有没有哭，还在不在生气，有没有被晒到，会不会中暑。</p><p>最重要的是自己真的好想好想她，最近也的确因为自己的事情总冷落小兔子，小兔子受委屈了自己不应该总是只顾自己的想法。</p><p>想到这里小狐狸拨通了小兔子的电话，可是电话没响两声就被挂了。他又打了一个小兔子接起来了，“小兔子你在哪里啊，我去接你。”</p><p>小兔子淡淡的说：“外面。”然后就又挂断了。小狐狸难过的想，她应该还在生气吧，但是他很快又想，不管怎么样，他应该去找找她。</p><p>他赶紧穿好衣服打算出门，刚推门他惊奇的看到小兔子竟然回来了。“你…怎么回来了。”</p><p>小狐狸惊讶的问，小兔子说：“我去买了点吃的，一会儿给你做汤喝。”小狐狸抱住小兔子说：“对不起，这事儿的确是我错了，我已经都忙完了，不会再这样了以后。”说着说着眼眶都有点红了，小兔子傲娇的问他，“那你知道错了吗？”</p><p>小狐狸认真的点点头说：“我真的知道错了，我已经订好了过两天带你去玩儿的票，还有还有最重要的是我不应该留你一个人那么久。”</p><p>小兔子摸摸他头说：“那就看在你这么用心承认错误的份上原谅你了，你看我给你买了最喜欢的吃的，有好身体才能赚钱啊。”</p><p>小狐狸看着眼前鼓励自己的小兔子，他知道自己遇到了那个愿意走向自己的人，很安心，很温暖。</p><p>夏天树影婆娑，风暖暖的，夏天…不仅有泥土的芬芳，繁茂的树荫，还有一份独特的青涩和两个相互奔赴的心。</p><p>我知道人心很难测，可是我知道你一直都在慢慢的走向我，从未远离。</p><p>晚安</p><h3 id="你是我想见到的人"><a href="#你是我想见到的人" class="headerlink" title="你是我想见到的人"></a>你是我想见到的人</h3><p>小狐狸很怕夏天的雨季，因为一到这个时候就会把漂亮的红色皮毛弄得湿湿的，浑身很不舒服。</p><p>但是住在隔壁的小兔子却相反，很喜欢在雨天里绕着森林走走停停，她才不会明白隔壁的小狐狸为什么不喜欢这样的天气，她只知道每次一到这会儿就看不到小狐狸的影子。</p><p>终于又在一个雨天里，小狐狸又窝在家里，可是这一次小狐狸没有准备足够的吃的，肚子饿得咕咕叫。</p><p>可是他真的不想出去啊，没有办法他打开家门偷偷的往外看了一眼，试图有别的路过的小动物能给他一点吃的，这样就可以不用被淋湿了。</p><p>当他打开了门的那一刻，小兔子突然从门后跳出来吓了他一跳，“小狐狸，很难得这样的天气你还打开门。”</p><p>小狐狸惊讶的看着他说：“你怎么在这里，话说你有吃的吗，我是因为太饿了。”</p><p>小兔子笑着说：“原来是因为这个啊，可是我只有胡萝卜，你吃胡萝卜吗”小狐狸开心的说：“胡萝卜！我最喜欢吃胡萝卜了。”</p><p>小兔子便给了他一根，此后的每个雨天小兔子都会敲开小狐狸的门给他一根胡萝卜，也会在小狐狸的家里和他一起在火炉旁聊聊天，干一干毛发。</p><p>从此小狐狸也喜欢上了雨天，可是他其实知道，他喜欢的不仅仅是雨天，而是下雨天按时敲开他门的那只小兔子，虽然每次只能说几句话，温暖的却是一整个雨天。</p><p>晚安</p><h3 id="我想每天见到你"><a href="#我想每天见到你" class="headerlink" title="我想每天见到你"></a>我想每天见到你</h3><p>夏天到了，小兔子一到这会儿，整只兔都没有精神，成天耸拉着耳朵，拖着沉重的脚步。可就在最近，它找到了一个好地方，就在离家不远的一个山洞里，里面很凉快还能听到潺潺的水声。</p><p>这都不是最重要的，最重要的是山洞口总会有新鲜的水果放着，不知道是谁的，小兔子每次都只敢吃几个，怕被水果的主人发现。可是水果太新鲜太好吃了，冰冰凉凉的，有的时候小兔子就忍不住多吃几个。</p><p>直到上周，小兔子还是照常到了山洞口，她发现今天的水果是西瓜，但是只有半个。</p><p>它心想，“这可怎么办啊，我要是吃了肯定会被发现的。要不一不做二不休，趁还没有注意吃掉好了全部。”想到这里它马上快速的吃了起来，吃的整只兔都红了。</p><p>“你干嘛呢”这时候有个声音从小兔子的背后传来。小兔子听到这个声音，头都没敢抬的拔起腿就要跑。可是因为吃太多了，跑都沉重了很多，很快就被抓到了。</p><p>它闭着眼睛耸拉着耳朵紧张的说：“对不起对不起，我不是故意的，只是你的水果都太香甜了，我实在没忍住。”“我没有怪你”小兔子听到这里睁开了一只眼睛看了一眼，原来是一只小狐狸。</p><p>它继续抱歉的说“对不起，我以后不会再这样了，你就原谅我一次吧，不要吃我。”小狐狸慢慢的把它放在地下说：“没关系，西瓜就是给你准备的另一半我已经吃掉了。”</p><p>小兔子惊讶的看着他说：“你…为什么要给我准备啊？”</p><p>小狐狸笑着对它说：“一开始我发现水果少了，就想知道是谁吃掉的，每次都躲在角落里看你战战兢兢的偷吃，很可爱。今天就想过去吓吓你，没想到真的把你吓到了。”</p><p>小兔子听到这里不好意思的说：“那我…那我以后还能来你这里吗？”</p><p>小狐狸摸摸它的头说：“可以啊，毕竟我还想天天见到你。”</p><p>晚安</p><h3 id="生活很苦，但你很甜"><a href="#生活很苦，但你很甜" class="headerlink" title="生活很苦，但你很甜"></a>生活很苦，但你很甜</h3><p>森林里有个不成文的规定，那就是每当六七月份下雨的时候，森林里的小动物就只能在家。没有人去规定过，可是好像大家都这么做的。这可难坏了刚在一起的小兔子和小狐狸。</p><p>“小狐狸我好想你啊，咱们还有整整两个月才能见面，这样的日子什么时候才能结束啊。”</p><p>小狐狸心里听了也很不是滋味，可是他知道自己这时候要是也非常难过的话，那小兔子一定会更加难过的。他重新振作了一下说：“我可以和你一直打着电话，你想我了就可以马上看到我。”</p><p>可是我们总要睡觉的，你睡着了我想你怎么办”</p><p>“那我们就睡觉都打着电话不挂断，这样我们就能时时刻刻在一起了”</p><p>小兔子眼里有一阵欣喜，可是很快她眼里又有一丝伤感，“可是我这两天都睡不着觉，就很想你。”</p><p>“那我给你讲睡前故事吧，讲到…直到你睡着为止。”</p><p>“真的吗，可是讲那么久的故事你一定会烦的吧”</p><p>小狐狸这时候眼神变得温柔而严肃了起来，“怎么会烦呢，只要你能开开心心的，我讲多少故事都愿意”</p><p>小兔子听了以后非常感动，但是她还是可怜兮兮的继续问，“你为什么要对我这么好啊”</p><p>小狐狸温柔的笑着说，“傻兔子，笨兔子。因为世界上有那么多那么多的小兔子，却偏偏幸运的遇见了你，所以我只能加倍的对你好。</p><p>等到乌云散去，阳光洒满大地，我就把我种的唯一的胡萝卜拿来给你吃，因为你是最特别的，值得我用很久很久来等待。</p><p>晚安</p><h3 id="刚好听见你喜欢我"><a href="#刚好听见你喜欢我" class="headerlink" title="刚好听见你喜欢我"></a>刚好听见你喜欢我</h3><p>小兔子最近总是看见小狐狸对着大树在自言自语，她觉得很奇怪，可是每当她走上前想问问小狐狸时，小狐狸就会飞快地跑掉。</p><p>小兔子觉得小狐狸可能是生病了，这么一想，她顿时觉得小狐狸可怜起来，想着等自己的胡萝卜成熟了就送给小狐狸一份。</p><p>可是她不知道的是，小狐狸也悄悄的在屋后种了一大片胡萝卜，小狐狸想的是，等胡萝卜成熟就向小兔子表白。</p><p>为了顺利表白，小狐狸每天早晨都对着大树，小声的演练。</p><p>每当看到小兔子从旁边走过时，他害怕被小兔子听到，只好笨拙地跑开。</p><p>河边的小花开了满岸，小兔子的胡萝卜也熟了，这天早上，小兔子带上自己刚拔的胡萝卜，来到了小狐狸家门。</p><p>小兔子看着手里又大又红的胡萝卜，吞了吞口水，随即又摇了摇头，“不行，这是给小狐狸的!”</p><p>“小狐狸，你在家吗?”小兔子敲了敲门。</p><p>“….小兔子，你找我吗?”小狐狸挠了挠头。</p><p>“喏，送给你。”小兔子很高兴的递出双手，却看见小狐狸眨巴着眼睛。</p><p>“这是我自己种的哦，你不喜欢吗?”小兔子以为小狐狸不喜欢自己送给他的胡萝卜。</p><p>小狐狸急忙摇了摇头，“不是的不是的，..只….哎呀，你跟我来。”小狐狸紧张的拉住小兔子的手就往前走。</p><p>走了好一会儿，才停下来，眼前竟是一大片红彤彤的胡萝卜地，小兔子又惊讶又感到奇怪，她想问问小狐狸为什么种了这么多的胡萝卜。</p><p>可是小狐狸却先开了口，说道，“我很喜欢你送给我的胡萝卜，因为它比我的更甜。”</p><p>“嗯?为什么呢?”小兔子又奇怪了。</p><p>“因为我的胡萝卜缺了一个很重要的东西。”小狐狸悄悄攥紧了自己的小手。</p><p>“缺了什么呢?”小兔子想不到这么诱人的胡萝卜还会缺东西。</p><p>小狐狸盯着小兔子，小脸逐渐发烫。“它缺了一个主人。“每天晚上它都在想念一只小兔子。”</p><p>“它希望能陪着它喜欢的小兔子。”“所以，你愿意做这些胡萝卜的主人吗?</p><p>怂狐狸，我以为你只会对着大树说这些呢?我愿意!”小兔子很大声的回答，脸上是藏不住的笑意。</p><p>“你都听见了!”小狐狸更害羞了。</p><p>“你一见我就跑，我就提前躲在大树后面啦!”</p><p>“刚好听见..你说..你喜欢..”小兔子故意拉长语调。</p><p>“我喜欢你，小狐狸喜欢小兔子!”小狐狸一把抱起小兔子，转了个大圈。</p><p>晚安</p><h3 id="做梦都要宠你"><a href="#做梦都要宠你" class="headerlink" title="做梦都要宠你"></a>做梦都要宠你</h3><p>这晚，小狐狸还是照常给小兔子讲故事，两人互道晚安后，小兔子却失眠了。</p><p>至于为什么失眠呢，小兔子想可能是白天吃了太多胡萝卜，也有可能因为想了太多不属于它应该，想的事情，反正就是越来越睡不着了，最后她沮丧的坐起来，打开了手机。</p><p>要不要让小狐狸再给讲一个故事呢， 不行不行，小狐狸也累了需要好好休息。可是自己是真的睡不着呀，要是能听一听小狐狸的声音也是好的呀，就算可能对面传来的是小狐狸的抱怨。</p><p>想到这里小兔子还是试探性的打开了麦克风，小狐狸?小狐狸?你还醒着吗，小狐狸<del>在一分钟的等待之后，话筒传来了小狐狸的声音，小兔子你怎么了。我</del>我睡不着。</p><p>出乎意料的是小狐狸并没有抱怨，而是说那我再给你讲个故事吧，从前有只小狐狸~ ~听着听着小兔子果然有了困意，故事也讲完了。小狐狸晚安。</p><p>那边却没有了小狐狸的声音，原来小狐狸为了给自己讲故事困的连麦克风都不记得关了，听着小狐狸的呼吸声，小兔子心里充满了幸福。</p><p>原来，爱你的人就算再困，也会给你讲完最后一个故事呀，原来爱你的人就算做梦，都是在宠你。</p><p>晚安</p><h3 id="甜吗"><a href="#甜吗" class="headerlink" title="甜吗"></a>甜吗</h3><p>兔子小姐生病了，在家躺了几天不见好，终于耷拉着耳朵有气无力地去医院看病了。</p><p>“几天了?”狐狸先生穿着大褂故意冷着脸问她。“唔，好像快一周了…”兔子小姐低着头不敢看他。</p><p>“上次开的药你没吃吗?”</p><p>兔子小姐小声嗫嚅了一句:“太苦…..”</p><p>“所以你就一点没吃吗?</p><p>狐狸先生叹了口气，看着病得晕乎乎的兔子小姐又不忍心起来，上 周医院太忙他一-直走不开，这才让兔子小姐钻了空子在家里硬挨了一周。</p><p>狐狸先生伸出手轻轻遮住她的眼睛柔声道:“先闭上眼，护士来给你抽血了。”</p><p>最后还是重新开了一堆的药回家。</p><p>兔子小姐躺在床上被子捂着头:“你把药放桌.上，等水凉一些我就自己吃。</p><p>“我已经试过了，水温刚好，把药吃了再睡。”</p><p>兔子小姐只露出一双眼睛，有些委屈地看着他:“太苦了，我可以不吃吗?”</p><p>‘不可以哦。”</p><p>他从兜里掏出一把的糖果:“等你好了这些都给你，现在你只能稍微尝一尝味道。</p><p>最后兔子小姐还是乖乖妥协皱着眉头把药吞了，她刚放下水杯狐狸先生就凑了过来，猝不及防地吻了她，她的嘴里尝到丝丝的甜味儿。</p><p>兔子小姐脸一红捂着嘴:“ 你干嘛呀?传染给你怎么办?狐狸先生笑着:“甜吗?”</p><p>晚安</p><h3 id="感冒会传染"><a href="#感冒会传染" class="headerlink" title="感冒会传染"></a>感冒会传染</h3><p>小兔子最近重感冒，头脑昏沉沉的，连最简单的一加一的算数都说不出来，整个人缩在被窝里，一杯一杯的热水往肚子里灌。</p><p>住隔壁的小狐狸不信邪，怎么威风凛凛的小兔子突然开始变得这么娇弱，于是提着小兔子最爱吃的胡萝卜干，敲开了兔子家的门。</p><p>小兔子带着浓厚的鼻音骂骂咧咧的打开门，看到小狐狸的一瞬间眼睛里都冒小火花，“无事献殷勤，你来干嘛?”</p><p>小狐狸往小兔子旁边使劲凑，“这不，看你感冒不舒服，给你带了吃的嘛。</p><p>小兔子把小狐狸往外推，“没胃口， 别离我这么近。”</p><p>小狐狸不要脸的又往前面凑了凑,“怎么了哇，平时天天敲诈我给你买这些吃的，今天买了反而不开心了?”</p><p>小兔子吸溜了下鼻涕，咳嗽了两声，“你是真不怕被我传染感冒啊，非得跑来作死。”</p><p>小狐狸弯了弯胳膊，“看见没，我这健壮的肌肉，怎么可能说感冒就感冒，我又不像你一样虚弱。</p><p>小兔子攥紧了拳头，费了全身力气，一拳打在小狐狸身上，可惜感冒没有力气，拳头也软绵绵的。</p><p>小狐狸把小兔子打过来的拳头揣到了怀里，顺手摸了摸小兔子的头，“好好休息哈~”</p><p>小兔子裹紧了小毛毯，推搡着把小狐狸赶了出去。</p><p>后来一连好多天，小狐狸每天都带着各种好吃的不同口味的胡萝卜干来拜访，虽然小兔子多次拒绝，小狐狸还是没有放弃，终于，在小狐狸的不懈努力之下，小狐狸感冒了。</p><p>说来也奇怪，小狐狸感冒后，小兔子的感冒就好了,小兔子还有点心怀愧疚，拎着吃的来看小狐狸，经过门口的时候，听到其他小动物窃窃私语，“这小狐狸啊不知道从哪里听说，只要把感冒传染出去啊，感冒的人就会好了。”</p><p>另一个小动物接话，“怪不得天天往小兔子那里跑呢，小兔子也太幸福了吧~”</p><p>小兔子敲开门，“小狐狸，你的专属小兔子到了。”</p><p>晚安</p><h3 id="最甜的糖果"><a href="#最甜的糖果" class="headerlink" title="最甜的糖果"></a>最甜的糖果</h3><p>小兔子在森林里开了一间漂亮的糖果店。</p><p>平时没人的时候，小兔子喜欢坐在柜台，托着腮帮子透过窗户看着道路两旁的大树，来来往往的动物，还有每天都会从门口路过的小狐狸。</p><p>小狐狸每次路过糖果店时经常会向玻璃门里瞥上一眼，</p><p>即使只是一个礼貌的微笑，也能让小兔子开心一整天。</p><p>一天， 小兔子正做着糖果，忽然大门被打开了。</p><p>小兔子没有抬头，一边继续做着糖果一边像往常一样给客人打招呼。</p><p>“欢迎光临呀!”</p><p>“听说你这的糖很甜?”</p><p>小兔子愣住了，再三确认自己不是在做梦才缓缓抬起头，然后对上了小狐狸满脸的笑意。</p><p>“啊…….”</p><p>小兔子一时间手足无措，不知道该说什么好。</p><p>小狐狸看出了小兔子此时的窘迫，打着哈哈说，“哈哈，没事你继续做糖果吧，我就在这里看看。</p><p>小兔子微微一笑然后埋下头继续做糖果，不一会就做好了一小盒。</p><p>然后递给小狐狸: “嗯，你尝尝吧。”</p><p>小狐狸把糖含在嘴里，一种从来没有感受过的甜蜜从舌尖蔓延。</p><p>“好甜呀，这大概是我吃到过的最甜的糖果了!”</p><p>从这以后，小兔子做出来的糖都超级甜。</p><p>每天都有很多小动物来买糖果，大家都说小兔子的糖果最甜。</p><p>后来有一天，小兔子像往常样坐在柜 台里看着窗外的一切。</p><p>道路两边还是那样热闹，小兔子的嘴角微微上翘着，直到她看到一个女孩子挽着小狐狸的手臂从窗前走过。</p><p>小兔子赶忙埋下头，不让小狐狸看见。</p><p>不知道怎么回事，此刻她的心像是被针扎了一样难受。</p><p>从那天起，小兔子做出来的糖果不再那么甜了，不管加了多少的糖，都做不出像以前那么甜的糖果了。</p><p>后来买糖果的小动物也越来越少，小兔子干脆不想再做糖果了。</p><p>正准备锁上大门，却被路跑来的小狐狸拦住了。</p><p>“我听别人说你不打算做糖果啦?”小狐狸气喘吁吁的问。</p><p>小兔子扭过脸不想让小狐狸看到自己的眼泪，“因为我做的糖果不甜了。”</p><p>“胡说，明明是我吃过最甜的糖果， 上次我妹妹还夸你做的糖甜呢。</p><p>“你妹妹? “小兔子突然明白了什么。</p><p>“对呀，上次我妹妹来看 我，路过你这里的时候我看到你正埋着头做糖果呢，所以就没和你打招呼。”小狐狸解释道。</p><p>原来是这样，小兔子心中的乌云终于散开了，脸上露出了久违的笑脸。</p><p>小狐狸揉了揉小兔子的耳朵，</p><p>“好啦，现在可以请我吃最甜的糖果了吗?”</p><p>小兔子低下头:“可是已经没有了，最近我做的糖都不甜。”</p><p>小狐狸探着头四处张望，趁着小兔子不注意，忽然在小兔子脸上吧唧一口。</p><p>“谁说没有，你才是我吃到过的最甜的糖。”</p><p>晚安</p><h3 id="胡萝卜也没你填"><a href="#胡萝卜也没你填" class="headerlink" title="胡萝卜也没你填"></a>胡萝卜也没你填</h3><p>小兔子最大的爱好就是吃，而她最喜欢吃的呢就是甜甜的胡萝卜。</p><p>可是最近啊，小兔子有点不开心，因为她很久没有吃到的甜甜的胡萝卜了。</p><p>所以最近小兔子就一直耷拉着脸，一副谁看到了都知道她不高兴的样子。</p><p>这都要怪前几天下的那场暴雨，把小兔子堆满院子的胡萝卜全都冲走了，而她重新种的胡萝卜到现在都还没发芽呢。</p><p>小狐狸是看在眼里，疼在心里，毕竟没有吃到甜甜的胡萝卜，小兔子都已经瘦了一大圈了。</p><p>自己好不容易喂的圆乎乎的小兔子，现在又瘦了下来，小狐狸总归是有点不开心的，于是他决定带着小兔子到街上去买胡萝卜。</p><p>在街上卖胡萝卜的是一只老山羊，小兔子看着山羊面前堆的满满的胡萝卜，眼睛就变得比平时更红了。</p><p>山羊一看就知道大生意来了，于是开始吆喝：“胡萝卜，胡萝卜，最好吃的胡萝卜啊。”</p><p>“诶小兔子，要不要买点胡萝卜啊？”</p><p>小兔子立马点点头，可是却被小狐狸拦了下来，小狐狸问山羊，“你这胡萝卜甜不甜呀。”</p><p>老山羊说：“甜，我的胡萝卜是每天清晨的第一滴露水，加上落幕前的最后一丝阳光孕育而成的，绝对是最甜的。”</p><p>小狐狸却嗤之以鼻，“你的胡萝卜肯定不是最甜的。”</p><p>老山羊急了，“我跟你讲，我这胡萝卜绝对是最甜的，不甜不收你钱好吧。”</p><p>小狐狸却拉着小兔子的手转身走了，小兔子疑惑的问他：“为什么就这样走了呀？我觉得他的胡萝卜还可以呀。”</p><p>“可是他骗人呀。”小狐狸停下来，回答小兔子。</p><p>“你是说他不甜也要收钱吗。”小兔子更加疑惑。</p><p>“才不是嘞，他骗人说他的胡萝卜最甜，可是谁不知道，你才是最甜的！”</p><p>晚安</p><h3 id="买一赠一"><a href="#买一赠一" class="headerlink" title="买一赠一"></a>买一赠一</h3><p>狐狸先生在街角开了家毛绒玩具，新开店的那天小兔子在橱窗外看到了那只巨大的毛绒玩具，但一看标价她就倒吸了口气。</p><p>可她实在是太喜欢那个毛绒玩具了，每天路过都会站在那儿看上一会儿，想着自己要攒多久钱才能买到。</p><p>看着看着她发现玻璃上有个黑点，正好挡在玩具的脸上，没有多想她就伸手去擦，擦着擦着黑点不见，出现了狐狸先生的脸。</p><p>他正拿着抹布擦玻璃呢，一扭头就从毛绒玩具旁白露出了脸，看到了拿着纸巾擦玻璃的小兔子。</p><p>可小兔子这么小的胆子居然没有被吓到，她隔着玻璃看着狐狸先生，看得有些出神。</p><p>她看到狐狸先生脸上茸茸的毛，似乎比她心心念念的毛绒玩具还要柔软，她还注意到了他的眼睛，像是会发光一样，可真是好看。</p><p>狐狸先生笑了，轻轻朝她挥了挥手，小兔子这才回过神来，害羞得想用长长的耳朵盖住羞红的脸，狐狸先生邀请她去了店里，他们成了好朋友。</p><p>小兔子每天都会来店里看看，借口说来看看那只想要的毛绒玩具，还叫狐狸先生帮她留着，可她心思早就不在毛绒玩具上了。</p><p>“今日打折，那只你一直想要的毛绒玩具可以半价买哦。”小兔子一来，就看到狐狸先生抱着那只毛绒玩具等她。</p><p>其实她早就攒够钱了，只是她不担心买了之后就不能常来店里了。 “好呀”小兔子付了钱接过玩具，故作开心的说着。其实狐狸先生是烦自己才打折卖给她的吧，小兔子有些难过。</p><p>“那我走啦，下次见哦”小兔子抱着玩具急忙转身就走了，她不想让狐狸先生看到自己的难过的样子。</p><p>“小兔子等一等，还有一个赠品你没有拿呢”狐狸先生急忙叫住了她。</p><p>“赠品？”</p><p>狐狸先生柔柔地笑了，指了指自己“赠品就是我哦”</p><p>晚安</p><h3 id="我的主角"><a href="#我的主角" class="headerlink" title="我的主角"></a>我的主角</h3><p>小兔子每天睡前都要听睡前故事，而且不能是故事书上的，要现编。</p><p>小狐狸每天为了睡前故事都绞尽脑汁，每日的生活除了出去找胡萝卜，就是想睡前故事。</p><p>小狐狸出门，看到绿油油的小草，小狐狸想，绿油油的小草，会有什么睡前故事呢。</p><p>算了算了，先记下来。</p><p>小狐狸轻轻凑近小草，发现一堆小草中有一朵嫩黄的花，上面停了一只蝴蝶。</p><p>小狐狸想，真美好啊，如果小兔子这时候也在就好啦，小狐狸顺着马路，遇到了搬家的小蚂蚁，小狐狸抬起来爪子，轻柔柔的绕过蚂蚁的窝。</p><p>然后把头慢慢凑过去，偷窥到了整个蚂蚁王国。小狐狸念叨着，快记下来，回去给小兔子讲，蚂蚁王国的故事。</p><p>小狐狸慢悠悠的往前走，遇到了很多人，他穿过了嘈嘈杂杂的菜市场，偷偷溜进了卖胡萝卜汤的店里，绕过了小桥，带着一个本子的所见所闻到家。</p><p>当然，嘴里还叼着一块胡萝卜，那是他专门为小兔子留的。小狐狸把胡萝卜放在小兔子嘴边，把灯光调暗，然后翻出自己的本子。</p><p>小狐狸用舌头舔了舔爪子，有些抱歉的说，“今天没有带回来完整的故事。”</p><p>小兔子凑过去看着记录的杂乱无章的笔记，“没事啊，告诉我你今天的日常，就是我最好的睡前故事。”</p><p>小狐狸讲起来今天一天，小兔子慢慢睡着，开始打起来呼噜。</p><p>小狐狸低头亲了小兔子一口，盖好了小被子，“晚安我的小兔子，想让你参与我所有的生活，成为我睡前故事的主角。”</p><p>晚安</p><h3 id="雨季的恋爱"><a href="#雨季的恋爱" class="headerlink" title="雨季的恋爱"></a>雨季的恋爱</h3><p>森林的北方有个雨世界，里面的人都只能在雨天谈恋爱，除非处在雨世界的一方可以强大到保护对方，否则两个人只可以在雨天见面。</p><p>这个规定啊可苦了一众热恋中的小情侣，小狐狸躺在地上抱怨到，自己已经很久没有见到经常来自己伞下躲雨的小兔子了，再不下雨，他们俩的爱情故事就要结束了。☔</p><p>小狐狸旁边小野花也抱怨到，自己和刺猬先生也是，已经好久没有见面了。</p><p>小狐狸和小野花一起叹了口气，觉得雨世界这个规定实在太令人讨厌了，如果一直不下雨，他们就要被迫分开，这讨厌的异地恋啊。</p><p>小狐狸晃了晃头，看着停在小野花上的蜜蜂夫妇，有点羡慕。</p><p>如果不是因为最近是旱季，他和小兔子也应该像蜜蜂夫妇一样甜蜜。</p><p>最近小兔子身边的小灰兔，对小兔子可殷勤了，这让小狐狸气的牙痒痒，恨不得立刻让自己的飞过去，冲到小兔子身边，宣示主权。</p><p>可惜小狐狸还是小狐狸，还没有保护小兔子的能力，毕竟有时候雨季来的时候，小狐狸都没法彻底保护好小兔子。</p><p>不过小兔子倒是看的很开，她觉得小狐狸已经很好了，淋的雨都可以算作两个人之间的小情趣，偶尔还是很有意思的。</p><p>终于候来了雨季，小狐狸摩拳擦掌，等着小兔子来，小野花也是，花瓣都娇艳欲滴，等着小刺猬的到来。</p><p>小兔子在雨季快开始之前，蹦蹦跳跳的来了，小狐狸比去年雨季又长大了一点，刚好可以抱着小兔子了。</p><p>小兔子兴奋的摸了摸小狐狸的头，围着小狐狸转了两圈，然后躲在了小狐狸的伞下，有些赞赏性的开口，“哇哦，你现在已经完全可以把我保护好啦。”</p><p>小狐狸点点头，更努力的抱住小兔子，小兔子躺在小狐狸的伞下，絮絮叨叨的讲自己身边的故事。</p><p>她说，最近小灰兔和小黑兔分手啦，因为两个人天天在一起，然后会吵架，还是和小狐狸这样好。</p><p>她说，最近家里的胡萝卜都成熟啦，收获了好多，但是因为小狐狸不爱吃胡萝卜所以她就没有带来。</p><p>她说，又有一批小兔子进深山里探险，这次雨下这么大，不知道他们能不能安全回来。⛰️</p><p>小狐狸安静的听着，时不时点点头，每次点头时都会把几滴雨水滴到小兔子头上。</p><p>小兔子糊了糊雨水，梳了梳自己的毛，笑嘻嘻的问小狐狸自己做的新发型好不好看。</p><p>雨季结束了，小兔子伸展了下四肢，亲了亲小狐狸的头，“根据雨世界的规定，我要走了哦。”</p><p>小兔子摆了摆手。</p><p>小狐狸点了点头，蹭了蹭小兔子的毛，“去吧， 等下次你再来的时候，我就有足够能力保护你啦，你就不用再走啦。 ”</p><p>晚安</p><h3 id="我不怕你是因为我喜欢你"><a href="#我不怕你是因为我喜欢你" class="headerlink" title="我不怕你是因为我喜欢你"></a>我不怕你是因为我喜欢你</h3><p>小兔子第一次遇到小狐狸的时候是在小河边。那个时候，小兔子跟妈妈吵架了，原因是，她不想吃胡萝卜，可妈妈非要她吃，她一跺脚，就离家出走了。</p><p>沿着小河走了半天，小兔子又累又饿，然后就看见了正在翻着肚皮晒太阳的小狐狸。☀️</p><p>于是小兔子一蹦一跳的蹦到小狐狸身边，眨巴着眼睛看着他。</p><p>小狐狸感觉到有啥东西靠近，就抬了抬眼皮，看到是一只小兔子然后又闭上了。</p><p>小兔子满意的点头，双手扒拉着小狐狸肚子上的毛，找了个舒服的姿势，满意的躺下去了。</p><p>小狐狸嘴角抽了抽，他伸出手指戳了戳小兔子的脸。</p><p>“喂，， 你不怕我?”</p><p>小兔子睁开眼睛，漂亮的眼珠子转啊转的。</p><p>“怕呀，因为从小妈妈就告诉我，看见狐狸就要撒丫子跑，跑的越快越好，他们专门门吃兔子，可是为啥你都不理我?”</p><p>小狐狸恶狠狠的说。“那是因为我现在还不饿”其实小狐狸没有打算吃她，事实上他也从来不吃兔子。</p><p>小兔子重新闭上眼。</p><p>‘哦，那等你饿了就跟我说一 声，我就开始跑。”</p><p>小狐狸从来没有见到过不把他当回事的兔子。但….为什么会觉得这只兔子这么可爱呢。</p><p>到了晚上，小狐狸要回家了，只是他没想到小兔子也跟了上来。</p><p>“喂，你真的不怕我吃了你?”</p><p>小兔子没有回答他，反而问他:“小狐狸，这就是你的家吗?好黑哦。”</p><p>“白痴，你不会点灯吗?”小狐狸想破口大骂。小兔子委屈巴巴的，“ 我又看不见，怎么点嘛。”</p><p>无奈，小狐狸只好认命的点上灯。</p><p>其实小狐狸的眼睛在黑暗中看的更清楚，所以平时他也没有点灯。</p><p>点上灯，家里亮多了。</p><p>小兔子就开心的蹦啊蹦的。</p><p>小狐狸看着这只小兔子，嘴角泛起了一个浅浅的笑。小狐狸给小兔子用树叶做了一个窝。他拍拍窝，用眼神示意小兔子进去睡觉。</p><p>小兔子蹦进去，转头问他，“你不会趁我睡着了的时候吃我吧?”</p><p>小狐狸翻了个白眼指了指旁边的一堆胡萝卜，“我早就改吃素啦。”</p><p>小兔子才放心的去睡了。</p><p>半夜，小狐狸感觉怀里暖暖的，还有个东西在动。</p><p>他立刻警觉起来。“谁?”</p><p>“是我啦。”小兔子迷迷糊糊的声音传来。小狐狸松了一口气，“你大半夜的不睡觉往我怀里钻什么?你不怕我忍不住吃了你?”</p><p>小兔子声音小小的，还带起了哭腔。</p><p>“可是你做的窝太冷了，没有你怀里暖和。”小狐狸无奈，只好把她往怀里按了按，然后一起进入了梦乡。</p><p>就这样小兔子在小狐狸的家里住了半个月。</p><p>等到兔子妈妈找到小兔子的时候，小兔子正满意的靠在小狐狸怀里，小狐狸在帮她梳理毛发。</p><p>这一幕可吓坏了兔妈妈，她大声叫:“畜生，你放下我女儿!”</p><p>小狐狸傻了，这怎么办，这两边都不能得罪啊，只好呆呆的站在那里。</p><p>小兔子开心极了，蹦蹦跳跳就去妈妈那里了。妈妈赶紧抱住她，一个劲的问她有没有事。</p><p>小兔子开心的跟妈妈说，她交了个好朋友，是小狐狸。</p><p>兔子妈妈眼一瞪:“兔子怎么能跟狐狸做朋友，你跟我回去!回去再收拾你。胆儿肥了，敢离家出走。，</p><p>小兔子就这样被兔妈妈带走了。</p><p>以后的日子，小狐狸还是在那里晒太阳，他在那里等他那只小兔子。</p><p>大灰狼说:“ 狐狸兄，你疯了吧!她不会回来啦。”</p><p>小狐狸淡定的笑了笑，</p><p>“会的。”</p><p>这天，小狐狸依然闭着眼睛在那哂太阳，突然感觉怀里暖暖的，还有个东西在动，小狐狸微微一笑，头也不抬的问:“喂，你不怕我?”</p><p>“不怕!我喜欢你!”</p><p>嗯，是小兔子的声音。</p><p>晚安</p><h3 id="病名为爱，喜你为疾，药石无医"><a href="#病名为爱，喜你为疾，药石无医" class="headerlink" title="病名为爱，喜你为疾，药石无医"></a>病名为爱，喜你为疾，药石无医</h3><p>小兔子第一次出来找吃的就被小狐狸抓到了。</p><p>小狐狸也是第一次抓到兔子，他把小兔子捧在手里，好奇地打量着她，小兔子害怕极了，她想起妈妈告诉过她，如果被狐狸抓住会被吃掉的。</p><p>想到这，小兔子没忍住，哇的一声哭了出来。这一哭可把小狐狸吓坏了，以为自己的爪子刮疼了小兔子，赶紧把爪子收回去。</p><p>“喂喂喂你别哭啊，我把爪子收回去了。”小兔子眼珠咕噜噜转了几圈，然后一脸惊恐地看着小狐狸：“离我远一点!不然你会没命的!”</p><p>小狐狸愣了一下：“为什么?” ️</p><p>小兔子擦了擦眼泪：“我生病了，是那种什么药都治不好的很严重的传染病!你离我太近就会被传染的!”</p><p>小狐狸有些嫌弃地把小兔子放在地上：“一看你就是新冠，赶紧走，下次别让我再看见你。”</p><p>小兔子礼貌地鞠了个躬，故作冷静地离开了。</p><p>第二天，小兔子又出来找吃的。这次她很幸运，在离洞口没多远的地方发现了一块巧克力饼干。小兔子紧张地四处张望，再三确认没有看到小狐狸，赶紧抱着饼干跑回家。</p><p>第三天，小兔子又在上次的地方发现了半块奶酪，后来的几天，小兔子每天都能在那个地方找到各种好吃的东西。</p><p>小兔子觉得很奇怪，她决定在这家主人刚熄灯的时候溜出去看个究竟。 ️</p><p>这天，小兔子一直蹲在洞口，她听见屋子的主人说：“我这几天摆在这儿的甜点兔子居然一点都没吃，难道它们知道这里面放了兔子药?”</p><p>兔子药!?小兔子吓得摸了摸自己的肚子，可自己要真是真吃了兔子药应该早就死了呀?到底是怎么回事呢?</p><p>小兔子悄悄探出头，看见主人把一块蛋糕掰成两块，一块里面掺了兔子药，另一块给了小狐狸。</p><p>“这块给你，今天晚上也要好好看着兔子!”</p><p>小兔子点了点头，随着关灯的声音，房间里顿时陷入一片黑暗，这时，小兔子看到小狐狸把地上的毒蛋糕拿开，然后把自己的那块蛋糕放在地上。</p><p>“你…你在干什么。”</p><p>小狐狸转过头，赶忙对小兔子做了个嘘的手势：“小声点，被主人发现了你就死定了。”&#x2F;:,@x</p><p>小狐狸四下张望了一会，确认没有人过来才松了口气。他走近小兔子，准备把蛋糕递给她，小兔子赶紧后退了几步：“你忘了吗，我有新冠传染病，你不怕得病吗?”</p><p>小狐狸笑着走到小兔子的身边，把她抱在怀里轻声地说：“我见到你的第一眼就得了病了。病名为爱，喜你为疾，药石无医。”</p><p>晚安</p><h3 id="拥抱"><a href="#拥抱" class="headerlink" title="拥抱"></a>拥抱</h3><p>森林的大榕树洞里住着一个小兔子，她很孤独，也很自卑。</p><p>森林里的人都传言，她其实是一个妖怪，没有人愿意靠近她。</p><p>她有一个布袋里面装满了种子，其实小兔子只是一个普通的小兔子，真正的妖怪，装在她布袋的种子里。</p><p>小兔子捡到这个袋子的时候就有人告诉他，布袋里有一颗妖怪种子，只要把它种下去得到一个妖怪，他将满足许愿者的一个愿望。</p><p>这个愿望该许什么呢?</p><p>是让这个厌恶自己的森林覆灭吗?还是干脆毁掉这个没有一丝温度的世界呢?</p><p>小兔子想了许多许多，终于，她想到了一个自己觉得最能够让她高兴的愿望。</p><p>于是她日夜不停地在种种子，终于有一天，在一个很美丽的夜晚，小兔子看到了一个面容清秀帅气的小狐狸。</p><p>“小兔子，你想好你的愿望了吗?”小狐狸深沉的声音在山峦间回荡。</p><p>“想好了。”</p><p>“告诉我，你想要什么愿望?哪怕是要世界毁灭，我也可以答应你。”小狐狸说。</p><p>“请你，请你给我一个拥抱吧。”小兔子有些小心翼翼，但很快，便雀跃起来。“就是那种，轻轻的，软软的，用双手环在一个人的身上，看起来很舒服很舒服的动作。”</p><p>“我听说那叫拥抱，对不对?”</p><p>小狐狸紧紧的抱着小兔子，小兔子的眼睛里亮晶晶的，快乐在她的脸上荡开</p><p>晚安</p><h3 id="只把笑容留给你呀"><a href="#只把笑容留给你呀" class="headerlink" title="只把笑容留给你呀"></a>只把笑容留给你呀</h3><p>小兔子是森林里最可爱的动物了，她有着毛茸茸的大耳朵，一双大大的眼睛。</p><p>无论走到哪里，森林里的动物们都会跟小白兔搭讪，可是，跟她搭讪的动物们从来没有见她笑过。</p><p>总是一副高冷的样子，让这些动物们很是苦恼，传言，只要让小白兔笑了，就取得小白兔的芳心了。</p><p>小熊熊是一位有名的画家，他给小兔子画了一幅画，画的非常漂亮。</p><p>小熊熊跃跃欲试，觉得肯定能让小兔子笑起来。</p><p>小熊熊兴冲冲把画送给小白兔。✨</p><p>小白兔看到自己的肖像，淡淡地说了一声。“谢谢”</p><p>小熊熊灰溜溜的离开了，周围的人一阵哄笑。</p><p>接着是二哈先生，为小兔子唱了一首歌，围观的动物们陶醉在美妙的嗷呜歌声中，他们觉得小兔子肯定会动心。</p><p>可是，小兔子还是跟往常一样，表情丝毫没有一点变化。</p><p>旁边的小狐狸着急了，心想，会画画的小熊熊，会唱歌的二哈先生，都没有让小兔子高兴。</p><p>我什么才艺都没有，能让她动心吗？</p><p>小狐狸喜欢小兔子已经很久了，只是一直没有勇气告诉小兔子。</p><p>小狐狸想来想去，自己必须要告诉小兔子，他不想后悔，不想到了以后痛恨自己没有勇气。</p><p>小狐狸来到小兔子的旁边，紧张的不得了。</p><p>小兔子抬头看着小狐狸，小狐狸迟迟没有说话，反而小狐狸的脸已经红的不行了。</p><p>小兔子看到小狐狸这么紧张，忽然笑了起来，小兔子笑起来是那么好看，周围的动物们都看呆了。</p><p>“傻狐狸，我不对他们笑，只是想把自己的笑容留给你啊。”</p><p>小兔子拉着小狐狸的手，慢慢的向远方走去。</p><p>晚安</p><h3 id="我喜欢你很久了"><a href="#我喜欢你很久了" class="headerlink" title="我喜欢你很久了"></a>我喜欢你很久了</h3><p>小兔子的邻居是一只小狐狸，大家对小狐狸的印象都是觉得他凶巴巴的，不敢让人接近。</p><p>这一天小兔子开心的蹦着跳着出去逛街，走在森林的小路上，她看到自己高大魁梧的邻居小狐狸。</p><p>小兔子小声嘟囔着说：“高大魁梧的外表下，却是凶巴巴的样子呢”</p><p>没想到这句话被小狐狸听到了，小狐狸走到小兔子身边拦住了她，这时候小兔子心里害怕极了，身上的毛发就炸开了似的瑟瑟发抖着说：“小狐狸，请问你有什么事情吗？”</p><p>小狐狸说：“我刚才听到你说我很凶是吗？”</p><p>小兔子有些紧张的说：“我……我没有，你听错了。”</p><p>小狐狸说：“那我听错了？请问小兔子是准备去哪里呢？”</p><p>小兔子说：“我……我去逛街，没什么事情那我就先走了”</p><p>小狐狸看到小兔子的脸颊微微有一点泛红，就没有说话，看着小兔子离开的背影，小狐狸噗嗤的笑出了声，觉得这位小兔子有些可爱，就悄悄的跟在她身后，小兔子完全没有察觉身后还有人。</p><p>天空突然变暗，有些低沉，不一会哗啦哗啦的下雨了，小兔子发现自己没有带伞，准备跑回家的时候，好像撞到了什么东西，软软的暖暖的，抬头一看是小狐狸打着伞保护着自己，小兔子傻傻的愣住了。☔</p><p>小兔子不好意思的看着小狐狸对他说：“小狐狸，你怎么在这里？”</p><p>小狐狸笑着对小兔子说：“不放心你，就跟过来了”</p><p>小兔子听到小狐狸这么一说，脸蛋瞬间又红彤彤的了，心里想着：没想到平时看起来凶巴巴的小狐狸也会有这么温柔的一面，简直不可思议！</p><p>小兔子低着头小声的说：“你该不会是喜欢我吧！”</p><p>小狐狸把他大大的手掌放在小兔子毛绒绒的脑袋上，轻轻的抚摸着，小兔子有些诧异，这时候见小狐狸弯下腰低着头在小兔子的左耳边轻轻的说了一句：“是呀，我喜欢你很久了”</p><p>晚安</p><h3 id="追剧的小狐狸"><a href="#追剧的小狐狸" class="headerlink" title="追剧的小狐狸"></a>追剧的小狐狸</h3><p>小狐狸最近迷上一部剧，整日抱着手机看个不停。连小兔子的消息有时候都不回复了。</p><p>有时候，小兔子发一条消息，要等好久才会能回，因为这个，还耽误了一些事情。</p><p>这可把小兔子委屈坏了，小泪不自觉的就滴下来了。有时候不禁会想，他是不是不爱我了?</p><p>这天，两人在电话里互道晚安后，小兔子却怎么也睡不着，翻来覆去，难受坏了。</p><p>她贴近手机，看着隔绝着两个人的手机屏幕，她对小狐狸的思念再一次涌上心头。</p><p>“小狐狸， 我睡不着，我好想你啊，你这两天回复消息可慢了，也有些敷衍，是不是异地了，你就不爱我了，嫌我烦了。</p><p>“不会不会啊，我最爱的就是你啊，宝贝怎么了，怎么睡不着?”</p><p>小狐狸的声音透过手机屏幕传过来，喃喃自语的小兔子被吓到了:“你没睡啊?”</p><p>‘没。嘻嘻嘻，我看剧呢。”小狐狸笑嘻嘻的回复，“你咋了宝贝，为什么睡不着?”</p><p>“哎呀，你怎么比我还会沉迷追剧啊!再沉迷也不能熬夜，对眼睛不好的，乖，快放下，明天看。”</p><p>小兔子也顾不上自己的委屈，有些时候，配偶的事可以压倒自己的一切不良情绪，爱在这一刻体现的淋漓尽致。</p><p>“哈哈哈好，我也好困好困，一起睡吧。”</p><p>再次互发晚安后，小兔子还是睡不着，但是小狐狸的打呼声却已经出来了，他是真的很困吧，追剧都追到半夜了。</p><p>小兔子叹了口气，刚想转身换个姿势休息的时候，小狐狸的声音传了出来。</p><p>“小兔子，对不起啊。”</p><p>小兔子又一次转回了身，不过这次小狐狸的声音并不是原声，而更像是在说梦话。</p><p>“我这几天太喜欢那部剧了，老是冷落你，我不是故意的宝贝。”</p><p>你等我，这几天晚上我赶紧看完，绝对不会再像之前一样自私啦。</p><p>看哥哥我，决战到天亮!呼噜咕噜咕噜~”</p><p>小兔子噗嗤一声笑了， 心里的失落一扫而空，再次躺在床上，连嘴角都带着笑。 ️</p><p>他还是那个他，一样傻，一样爱着我!</p><p>还想背着我晚上追剧，想得美，本姑娘还要为你健康负责呢。</p><p>想着想着，她进入了梦乡，梦里，有山，有水，有电视，也有小狐狸，他们在一起看那部剧，两个人一边讨论剧情，一边嬉戏打闹，其乐融融，幸福快乐</p><p>晚安</p><h3 id="蛋糕"><a href="#蛋糕" class="headerlink" title="蛋糕"></a>蛋糕</h3><p>小兔子最喜欢吃的那家蛋糕店倒闭了。</p><p>小兔子想，要是我能和蛋糕师小狐狸学会做蛋糕就好了。小兔子找了好久，终于找到了小狐狸的家。因为小兔子总是去买蛋糕，</p><p>所以小狐狸一眼就认出了她</p><p>“想吃蛋糕了嘛?”</p><p>小兔子点点头，一想到好吃的蛋糕,小兔子不禁舔了舔嘴唇。</p><p>小狐狸笑着带小兔子来到餐厅，</p><p>拿出刚刚做好的草莓蛋糕给小兔子吃。小兔子才吃了一口，就忍不住连连称赞。“真是太好吃了!</p><p>“小狐狸，你可不可以教教我”</p><p>“嗯.你想学什么?”</p><p>“都可以呀。”</p><p>小兔子拄着腮帮子想了想</p><p>“那你就教我你最擅长的叭~”</p><p>小狐狸故作沉思了一会:</p><p>“那不成，我怎么能白教你呢?</p><p>小兔子乖乖地从口袋里掏出一根胡萝卜递给他:</p><p>“呐，这个给你，就当做是我的学费啦~。”</p><p>第一天，小狐狸端给小兔子一盘软糯糯的草莓大福，小兔子拿了一个给小狐狸，</p><p>小狐狸摇摇头说:“我看着你就饱了。</p><p>“为什么呀”小兔子问，“因为你秀色可餐呀</p><p>“咦，肉麻”说着，小兔子伸出小拳头，锤了一下小狐狸，第二天，小狐狸端着咖啡杯走到小兔子面前“你能不能对我笑一下呀?&#x2F;:coffee</p><p>小兔子做出了一个大大的笑脸:“怎么啦?”</p><p>小狐狸抿了一口咖啡“这下好多啦，刚刚我的咖啡忘记加糖了”小兔子嘟了嘟嘴抄起手边的抱枕嘲小狐狸丢去脸确不自觉的红了起来。</p><p>就这样过了一个星期，</p><p>小兔子才发现，这几天自己根本就没学会做蛋糕，反倒是学了不少土味情话。</p><p>小兔子感觉自己被耍了，越想越气，于是怒气冲冲地跑到小狐狸的家里。</p><p>小狐狸，你看你这几天都教我什么了!</p><p>我为什么还是不会做蛋糕! “</p><p>小狐狸看着小兔子气鼓鼓的样子，脸上忍不住露出了笑容。</p><p>你居然还笑! “</p><p>小兔子撅起嘴巴，转过身背对着小狐狸。</p><p>“你不是让我教你我最擅长的吗?”</p><p>说着，小狐狸走近小兔子，伏在她耳边小声地说，</p><p>“我最擅长的就是让你喜欢我啊。”</p><p>“你!”</p><p>小兔子转过身，本来想对小狐狸发脾气，</p><p>可当她看到小狐狸的一瞬间，</p><p>突然感觉脸上滚烫滚烫的，心脏也一直噗通噗通乱跳不止。</p><p>“可是我都交了学费啦!你快把我的胡萝卜退我!“那可不行，这可是你给我的定情信物，至于做蛋糕嘛… ”</p><p>小狐狸轻轻揉了揉小兔子的小脑瓜，</p><p>“我就是不想让你学会，这样我就可以给你做一辈子的蛋糕了。”</p><p>晚安</p><h3 id="甜甜的糖果"><a href="#甜甜的糖果" class="headerlink" title="甜甜的糖果"></a>甜甜的糖果</h3><p>小狐狸疲惫地回到家，发现桌子上已经摆满了饭菜。小兔子温柔地帮他拿着换下的外套。看到这一幕，小狐狸的心都化了。</p><p>“哇，看起来好好吃啊。”小狐狸幸福地搓了搓手，说道，“先尝哪个好呢?”</p><p>“这个吧。”小兔子夹了一块儿肉我递给了小狐狸，“啊，张嘴。</p><p>小狐狸听话地张开嘴，一脸陶醉，可刚刚开始咀嚼，就变了脸色，“这什么啊， 怎么这么苦!</p><p>“哈哈哈哈哈。” 看着身边的小兔子笑得花枝招展，小狐狸得知自己中计了，“好啊臭妮子，竟敢耍老公。看我怎么惩罚你。”</p><p>”略略略。“小兔子吐了吐舌头，”不许说我坏话，我给你准备了糖果呢。</p><p>接过递来的糖果，小狐狸愣了一秒，然后瞬间将其塞到了小兔子的嘴里。</p><p>”呜呜呜，你干嘛?</p><p>”少废话。“小狐狸的嘴巴重重地吻了上去，糖果在两人的舌尖互相交递，很快就化完了。 ‍❤️‍</p><p>”坏蛋。“小兔子摸了摸嘴巴，一脸慎怪道，” 甜不甜?“</p><p>”甜啊，不过呢~“小狐狸一脸坏笑，”不是因为糖果甜，而是因为心甜，而心甜是因为我感受到你在里面。“</p><p>”哼，油嘴滑舌，巧言令色!“</p><p>小狐狸抱住小兔子，双手抚在她的背上，温柔地说:”谢谢你的饭，谢谢你的甜蜜糖果。我爱你。</p><p>”煽情怪。“小兔子也抱住了小狐狸，”我也爱你。“”</p><p>晚安</p><h3 id="九十九个愿望"><a href="#九十九个愿望" class="headerlink" title="九十九个愿望"></a>九十九个愿望</h3><p>小兔子今天很生气，因为昨晚的天气预报明明说了今天不会下雨，可是现在的雨却下个不停。</p><p>而小兔子也没带伞，只能淋着大雨走回家了。 ️</p><p>一回到家小兔子就拿出纸和笔，列出了自己的九十九个愿望，她觉得这个世界真是糟糕透了，她想，等自己完成了九十九个愿望然后就去死。✨</p><p>不知不觉的，小兔子就已经完成了九十八个愿望。</p><p>而她的最后一个愿望就是找一只帅气的狐狸把自己吃掉。</p><p>小兔子就在森林里找啊找，终于找到了一只狐狸，她发誓，这是她见过的最帅气，最可爱的狐狸。</p><p>“狐狸先生，你愿意吃掉我吗?</p><p>“好啊!但是你要答应我，先帮我完成我的九十九个愿望。”</p><p>小兔子同意了，因为她觉得再也找不到比这只狐狸更帅气的了。</p><p>可是小狐狸的愿望实在是太简单了，不是让小兔子陪着他看星星，就是让小兔子给他唱首歌或者做一顿饭，最难的愿望也就是当他一天的女朋友。</p><p>于是小兔子就这样帮助小狐狸完成了好多愿望，多到自己都已经记不得是第多少个了。</p><p>终于有一天，小狐狸对小兔子</p><p>说:“ 今天你要帮我实现第九十八个愿望哦，”</p><p>小兔子有点不高兴，她没想到小狐狸的愿望这么快就要全部都实现了。</p><p>而她现在已经不想去死了。</p><p>每天和小狐狸在一起，她觉得这个世界其实也没有那么糟糕，</p><p>她甚至有一点喜欢小狐狸了。</p><p>虽然有一些不舍，马上就要被小狐狸吃掉了，但是小兔子还是说:“好呀….</p><p>小狐狸笑了，他说:“我的第九十八个愿望就是要告诉傻兔子一个小秘密。”㊙️</p><p>小兔子知道他说的傻兔子就是自己，于是她说:“你说吧。”</p><p>小狐狸凑到她的耳边，慢慢的说:“其实，我一直都是吃素的。”</p><p>小狐狸停顿了一下，然后接着说:“我的第九十九个愿望就是希望你永远在我身边。</p><p>晚安</p><h3 id="异地很难，但是爱情很甜"><a href="#异地很难，但是爱情很甜" class="headerlink" title="异地很难，但是爱情很甜"></a>异地很难，但是爱情很甜</h3><p>住在森林最南边的小狐狸和住在小河边的小兔子在一起了。</p><p>最近森林里到处都在流传着这个重磅新闻。</p><p>然而这场跨越种族的异地恋，在所有人看来都只是一个噱头罢了。</p><p>小兔子是森林电视台的大明星，喜欢她的人能从森林的北边排到最南边，然后再绕回来。</p><p>小狐狸呢是森林里最大的胡萝卜罐头制造商，家里的财产足以撼动整个森林。</p><p>所以大多数的人都认为这只是一场利益的结合。</p><p>其实，只有小狐狸和小兔子才知道，</p><p>这场不被别人看好的异地恋，有多难，又有多甜。❣️</p><p>小狐狸总是很忙，因为家里的工厂都需要自己打理。</p><p>小兔子这边呢也不轻松，每天都有拍不完的戏。</p><p>可是谁能想到外表高冷的小狐狸，在和小兔子的交往过程中，也会有傻傻甜甜的一面呢。</p><p>“满脑子都是你。”</p><p>“可是能怎么办呢。”</p><p>“又不能把脑子丢掉。”</p><p>(来自小狐狸傻傻的聊天记录)</p><p>只有小兔子见过小狐狸傻乎乎的模样，</p><p>也只有小兔子，才能让小狐狸变得这样傻乎乎的。</p><p>难得有时间相聚的时候，小兔子会拉着小狐狸一起躺在床上看电影。</p><p>结果小兔子看着看着睡着了，迷迷糊糊的翻了个身。小狐狸立刻紧张的帮她挡住右边床头灯的光。</p><p>那一-刻，小兔子选择继续装睡，然后在小狐狸转身继续看电影的时候，躲在被子里面偷笑。</p><p>满眼都是自己的小狐狸，怎能不让小兔子心动呢。</p><p>“最近牙痛，因为常常晚上想你，感觉太甜蜜，都长蛀牙了。”</p><p>“你是我的宝贝，是我的最爱，也是陪我到老的人。”(来自小兔子甜到腻的聊天记录)</p><p>虽然异地很难，但是爱情很甜呀，所有的期待都是值得的。</p><p>晚安</p><h3 id="猜对了我就让你亲一口"><a href="#猜对了我就让你亲一口" class="headerlink" title="猜对了我就让你亲一口"></a>猜对了我就让你亲一口</h3><p>“如果你能猜到我现在在想什么，我就让你亲一口。”</p><p>小兔子一脸傲娇的看着自己面前正在拖地的小狐狸。</p><p>微微眯起的眼睛里全是藏不住的狡黠,可爱的三瓣嘴抿出了两道得意的弧线。</p><p>这样子也太可爱了吧!</p><p>偷笑时的表情就和她刚偷吃完糖却矢口否认的时候一模一样。</p><p>其实嘴角上的糖渍都还没擦掉呢。</p><p>天底下怎么会有像我家小兔子这样可爱的生物呢。小狐狸心想。</p><p>“你肯定是在想昨天我们在公园里买到的棉花糖，还是胡萝卜味的呢。</p><p>小狐狸装作在认真思考的样子，然后回答道。</p><p>“不对不对，你再猜猜。”</p><p>“那难道是草莓味的蛋糕?”</p><p>“不是啦，你再猜猜看。”</p><p>小狐狸头一歪，伸出爪子挠了挠头，那样子像极了爱因斯坦思考时候的样子。</p><p>“我知道了!肯定是那件长了一个粉色蝴蝶结的小裙子，你昨天抱着她跳了一天呢。”</p><p>“还是不对!你怎么这么笨呢，哎呀。”</p><p>小兔子不高兴的嘟起了嘴巴，我家小狐狸怎么好像不太聪明的样子。</p><p>“最后一次机会，要是再猜不对今晚就没有亲亲了。”</p><p>“啊不行， 要不你给点提示?”</p><p>小兔子的样子实在是太可爱了，小狐狸老是忍不住想笑。 ☺️</p><p>只好悄悄地抬起小爪子，按住自己微微翘起的嘴角，继续装作疑惑沉思的样子。</p><p>“笨死了，好吧好吧，那就给你点提示好了。”</p><p>小兔子不高兴的鼓起了腮帮子，嘟着小嘴巴嘟嘟嚷嚷的说道:</p><p>“提示就是，晚安….”</p><p>还没等小兔子说完呢，小狐狸就突然欺身压了过来。</p><p>把小兔子壁咚在了墙角，然后低下头轻轻地吻在了小兔子的小嘴唇上。</p><p>“你想要晚安吻对吧，小笨蛋。”</p><p>晚安</p><h3 id="我在等风，也在等你"><a href="#我在等风，也在等你" class="headerlink" title="我在等风，也在等你"></a>我在等风，也在等你</h3><p>小狐狸得了一种很奇怪的病，第一天发生的任何事情，到了第二天就会全部忘记。</p><p>所以他没有朋友，只能独自坐在夕阳下，静静的等待着属于这一-天的记忆渐渐消失，然后迎来第二天的空白的记忆。</p><p>小兔子这天蹦蹦跳跳的去拔胡萝卜，碰巧遇到了在夕阳下的小狐狸，小狐狸的身影被夕阳笼罩，竟显得十分落寞。☀️</p><p>“小狐狸?你在看什么呀?”小兔子并不知道小狐狸的病症，好奇的睁着大眼睛问到。</p><p>小狐狸转过头，看到身旁的小兔子，眼神突然亮了一下，却又在-瞬间灰暗下来。</p><p>他摇了摇头，沉默了一会，又突然开口:“我在等风来!”</p><p>小狐狸似乎很久没有说话了，声音有一丝沙哑。</p><p>“好文艺，好高冷，好帅气的狐狸呀，小兔子心里想着，并从身后拿出了一根胡萝卜，递给小狐狸。“从今以后我们就是朋友啦，这根胡萝卜就当做见面礼送给你吧。”</p><p>小狐狸看着手中的胡萝卜，好笑的同时心中竞产生了一丝波动。</p><p>但他知道，第二天，他将不会记得有这样一只小兔子曾经来过。</p><p>第二天，小兔子特意绕了个路，跑到了狐狸面前。“嗨，小狐狸，我又来啦，你还记得我吗?</p><p>“你是谁?我们认识吗?”小狐狸一脸冷漠的看着小兔子。</p><p>小兔子感到十分受伤，哭着跑回了家中。</p><p>她觉得小狐狸一点也不帅气、不文艺了，甚至还很无情。</p><p>然而这天，小兔子耷拉着脑袋走在森林里，恰好听到了树上的鸟儿谈到了关于小狐狸的病，才知道，自己冤枉了他。</p><p>于是，她飞奔到小狐狸面前，气喘吁吁的说道。“小狐狸，你在看什么呀?”</p><p>“我在等风来。”意料之中的回答让小兔子更加确定小狐狸的确是失忆了。</p><p>小兔子又从背后拿出一根胡萝卜递给小狐狸。</p><p>“那以后我们就是朋友啦，这根胡萝卜就当做见面礼送给你吧!”</p><p>第三天，第四天，小白兔还是同样的问题，还是同样递给小狐狸一根胡萝卜，她相信，只要日复一日，小狐狸-定会把她记住的。</p><p>到那个时候，就去向他表白。小兔子在心里偷笑。</p><p>可是事情并没有向小兔子想的方向发展。</p><p>在小兔子无数次期待的眼神中，小狐狸还是同样冷漠的回答，还是没有记起她来，只是一脸茫然的看着身旁一堆的胡萝卜，不知所措。</p><p>小兔子有些绝望了，她拖着沉重的步伐去找小狐狸。</p><p>今天是最后一次来找小狐狸了，如果小狐狸今天还是没有认出她来，她就不会再来了。</p><p>“狐狸先生?你在看什么?”小兔子小心翼翼的问到。</p><p>“我在等风..”</p><p>小兔子紧张的捂住了耳朵闭上双眼，她不想再听到同样的答案了。</p><p>“我在等风，也在等你啊，笨蛋。</p><p>小兔子睁开眼睛，小狐狸放大的脸庞就在她的眼前。</p><p>晚安</p><h3 id="你永远都是我的小朋友"><a href="#你永远都是我的小朋友" class="headerlink" title="你永远都是我的小朋友"></a>你永远都是我的小朋友</h3><p>小镇上已经有很多动物的妈妈对狐狸先生非常有意见，排着队的去找狐狸小姐告状，说她的丈夫老是和小朋友们抢东西，一点儿也不懂得迁让小朋友们，经常性的惹小朋友嚎啕大哭。</p><p>狐狸小姐肯定是不相信的，在她的眼里狐狸先生明明就是一个彬彬有礼的好狐狸，但还是耐着性子听其他动物妈妈吐槽诉苦，想着等他回家后再问问是怎么回事。</p><p>傍晚时分，狐狸先生回来了，还带着狐狸小姐最喜欢吃的草莓布丁和蛋糕，“这是今天最后一份哦，我的运气真的是太好了。”</p><p>狐狸小姐高兴的接过甜品，把之前动物妈妈的吐槽和诉苦的事情都忘记的干干净净了。</p><p>晚饭后狐狸夫妇手牵着手出门去散步，公园里广场上的秋千刚好空着，她们坐在.上面荡秋千，狐狸小姐的裙摆也随着秋千晃呀晃，这一刻好温馨好幸福。⛲</p><p>“狐狸阿姨，可以让给我玩一下秋千吗?”狐狸先生看了-眼面前的小白兔:“叫姐姐。”</p><p>“狐狸姐姐，可以让给我玩一会吗？”</p><p>狐狸小姐刚想要起身给小白兔玩，狐狸先生提前一步起身说:“不可以的哦，姐姐也要玩的，但是姐夫的秋千可以让给你玩。”</p><p>狐狸小姐被逗得哈哈大笑，觉得狐狸先生怎么这么可爱，过了一会其他小动物陆续过来，狐狸小姐觉得不好意思了，起身和狐狸先生手牵着手沐浴着皎洁的月光回家了。</p><p>第二天傍晚的时候，狐狸小姐早早的做好了饭菜，闲来无事就打算去接狐狸先生一起回家。</p><p>路过那家经常关顾的蛋糕店的时候，瞥眼看见狐狸先生把手里的布丁举得高高的，好像正在争论着什么。</p><p>她走近前看到小熊妈妈把哭得撕心裂肺的小熊搂在怀里没好气的说道:“小朋友喜欢吃，你就让给他怎么了这么大人了?”狐狸先生嘟囔说，“可是，我家小朋友也喜欢吃啊。”</p><p>“你家哪里来的小朋友?”</p><p>狐狸小姐突然想起之前妈妈们来告状的事，连忙走上前拉住狐狸先生，“给他们吧。”说着把最后一一个布 J 塞进小熊的手里，拉着狐狸先生就出门了。</p><p>“我都这么大了，跟小朋友抢怪不好意思的”。狐狸先生停住脚步，看着狐狸小姐的眼睛道:“你永远都是我的小朋友。”</p><p>晚安</p><h3 id="我想给你最好的"><a href="#我想给你最好的" class="headerlink" title="我想给你最好的"></a>我想给你最好的</h3><p>这一天是个阳光明媚的早晨，小白兔早上起来推开门，向着太阳伸了个懒腰。</p><p>“咦?”小白兔发现了门口的松果。“这次是松果呢。”小白兔小声嘀咕着，抬头四处寻找，环视四周也没有发现是谁。</p><p>“奇了怪了，到底是谁呢?”小白免抱着松果进屋。</p><p>盯着那群松果说:“过去的十几天都是这样，香蕉，竹子，蜂蜜….今天是松果。是谁呢，他这样做是为什么呢?难道是放错门口了嘛?那也不可能老是放错呀?</p><p>“嗯…”</p><p>“哦对了。”小白兔想到一个主意。</p><p>夜幕降临，小白兔假装关灯睡觉了。</p><p>有个黑影，悄咪咪的来到小白兔的门口，放了一些苹果，转身就要离开。</p><p>这时，小白兔点起蜡烛，“哦~ 原来是你，小松鼠。” ️</p><p>小松鼠一时着急，想要跑。</p><p>“等等，小松鼠，你是不是放错了，这个是我家门口。</p><p>小松鼠支支吾吾的说:“呃呃呃，没错。”</p><p>“嗯?那你这是为什么呢?”</p><p>小白兔盯着小松鼠问道。小松鼠红通了脸，现在小松鼠的脸像熟透的红苹果一样。</p><p>小白兔看着小松鼠不说话，蹦蹦跳跳到小松鼠跟前来。</p><p>“因为，因为….”</p><p>“因为我喜欢你。”</p><p>“啊?”</p><p>“因为我喜欢你。”小松鼠又说了一遍。</p><p>小白兔听了，愣了一下。不知道要说些什么，但是又想要说些什么。</p><p>“那这些东西是?”</p><p>“我听猴子哥哥说，香蕉是最好的，我就去跟他们一起去摘香蕉;我听熊猫妈妈给熊猫宝宝吃竹子，熊猫妈妈说竹子是最好的，我便找了些竹子给你;我听…”</p><p>“等等。”小兔子打断他。</p><p>“我是说为什么给我这些?”</p><p>“因为我喜欢你，我想要把最好的给你。</p><p>小兔子调皮的说:‘‘没有人告诉你， 兔子喜欢吃红萝卜嘛?对兔子来说红萝卜是最好的。</p><p>“哦哦，我知道了，我明白了。我现在就去找红萝卜给你。”小松鼠说道。</p><p>“等等。”小白兔叫住了小松鼠。“我们..起去寻找吧。”小白兔说。</p><p>小松鼠看了看小白兔，满脸通红的点点头。</p><p>晚安</p><h3 id="我讲个故事给你听"><a href="#我讲个故事给你听" class="headerlink" title="我讲个故事给你听"></a>我讲个故事给你听</h3><p>这是一个宁静的夜晚，兔子先生和兔子小姐靠在床头上依偎在一起说着悄悄话，突然窗外闪了一下，接着就听见轰隆隆的一阵响声，打雷了</p><p>兔子小姐害怕地钻到兔子先生的怀里，紧紧地抱住了他，兔子先生搂着兔子小姐，小声地安慰着她，这个时候窗外来雨滴滴落在地上，树上房檐上的声音，劈里啪啦的，真是好大一场雨。☁️</p><p>这场突如其来的雨也打断了他们甜蜜蜜的睡前悄悄话，下雨打雷兔子小姐也睡不着，就拉着兔子先生给她讲故事。</p><p>兔子先生问，那讲什么故事呢?“我不管，总之要讲到我犯困为止”，好好好，那我给你讲个传说中的故事吧。</p><p>从前有座山，山里有座庙，庙里有个老和尚和小和尚，有一天，老和尚对小和尚说:从前有座山，山里有座庙，庙里有个老和尚和小和尚，有天， 老和尚对小和尚说 ⛰️</p><p>讲到第三遍的时候，兔子小姐反映过来了，气呼呼地说道，你这是在循环糊弄我!兔子先生对她说，你先别着急，听我说完。</p><p>从前有座山，山里有个屋，屋里有一个男兔子和一个女兔子，有一天，男兔子对女兔子说:我爱你。</p><p>兔子小姐听到这羞羞地捂住了脸，就你花言巧语，这个不算，你重新给我讲一个。</p><p>那好，我重新给你讲一个哈，从前有两只小兔子，这个灰兔子呢特别特别地爱粉兔子，有多爱呢，粉兔子喜欢吃什么就给她做什么，做不到呢，就起给她买，照顾她的衣食起居，把她照顾的可好了，好多地事情都依着她。</p><p>但是呢，粉兔子有时候就挺气人呢，有多气人呢，还不等兔子先生说下去，兔子小姐就打断了他，你说我，我哪里气人了，兔子先生故作惊讶地问道，我哪有说你，你就是说我了，哼，兔子小姐转过身背对着兔子先生并说道,我要惩罚你，让你说我。</p><p>兔子先生连忙问，怎么惩罚我呀?嗯~~就罚你搂着我睡觉觉。</p><p>“得嘞”</p><p>兔子先生随手关上灯，然后从背后搂着兔子小姐，甜蜜地进入了梦乡。</p><p>晚安</p><h3 id="我带你去看全世界"><a href="#我带你去看全世界" class="headerlink" title="我带你去看全世界"></a>我带你去看全世界</h3><p>熊猫先生很烦恼，他好像喜欢上了门口那朵小花，可是，我是熊猫啊，熊猫不应该喜欢母熊猫么，怎么可能喜欢上一朵小花呢，熊猫先生甩甩脑袋，将这些事情甩到脑后,披上外套，出门工作了。</p><p>在拐角的一瞬间，熊猫很努力的想保持着自己的平视，眼睛却不自觉的瞟向墙边的那朵小花，红霞慢慢的爬上熊猫先生的脸颊，熊猫先生暗骂自己一句，加快脚步离开了这个地方。&#x2F;:rose</p><p>傍晚，下班的熊猫先生在拐角处停了下来他整理了一下自己的衣服，拿出刚刚在商店买的镜子梳子，小心的整理了一下自己，迈开步子向家走去。</p><p>“那个，你的外套掉了。” 有-个声音弱弱说到。</p><p>“啊，真的耶，谢谢你。”熊猫先生捡起自己的外套，抬头正打算道谢，看到面前的小花却吱唔了起来，双手也不安的在身旁乱摆着。</p><p>“哈，没事呢，我好像经常见到你呢，我们是邻居?</p><p>熊猫先生低下头，暗自给自己鼓了鼓气，“是的，我就住你旁边呢，很高兴认识你。 ☺️</p><p>“我也是呢，可惜我不能动，不然我们说不定可以更早认识呢，外面好玩么，我好想知道。”夕阳下，小花的眸子里写满希冀。</p><p>“外面的世界呢，可好玩了，你可以碰见各种各样的人，欣赏各种各样的景色，这个世界，大到让你惊叹呢。</p><p>熊猫先生蹲了下来，给小花讲- -晚上的故事，等到夜深了，俩人才恋恋不舍的分开，并约定熊猫先生第二天继续给小花讲故事。</p><p>第二天，温暖的阳光将小花唤醒，她轻轻地伸了伸腰，挣开了眼，眼前是面带着微笑熊猫先生，他小心的从背后拿出一个花盆，温柔的说</p><p>“今天开始，我带你去看全世界。”</p><p>晚安</p><h3 id="我一直陪着你-1"><a href="#我一直陪着你-1" class="headerlink" title="我一直陪着你"></a>我一直陪着你</h3><p>小兔子感冒了，已经赖在床上一整天了，小狐狸一大早就打电话请了假坐在床边照顾着她。</p><p>“感冒了也不可以不吃饭，总要吃点东西才能好。”小狐狸坐在床边摸了摸小兔子的额头。</p><p>小兔子摇摇头把被子往上拽了拽盖住半张脸:“不要吃饭，不要吃药，我睡一会儿醒来就好了。”</p><p>小狐狸叹口气伸手拿了床头柜上的杯子吹了吹:“已经不热了，乖乖起来把药喝了在睡，这个不苦的。”</p><p>小兔子偏着头看了看小狐狸，他觉得小狐狸看起来有点严肃，在闹一会恐怕要生气了，他也只好支着身子坐起来:“真的不苦么?药哪有不苦的。</p><p>小狐狸弯眸拍了拍小兔子的脑袋，他端着杯子抿了一口里面褐色的药汁，又凑上去在小兔子嘴角亲了亲:“你看，是不是不苦的。</p><p>小兔子连忙捂着嘴一脸惊恐的看着小狐狸:“会传染的!</p><p>“那还不乖乖喝药，是不是最近都不想让我亲你了。”小狐狸戳了戳小兔子的脑门]把药递给她。</p><p>唔..小兔子抬眸看了看小狐狸也只好仰头把药喝了下去。</p><p>小狐狸坐在一边伸手剥了颗糖，看着小兔子吃完药把糖喂她嘴里。</p><p>“吃了糖就不苦了，明天感冒好了带你去买凤梨酥吃。”小狐狸让小兔子躺好，伸手给她掖好被角俯身亲了亲她。</p><p>“不要亲我了，会传染给你的，狐狸真笨这都不知道。”小兔子着嘴盯着小狐狸看。</p><p>小狐狸挠了挠头咧开嘴角冲小兔子笑:“那我就跟你一起吃药嘛。”</p><p>晚安</p><h3 id="我要抱着你睡觉"><a href="#我要抱着你睡觉" class="headerlink" title="我要抱着你睡觉"></a>我要抱着你睡觉</h3><p>夜晚的森林让人感到格外的惬意，偶尔吹来一-阵微风，沙沙作响却不带走这片土地一丝神秘和安静。小狐狸将小兔子紧紧搂入怀中，生怕稍微松开一点便失去了这怀抱中的温暖。</p><p>“晚安，小兔子，该睡觉了呢。”小狐狸把手臂伸出被子，抱紧小兔子。</p><p>小兔子热乎乎的从被子里探出头来，说:“好的呢，笨狐狸，为什么你总是喜欢抱着我睡觉呀。”</p><p>“因为你是我的小心肝嗷，睡觉的样子也能让我心动许久。”小狐狸摸了摸小兔子的头想让小兔子躺好睡觉。</p><p>“就会耍嘴皮子，我热，笨狐狸总是把我和被子一起抱着。”小兔子又探出头来恶狠狠的看着小狐狸，兔耳朵不停拍打着小狐狸的脸。</p><p>“软，对不起，是因为我睡着后习惯滚被子，怕小兔子被子被扯走后着凉了，所以才把被子抱住的。”小狐狸松开手臂，一.脸愧疚的抓着自己小脑袋。</p><p>“噗，笨狐狸，原来是这样呀，那你把我也卷走吧，我融化后也要黏在你身上，天天黏着你，嘻嘻。”小兔子一边调着被子一边坏笑着冲小狐狸做了个鬼脸。</p><p>等小兔子调好被子后，小狐狸又抱紧小兔子，说:“傻兔子，该睡觉了呢，热的话和我说哦，我的小心肝的当然要抱紧的呀。”</p><p>可是，我怕做噩梦，最近我经常会被噩梦吓醒，然后睡不着。”小兔子委屈的看着小狐狸，不知怎么办才好。</p><p>小狐狸焦急的说道:“啊，怎么不告诉我呢，傻兔子，睡不着一定要告诉我，我会随时随地的做好陪你的准备的呢”</p><p>“可…我怕打扰到你睡觉呢。“小兔子把头缩进被子里，偷偷瞄着小狐狸的脸。</p><p>“傻兔子，怎么会呢，在你害怕的时候能第一时间让我陪着你，我会很开心的呢。“小狐狸宠溺的给小兔子顺着耳朵，眼里映着兔宝宝那半露的脸。</p><p>“真的吗?小狐狸?“小兔子疑惑的问。</p><p>小狐狸坚定的看着小兔子回答道:“ 真的呢，傻兔子，以后睡不着-定要告诉我哦，我随时准备好陪你。</p><p>那如果你不在我身边呢？</p><p>我听身边的朋友说他们不在一起的时候都用这款叫“微爱”的软件，我们可以在里面一起种树，装饰房子，还有自己的农场，也可以写下纪念日和我们的心愿。最重要的是我们可以看到对方的动态，这样我们就可以一直黏在一起了。就算不在身边也可以感觉到你一直在我身边呀。</p><p>真的吗，那真是太好了，这样就不怕感觉到离你很远了。</p><p>“我爱你，我们睡觉吧“小兔子抱住小狐狸，幸福洋溢在脸上，笑眯眯的闭上双眼。</p><p>“盖好被子哦，今晚我也会在你的梦里陪你的呢。“小狐狸轻抚着小兔子，让她渐渐的入睡，，轻声说道: ”晚安，好梦，我亲爱的小公主，我也爱你。</p><p>晚安</p><blockquote><p>原创故事来自：<a href="https://www.zhihu.com/people/3239708470">这里是小龙</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 与她 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心之语</title>
      <link href="/diary/love-letter/"/>
      <url>/diary/love-letter/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>在人海茫茫中，你是我心中最温暖的港湾。</p><span id="more"></span><blockquote><p>这是我第一次通过这种方式来寄托对你的情感，你可以把它理解为情书，也可以把它理解为我想对你说的心里话</p></blockquote><p><code>Dear</code>：</p><p>回想这段经历</p><p>我们从陌生人到无话不说的朋友，再到彼此心动，再到最后的难舍难分</p><hr><p>当在从朋友那得知你的时候，我内心是平静的</p><p>没有太过苛求，没有期望，甚至没有心动</p><p>偶然的一次游戏对局，朋友拉着你进了房间，然后一起打了几把游戏</p><p>你很安静，也很厉害，至少超过了大部分的女孩子游戏水平</p><p>一来二去，仿佛有种引力在驱使着我，让我去试着了解你</p><p>怀着忐忑的心，加了你的微信好友，开始了我俩的第一次聊天</p><p>我们的聊天从了解彼此的基本信息再到爱好，我们的关系从陌生人变成了普通朋友</p><p>再后来，分享日常行程报备，下班后一起游戏，让我们关系越来越好了</p><p>我提出了见面的要求，也是那次，我举着人生中送出的第一束花来到你的小区门口</p><p>那个时候的我，不似手机屏幕里的淡定和自然</p><p>我也有害怕，心乱，忐忑不安，但更多的还是紧张和期待</p><p>见面了，我看到了和手机里不一样性格的你</p><p>初次见面，我们都有些放不开，我也不断的在给我们彼此找一些话题，缓解两个人独处时的气氛</p><p>一起并肩走在小道上，某个瞬间，就很自然的牵起了你的手，很滑很细腻</p><p>终于，我鼓起勇气对你表白，说出了我喜欢你“我们在一起吧”</p><p>你同意了，我很开心，同时也对我们的未来充满了期待</p><p>那天的回忆就在我的脑海，让我记忆深刻，也是我最近两年过的最开心的一个周末了</p><p>就这样我们在一起了，我们也开始了甜蜜的相处，自然而舒适，一度让我认为我们是不是早就在平行时空认识了</p><hr><p>就在这时，我很认真的考虑了我们之间应该怎么相处，因为我想谈一段不分手的恋爱</p><p>我计划着我们要过的周末，要和你一起做的很多事情，小心翼翼的在备忘录写着你的爱好喜欢</p><p>因为见证过太多的轰轰烈烈然后走散的人，所以在我的计划中，我想着是平衡我俩的相处模式，细水长流式的恋爱</p><p>有可能是我们在一起时间太短，彼此都没怎么放开，两个人之间有腻歪，但并没有展现自己真实的样子</p><p>当我们深情相拥而吻的时候，我迷失了，你的回应是如此的热烈</p><p>当我们在小区偶遇流浪猫的时候，你的爱心让我触动</p><p>当我们刚在一起时你小心翼翼的问我是不是很丑的时候，我笑着对你说：“傻瓜，你一点都不丑，自信点”，又是如此让人止不住的想去呵护</p><p>当我们计划买日用品的时候，你的购物细节让我觉得你是个会生活过日子的人，让我很安心</p><p>当因为我冒痘痘然后给我修复霜的时候，你让我感受到了你的体贴</p><p>当你带我见你亲人的时候，让我感受到了很强烈的安全感，让我很安心</p><p>当得知你很宅的时候，我觉得是遇到了灵魂契合的伴侣</p><p>当你在周末还认认真真的对待工作的时候，让我意识到了你的责任心和事业心</p><p>当我们游戏连跪你却安慰我的时候，让我明白我在你心里比游戏重要</p><p>当我做的饭菜不好吃你却违心的说喜欢的时候，以及你做了拿手菜期待我吃的时候，让我感受到了爱的浓烈</p><p>…</p><p>一开始的我们，在恋爱中注重各种细节，甚至分开都是一步三回头的看着对方</p><hr><p>诸如此类的生活碎片太多了</p><p>我也彻底的被你的这些性格给深深吸引住了，我发现我离不开你了</p><p>这也导致了我越来越爱吃醋了，因为你在我心里的地位越来越高了，不再是普通的恋人，更像是我的明珠，不容他人觊觎</p><p>我们也因此留下了矛盾，由于我的疏忽，并没有好好处理这些问题，我们好像也因为这个慢慢变得不想去提不想过问处理这些问题了</p><p>就这样我们的感情来到了平淡期，也是矛盾多发期，更是你口里说的我们在一起像是搭伙过日子的时期</p><p>尽管这样，现在回忆起，我仍然觉得我对你的爱是没有变过的，我这个人就不怎么会表达爱意，算是一种缺陷吧</p><p>喜欢一个人明明都刻骨子里了，还是会不经思考说一些伤人的话，我很自责我也很难受，我写这些，希望你看到了能够明白我有时候的嘴硬其实只是想感受到你的偏爱</p><p>是我有些恃宠而骄了，忽略了两个人在一起的根本，也忽略了我们是因为爱才在一起的</p><p>矛盾高发期的这段时间，我忽略了及时沟通问题，去解决问题</p><p>具体问题就不提了，我想过去了的事情就淡化掉吧，过好以后的每一天，能做的是把握当下，以后不要犯同样的错误</p><p>是因为你的突然离开，才让我意识到我的问题，这些以前从来没有重视过的问题，也是因为你我才反思的问题</p><hr><p>谈谈我自己吧，也可以让你更加了解我</p><p>不是我甩锅，说起来可能和职业病有关系，程序员固有思维就是这样</p><p>普通的一个需求，如果存在多种输出可能，都需要向产品问明白后才能写代码</p><p>举个例子：实现一个按钮，可能就需要问这个按钮的尺寸大小颜色，按下松开的交互动画，按钮在不同场景下的呈现，管理员和普通用户的不同响应…</p><p>可能我这个例子不太妥当，就是想表达很多时候喜欢刨根问底的问，避免后面出现问题，这也是你那段时间吐槽的我啥事情都要问你 ಥ_ಥ</p><p>除此之外呢，我这个人有感情洁癖，并不是说吃醋就是不信任你，你的心里地位并不会因为我吃醋而降低丝毫，知道吗</p><p>吃醋只是因为觉得自己的心心念念的珍宝，别人知道了会天天惦记，我又不能直接去影响别人怎么样，所以就表现出吃醋让你在意</p><p>然后就是我的选择恐惧症了，我估计你也有，就比如我挑任何东西可以很久很久</p><p>之前给你选礼物的时候就是，我想体现出我的心意，不想随便买个东西应付，想让你感受到我的贴心，害怕买错了你不喜欢</p><p>对我而言，两个人在一起了我就不会去计较付出，也不会吝啬付出，不存在不想不愿和不在意的情况，这个你一定要知道噢</p><p>我希望的是两个人不管是谁心有不满或者是有想法都可以表达出来，我愿意去倾听，为我们感情去改正</p><p>然后如果对相处模式不满意，比如和内心期望有偏差，这些都可以直接交流，因为我们是不分彼此的，要相处很久很久</p><p>还有就是需求啦，想要什么可以直接说，我们是恋人呀乖乖，不必矜持，总比最后我挑半天选了个没啥用的东西好 💀💀💀</p><hr><p>分开这段时间，我一直在反思自己的问题，因为我不想重蹈覆辙，更不想带给后来人伤害了</p><p>我开始练字，平时落下的跑步也开始了，因为跑步可以让我的情绪发泄，写字可以让我的内心平静</p><p>只有这样，我才能在痛苦中去回忆，去控制自己的情绪，让自己不要冲动的犯下更严重的错误</p><p><strong>我想你也有过疑问，为什么我非要抓着你不放</strong>？</p><p>不是说彼此以后找不到更合适的，也不是因为想要弥补，更不是失去后的征服欲</p><p>是我回忆过往后得出的，我应该挽回的结论，因为你是真心的想要和我相处得，并不是玩玩而已，我能够感受到</p><p>是你给我了认可，让我的心有了归属，让我彻底的爱上你了</p><p>是你曾经带给我的美好回忆，是你的赤诚真心，我觉得我不挽回我会后悔一辈子</p><p><strong>这就是我想回答你的理由</strong></p><p>但是我也知道，你的失望不是一天造成的，我们之间缺乏沟通，让很多问题遗留下来没有处理</p><p>所以这段时间你的冷淡，不回消息，甚至只是问答式的敷衍，都是我应得的，怪不到你</p><p>我能够感受到你内心的纠结无奈，甚至害怕我会不会还像以前一样冲动，会不会重蹈覆辙</p><p>所以我在改变自己，就算不为了复合后的你，也要为了那个和我走完一生的人</p><p>我学会了一个新的词<strong>钝感力</strong>，任何事情都应该考虑好了才做定论，不能单纯靠猜测去做一些事情，否则对你也不公平</p><p>在挽回你的这段时间，成长了很多，明白了很多以前不知道的相处相恋的道理</p><p>比如陪伴不是简单的在一起过日子，而是情绪上的共鸣和体贴</p><p>比如责任忠诚信任都很重要</p><p>比如避免吵架，就算吵架也不能无厘头甚至是吵架后怎么去处理问题和哄你开心，不让情绪过夜</p><p>比如两个人相处最重要的是开心，和气生财不是没道理的</p><p>比如恋爱不是短期热度，平淡的日子没有惊喜也要创造惊喜，这是我们两个人的回忆</p><p>比如没有人会喜欢没主见的人，做任何事情应该有自己简单的判断，有自己的立场和主见</p><p>等等等…</p><hr><p>我爱你，我愿意为你承担责任，这不是说说而已</p><p>但我更希望你真正的开心幸福，所以就算最后你没有选择我，这也是你的权力，双向奔赴更有意义</p><p>我相信我们之间能够和好如初，甚至超过从前，因为我们有了这段经历，有了遇到问题如何解决处理的能力，更重要的是学会了沟通，不抛弃彼此</p><p>这段时间，我忐忑不安，辗转难眠，一闲下来，脑海全是我们的过往</p><p>但是我不能自私的把想法强加给你，更不能像倒苦水一样的和你诉说，给你压力</p><p>不完整的我是不值得你爱的，这段时间的调整，我已经做好了准备</p><p>爱意流传，我相信我们都是初时模样</p><p>我一直在原地等你</p><hr><p>现在你回头了，给我了希望，虽然你还是会故意不回消息，但我能理解，我也是把它当做是对我的惩罚了</p><p>我期望和你的见面，解开彼此心结，重新在一起</p><p>相互奔赴，不离不弃</p><p>用新的态度迎接更好的我们</p><p>———你永远的臭狗屎</p>]]></content>
      
      
      <categories>
          
          <category> 随笔日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 与她 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大文件的分段并发上传实现</title>
      <link href="/share/file-part-upload/"/>
      <url>/share/file-part-upload/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><em>在开发过程中，难免会遇到文件上传这个功能。有些服务器会限制单个文件的存储大小，那么用户上传超大文件怎么处理？</em></p><span id="more"></span><h3 id="文件为什么需要分段？"><a href="#文件为什么需要分段？" class="headerlink" title="文件为什么需要分段？"></a>文件为什么需要分段？</h3><ul><li><p>上传速度：将一个大文件分割成多个小文件块后，每个文件块的大小相对较小，可以大大提高文件的上传速度。</p></li><li><p>上传可靠性：大大降低了由于网络不稳定或者上传中断情况出现的概率。分段后即使上传失败了，也只需要重新上传失败的文件块即可。</p></li><li><p>服务器限制：有些服务器可能会限制单个文件的上传大小，如果上传文件过大，可能会造成上传异常。</p></li><li><p>便于管理：将文件分割成多个小文件块，可以更方便地管理文件，对文件块单独操作。</p></li></ul><h3 id="文件分段处理"><a href="#文件分段处理" class="headerlink" title="文件分段处理"></a>文件分段处理</h3><ul><li><p>获取文件对象 <code>File</code></p></li><li><p>利用 <code>Blob.slice</code> 方法分割文件：使用 <code>Blob</code> 对象的 <code>slice</code> 方法将文件分割成多个文件块。</p><p>实现如下：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 获取文件对象</span><span class="token keyword">function</span> <span class="token function">getFileById</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token operator">?.</span>files<span class="token operator">?.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 获取文件分片 slice 信息 * @param fileSize 文件大小 * @param chunkSize chunk 大小，默认每片 5 MB */</span><span class="token keyword">function</span> <span class="token function">getFileSliceRange</span><span class="token punctuation">(</span>fileSize<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> chunkSize <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> chunksRange<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> start<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> end<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#125;</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> chunksLen <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>fileSize <span class="token operator">/</span> chunkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chunksLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> start <span class="token operator">=</span> i <span class="token operator">*</span> chunkSize<span class="token punctuation">;</span>    <span class="token keyword">const</span> end <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>start <span class="token operator">+</span> chunkSize<span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>    chunksRange<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> start<span class="token punctuation">,</span> end <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> chunksRange<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 文件碎块： file.slice(chunksRange[index].start, chunksRange[index].end);</span></code></pre></li></ul><p>有的同学应该注意到了，我这里并没有直接对文件进行分割，然后将文件碎块用变量存入内存当中，而仅仅只是保存了每个文件碎块对应的位置信息。（<strong>在实际取用的时候，通过<code>file.slice(start, end)</code>取用。避免直接一次性对文件切割再放入内存，后者是对整个文件的一份拷贝，如果文件过大，会加大浏览器内存损耗</strong>）</p><p><em>ok，现在文件确实是已经做到分片了，解决了大文件没办法上传的问题，那如果文件碎片很多，又该怎么提升上传效率，实现优化呢？</em></p><h3 id="分段上传并发控制"><a href="#分段上传并发控制" class="headerlink" title="分段上传并发控制"></a>分段上传并发控制</h3><p>目前的一些主流的浏览器，都有默认的并发请求限制，换句话说，即时我们在代码中对请求并发数不做限制，实际上传时，仍然也不会同时发起过多的请求。</p><blockquote><p><code>Chrome/Firefox/Safari</code> 同域名下默认的并发数为 <code>6</code>，<code>IE</code> 同域名下默认的并发数为 <code>2</code>。那么如何修改这些限制呢？</p></blockquote><blockquote><p><code>Chrome</code> 可以通过修改网络参数实现修改，<code>IE</code> 需要修改注册表。<code>Safari</code> 则是在 <code>HTTP/2</code> 不做限制。</p></blockquote><p>那么，浏览器限制了我们真的不用在代码中限制并发数了吗？<code>no...no...no</code>，为什么仍然需要限制呢？</p><p><strong>避免将网络请求的并发限制全交给浏览器，造成在文件上传过程中，界面的其他操作请求被阻塞，直到文件碎块上传结束才被执行。同时，代码中的限制数，也应该尽量小于浏览器的默认并发数量，一般取 <code>2</code> 或者 <code>3</code>。</strong></p><p>如何简洁优雅的实现文件分段的并发控制呢？</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/** * 文件块上传 * @param file 文件 * @param preSignQuery 文件块预签名上传的请求 query * @param [onUploadProgress] 自定义上传进度 */</span><span class="token keyword">function</span> <span class="token function">partUploadHandler</span><span class="token punctuation">(</span>  file<span class="token operator">:</span> File <span class="token operator">|</span> Blob<span class="token punctuation">,</span>  preSignQuery<span class="token operator">:</span> <span class="token punctuation">&#123;</span> uploadId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> objectName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> partNumber<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  onUploadProgress<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> ProgressEvent<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取文件上传的预签名地址 preSignProvider --- 提供接口</span>  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">preSignProvider</span><span class="token punctuation">(</span>preSignQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'bucket'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 文件上传到对象存储服务器</span>  <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>origin<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/proxyServicePrefix/s3</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> file<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> file<span class="token punctuation">.</span>type <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    onUploadProgress<span class="token operator">:</span> onUploadProgress<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">?bucket=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>bucket<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 文件分片并发上传处理 * @param file 需要分片上传的源文件 * @param preSignQuery 文件块预签名上传的请求 query * @param [chunkSize] 切片大小，用于分片、计算已上传进度，Minio有分页时每一片大小至少为 5m 的限制 * @param [limit] 并发数，默认是 2 */</span><span class="token keyword">function</span> <span class="token function">uploadParallel</span><span class="token punctuation">(</span>  file<span class="token operator">:</span> File<span class="token punctuation">,</span>  preSignQuery<span class="token operator">:</span> <span class="token punctuation">&#123;</span> uploadId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> objectName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  chunkSize <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span>  limit <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> uid<span class="token punctuation">,</span> type<span class="token punctuation">,</span> size <span class="token punctuation">&#125;</span> <span class="token operator">=</span> file<span class="token punctuation">;</span> <span class="token comment">// uid 非 File 对象提供，可以理解为文件的 key</span>  <span class="token keyword">const</span> reqPromise<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 记录分段后的全部请求结果</span>  <span class="token keyword">const</span> pendingReq<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 目前的请求队列，用于并发限制</span>  <span class="token keyword">const</span> chunksLoaded<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 已经上传完成的数据流，用于计算上传进度并展示</span>  <span class="token keyword">const</span> chunksRange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFileSliceRange</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> chunkSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取分段信息</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>idx<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> start<span class="token punctuation">,</span> end <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token keyword">of</span> chunksRange<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建文件块的请求 promise</span>    <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token function">partUploadHandler</span><span class="token punctuation">(</span>      file<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token operator">...</span>preSignQuery<span class="token punctuation">,</span>        partNumber<span class="token operator">:</span> idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 记录当前是上传的第几片</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        chunksLoaded<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">.</span>loaded<span class="token punctuation">;</span>        <span class="token keyword">const</span> loaded <span class="token operator">=</span> chunksLoaded<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">=></span> sum <span class="token operator">+</span> c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> percentage <span class="token operator">=</span> <span class="token punctuation">(</span>loaded <span class="token operator">/</span> size<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token comment">// 找到当前正在上传的文件，给它绑定自定义的进度条信息</span>        <span class="token keyword">const</span> currentFile <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>uploadingFiles<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">=></span> f<span class="token punctuation">.</span>uid <span class="token operator">===</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// percentage 100，并非真的完成了整个上传过程了，仍需后续的完整性校验通过</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentFile <span class="token operator">&amp;&amp;</span> percentage <span class="token operator">!==</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          currentFile<span class="token punctuation">.</span>percentage <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>percentage<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    reqPromise<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 当前 p 上传结束后，从 pendingReq 队列中移除</span>    pendingReq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> pendingReq<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>pendingReq<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingReq<span class="token punctuation">.</span>length <span class="token operator">>=</span> limit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 当达到并发数限制时，等待前面一个文件碎块上传完成，才继续后续的分段</span>      <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>pendingReq<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 记录第一个地址（都是一样的，详见 partUploadHandler）</span>  <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>reqPromise<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// main 函数. eg. element/antDesign 拿到的自定义上传对象</span><span class="token keyword">function</span> <span class="token function">httpRequestMethod</span><span class="token punctuation">(</span>request<span class="token operator">:</span> HttpRequestOptions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> file <span class="token operator">=</span> res<span class="token punctuation">.</span>file<span class="token punctuation">;</span>  <span class="token comment">// 记录当前正在上传的文件信息</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>uploadingFiles<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> uid<span class="token operator">:</span> file<span class="token punctuation">.</span>uid<span class="token punctuation">,</span> status<span class="token operator">:</span> <span class="token string">'uploading'</span><span class="token punctuation">,</span> percentage<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取分段上传 id、和 objectName (提供 multipartUploadId 接口)</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> uploadId<span class="token punctuation">,</span> objectName <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">multipartUploadId</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 开始分片上传文件</span>    <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">uploadParallel</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> uploadId<span class="token punctuation">,</span> objectName <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 上传完成 --- 提供 finishMultipartUpload 接口</span>    <span class="token keyword">await</span> <span class="token function">finishMultipartUpload</span><span class="token punctuation">(</span>uploadId<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> objectName <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这个数据是存入到 form 表单的</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> file<span class="token punctuation">.</span>name<span class="token punctuation">,</span> path <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>    message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'文件上传失败！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 从记录的正在上传的文件列表中移除</span>    <span class="token keyword">const</span> idx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>uploadingFiles<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">=></span> f<span class="token punctuation">.</span>uid <span class="token operator">===</span> file<span class="token punctuation">.</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>uploadingFiles<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>以上就是文件分段并发上传的前端核心代码。那服务端应该怎么实现呢？</p><h3 id="NodeJS-接口实现"><a href="#NodeJS-接口实现" class="headerlink" title="NodeJS 接口实现"></a><code>NodeJS</code> 接口实现</h3><p>由上面的核心代码可以看到，需要提供三个接口:获取分段上传前置信息(<code>uploadId, objectName</code>)、获取文件片的预签名上传地址、完成上传(完整性校验)。</p><p>如果接口要设配不同的文件服务器，比如<code>minio、华为obs、阿里云</code>，需要自己封装一套<code>OssClient</code>的抽象父类，由子类集成并重写<code>client</code>提供的<code>API</code>.</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">private</span> client<span class="token operator">:</span> MinioClient <span class="token operator">|</span> ObsClient <span class="token operator">|</span> AliOssClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>xxx<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token constant">DEFAULT_BUCKET</span> <span class="token operator">=</span> <span class="token string">'xxx'</span><span class="token punctuation">;</span><span class="token comment">// 获取分段上传前置信息</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Post</span></span><span class="token punctuation">(</span><span class="token string">'/multipart-upload'</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">startMultipartUpload</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token string">'fileName'</span><span class="token punctuation">)</span> fileName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> bucketName <span class="token operator">=</span> <span class="token constant">DEFAULT_BUCKET</span><span class="token punctuation">;</span> <span class="token comment">// bucket 名称，可以来自 yml 配置</span>  <span class="token keyword">const</span> objectName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUploadObject</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 自己生成唯一键 objectName</span>  <span class="token comment">// 初始化分段上传，获取 uploadId</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">initMultipartUpload</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> objectName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> uploadId<span class="token operator">:</span> res<span class="token punctuation">.</span>uploadId<span class="token punctuation">,</span> objectName <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取文件片的预签名上传地址</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">'/multipart-upload/part/presign'</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">getPartUploadUrl</span><span class="token punctuation">(</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token string">'objectName'</span><span class="token punctuation">)</span> objectName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token string">'partNumber'</span><span class="token punctuation">)</span> partNumber<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token string">'uploadId'</span><span class="token punctuation">)</span> uploadId<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">isNil</span><span class="token punctuation">(</span>partNumber<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isNil</span><span class="token punctuation">(</span>uploadId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNil</span><span class="token punctuation">(</span>partNumber<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNil</span><span class="token punctuation">(</span>uploadId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadRequestException</span><span class="token punctuation">(</span><span class="token string">'分段上传需要同时提供 partNumber以及 uploadId 参数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> bucketName <span class="token operator">=</span> <span class="token constant">DEFAULT_BUCKET</span><span class="token punctuation">;</span>  <span class="token comment">// 默认24小时过期，算上传预签名地址</span>  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">presignedPutObject</span><span class="token punctuation">(</span>    bucketName<span class="token punctuation">,</span>    objectName<span class="token punctuation">,</span>    <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> partNumber<span class="token punctuation">,</span> uploadId <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> urlObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// query 上记录 bucket 参数，返回给前端</span>  <span class="token keyword">return</span> <span class="token function">appendQueryParams</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>urlObj<span class="token punctuation">.</span>pathname<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>urlObj<span class="token punctuation">.</span>search<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> bucket<span class="token operator">:</span> bucketName <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 完成上传</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Post</span></span><span class="token punctuation">(</span><span class="token string">'/multipart-upload/:uploadId'</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">finishMultipartUpload</span><span class="token punctuation">(</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Param</span></span><span class="token punctuation">(</span><span class="token string">'uploadId'</span><span class="token punctuation">)</span> uploadId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token string">'objectName'</span><span class="token punctuation">)</span> objectName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNil</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadRequestException</span><span class="token punctuation">(</span><span class="token string">'对象名称不能为空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> bucketName <span class="token operator">=</span> <span class="token constant">DEFAULT_BUCKET</span><span class="token punctuation">;</span>  <span class="token comment">// 读取当前 uploadId 的所有已上传的文件块</span>  <span class="token keyword">const</span> parts <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">listParts</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> objectName<span class="token punctuation">,</span> uploadId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 文件分段上传完整性校验</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">completeMultipartUpload</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> objectName<span class="token punctuation">,</span> uploadId<span class="token punctuation">,</span> parts<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> etag<span class="token operator">:</span> res<span class="token punctuation">.</span>etag<span class="token punctuation">,</span> name<span class="token operator">:</span> res<span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 功能实现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
            <tag> 并发请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 ElementUI 实现的 TreeSelect 组件</title>
      <link href="/share/element-tree-select/"/>
      <url>/share/element-tree-select/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>基于 <code>element</code> 的 <code>tree</code> 和 <code>select</code> 组件，实现的一个 <code>treeSelect</code> 组件，完整 <code>props</code> 和用法参考 <code>element</code>.</p><span id="more"></span><h3 id="模板和样式文件"><a href="#模板和样式文件" class="headerlink" title="模板和样式文件"></a>模板和样式文件</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tree-select-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mask<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShowSelect<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectClickHandle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-popover</span>      <span class="token attr-name">placement</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom-start<span class="token punctuation">"</span></span>      <span class="token attr-name">:width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width<span class="token punctuation">"</span></span>      <span class="token attr-name">trigger</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manual<span class="token punctuation">"</span></span>      <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShowSelect<span class="token punctuation">"</span></span>      <span class="token attr-name">@hide</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>popoverHide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tree</span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>common-tree<span class="token punctuation">"</span></span>        <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>style<span class="token punctuation">"</span></span>        <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tree<span class="token punctuation">"</span></span>        <span class="token attr-name">:lazy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazy<span class="token punctuation">"</span></span>        <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span>        <span class="token attr-name">:props</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultProps<span class="token punctuation">"</span></span>        <span class="token attr-name">:show-checkbox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multiple<span class="token punctuation">"</span></span>        <span class="token attr-name">:node-key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nodeKey<span class="token punctuation">"</span></span>        <span class="token attr-name">:check-strictly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkStrictly<span class="token punctuation">"</span></span>        <span class="token attr-name">:expand-on-click-node</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">:check-on-click-node</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multiple<span class="token punctuation">"</span></span>        <span class="token attr-name">:highlight-current</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name">:load</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loadChildNodes<span class="token punctuation">"</span></span>        <span class="token attr-name">v-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$listeners<span class="token punctuation">"</span></span>        <span class="token attr-name">@node-click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleNodeClick<span class="token punctuation">"</span></span>        <span class="token attr-name">@check-change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleCheckChange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tree</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span>        <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectStyle<span class="token punctuation">"</span></span>        <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reference<span class="token punctuation">"</span></span>        <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>select<span class="token punctuation">"</span></span>        <span class="token attr-name">:size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>size<span class="token punctuation">"</span></span>        <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectedData<span class="token punctuation">"</span></span>        <span class="token attr-name">:multiple</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multiple<span class="token punctuation">"</span></span>        <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>disabled<span class="token punctuation">"</span></span>        <span class="token attr-name">:clearable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clearable<span class="token punctuation">"</span></span>        <span class="token attr-name">:collapse-tags</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>collapseTags<span class="token punctuation">"</span></span>        <span class="token attr-name">@click.native</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectClickHandle<span class="token punctuation">"</span></span>        <span class="token attr-name">@remove-tag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>removeSelectedNodes<span class="token punctuation">"</span></span>        <span class="token attr-name">@clear</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>removeSelectedNode<span class="token punctuation">"</span></span>        <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeSelectedNodes<span class="token punctuation">"</span></span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tree-select<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span>          <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in options<span class="token punctuation">"</span></span>          <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.value<span class="token punctuation">"</span></span>          <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.label<span class="token punctuation">"</span></span>          <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-popover</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./index.ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.mask</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.common-tree</span> <span class="token punctuation">&#123;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.tree-select-wrapper</span> <span class="token punctuation">&#123;</span>    <span class="token selector">/deep/.tree-select .el-select__tags .el-tag .el-tag__close</span> <span class="token punctuation">&#123;</span>      <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">/deep/.tree-select .el-select__tags .el-tag .el-icon-close</span> <span class="token punctuation">&#123;</span>      <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="源码逻辑"><a href="#源码逻辑" class="headerlink" title="源码逻辑"></a>源码逻辑</h3><p><code>由于时间原因，代码中的类型不是很准确和完善，自行更正，准确类型参考 elTree 和 elSelect.</code><del>就是懒</del>😥😥😥</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Component<span class="token punctuation">,</span> Prop<span class="token punctuation">,</span> Vue<span class="token punctuation">,</span> Watch <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-property-decorator'</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">Option</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> label<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">Node</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> label<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> childNodes<span class="token operator">?</span><span class="token operator">:</span> Node<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">TreeSelect</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> data<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> defaultProps<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> multiple<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> clearable<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> disabled<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> lazy<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> collapseTags<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span> <span class="token comment">// 配置多选时是否将选中值按文字的形式展示</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> checkStrictly<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span> <span class="token comment">// 显示复选框情况下，是否严格遵循父子不互相关联</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">250</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> width<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">300</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> height<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'small'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> size<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'id'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> nodeKey<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> checkedKeys<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Prop</span></span><span class="token punctuation">(</span><span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">readonly</span> loadChildNodes<span class="token operator">!</span><span class="token operator">:</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token function-variable function">resolve</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> isShowSelect <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> options<span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> selectedData<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> checkedIds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> checkedData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">get</span> <span class="token function">style</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">'width:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token string">'px;'</span> <span class="token operator">+</span> <span class="token string">'height:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token string">'px;'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">get</span> <span class="token function">selectStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">'width:'</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px;'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Watch</span></span><span class="token punctuation">(</span><span class="token string">'isShowSelect'</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token function">onSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>select <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Watch</span></span><span class="token punctuation">(</span><span class="token string">'checkedKeys'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> deep<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token function">onCheckedKeysChange</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initCheckedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initCheckedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">selectClickHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>disabled<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isShowSelect <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShowSelect<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">setSelectOption</span><span class="token punctuation">(</span>node<span class="token operator">:</span> Node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> tmpMap<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    tmpMap<span class="token punctuation">.</span>value <span class="token operator">=</span> node<span class="token punctuation">.</span>key<span class="token punctuation">;</span>    tmpMap<span class="token punctuation">.</span>label <span class="token operator">=</span> node<span class="token punctuation">.</span>label<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmpMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>selectedData <span class="token operator">=</span> node<span class="token punctuation">.</span>key<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">checkSelectedNode</span><span class="token punctuation">(</span>checkedKeys<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> item <span class="token operator">=</span> checkedKeys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>tree <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCurrentKey</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>tree <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSelectOption</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">checkSelectedNodes</span><span class="token punctuation">(</span>checkedKeys<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>tree <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCheckedKeys</span><span class="token punctuation">(</span>checkedKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">clearSelectedNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>selectedData <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>tree <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCurrentKey</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">clearSelectedNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 所有被选中的节点的 key 所组成的数组数据</span>    <span class="token keyword">const</span> checkedKeys <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>tree <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCheckedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> checkedKeys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>tree <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setChecked</span><span class="token punctuation">(</span>checkedKeys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">initCheckedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>multiple<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>checkedKeys<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkSelectedNodes</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>checkedKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clearSelectedNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>checkedKeys<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkSelectedNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>checkedKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clearSelectedNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">popoverHide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>multiple<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 所有被选中的节点的 key 所组成的数组数据</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>checkedIds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>tree <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCheckedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 所有被选中的节点所组成的数组数据</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>checkedData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>tree <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCheckedNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>checkedIds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>tree <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCurrentKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>checkedData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>tree <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCurrentNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'popoverHide'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>checkedIds<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>checkedData<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">handleNodeClick</span><span class="token punctuation">(</span>d<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> node<span class="token operator">:</span> Node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>multiple<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSelectOption</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isShowSelect <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShowSelect<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectedData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">handleCheckChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 所有被选中的节点的 key 所组成的数组数据</span>    <span class="token keyword">const</span> checkedKeys <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>tree <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCheckedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> checkedKeys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 所有被选中的节点对应的node</span>      <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>tree <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> tmpMap<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      tmpMap<span class="token punctuation">.</span>value <span class="token operator">=</span> node<span class="token punctuation">.</span>key<span class="token punctuation">;</span>      tmpMap<span class="token punctuation">.</span>label <span class="token operator">=</span> node<span class="token punctuation">.</span>label<span class="token punctuation">;</span>      <span class="token keyword">return</span> tmpMap<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>selectedData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> item<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectedData<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">removeSelectedNodes</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>tree <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setChecked</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>tree <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>checkStrictly <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">treeToList</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token operator">?.</span>childNodes<span class="token operator">?.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>tree <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setChecked</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleCheckChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectedData<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">treeToList</span><span class="token punctuation">(</span>tree<span class="token operator">:</span> Node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> queen<span class="token operator">:</span> Node<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> out <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    queen <span class="token operator">=</span> queen<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>queen<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> first <span class="token operator">=</span> queen<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token operator">?.</span>childNodes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        queen <span class="token operator">=</span> queen<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span>childNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      out<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> out<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">removeSelectedNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clearSelectedNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectedData<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">changeSelectedNodes</span><span class="token punctuation">(</span>selectedData<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>multiple <span class="token operator">&amp;&amp;</span> selectedData<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clearSelectedNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectedData<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 组件封装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TreeSelect </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Antd-Table 二次封装的 ResizeTable 组件</title>
      <link href="/share/antd-resize-table/"/>
      <url>/share/antd-resize-table/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><code>antd</code> 提供的 <code>table</code> 组件本身是不支持改变列宽的，在某些场景下，用户希望通过自己调节查看列详情。</p><p>类似<code>vue-element</code>又支持了这个功能，所以想着封装一版<code>react</code>可拖拽列宽的表格组件。</p><span id="more"></span><h3 id="ResizeTable-组件实现"><a href="#ResizeTable-组件实现" class="headerlink" title="ResizeTable 组件实现"></a>ResizeTable 组件实现</h3><p><code>组件接收的 Props 同 Table 一致</code>.</p><pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> delayMS <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@/utils/utils'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Table <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> ColumnType<span class="token punctuation">,</span> TableProps <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'antd/lib/table'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> TableRowSelection <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'antd/lib/table/interface'</span><span class="token punctuation">;</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useEffect<span class="token punctuation">,</span> useMemo<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Resizable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-resizable'</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">ResizeTableProps</span> <span class="token keyword">extends</span> <span class="token class-name">TableProps<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>  columns<span class="token operator">:</span> ColumnType<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// any 取决于 row 数据类型</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">ResizableTitle</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span> onResize<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span> width<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> onResize<span class="token punctuation">,</span> width<span class="token punctuation">,</span> onClick<span class="token punctuation">,</span> <span class="token operator">...</span>restProps <span class="token punctuation">&#125;</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>  <span class="token comment">// fix: 修复拖拽改变列宽操作与排序器冲突</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>resizing<span class="token punctuation">,</span> setResizing<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>width<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>restProps<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Resizable</span></span>      <span class="token attr-name">width</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>width<span class="token punctuation">&#125;</span></span>      <span class="token attr-name">height</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span></span>      <span class="token attr-name">onResizeStart</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setResizing</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>      <span class="token attr-name">onResizeStop</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">await</span> <span class="token function">delayMS</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// setTimeout 0</span>        <span class="token function">setResizing</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>      <span class="token attr-name">onResize</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>onResize<span class="token punctuation">&#125;</span></span>      <span class="token comment">// draggableOpts=&#123;&#123; enableUserSelectHack: false &#125;&#125;</span>    <span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span>        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>resizing <span class="token operator">&amp;&amp;</span> onClick<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>        <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>restProps<span class="token punctuation">&#125;</span></span>      <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Resizable</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> ResizeTable<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>ResizeTableProps<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>columns<span class="token punctuation">,</span> setColumns<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>ColumnType<span class="token operator">&lt;</span><span class="token constant">API</span><span class="token punctuation">.</span>RowDataInfo<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setColumns</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>columns <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>props<span class="token punctuation">.</span>columns<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleResize</span> <span class="token operator">=</span>    <span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span>    <span class="token punctuation">(</span>e<span class="token operator">:</span> Event<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> size <span class="token punctuation">&#125;</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">stopImmediatePropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// e.preventDefault();</span>      <span class="token function">setColumns</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> nextColumns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>cols<span class="token punctuation">]</span><span class="token punctuation">;</span>        nextColumns<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>          <span class="token operator">...</span>nextColumns<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>          width<span class="token operator">:</span> size<span class="token punctuation">.</span>width<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nextColumns<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> customColumns <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>      columns<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>col<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token operator">...</span>col<span class="token punctuation">,</span>        <span class="token function-variable function">onHeaderCell</span><span class="token operator">:</span> <span class="token punctuation">(</span>column<span class="token operator">:</span> <span class="token punctuation">&#123;</span> width<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          width<span class="token operator">:</span> column<span class="token punctuation">.</span>width<span class="token punctuation">,</span>          onResize<span class="token operator">:</span> <span class="token function">handleResize</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>columns<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Table</span></span>      <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>props<span class="token punctuation">&#125;</span></span>      <span class="token attr-name">columns</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>customColumns <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">&#125;</span></span>      <span class="token attr-name">components</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> header<span class="token operator">:</span> <span class="token punctuation">&#123;</span> cell<span class="token operator">:</span> ResizableTitle <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>    <span class="token punctuation">/></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span>ResizeTable<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 组件封装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ResizeTable </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可对已选项拖拽排序的 React 下拉选择组件</title>
      <link href="/share/react-draggable-select/"/>
      <url>/share/react-draggable-select/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>基于最近项目上的一个需求：对已经选择的多个选项进行排序。由于<code>select</code>组件本身没有支持，所以单独封装实现。</p><blockquote><p>基于 <code>react-beautiful-dnd</code> 模块实现的一个拖拽实例</p></blockquote><span id="more"></span><h3 id="源码实现"><a href="#源码实现" class="headerlink" title="源码实现"></a>源码实现</h3><h4 id="DraggableSelect-组件"><a href="#DraggableSelect-组件" class="headerlink" title="DraggableSelect 组件"></a><code>DraggableSelect</code> 组件</h4><p><code>接受的 Props 同 Select 组件.</code></p><pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> SelectProps <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Select <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> LabeledValue<span class="token punctuation">,</span> SelectValue <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'antd/es/select'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> CSSProperties <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> DraggableProvidedDraggableProps<span class="token punctuation">,</span> DropResult <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-beautiful-dnd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> DragDropContext<span class="token punctuation">,</span> Draggable<span class="token punctuation">,</span> Droppable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-beautiful-dnd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> TagItem <span class="token keyword">from</span> <span class="token string">'./components/TagItem'</span><span class="token punctuation">;</span><span class="token keyword">const</span> getItemStyle <span class="token operator">=</span> <span class="token punctuation">(</span>  isDragging<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>  draggableStyle<span class="token operator">:</span> DraggableProvidedDraggableProps<span class="token punctuation">[</span><span class="token string">'style'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">:</span> CSSProperties <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  userSelect<span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>  opacity<span class="token operator">:</span> isDragging <span class="token operator">?</span> <span class="token number">0.5</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token operator">...</span>draggableStyle<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">reorder</span> <span class="token operator">=</span> <span class="token punctuation">(</span>list<span class="token operator">:</span> SelectValue<span class="token punctuation">,</span> startIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> endIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>list <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>removed<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>endIndex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> removed<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">DraggableSelect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  onChange<span class="token punctuation">,</span>  value<span class="token punctuation">,</span>  tagRender<span class="token punctuation">,</span>  <span class="token operator">...</span>props<span class="token punctuation">&#125;</span><span class="token operator">:</span> SelectProps<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">&amp;</span> <span class="token punctuation">&#123;</span> onChange<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> SelectValue<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">onDragEnd</span> <span class="token operator">=</span> <span class="token punctuation">(</span>result<span class="token operator">:</span> DropResult<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>      destination<span class="token punctuation">,</span>      source<span class="token operator">:</span> <span class="token punctuation">&#123;</span> index<span class="token operator">:</span> dragIndex <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span> <span class="token operator">=</span> result<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>destination<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token function">reorder</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> dragIndex<span class="token punctuation">,</span> destination<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>      onChange<span class="token operator">?.</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DragDropContext</span></span> <span class="token attr-name">onDragEnd</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>onDragEnd<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Droppable</span></span> <span class="token attr-name">droppableId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>list<span class="token punctuation">'</span></span> <span class="token attr-name">direction</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>horizontal<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>provided<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>provided<span class="token punctuation">.</span>droppableProps<span class="token punctuation">&#125;</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>provided<span class="token punctuation">.</span>innerRef<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">            &lt;Select              style=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> width<span class="token operator">:</span> <span class="token string">'100%'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token plain-text">              tagRender=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>tagProps<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Draggable</span></span>                  <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>tagProps<span class="token punctuation">.</span>value <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span></span>                  <span class="token attr-name">draggableId</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>tagProps<span class="token punctuation">.</span>value <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span></span>                  <span class="token attr-name">index</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token operator">:</span> SelectValue<span class="token punctuation">)</span> <span class="token operator">=></span>                    <span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">'string'</span>                      <span class="token operator">?</span> item <span class="token operator">===</span> tagProps<span class="token punctuation">.</span>value                      <span class="token operator">:</span> <span class="token punctuation">(</span>item <span class="token keyword">as</span> LabeledValue<span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">===</span> tagProps<span class="token punctuation">.</span>value<span class="token punctuation">,</span>                  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">                  </span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>pd<span class="token punctuation">,</span> snapshot<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>                      <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>pd<span class="token punctuation">.</span>innerRef<span class="token punctuation">&#125;</span></span>                      <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>pd<span class="token punctuation">.</span>draggableProps<span class="token punctuation">&#125;</span></span>                      <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>pd<span class="token punctuation">.</span>dragHandleProps<span class="token punctuation">&#125;</span></span>                      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token function">getItemStyle</span><span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>isDragging<span class="token punctuation">,</span> pd<span class="token punctuation">.</span>draggableProps<span class="token punctuation">.</span>style<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>                      <span class="token attr-name">onMouseDown</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">                      </span><span class="token punctuation">&#123;</span>tagRender <span class="token operator">?</span> <span class="token function">tagRender</span><span class="token punctuation">(</span>tagProps<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TagItem</span></span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>tagProps<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">&#125;</span><span class="token plain-text">                    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Draggable</span></span><span class="token punctuation">></span></span>              <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">              onChange=</span><span class="token punctuation">&#123;</span>onChange<span class="token punctuation">&#125;</span><span class="token plain-text">              value=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token plain-text">              </span><span class="token punctuation">&#123;</span><span class="token operator">...</span>props<span class="token punctuation">&#125;</span><span class="token plain-text">            />            </span><span class="token punctuation">&#123;</span><span class="token comment">/* FIX: 添加 provided.placeholder 解决 warning 警告，display：none 不使用占位符 */</span><span class="token punctuation">&#125;</span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> display<span class="token operator">:</span> <span class="token string">'none'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>provided<span class="token punctuation">.</span>placeholder<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Droppable</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">DragDropContext</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> DraggableSelect<span class="token punctuation">;</span></code></pre><h4 id="TagItem-组件"><a href="#TagItem-组件" class="headerlink" title="TagItem 组件"></a><code>TagItem</code> 组件</h4><pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CloseOutlined <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@ant-design/icons'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> CustomTagProps <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rc-select/lib/interface/generator'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> CSSProperties <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">TagItemProps</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  label<span class="token operator">?</span><span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span>  originLabel<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  style<span class="token operator">?</span><span class="token operator">:</span> CSSProperties<span class="token punctuation">;</span>  dataHandlerId<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  onMouseDown<span class="token operator">?</span><span class="token operator">:</span> React<span class="token punctuation">.</span>MouseEventHandler<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token operator">&amp;</span> CustomTagProps<span class="token punctuation">;</span><span class="token keyword">const</span> TagItem<span class="token operator">:</span> React<span class="token punctuation">.</span>ForwardRefRenderFunction<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> TagItemProps<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token punctuation">&#123;</span> label<span class="token punctuation">,</span> originLabel<span class="token punctuation">,</span> dataHandlerId<span class="token punctuation">,</span> onMouseDown<span class="token punctuation">,</span> onClose<span class="token punctuation">,</span> style <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  ref<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span>    <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>ant-select-selection-item<span class="token punctuation">'</span></span>    <span class="token attr-name">title</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>originLabel <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span></span>    <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>style<span class="token punctuation">&#125;</span></span>    <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>ref<span class="token punctuation">&#125;</span></span>    <span class="token attr-name">onMouseDown</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>onMouseDown<span class="token punctuation">&#125;</span></span>    <span class="token attr-name">data-handler-id</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>dataHandlerId<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>ant-select-selection-item-content<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>label<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>ant-select-selection-item-remove<span class="token punctuation">'</span></span> <span class="token attr-name">unselectable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>on<span class="token punctuation">'</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>true<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CloseOutlined</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>onClose<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span>TagItem<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 组件封装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> Select </tag>
            
            <tag> draggable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法实战系列：树形结构遍历</title>
      <link href="/share/tree-traversal/"/>
      <url>/share/tree-traversal/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="Before…"><a href="#Before…" class="headerlink" title="Before…"></a>Before…</h3><ul><li><p>前几天在一家独角兽公司复试，本以为会很顺利，但随着最后技术面的一道算法题失利而告终。（面试官：最后再考你一道题吧，不会很难的… 遍历一颗树，找到符合某个要求的节点。我： emmm 确实感觉挺简单的，平时也会遇到这类型的需求，但不知道是脑子瓦特了还是真的因为紧张，一时间没有想到最优实现，最后通过深度遍历完成，但并不符合面试官预期…他想要的是广度优先遍历实现）</p></li><li><p>只能说是准备不充分，稳稳拿下的面试因为这两年工作而遗忘的东西而失败。今天全当是复习了…、</p></li><li><p><strong>持续更新中</strong>..</p></li></ul><span id="more"></span><h3 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h3><blockquote><p><code>使用广度优先遍历查找某一个节点，需要使用队列来辅助实现。</code></p></blockquote><p>具体实现：</p><ul><li>创建一个队列，将根节点入队。</li><li>当队列不为空时，取出队列中的队首元素。</li><li>如果当前节点的值等于目标值，返回当前节点。</li><li>否则将当前节点的所有子节点加入队列。</li><li>重复步骤 2-4，直到队列为空。</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">&#123;</span>  value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  children<span class="token operator">:</span> TreeNode<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">bfsFindNode</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode<span class="token punctuation">,</span> targetValue<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> queue<span class="token operator">:</span> TreeNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个队列，将根节点入队</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> currentNode <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span> <span class="token comment">// 取出队列中的队首元素</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>value <span class="token operator">===</span> targetValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> currentNode<span class="token punctuation">;</span> <span class="token comment">// 如果当前节点的值等于目标值，返回当前节点</span>    <span class="token punctuation">&#125;</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>currentNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将当前节点的所有子节点加入队列</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 队列为空，未找到目标节点，返回null</span><span class="token punctuation">&#125;</span></code></pre><p>创建一个队列，将根节点入队，然后使用一个<code>while</code>循环来遍历队列中的元素。每次取出队首元素，并判断其值是否等于目标值，如果相等，则返回该节点；否则将该节点的所有子节点加入队列。当队列为空时，表示未找到目标节点，返回<code>null</code>。</p><h3 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3><blockquote><p><code>使用递归实现深度优先遍历。</code></p></blockquote><ul><li>访问当前节点，并判断当前节点的值是否等于目标值。</li><li>如果当前节点的值等于目标值，返回当前节点。</li><li>否则对当前节点的每个子节点，递归调用深度优先遍历函数。</li><li>重复步骤 1-3，直到遍历完整棵树。</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">&#123;</span>  value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  children<span class="token operator">:</span> TreeNode<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">dfsFindNode</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode<span class="token punctuation">,</span> targetValue<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>value <span class="token operator">===</span> targetValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span> <span class="token comment">// 当前节点的值等于目标值，返回当前节点</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token keyword">of</span> root<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">dfsFindNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> targetValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归查找子节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span> <span class="token comment">// 找到目标节点，直接返回</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 未找到目标节点，返回 null</span><span class="token punctuation">&#125;</span></code></pre><p>首先访问当前节点，并判断其值是否等于目标值。如果等于目标值，直接返回当前节点；否则对当前节点的每个子节点，递归调用深度优先遍历函数，并返回找到的目标节点。当遍历完整棵树后，仍未找到目标节点，则返回<code>null</code>。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> root<span class="token operator">:</span> TreeNode <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  children<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      value<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      children<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      value<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      children<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> targetNode <span class="token operator">=</span> <span class="token function">dfsFindNode</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>targetNode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; value: 6, children: [] &#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度优先遍历 </tag>
            
            <tag> 广度优先遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Decorator 装饰器的实现原理及实践</title>
      <link href="/share/decorator/"/>
      <url>/share/decorator/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="Decorator-是什么？"><a href="#Decorator-是什么？" class="headerlink" title="Decorator 是什么？"></a><code>Decorator</code> 是什么？</h3><p>因为之前一个 <code>Vue</code> 项目中需要对一个 <code>Watch</code> 监听添加去抖动功能，最后经过深思熟虑，决定使用 <code>decorator</code> 进行实现。</p><p>简单来讲，<code>decorator</code>就是<code>ES7</code>的一个语法糖，类似<code>wrapper</code>，它作用于一个目标函数，对这个目标函数添加一些额外的操作，然后返回一个新的函数。形如：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token decorator"><span class="token at operator">@</span><span class="token function">myDecorator</span></span><span class="token keyword">function</span> <span class="token function">newFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是被装饰器包裹的内部函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><code>decorator</code> 的实现依赖于 <code>ES5</code> 的 <code>Object.defineProperty</code> 方法。</p><span id="more"></span><h3 id="了解-Object-defineProperty"><a href="#了解-Object-defineProperty" class="headerlink" title="了解 Object.defineProperty"></a>了解 <code>Object.defineProperty</code></h3><p><code>defineProperty</code> 简单来说就是为调用他的对象添加新的属性，或者对已知某个已存在的属性进行修改。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><pre class="language-typescript" data-language="typescript"><code class="language-typescript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>它有三个参数：</p><ul><li><code>obj</code>: 目标对象</li><li><code>prop</code>: 属性名，键</li><li><code>descriptor</code>: 属性描述符，针对该属性的描述</li></ul><h4 id="descriptor-属性描述符"><a href="#descriptor-属性描述符" class="headerlink" title="descriptor 属性描述符"></a><code>descriptor</code> 属性描述符</h4><p>对象里目前存在的属性描述符有两种主要形式：<strong>数据描述符</strong>和<strong>存取描述符</strong>。</p><p><strong>两种描述符只能是其中之一，不能同时使用。且都是对象</strong></p><ul><li><p>数据描述符：描述属性值是可写还是不可写。对应独有的可选键：<code>value(属性值)/writable(可写)</code></p></li><li><p>存取描述符：由 <code>getter</code> 和 <code>setter</code> 函数所描述的属性。对应独有的可选键：<code>get(属性访问方法)/set(属性设置方法)</code></p></li><li><p>两者共有的可选键：<code>configurable(可变更[删除])/enumerable(可枚举)</code></p></li></ul><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">了解更多 Object.defineProperty 相关</a></p></blockquote><h3 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h3><p><code>概念：允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。</code></p><p>你可以理解为就是一层<code>wrapper</code>，<code>React</code>的高阶函数组件就是装饰者模式的一个实践。比如下面这段代码：</p><pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">&#123;</span> IRouteComponentProps <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'umi'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> PageContainer <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@ant-design/pro-layout'</span><span class="token punctuation">;</span><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">'./index.less'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">withLayout</span> <span class="token operator">=</span> <span class="token punctuation">(</span>Page<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这里可以添加一些公用逻辑...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 返回一个新的 wrapper 组件</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>props<span class="token operator">:</span> IRouteComponentProps<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这里可以通过 props，处理一些特殊逻辑...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">PageContainer</span></span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>pageContainer<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Page</span></span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>props<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">PageContainer</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="写一个-decorator"><a href="#写一个-decorator" class="headerlink" title="写一个 decorator"></a>写一个 <code>decorator</code></h3><blockquote><p><code>@</code>装饰器，后面紧跟一个装饰器函数，该函数有三个形参：<code>target, propertyKey, descriptor</code>，最后返回一个新的<code>descriptor</code>。该函数即是目标函数的<code>wrapper</code>实现，当然该装饰器函数也可以是工厂函数，通过<code>fn(...args)</code>返回。</p></blockquote><p><strong>装饰器<code>decorator</code>只能在类中使用</strong></p><p><strong>在类方法上使用时，target 就是类的 prototype，propertyKey 就是方法名</strong></p><p><strong>在类上使用时，<code>descriptor</code> 接受的第一个参数 <code>target</code> 就是类的 <code>prototype</code></strong></p><h4 id="在类的一个方法上使用"><a href="#在类的一个方法上使用" class="headerlink" title="在类的一个方法上使用"></a>在类的一个方法上使用</h4><p><code>该例使用的是</code> <strong>数据描述符</strong> <code>的方式对 descriptor 进行修改。最后面还有一个 debounce 的例子，准备使用</code> <strong>存取描述符</strong> <code>实现</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// log 装饰器 --- 可接受参数</span><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span>fnName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> propertyKey<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> original <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 拿到目标函数</span>    descriptor<span class="token punctuation">.</span><span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">这就是装饰器为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>fnName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">函数添加的日志功能</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">original</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> descriptor<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">log</span></span><span class="token punctuation">(</span><span class="token string">'myFn'</span><span class="token punctuation">)</span>  <span class="token function">myFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// console.log('这是一个函数');</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在该例子中，我在<code>Test</code>中定义了一个<code>myFn</code>的方法，同时为其添加了<code>log</code>的装饰器修饰。<code>log</code>的作用就是在<code>myFn</code>执行的时候，添加 <code>console.log</code> 的日志打印记录。装饰器函数最后返回一个包含新的<code>value(也就是这个函数体)</code>的<code>descriptor</code>。它的原理等价下面实现：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> defaultDescriptor <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// console.log('这是一个函数');</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  enumerable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 装饰器的作用：通过 @function：function 返回新的 descriptor</span><span class="token keyword">const</span> descriptor <span class="token operator">=</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'myFn'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Test<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">'myFn'</span><span class="token punctuation">,</span> defaultDescriptor<span class="token punctuation">)</span> <span class="token operator">||</span> defaultDescriptor<span class="token punctuation">;</span><span class="token comment">// 将新的 descriptor 作用到目标方法</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>Test<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">'myFn'</span><span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样是不是更容易理解<code>@</code>究竟都干了些什么，总结下来，其实自己实现一个装饰器也就不那么难了。</p><h4 id="在类上使用"><a href="#在类上使用" class="headerlink" title="在类上使用"></a>在类上使用</h4><p>在类上使用，可以实现很多有意思的功能：<strong>添加静态成员、继承、MixIn…</strong></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">addType</span><span class="token punctuation">(</span>target<span class="token operator">:</span> Cat<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  target<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'Animal'</span><span class="token punctuation">;</span> <span class="token comment">// 添加类的静态成员 static</span>  <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">addType</span></span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name <span class="token punctuation">&#125;</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我是一只</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Cat<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">， 我的名字叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>通过在<code>Cat</code>上添加<code>@addType</code>，所有用到该装饰器的类，都会多一个静态成员<code>type</code>。那么继承又该怎么实现呢？</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Student</span></span><span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'my name is '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span>target<span class="token operator">:</span> Student<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">extends</span></span> target <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">super</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 方法重写</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我不要你觉得，我要我觉得'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>通过<code>@Student</code>可以生成<code>Man</code>的子类<code>Student</code>，当然例子仅表示能这么实现，实际业务中<strong>不推荐使用这种方式进行继承</strong>，<del><code>new Man()</code>生成的实例居然是<code>Student</code>的实例，什么？父类的实例居然是子类的实例？想想就有些受不了</del>。</p><p>那么，有没有能接受的方式？下面定义的<code>Mixin</code>，用到该装饰器的类，均可挂载该装饰器类的所有方法，如下：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span>  <span class="token function">runA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是runA!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token punctuation">&#123;</span>  <span class="token function">runB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是runB!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">mixin</span></span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">mixin</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 遍历原型上的方法，并挂载到目标类</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> cls <span class="token keyword">of</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//! 注意: 通过这种方式混入到目标类，仅仅是完成了将方法函数拷贝到目标类的效果，并未挂载实例对象的基本属性，并未实现真正的多继承</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!==</span> <span class="token string">'constructor'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>            target<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span>            key<span class="token punctuation">,</span>            Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">C</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">runA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我是runA!</span>c<span class="token punctuation">.</span><span class="token function">runB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我是runB!</span></code></pre><p>实际项目中又怎么用呢？</p><h3 id="Vue2装饰器语法中的运用"><a href="#Vue2装饰器语法中的运用" class="headerlink" title="Vue2装饰器语法中的运用"></a><code>Vue2</code>装饰器语法中的运用</h3><p>这个是之前给<code>watcher</code>添加<code>debounce</code>的时候加的装饰器，实现如下：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// store timeout value for cancel the timeout</span>  <span class="token keyword">let</span> timeoutRef <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutRef<span class="token punctuation">)</span><span class="token punctuation">;</span>    timeoutRef <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Debounce</span><span class="token punctuation">(</span>limit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">debounceDesc</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      enumerable<span class="token operator">:</span> descriptor<span class="token punctuation">.</span>enumerable<span class="token punctuation">,</span>      <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Attach this function to the instance (not the class)</span>        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>          configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          enumerable<span class="token operator">:</span> descriptor<span class="token punctuation">.</span>enumerable<span class="token punctuation">,</span>          value<span class="token operator">:</span> <span class="token function">debounce</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span>value<span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> ECMAScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> decorator </tag>
            
            <tag> 装饰器 </tag>
            
            <tag> javascript </tag>
            
            <tag> es7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth2.0 的四种授权方式</title>
      <link href="/share/oauth/"/>
      <url>/share/oauth/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="Before…"><a href="#Before…" class="headerlink" title="Before…"></a>Before…</h3><blockquote><p><code>OAuth 2.0</code> 通过授权机制，让第三方应用可以获取用户或者系统数据。</p></blockquote><p>前后端在进行通信(或者称之为数据请求)时，需要在请求时携带用户 <code>token</code>，用来验证用户的登录情况减轻服务器压力。</p><p><code>OAuth</code> 的核心作用就是向客户端颁发令牌(<code>token</code>)。</p><p>通常所说的令牌<code>token</code>，分为两种：客户端令牌(任何时候都能访问资源的凭证，通常由 <code>client_id(身份id)/client_secret(密钥：只能保存到后端)</code> 生成)、用户令牌(完成登录后生成)。</p><span id="more"></span><h3 id="授权方式"><a href="#授权方式" class="headerlink" title="授权方式"></a>授权方式</h3><h4 id="授权码"><a href="#授权码" class="headerlink" title="授权码"></a>授权码</h4><blockquote><p>适用于有中间层的 <code>web</code> 项目,并将生成的 <code>token</code> 存到 <code>node</code> 后端，避免令牌泄露。这种方式安全性最高，也是我最近项目用到的鉴权方式。</p></blockquote><ul><li><p>步骤一：网站<code>A(client)</code>点击登录(或者其他链接)，跳转至网站<code>B(JAVA或者其他后端)：https://b.com/oauth/authorize?query</code>,<code>query</code>参数如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"response_type"</span><span class="token operator">:</span> <span class="token string">"code"</span><span class="token punctuation">,</span> <span class="token comment">// 表示要求返回授权码</span>  <span class="token property">"client_id"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment">// 应用标识 告诉 B 是哪个站点应用在请求</span>  <span class="token property">"redirect_uri"</span><span class="token operator">:</span> <span class="token string">""</span> <span class="token comment">// 参数表示 B 完成完成授权过程后重定向的链接地址</span>  <span class="token comment">// "scope": ""  // 参数表示要求的授权范围，可不设</span><span class="token punctuation">&#125;</span></code></pre><ul><li><p>登录逻辑放到了前端<code>A</code>，那么由前端<code>A</code>完成账号密码录入，发起登录请求<code>https://b.com/oauth/login(提供登录成功后的重定向地址 successRedirect... 注意区分 redirect_uri)</code>，由网站<code>B</code>重定向到<code>A(node)：/a.com/oauth/successRedirect(中间层获取授权码)</code>，由<code>A(node: /successRedirect)</code>拿到授权码进行重定向<code>(redirect_uri)</code>…</p></li><li><p>登录逻辑放到了后端<code>B</code>，那么在点击了<code>A</code>提供的链接后，会在<code>B</code>网站登录页完成登录并提示接受<code>A</code>授权，完成登录过程,并生成授权码，然后重定向…</p></li></ul><p>基于两种不同场景下的登录，最终都将生成授权码，并作为<code>query</code>携带，重定向回<code>A(node的一个接口，eg. https://a.com/SSOCheckUser?code=xxx)</code></p></li><li><p>步骤二：网站<code>A(node)</code>拿到授权码(<code>code</code>)后，就可以向<code>B</code>请求令牌 <code>https://b.com/oauth/token?query</code>，<code>query</code>参数如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"client_id"</span><span class="token operator">:</span> <span class="token string">"CLIENT_ID"</span><span class="token punctuation">,</span> <span class="token comment">// 应用标识</span>  <span class="token property">"client_secret"</span><span class="token operator">:</span> <span class="token string">"CLIENT_SECRET"</span><span class="token punctuation">,</span> <span class="token comment">// 密钥，只能存储在 A(node) 层</span>  <span class="token comment">// B 通过 A 提供 client_id client_secret 来判定 A 的身份 (身份识别码，这个通常是会备案到网站 B)</span>  <span class="token property">"grant_type"</span><span class="token operator">:</span> <span class="token string">"authorization_code"</span><span class="token punctuation">,</span> <span class="token comment">// 标识授权方式是授权码</span>  <span class="token property">"code"</span><span class="token operator">:</span> <span class="token string">"xxx"</span> <span class="token comment">// 第一步拿到的授权码</span>  <span class="token comment">// "redirect_uri": "WEB_REDIRECT_URL" // 可以是 A(node) 的一个配置，比如跳转到 A(client) 的首页</span><span class="token punctuation">&#125;</span></code></pre><p>该请求会返回令牌信息：包含<code>access_token(令牌)/refresh_token(用于更新令牌)/expires_in(过期时间)...</code></p><p>同时，你可以通过拿到的令牌信息获取当前登录用户的详细个人信息，并将用户信息及<code>refresh_token</code>存储到<code>node:session</code>。<del>还可以把用户 access_token 存到 redis，key 即为 sessionId</del></p><p>最终重定向回<code>A(client)</code>配置的一个地址。</p><p>前端访问后端服务时，通过中间层代理，追加<code>token</code>信息到<code>header</code>中，如果<code>token</code>过期，则通过<code>refresh_token</code>更新令牌，如果登录过期，则重定向到登录地址。</p></li></ul><p><code>基于这种方式认证，A(client)请求任何接口都将通过 A(node) 进行转发，在 A(client) 仅保存回话id(sessionId)，该 sessionId 由 A(node) 保存设置至 cookie 中(会话期间有效)，前端 A(client) 在发起 http 请求时会自动携带，A(node) 从 req.session 中解析前面步骤存入的 refresh_token 获取当前的 access_token(出于性能考虑，可以将 ak 存入 redis) 保存到 res.locals，设置 proxyMiddleWare 添加代理请求的 headers: proxyReq.setHeader(&#39;Authorization&#39;, token)</code></p><blockquote><p><code>res.locals</code> 是一个对象，包含用于渲染视图的上下文。作用：在模板中直接使用、用来存储一些全局变量</p></blockquote><h4 id="凭证式"><a href="#凭证式" class="headerlink" title="凭证式"></a>凭证式</h4><blockquote><p>适用于有后端(<code>node</code>)的<code>web</code>应用，在中间层通过客户端令牌完成一些需要登录（但并没有登录）才能获取资源的请求。</p></blockquote><blockquote><p>同时适用于命令行&#x2F;<code>postman</code>接口测试使用。</p></blockquote><p>这种方式获取的令牌并不是针对用户使用的，因为生成的令牌可以多个用户共享。<del>当然后端可以通过判断 session 的用户信息，标记当前使用客户端令牌的资源请求范围</del></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://b.com/oauth/token</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">grant_type</span><span class="token operator">:</span> <span class="token string">'client_credentials'</span><span class="token punctuation">,</span> <span class="token comment">// 采用凭证式</span>    <span class="token literal-property property">client_id</span><span class="token operator">:</span> <span class="token constant">CLIENT_ID</span><span class="token punctuation">,</span> <span class="token comment">// 应用标识</span>    <span class="token literal-property property">client_secret</span><span class="token operator">:</span> <span class="token constant">CLIENT_SECRET</span><span class="token punctuation">,</span> <span class="token comment">// 密钥</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="密码式"><a href="#密码式" class="headerlink" title="密码式"></a>密码式</h4><blockquote><p>适用范围小。为了确保安全性，一般是在中间层使用，或者在接口调试的时候使用</p></blockquote><p>这种方式需要用户给出自己的账号密码，风险大，需要高度信任网站<code>B</code>，不建议使用。获取方式：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://b.com/oauth/token</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">grant_type</span><span class="token operator">:</span> <span class="token string">'password'</span><span class="token punctuation">,</span> <span class="token comment">// 表示密码式</span>    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token constant">USERNAME</span><span class="token punctuation">,</span> <span class="token comment">// 账号</span>    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token constant">PASSWORD</span><span class="token punctuation">,</span> <span class="token comment">// 密码</span>    <span class="token literal-property property">client_id</span><span class="token operator">:</span> <span class="token constant">CLIENT_ID</span><span class="token punctuation">,</span> <span class="token comment">// 应用标识</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该方式是将令牌放到 <code>response</code> 中作为 <code>json</code> 数据进行返回的，不进行重定向。</p><h4 id="隐藏式"><a href="#隐藏式" class="headerlink" title="隐藏式"></a>隐藏式</h4><blockquote><p>适用于前后端分离，且没有<code>node</code>中间层服务的<code>web</code>应用。</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://b.com/oauth/authorize</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">response_type</span><span class="token operator">:</span> <span class="token string">'token'</span><span class="token punctuation">,</span> <span class="token comment">// 表示要求直接返回令牌</span>    <span class="token literal-property property">client_id</span><span class="token operator">:</span> <span class="token constant">CLIENT_ID</span><span class="token punctuation">,</span> <span class="token comment">// 应用标识</span>    <span class="token literal-property property">redirect_uri</span><span class="token operator">:</span> <span class="token constant">REDIRECT_URL</span><span class="token punctuation">,</span> <span class="token comment">// 完成认证后的重定向地址</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这种方式虽然使用面最广，但是也很不安全，因为<code>token</code>是直接传递给前端的，只适合安全要求不高的场景，同时有效期通常为会话期间(<code>session</code>).</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 登录认证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oauth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v-for在特定场景下会失去响应式</title>
      <link href="/bugs/v-for-unresponsive/"/>
      <url>/bugs/v-for-unresponsive/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>前段时间，实现一个表单字段提交校验功能时碰到的一个有趣的问题…<code>v-for</code>的元素居然失去响应式了？<code>what...</code><del>开始怀疑人生 🙄🙄🙄</del></p><p>代码大致如下：</p><span id="more"></span><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>actionNodeValidate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-edit<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addFieldCheckCondition<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加字段校验<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, idx) in checkConditions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>idx<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex<span class="token punctuation">"</span></span> <span class="token attr-name">justify</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>space-between<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mt-5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>21<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">readonly</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.conditions<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-edit<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>editFieldConditions(idx)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>danger<span class="token punctuation">"</span></span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-delete<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delFieldConditions(idx)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>校验通过条件配置<span class="token punctuation">"</span></span> <span class="token attr-name">append-to-body</span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>visible<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FormularPattern</span>        <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentConf.conditions<span class="token punctuation">"</span></span>        <span class="token attr-name">@close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>visible = false<span class="token punctuation">"</span></span>        <span class="token attr-name">@confirm</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>setFieldCondition<span class="token punctuation">"</span></span>      <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Component<span class="token punctuation">,</span> PropSync<span class="token punctuation">,</span> Vue <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-property-decorator'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> FieldCheckConditions <span class="token keyword">from</span> <span class="token string">'./FieldCheckConditions'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> FormularPattern <span class="token keyword">from</span> <span class="token string">'./FormularPattern/index.vue'</span><span class="token punctuation">;</span>  @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'ActionNodeValidate'</span><span class="token punctuation">,</span> <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> FormularPattern <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ActionNodeValidate</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>    @<span class="token function">PropSync</span><span class="token punctuation">(</span><span class="token string">'conditions'</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> checkConditions<span class="token operator">!</span><span class="token operator">:</span> FieldCheckConditions<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> visible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> conditionIdx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 标记当前的配置项索引</span>    <span class="token keyword">public</span> <span class="token literal-property property">currentConf</span><span class="token operator">:</span> FieldCheckConditions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FieldCheckConditions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">addFieldCheckCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>currentConf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FieldCheckConditions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>conditionIdx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>visible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">delFieldConditions</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">idx</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>checkConditions<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">editFieldConditions</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">idx</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>conditionIdx <span class="token operator">=</span> idx<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>currentConf <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>checkConditions<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>visible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">setFieldCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>conditionIdx <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>checkConditions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentConf <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>checkConditions<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>conditionIdx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentConf <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>visible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><blockquote><p>对于数组类型值的修改使用的<code>push、splice</code>，<del>当然也可以是<code>$set</code></del>。看起来似乎并没有什么毛病…</p></blockquote><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>通过<code>dev-tools</code>分析，发现<code>v-for</code>绑定的值是实时变更了，且组件也监听到变化了，但界面就是没渲染…</p><p><a href="/images/bugs/v-for-unresponsive/p1.png"><img src="/images/bugs/v-for-unresponsive/p1.png" alt="v-for-unresponsive-p1" loading="lazy"></a><br><a href="/images/bugs/v-for-unresponsive/p2.png"><img src="/images/bugs/v-for-unresponsive/p2.png" alt="v-for-unresponsive-p2" loading="lazy"></a></p><p>那就从源码分析…<code>vue</code>在更新<code>dom</code>元素时,会调用<code>updateChildren</code>方法：</p><p><a href="/images/bugs/v-for-unresponsive/p3.png"><img src="/images/bugs/v-for-unresponsive/p3.png" alt="v-for-unresponsive-p3" loading="lazy"></a><br><a href="/images/bugs/v-for-unresponsive/p4.png"><img src="/images/bugs/v-for-unresponsive/p4.png" alt="v-for-unresponsive-p4" loading="lazy"></a></p><blockquote><p>进行 <code>diff</code> 比对，采用’就地复用’原则，减小开销，<code>eg. data数据 从 [1] -&gt; [0,2,3,1,4,5] 过程中，进过比对，需要在1这个dom之前插入 0,2,3</code>，比对完成执行<code>addVnodes</code>函数。</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addVnodes</span><span class="token punctuation">(</span><span class="token parameter">parentElm<span class="token punctuation">,</span> refElm<span class="token punctuation">,</span> vnodes<span class="token punctuation">,</span> startIdx<span class="token punctuation">,</span> endIdx<span class="token punctuation">,</span> insertedVnodeQueue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> startIdx <span class="token operator">&lt;=</span> endIdx<span class="token punctuation">;</span> <span class="token operator">++</span>startIdx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">createElm</span><span class="token punctuation">(</span>vnodes<span class="token punctuation">[</span>startIdx<span class="token punctuation">]</span><span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> refElm<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> vnodes<span class="token punctuation">,</span> startIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>我这调试的是<code>push</code>追加<code>currentConf</code>功能，<code>debug startIdx/endIdx（parentEle的childrenIndex）</code>均为 1.(不难发现，在上述例子中，<code>v-for 的父元素同 el-button&lt;添加字段校验&gt;（index = 0），均为 div.actionNodeValidate</code>，故<code>startIdx</code>为 1).</p><p>继续看<code>createElm</code>函数执行过程中发生了什么…</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createElm</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> refElm<span class="token punctuation">,</span> nested<span class="token punctuation">,</span> ownerArray<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>ownerArray<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// This vnode was used in a previous render!</span>    <span class="token comment">// now it's used as a new node, overwriting its elm would cause</span>    <span class="token comment">// potential patch errors down the road when it's used as an insertion</span>    <span class="token comment">// reference node. Instead, we clone the node on-demand before creating</span>    <span class="token comment">// associated DOM element for it.</span>    vnode <span class="token operator">=</span> ownerArray<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneVNode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拷贝当前需要添加的 vNode</span>  <span class="token punctuation">&#125;</span>  vnode<span class="token punctuation">.</span>isRootInsert <span class="token operator">=</span> <span class="token operator">!</span>nested<span class="token punctuation">;</span> <span class="token comment">// for transition enter check</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">createComponent</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 添加的vnode子组件创建，这里是 null，返回undefined</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> data <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token keyword">var</span> children <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children<span class="token punctuation">;</span> <span class="token comment">// []</span>  <span class="token keyword">var</span> tag <span class="token operator">=</span> vnode<span class="token punctuation">.</span>tag<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// vue-component-48-ElRow</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>pre<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        creatingElmInVPre<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUnknownElement$$1</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> creatingElmInVPre<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token string">'Unknown custom element: &lt;'</span> <span class="token operator">+</span>            tag <span class="token operator">+</span>            <span class="token string">'> - did you '</span> <span class="token operator">+</span>            <span class="token string">'register the component correctly? For recursive components, '</span> <span class="token operator">+</span>            <span class="token string">'make sure to provide the "name" option.'</span><span class="token punctuation">,</span>          vnode<span class="token punctuation">.</span>context<span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> vnode<span class="token punctuation">.</span>ns      <span class="token operator">?</span> nodeOps<span class="token punctuation">.</span><span class="token function">createElementNS</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>ns<span class="token punctuation">,</span> tag<span class="token punctuation">)</span>      <span class="token operator">:</span> nodeOps<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// document.createElement</span>    <span class="token function">setScope</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* istanbul ignore if */</span>    <span class="token punctuation">&#123;</span>      <span class="token function">createChildren</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> children<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// children is [].</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">invokeCreateHooks</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建相关 hooks</span>      <span class="token punctuation">&#125;</span>      <span class="token function">insert</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行 insert</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>pre<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      creatingElmInVPre<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>isComment<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> nodeOps<span class="token punctuation">.</span><span class="token function">createComment</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">insert</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> nodeOps<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">insert</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>可以看到，在<code>createElm</code>函数中，执行了<code>拷贝vNode -&gt; createComponent -&gt; document.createElement -&gt; createChildren -&gt; hooks挂载 -&gt; 最终执行insert函数</code>…</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">parent<span class="token punctuation">,</span> elm<span class="token punctuation">,</span> ref$$1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// div.actionNodeValidate</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>ref$$1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// el-dialog__wrapper.node-validate-dialog ---> v-for 的相邻元素(插入位置index+1) ---> (因为v-for没有wrapper，所以这里是 .node-validate-dialog)</span>      <span class="token comment">// parent(div.actionNodeValidate) !== body</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>nodeOps<span class="token punctuation">.</span><span class="token function">parentNode</span><span class="token punctuation">(</span>ref$$1<span class="token punctuation">)</span> <span class="token operator">===</span> parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 比对插入位置节点与其相邻元素的父节点是否一致，一致则直接在相邻元素前插入新节点，不一致时没有做任何处理</span>        nodeOps<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> elm<span class="token punctuation">,</span> ref$$1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 不一致... 我们的代码执行到这  G了...</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 没有相邻vNode，直接在 parentEle 追加 children</span>      nodeOps<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> elm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p><code>insert</code>函数比对了’插入位置’与其’相邻<code>vNode</code>‘(<strong>插入位置<code>index+1</code>的<code>vNode</code>节点</strong>)的父节点是否一致，一致则在其’相邻节点’前插入新的节点(<code>insertBefore</code>)。<del>值得注意的是，如果相邻<code>vNode</code>的父节点与当前<code>parentEle</code>不相同时，没有做任何处理…😮😮😮</del><br>如果相邻元素不存在，那么就直接追加(<code>appendChild</code>).</p></blockquote><p>最终发现<code>nodeOps.parentNode(ref$$1) === parent</code>条件为<code>false</code>，所以页面并没有渲染.<code>why？</code>为什么父节点会不一致呢？</p><p><code>el-dialog</code>添加了<code>append-to-body</code>属性后，其父节点变成了<code>body</code>，所以代码执行到<code>insert，parentNode(div.actionNodeValidate) !== body</code>，比对后发现<code>parent</code>发生变更，不执行更新。导致页面上呈现的效果是<code>dom</code>没渲染，而响应式数据已经更新。<del>这也是为什么调试时<code>nextTick</code>内执行<code>forceUpdate</code>也无法重新渲染的根本原因</del></p><p>找到了原因，那么解决方案自然也就有了（<strong>避免插入的位置相邻<code>vNode</code>的<code>parent</code>不会变更</strong>就<code>ok</code>啦 😁😁😁）</p><h3 id="hack解决方案"><a href="#hack解决方案" class="headerlink" title="hack解决方案"></a><code>hack</code>解决方案</h3><h4 id="给绑定了v-for的元素添加一层父级的wrapper节点"><a href="#给绑定了v-for的元素添加一层父级的wrapper节点" class="headerlink" title="给绑定了v-for的元素添加一层父级的wrapper节点"></a>给绑定了<code>v-for</code>的元素添加一层父级的<code>wrapper</code>节点</h4><p><code>eg.</code></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>actionNodeValidate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, idx) in checkConditions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">append-to-body</span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>visible<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h4 id="调整绑定了append-to-body属性的dom位置，避免与v-for元素直接相邻"><a href="#调整绑定了append-to-body属性的dom位置，避免与v-for元素直接相邻" class="headerlink" title="调整绑定了append-to-body属性的dom位置，避免与v-for元素直接相邻"></a>调整绑定了<code>append-to-body</code>属性的<code>dom</code>位置，避免与<code>v-for</code>元素直接相邻</h4><p><code>eg.</code></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>actionNodeValidate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, idx) in checkConditions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">append-to-body</span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>visible<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h4 id="移除append-to-body属性"><a href="#移除append-to-body属性" class="headerlink" title="移除append-to-body属性"></a>移除<code>append-to-body</code>属性</h4><p><code>eg.</code></p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>actionNodeValidate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, idx) in checkConditions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>visible<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 踩坑记录 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> vue </tag>
            
            <tag> unresponsive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>界面化配置自定义的组件 Css 样式</title>
      <link href="/share/css-tree/"/>
      <url>/share/css-tree/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="了解css-tree"><a href="#了解css-tree" class="headerlink" title="了解css-tree"></a>了解<a href="https://github.com/csstree/csstree">css-tree</a></h3><p><code>CSSTree is a tool set for CSS: fast detailed parser (CSS → AST), walker (AST traversal), generator (AST → CSS) and lexer (validation and matching) based on specs and browser implementations. The main goal is to be efficient and W3C spec compliant, with focus on CSS analyzing and source-to-source transforming tasks.</code></p><h3 id="为什么使用它？"><a href="#为什么使用它？" class="headerlink" title="为什么使用它？"></a>为什么使用它？</h3><p>最近项目上有个需求：提供一个界面化的<code>css</code>代码编辑器，管理员可以输入<code>css</code>代码配置修改表单&#x2F;组件的一些默认样式，从而针对不同业务需求实现不同的界面呈现效果。</p><p>为了避免样式的全局污染，需要对配置的样式添加默认前置导航，通过属性选择器约束样式的生效范围。如果通过<code>string</code>的一些方法粗暴的对样式进行替换<code>or</code>正则匹配，有很大的局限性，同时也不符合规范。</p><p>思考再三，找到了<code>css -&gt; ast -&gt; css.</code>方案，并通过<code>css-tree</code>的<code>API</code>实现。</p><p><del>根据产品业务的区别，如果只是想实现样式自定义，不需要通过代码配置达到更强的交互，那么可以内置<code>class</code>，编写默认的一些<code>style</code>，用户通过在界面选择主题来实现该效果。参考百度<a href="https://github.com/baidu/amis">amis</a></del></p><span id="more"></span><h3 id="源码实现"><a href="#源码实现" class="headerlink" title="源码实现"></a>源码实现</h3><h4 id="给组件唯一标识"><a href="#给组件唯一标识" class="headerlink" title="给组件唯一标识"></a>给组件唯一标识</h4><blockquote><p>可以给组件的<code>wrapper-dom</code>添加具有唯一标志性的属性，用于约束自定义样式生效的区间范围.</p></blockquote><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 给组件 wrapper 绑定具有唯一标识的 id --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-item_container<span class="token punctuation">"</span></span> <span class="token attr-name">:id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field.__vModel__<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RenderWrapper</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$attrs<span class="token punctuation">"</span></span> <span class="token attr-name">v-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$listeners<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h4 id="helper实现"><a href="#helper实现" class="headerlink" title="helper实现"></a><code>helper</code>实现</h4><blockquote><p>编写用于操作<code>css-code</code>的工具函数，给自定义的<code>css-code</code>添加内置的属性选择器前缀。</p></blockquote><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> clone<span class="token punctuation">,</span> generate<span class="token punctuation">,</span> parse<span class="token punctuation">,</span> walk <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'css-tree'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> styleHelper <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">addClassPrefix</span><span class="token punctuation">(</span>prefix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> context<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> orig <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// css -> ast</span>    <span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>orig<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// clone ast node.</span>    <span class="token function">walk</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 仅对选择器的首个 selector 节点添加前缀  eg.  .form .item &#123;&#125; -> .prefix .form .item &#123;&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token operator">?.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'TypeSelector'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// eg. input div li...</span>          node<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'ClassSelector'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// eg. .el-input .customCls...</span>          node<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> .</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// other process...</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ast -> css</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">loadCss</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> cssContent<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> styleEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">style_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    styleEle<span class="token operator">?.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 热更新，避免重复性追加 style 节点.</span>    <span class="token comment">// or if (styleEle) return;</span>    <span class="token keyword">const</span> style <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> head <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    style<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">style_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token keyword">const</span> styleCode <span class="token operator">=</span> styleHelper<span class="token punctuation">.</span><span class="token function">addClassPrefix</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">form-item_container[id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> cssContent<span class="token punctuation">)</span><span class="token punctuation">;</span>    style<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>styleCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="config-editor实现"><a href="#config-editor实现" class="headerlink" title="config-editor实现"></a><code>config-editor</code>实现</h4><blockquote><p>用于配置<code>css</code>的编辑器组件.<del>偷了个懒，如果你需要更友好的实现，可以添加<code>css</code>语法提示</del></p></blockquote><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span>    <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>自定义样式<span class="token punctuation">"</span></span>    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>codemirror_dialog<span class="token punctuation">"</span></span>    <span class="token attr-name">:destroy-on-close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>    <span class="token attr-name">:close-on-click-modal</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>    <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>customStyleVisible<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VueCodemirror</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>innerValue<span class="token punctuation">"</span></span> <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>options<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>footer</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>customStyleVisible = false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>取 消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onConfirmHandle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>确 定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Component<span class="token punctuation">,</span> ModelSync<span class="token punctuation">,</span> PropSync<span class="token punctuation">,</span> Vue<span class="token punctuation">,</span> Watch <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue-property-decorator'</span><span class="token punctuation">;</span>  @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'StyleConfig'</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">VueCodemirror</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> codemirror <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "codeMirror" */</span> <span class="token string">'vue-codemirror'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> codemirror<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">StyleConfig</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>    @<span class="token function">PropSync</span><span class="token punctuation">(</span><span class="token string">'visible'</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> customStyleVisible<span class="token operator">!</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>    @<span class="token function">ModelSync</span><span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">,</span> <span class="token string">'input'</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> customStyle<span class="token operator">!</span><span class="token operator">:</span> string<span class="token punctuation">;</span>    <span class="token keyword">public</span> innerValue <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">tabSize</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'text/css'</span><span class="token punctuation">,</span>      <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token string">'default'</span><span class="token punctuation">,</span>      <span class="token literal-property property">styleActiveLine</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token literal-property property">matchBrackets</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token literal-property property">placeholder</span><span class="token operator">:</span>        <span class="token string">'请输入组件自定义css样式... eg.\n\n.el-input &#123; color: #f00; &#125; \n\n input &#123; border: none; &#125;'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    @<span class="token function">Watch</span><span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token function">setContentValue</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">v</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>innerValue <span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initCodemirror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">initCodemirror</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "codeMirror" */</span> <span class="token string">'codemirror/mode/css/css.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "codeMirror" */</span> <span class="token string">'codemirror/addon/display/placeholder.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span>        <span class="token comment">/* webpackChunkName: "codeMirror" */</span> <span class="token string">'codemirror/addon/selection/active-line.js'</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "codeMirror" */</span> <span class="token string">'codemirror/addon/edit/matchbrackets.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "codeMirror" */</span> <span class="token string">'codemirror/lib/codemirror.css'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">onConfirmHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>customStyleVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>customStyle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>innerValue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="parser实现"><a href="#parser实现" class="headerlink" title="parser实现"></a><code>parser</code>实现</h4><blockquote><p>在表单<code>parser</code>组件<code>created</code>钩子<code>loadCss</code>，将自定义的样式代码加载到<code>html</code>.</p></blockquote><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> styleHelper <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./util/index'</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> code<span class="token punctuation">,</span> css <span class="token punctuation">&#125;</span> <span class="token operator">=</span> field<span class="token punctuation">.</span>__config__<span class="token punctuation">;</span>  styleHelper<span class="token punctuation">.</span><span class="token function">loadCss</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> css<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 功能实现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cssTree </tag>
            
            <tag> 自定义样式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Lerna 管理 Monorepo 的一次实践记录</title>
      <link href="/engineering/lerna/"/>
      <url>/engineering/lerna/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="lerna是什么？"><a href="#lerna是什么？" class="headerlink" title="lerna是什么？"></a><code>lerna</code>是什么？</h3><blockquote><p>Lerna is a fast modern build system for managing and publishing multiple JavaScript&#x2F;TypeScript packages from the same repository.</p></blockquote><p><a href="https://blog.nrwl.io/nx/home"><code>lerna and nx</code>的其他博客文章</a></p><h3 id="为什么要用lerna"><a href="#为什么要用lerna" class="headerlink" title="为什么要用lerna?"></a>为什么要用<code>lerna</code>?</h3><p><code>官方解释：</code></p><blockquote><p>Lerna 在 repo 中链接不同的项目，因此它们可以相互导入，而无需向 NPM 发布任何内容</p></blockquote><blockquote><p>Lerna 对任意数量的项目运行命令，它以最有效的方式、以正确的顺序执行它，并且可以将其分布在多台机器上</p></blockquote><blockquote><p>Lerna 管理您的发布流程，从版本管理到发布再到 NPM，它提供了多种选项来确保可以适应任何工作流程</p></blockquote><p>结合工作中的实际体验，谈谈我的看法：</p><blockquote><p>公司一般都有自己的 npm 私库，有很多的 package 相互之间存在或多或少的关联。随着业务需求的不断升级，我在维护这些 package 的时候就碰到了一个很操蛋的问题：比如我改了 packageA 然后发布，那么所有用到了 packageA 的其他 package，也要跟着升级 packageA 的依赖，然后再发布，过程显得很是繁琐，此时如果你的 package 是通过 lerna 管理，就可以很好的避免这个问题。</p></blockquote><span id="more"></span><hr><h3 id="全局安装lerna"><a href="#全局安装lerna" class="headerlink" title="全局安装lerna"></a>全局安装<code>lerna</code></h3><p><code>tips: 注意 lerna@5.1.0 前后区别.</code></p><blockquote><p>npm i -g <a href="mailto:&#x6c;&#101;&#x72;&#110;&#97;&#x40;&#52;&#46;&#x30;&#x2e;&#x30;">&#x6c;&#101;&#x72;&#110;&#97;&#x40;&#52;&#46;&#x30;&#x2e;&#x30;</a></p></blockquote><h3 id="lerna使用实践"><a href="#lerna使用实践" class="headerlink" title="lerna使用实践"></a><code>lerna</code>使用实践</h3><h4 id="初始化git仓库"><a href="#初始化git仓库" class="headerlink" title="初始化git仓库"></a>初始化<code>git</code>仓库</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 初始化一个 utils 的 lerna 项目</span><span class="token function">mkdir</span> utils <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> utils<span class="token function">git</span> init<span class="token function">git</span> remote <span class="token function">add</span> origin <span class="token punctuation">[</span>xxx<span class="token punctuation">]</span></code></pre><p>配置<code>.gitignore</code></p><pre class="language-none"><code class="language-none">node_moduleslibdistlogscoverage*&#x2F;.config&#x2F;*</code></pre><h4 id="lerna初始化"><a href="#lerna初始化" class="headerlink" title="lerna初始化"></a><code>lerna</code>初始化</h4><p><code>lerna</code>有两种发布模式，固定模式<code>fixed</code>（默认）、独立模式<code>independent</code>。两者的区别：</p><blockquote><p>固定模式：lerna init 通过 lerna.json 里的版本进行统一的版本管理。其中的任何一个包的改动都会导致所有的 packages 的版本号进行升级。</p></blockquote><blockquote><p>独立模式：lerna init --independent 允许使用者对每个包单独改变版本号。每次发布的时候，针对所有有更新的 package 询问需要升级的版本号。（基于自身的 package.json 版本号）这种情况下，lerna.json 的版本号不会变化， 默认为 independent</p></blockquote><p><del>建议使用独立模式…</del> 下面开始初始化过程（附效果图）：</p><blockquote><p>lerna init --independent</p></blockquote><p><a href="/images/engineering/lerna/p1.png"><img src="/images/engineering/lerna/p1.png" alt="lerna-p1" loading="lazy"></a></p><h4 id="完善lerna-json配置"><a href="#完善lerna-json配置" class="headerlink" title="完善lerna.json配置"></a>完善<code>lerna.json</code>配置</h4><p>指定命令使用的<code>client</code>，默认是<code>npm</code>，可以是<code>yarn</code>.修改<code>lerna.json</code>，添加：</p><blockquote><p>“npmClient”: “yarn”</p></blockquote><p>指定使用<code>yarn workspaces</code>模式，并在<code>lerna</code>中开启，同时在根目录下的<code>package.json</code>中添加<code>workspaces</code>：（开启后<code>lerna bootstrap</code>命令由<code>yarn install</code>代理，等价于在<code>workspace</code>的根目录下执行<code>yarn install</code>，只有顶层有一个<code>node_modules</code>），<strong>这么做是因为 yarn 本身提供了较 lerna 更好的依赖分析与 hoisting 的功能</strong>：</p><blockquote><p>“useWorkspaces”: true</p></blockquote><blockquote><p>“workspaces”: [“packages&#x2F;*“]</p></blockquote><p>指定忽略发布的不必要的更新（比如<code>readme.md</code>）：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token comment">// 方式一：在`lerna.json`中添加：</span><span class="token property">"ignoreChanges"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"**/*.md"</span><span class="token punctuation">,</span> <span class="token string">"**/*.test.ts"</span><span class="token punctuation">,</span> <span class="token string">"**/*.e2e.ts"</span><span class="token punctuation">,</span> <span class="token string">"**/fixtures/**"</span><span class="token punctuation">,</span> <span class="token string">"**/test/**"</span><span class="token punctuation">,</span> <span class="token string">"**/__test__/**"</span><span class="token punctuation">]</span><span class="token comment">// 方式二：在指定的命令下添加：</span><span class="token property">"command"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"publish"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"ignoreChanges"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"ignored-file"</span><span class="token punctuation">,</span> <span class="token string">"*.md"</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"bootstrap"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"ignore"</span><span class="token operator">:</span> <span class="token string">"component-*"</span><span class="token punctuation">,</span>    <span class="token property">"npmClientArgs"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"--no-package-lock"</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="lerna-json的配置参数说明"><a href="#lerna-json的配置参数说明" class="headerlink" title="lerna.json的配置参数说明"></a><code>lerna.json</code>的配置参数说明</h5><pre class="language-json" data-language="json"><code class="language-json"><span class="token comment">// version：当前库的版本</span><span class="token comment">// npmClient：允许指定命令使用的client， 默认是 npm， 可以设置成 yarn</span><span class="token comment">// useWorkspaces：使用 yarn workspaces 模式</span><span class="token comment">// ignoreChanges：一个不包含在 lerna changed/publish 的 glob 数组。使用这个去阻止发布不必要的更新，比如修复 README.md</span><span class="token comment">// command.publish.ignoreChanges：可以指定那些目录或者文件的变更不会被 publish</span><span class="token comment">// command.publish.registry：设置自定义的 npm 代理（比如使用公司自己搭建的私服）</span><span class="token comment">// command.publish.conventionalCommits：lerna version 会自动决定 version bump 和生成 CHANGELOG 文件</span><span class="token comment">// command.publish.message：一个 publish 时的自定义 commit 信息</span><span class="token comment">// command.bootstrap.ignore：指定不受 bootstrap 命令影响的包</span><span class="token comment">// command.bootstrap.npmClientArgs：指定默认传给 lerna bootstrap 命令的参数</span><span class="token comment">// command.bootstrap.scope：指定那些包会受 lerna bootstrap 命令影响</span><span class="token comment">// packages：指定包所在的目录</span></code></pre><p><del><code>ok</code>，准备工作做完了 😃😃😃</del></p><hr><h4 id="创建package"><a href="#创建package" class="headerlink" title="创建package"></a>创建<code>package</code></h4><p>这个过程可以通过手动创建，也可以通过命令生成：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ./packages<span class="token function">mkdir</span> package-a package-b package-c<span class="token comment"># 分别进入这三个目录初始化成包 ...</span><span class="token builtin class-name">cd</span> package-a <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> init -y</code></pre><p><code>or</code>：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># name：包名，loc 位置 [可选，不指定时默认就是 workspaces[0] 所指位置]</span>lerna create <span class="token operator">&lt;</span> name <span class="token operator">></span> <span class="token punctuation">[</span>loc<span class="token punctuation">]</span><span class="token comment"># 例如：</span>lerna create package-a</code></pre><p>目录结构：</p><pre class="language-none"><code class="language-none">├── lerna.json├── package.json└── packages    ├── packageA    │   ├── index.js    │   └── package.json</code></pre><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><h5 id="安装共用的dependencicesordevDependencices"><a href="#安装共用的dependencicesordevDependencices" class="headerlink" title="安装共用的dependencicesordevDependencices"></a>安装共用的<code>dependencices</code>or<code>devDependencices</code></h5><p>设置<code>root</code>的依赖，通常为一些开发工具. <code>eg: typescript、eslint、babel...</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> -W -D typescript <span class="token punctuation">[</span>-W -D <span class="token operator">==</span> --ignore-workspace-root-check --dev<span class="token punctuation">]</span><span class="token comment"># 卸载</span><span class="token function">yarn</span> remove -W typescript</code></pre><p>添加所有的<code>package</code>依赖（不包含<code>root</code>，而是在各自的<code>package.json</code>）：</p><pre class="language-bash" data-language="bash"><code class="language-bash">lerna <span class="token function">add</span> lodash -D</code></pre><h5 id="给指定的-packageA-安装依赖A模块"><a href="#给指定的-packageA-安装依赖A模块" class="headerlink" title="给指定的 packageA 安装依赖A模块"></a>给指定的 packageA 安装依赖<code>A</code>模块</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 推荐</span>lerna <span class="token function">add</span> A packages/packageA<span class="token comment"># 或者指定 --scope</span>lerna <span class="token function">add</span> A --scope<span class="token operator">=</span>packageAlerna <span class="token function">add</span> A --scope<span class="token operator">=</span>packageA --dev<span class="token comment"># 或（这种方式安装的 A 如果是当前工作区的开发模块，需要带上版本号）</span><span class="token function">yarn</span> workspace packageA <span class="token function">add</span> A<span class="token comment"># 安装 A 到指定前缀为 prefix- 的包</span>lerna <span class="token function">add</span> A packages/prefix-*<span class="token comment"># 安装 A 到所有名为 packageA 包中</span>lerna <span class="token function">add</span> A **/packageA</code></pre><h5 id="workspace各package之间的依赖"><a href="#workspace各package之间的依赖" class="headerlink" title="workspace各package之间的依赖"></a><code>workspace</code>各<code>package</code>之间的依赖</h5><p><code>packages</code>下的各个包之间，也可以相互依赖，例如<code>moduleA</code>依赖了<code>moduleB</code>，而<code>moduleB</code>又依赖了<code>moduleC</code>。使用的方式同上，相差不大（基于软链接<code>symlink</code>实现）：</p><pre class="language-bash" data-language="bash"><code class="language-bash">lerna <span class="token function">add</span> moduleB packages/moduleAlerna <span class="token function">add</span> moduleC --scope moduleB</code></pre><h4 id="lerna-bootstrap安装所有包的依赖"><a href="#lerna-bootstrap安装所有包的依赖" class="headerlink" title="lerna bootstrap安装所有包的依赖"></a><code>lerna bootstrap</code>安装所有包的依赖</h4><p>在<code>lerna</code>中，执行<strong>默认的<code>bootstrap</code>命令</strong>会在每个<code>package</code>下安装各自<code>package.json</code>中的依赖。</p><p>当你使用<code>yarn workspace，并在lerna中开启该功能时</code>，<code>lerna bootstrap</code>将由<code>yarn install</code>代理，等价体现为在<code>workspace</code>的根目录下执行<code>yarn install</code>.</p><pre class="language-bash" data-language="bash"><code class="language-bash">lerna bootstrap<span class="token comment"># 效果等价于</span>lerna <span class="token function">link</span> + <span class="token function">yarn</span> <span class="token function">install</span></code></pre><h5 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h5><blockquote><p>工作区的模块包之间可以相互依赖，并在你发布升级对应包的时候，自动检测其他依赖该模块的包。</p></blockquote><blockquote><p>相比 yarn link，这种方式只影响你工作区的依赖树，而不会污染全局。</p></blockquote><blockquote><p>node_modules 统一安装，生成单一 lock 文件，方便 yarn 更好的管理并构建依赖。</p></blockquote><h4 id="卸载依赖"><a href="#卸载依赖" class="headerlink" title="卸载依赖"></a>卸载依赖</h4><blockquote><p>lerna exec – <command> [..args] # 在所有包中运行该命令</p></blockquote><p>可以依据这个命令来实现指定模块的包卸载，<code>eg</code>：</p><pre class="language-bash" data-language="bash"><code class="language-bash">lerna <span class="token builtin class-name">exec</span> --scope<span class="token operator">=</span>packageA  <span class="token function">yarn</span> remove A <span class="token comment"># 将 packageA 包下的 A 卸载</span>lerna <span class="token builtin class-name">exec</span> -- <span class="token function">yarn</span> remove A <span class="token comment"># 将所有包下的 A 卸载</span></code></pre><h4 id="清理依赖包"><a href="#清理依赖包" class="headerlink" title="清理依赖包"></a>清理依赖包</h4><p>快速删除所有模块中的<code>node_modules</code>文件夹。</p><pre class="language-bash" data-language="bash"><code class="language-bash">lerna clean</code></pre><p><a href="https://lerna.js.org/docs/features/bootstrap">更多的 <code>bootstrap</code>细节</a></p><h4 id="列出工作区所有的package"><a href="#列出工作区所有的package" class="headerlink" title="列出工作区所有的package"></a>列出工作区所有的<code>package</code></h4><p>如果与你文夹里面的不符，进入那个包运行<code>yarn init -y</code>解决.</p><pre class="language-bash" data-language="bash"><code class="language-bash">lerna list<span class="token comment"># or</span>lerna <span class="token function">ls</span></code></pre><h4 id="列出需要publish更新的包"><a href="#列出需要publish更新的包" class="headerlink" title="列出需要publish更新的包"></a>列出需要<code>publish</code>更新的包</h4><pre class="language-bash" data-language="bash"><code class="language-bash">lerna changed</code></pre><blockquote><p>lerna 每次发布都会为对应的版本打 TAG，变动检测其实是依据 <code>git diff --name-only v版本</code>收集变动信息.</p></blockquote><blockquote><p><code>lerna diff</code>查看自上次发布以来的所有包或者指定包的 git diff 变化。</p></blockquote><h4 id="lerna-run执行脚本"><a href="#lerna-run执行脚本" class="headerlink" title="lerna run执行脚本"></a><code>lerna run</code>执行脚本</h4><p>通过<code>lerna run xx</code>执行脚本时，<code>lerna</code>会先检测符合条件（含有<code>xx</code>命令）的<code>package</code>，然后再各自内部执行<code>npm run xx</code>.</p><pre class="language-bash" data-language="bash"><code class="language-bash">lerna run <span class="token builtin class-name">test</span><span class="token comment"># 区别于普通项目之处在于各个package之间存在相互依赖，如packageB只有在packageA构建完之后才能进行构建，否则就会出错，这实际上要求我们以一种拓扑排序的规则进行构建。</span>lerna run --stream --sort build</code></pre><p>区别于<code>yarn workspaces run</code>：</p><blockquote><p>yarn workspaces run 执行 xx 指令时，必须所有的包都含有该 xx 命令，否则在执行过程中会抛出异常.</p></blockquote><h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 执行该命令后，会根据检测出的有变动的 package 提示你选择对应要升级到的新版本号</span>lerna publish<span class="token comment"># 或者默认选项全部选择 Yes，并根据 commit 信息自动升级版本号</span>lerna publish -y</code></pre><h5 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h5><blockquote><p>不要自己手动为<code>lerna</code>管理的仓库添加<code>tag</code>，防止 <code>package</code>变更检测异常，导致无法正常升级发布</p></blockquote><blockquote><p>尽量只在一个分支上发布，避免多个分支同时进行且生成相同版本</p></blockquote><blockquote><p>每次<code>publish</code>之前，先<code>commit</code>代码，保证工作区是干净的</p></blockquote><blockquote><p>确保你的<code>npm</code>账号是登录状态，否则会发布失败。<code>npm whoami</code>查看状态，可以指定<code>registry</code></p></blockquote><blockquote><p>确保你的<code>package</code>设置了正确的<code>npm registry</code>地址，且发布的包与已存在的包之间不会存在冲突</p></blockquote><blockquote><p>按顺序执行<code>lerna bootstrap -&gt; lerna run --stream --sort build（我在单个 package 中定义了一些 npm scripts，例如 prepublishOnly 钩子来执行 build，然而 npm-client 使用 yarn 后，这些钩子似乎并没有按预期进行工作，导致最终 publish 失败。通过 lerna run build 可以触发所有 package 执行 build，如果无此需求可以跳过该步骤）-&gt; lerna publish.</code></p></blockquote><h3 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h3><h4 id="关于-scope的说明"><a href="#关于-scope的说明" class="headerlink" title="关于--scope的说明"></a>关于<code>--scope</code>的说明</h4><blockquote><p>不管是安装还是卸载，<code>--scope=packageA</code>中的<code>packageA</code>均是指的具体包名，而非<code>path</code>，而另外一种方式<code>packages/packageA</code>则是指具体路径.</p></blockquote><h4 id="包名带有scope的发布"><a href="#包名带有scope的发布" class="headerlink" title="包名带有scope的发布?"></a>包名带有<code>scope</code>的发布?</h4><p>形如<code>@xxx/xx</code>，在你的子包（具体要发布的那个包）的<code>package.json</code>中添加<code>publishConfig.access</code>字段：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token property">"publishConfig"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token property">"access"</span><span class="token operator">:</span> <span class="token string">"public"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="为什么-前缀包添加了access仍然抛出了403异常"><a href="#为什么-前缀包添加了access仍然抛出了403异常" class="headerlink" title="为什么@前缀包添加了access仍然抛出了403异常?"></a>为什么<code>@</code>前缀包添加了<code>access</code>仍然抛出了<code>403</code>异常?</h5><p><code>@</code>符号后面的是你注册<code>npm</code>账户时的<code>username</code>，请确保该<code>scope</code>与你账户一致. <del>（前往官网注册你的账户，可以看到更加明确的错误提示）😂😂😂</del></p><h4 id="如何生成changeLog-md文件"><a href="#如何生成changeLog-md文件" class="headerlink" title="如何生成changeLog.md文件?"></a>如何生成<code>changeLog.md</code>文件?</h4><p><code>lerna.json</code>中添加：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token property">"command"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token property">"publish"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// ...</span>      <span class="token property">"allowBranch"</span><span class="token operator">:</span> <span class="token string">"master"</span><span class="token punctuation">,</span> <span class="token comment">// 只在 master 分支执行 publish</span>      <span class="token property">"conventionalCommits"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 生成 changelog 文件</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="如何将预先存在的独立包收集到lerna管理的仓库中"><a href="#如何将预先存在的独立包收集到lerna管理的仓库中" class="headerlink" title="如何将预先存在的独立包收集到lerna管理的仓库中?"></a>如何将预先存在的独立包收集到<code>lerna</code>管理的仓库中?</h4><p>将带有提交历史记录的包导入 <code>packages/&lt;directory-name&gt;</code>. 保留原始提交作者、日期和消息。另外：如果您要在新的 lerna 存储库上导入外部存储库，请记住至少有一次提交。<a href="https://github.com/lerna/lerna/tree/main/commands/import#readme">-&gt; 戳这里</a></p><pre class="language-bash" data-language="bash"><code class="language-bash">lerna <span class="token function">import</span> <span class="token operator">&lt;</span>path-to-external-repository<span class="token operator">></span></code></pre><h4 id="发布失败后怎么重新发布"><a href="#发布失败后怎么重新发布" class="headerlink" title="发布失败后怎么重新发布?"></a>发布失败后怎么重新发布?</h4><p>运行<code>lerna publish</code>如果中途有包发布失败，再运行<code>lerna publish</code>的时候，因为<code>Tag</code>已经打上去了，所以不会再重新发布包到<code>NPM</code>.</p><p>先清空当前工作区的文件修改（主要是上一次发布时，每个<code>package</code>自身的<code>package.json</code>会修改<code>gitHead</code>，发布成功会被重置，失败后无法正常重置，需要手动放弃修改），然后：</p><blockquote><p>运行 <code>lerna publish from-git</code>，会把当前标签中涉及的<code>NPM</code>包再发布一次，PS：不会再更新<code>package.json</code>，只是执行<code>npm publish</code></p></blockquote><p><code>or</code>：</p><blockquote><p>运行 <code>lerna publish from-package</code>，会把当前所有本地包中的<code>package.json</code>和远端<code>NPM</code>比对，如果是 NPM 上不存在的包版本，都执行一次<code>npm publish</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
          <category> 模块化管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lerna </tag>
            
            <tag> monorepo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jest 测试框架搭建和简单使用</title>
      <link href="/engineering/jest/"/>
      <url>/engineering/jest/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="了解测试用例和单元测试"><a href="#了解测试用例和单元测试" class="headerlink" title="了解测试用例和单元测试"></a>了解测试用例和单元测试</h3><ul><li><p>测试用例：是为某个特殊目标而编制的一组测试输入、执行条件以及预期结果，测试是否满足特定需求；</p></li><li><p>单元测试：(是测试的级别)。unit testing 针对某一个功能的[最小部分(单元)]测试，比如(函数？类？)的执行结果是否符合预期。</p><blockquote><p>不同的企业可能对不同测试级别有不同的称谓，比如单元测试、增量测试、集成测试、回归测试、冒烟测试….. 谷歌对此创立了自己的命名方式：小型测试(具体到某个函数？)、中型测试(多个模块之间交互)、大型测试(端对端？系统整体验证)。</p></blockquote></li></ul><span id="more"></span><h3 id="了解快照测试"><a href="#了解快照测试" class="headerlink" title="了解快照测试"></a>了解快照测试</h3><blockquote><p>快照测试：例如对 vue 的测试，就是将 vue 渲染的 dom 结果序列化成 string，然后存入到 snapshot 文件夹下，后缀为.snap, 如果是首次则会新建，不是首次，那么以后的每次测试，如果是基于快照的，就会那快照的内容与当前执行的内容做比较，如果不同，则抛出异常告知变更项；<br>快照测试一般用于代码趋于稳定的版本，提升测试的稳定性和速度；</p></blockquote><h3 id="jest-环境搭建"><a href="#jest-环境搭建" class="headerlink" title="jest 环境搭建"></a>jest 环境搭建</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> jest-project<span class="token builtin class-name">cd</span> jest-project/<span class="token comment"># 项目初始化及依赖安装</span><span class="token function">npm</span> init -y<span class="token comment"># jest 安装.. 注意版本号 28版本以后 需要另外再安装 jest-environment-jsdom</span><span class="token function">yarn</span> <span class="token function">add</span> jest@24.8.0 --dev<span class="token comment"># scripts 添加指令</span>test: <span class="token string">"jest"</span><span class="token comment"># test 文件改动 自动执行 jest</span><span class="token string">"test:debug"</span><span class="token builtin class-name">:</span> <span class="token string">"jest --watchAll"</span><span class="token comment"># 初始化 jest 配置文件 (npx xx 可以理解为寻址执行(优先找$path,再从node_modules查找)，如果xx存在，那么就执行这个exe， 不存在则安装再执行)</span><span class="token comment"># 执行结束会根据选项,生成对应配置文件 jest.config.js|ts</span>npx jest --init√ Would you like to use Typescript <span class="token keyword">for</span> the configuration file? <span class="token punctuation">..</span>. no√ Choose the <span class="token builtin class-name">test</span> environment that will be used <span class="token keyword">for</span> testing » jsdom <span class="token punctuation">(</span>browser-like<span class="token punctuation">)</span>√ Do you want Jest to <span class="token function">add</span> coverage reports? <span class="token punctuation">..</span>. <span class="token function">yes</span>√ Which provider should be used to instrument code <span class="token keyword">for</span> coverage? » babel√ Automatically <span class="token function">clear</span> mock calls and instances between every test? <span class="token punctuation">..</span>. <span class="token function">yes</span><span class="token comment"># 生成覆盖率检测文件</span>npx jest --coverage or 添加执行命令 <span class="token function">yarn</span> coverage: <span class="token string">"jest --coverage"</span></code></pre><h4 id="默认配置项"><a href="#默认配置项" class="headerlink" title="默认配置项"></a>默认配置项</h4><p><a href="https://github.com/vuejs/vue-cli/blob/dev/packages/%40vue/cli-plugin-unit-jest/presets/default/jest-preset.js"><code>default-jest-config</code></a></p><h3 id="测试用例简单示例"><a href="#测试用例简单示例" class="headerlink" title="测试用例简单示例"></a>测试用例简单示例</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 添加测试的主文件 例如：feature1.js</span><span class="token comment">// 测试对应测试文件 feature1.test.js</span><span class="token comment">// 注意：jest 测试文件不需要具体指明文件名称 而是通过 test.js 标识</span><span class="token comment">// feature1.js</span><span class="token keyword">function</span> <span class="token function">myFn1TestAdd</span><span class="token punctuation">(</span><span class="token parameter">arg0<span class="token punctuation">,</span> arg1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> arg0 <span class="token operator">+</span> arg1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">myFn2TestLogic</span><span class="token punctuation">(</span><span class="token parameter">arg0<span class="token punctuation">,</span> arg1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> arg0 <span class="token operator">&lt;</span> arg1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span> myFn1TestAdd<span class="token punctuation">,</span> myFn2TestLogic <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// feature1.test.js</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> myFn1TestAdd<span class="token punctuation">,</span> myFn2TestLogic <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./feature1.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test number summation'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">myFn1TestAdd</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'compare number'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">myFn2TestLogic</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">myFn2TestLogic</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>理解：test(用例描述，执行回调) 创建一个测试用例， expect 预期(实际值：这里是测试的函数，那么即为函数的返回值) toBe[匹配器 通过 object.js(绝对比较，类似 === 效果) 比较](期望值)，not 可以理解为取反</code></p><h3 id="部分Api学习"><a href="#部分Api学习" class="headerlink" title="部分Api学习"></a>部分<code>Api</code>学习</h3><ul><li>自定义 matchers</li></ul><p>​ <code>等值判断</code></p><ul><li><p><code>toEqual</code> 匹配器: 递归比较对象属性实例，和 <code>toBe</code>匹配器的区别在于 <code>toBe</code> 类似 <code>===</code> 的方式进行绝对匹配，实际运用中 <code>toEqual</code>更适合对比引用类型数据的预期输出；</p></li><li><p><code>toStrictEqual</code>匹配器：严格比较，例如：<code>[, , 1] 和 [undefined, undefined, 1]</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// expect(&#123; a: 1, b: 'aa', c: false &#125;).toEqual(&#123; a: 1, b: 'aa' &#125;); // false</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toStrictEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">__proto__</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">q</span><span class="token operator">:</span> <span class="token string">'eq'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">__proto__</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">q</span><span class="token operator">:</span> <span class="token string">'eq'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toStrictEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token comment">// expect([, , 1]).toStrictEqual([undefined, undefined, 1]); // false</span></code></pre></li><li><p><code>toBeCloseTo(number, numDigits?)</code> 匹配器： 解决<code>JavaScript</code> 浮点数相等比较问题</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test toBeCloseTo'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCloseTo</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p>​ <code>数字大小比较</code></p><ul><li><p><code>toBeGreaterThan</code> <code>toBeGreaterThanOrEqual</code> <code>toBeLessThan</code> <code>toBeLessThanOrEqual</code> (参数均为<code>number | bigint</code>)匹配器: 是否大于、大于等于、小于、小于等于值；</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test toBeLessThan toBeGreaterThan'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeLessThan</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThan</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p>​ <code>类型判断</code></p><ul><li><p><code>toBeNull</code> <code>toBeUndefined</code> <code>toBeDefined </code> 匹配器(无参数)：判断这个值是否为 <code>null、undefined、不为undefined</code>；</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test undefined'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> a<span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeUndefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>  a <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeUndefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>  a <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeUndefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><code>toBeTruthy</code> <code>toBeFalsy</code> <code>toBeNaN</code> 匹配器(无参数)：判断一个值经过隐式转换后为 <code>true、false</code>(类似 1，’test’ 等等 <code>toBeTruthy()</code> 则达到预期)、判断一个值是否为 <code>NaN</code>(和<code>toBeTruthy/toBeFalsy</code> 不同的是，这里为显示比较);</p></li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test NaN'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token string">'11'</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeNaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>  n <span class="token operator">=</span> <span class="token string">'11ds'</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeNaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>  n <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeNaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>toBeInstanceOf(class)</code>匹配器：判断是否为某个类的实例对象；</li></ul><p>​ <code>判断是否包含某个值</code></p><ul><li><p><code>toMatch(regexp | string) </code>匹配器：判断字符串是否能够根据<code>match</code>参数提取片段(简言之，<code>match</code> 为 <code>regexp</code> 时，类似<code>reg.test(str)</code>, 类型为 <code>string</code> 时类似 <code>str.includes(match) or str.indexOf(match) &gt; -1</code>);</p></li><li><p><code>toMatchObject(obj)</code> 匹配器：判断 obj 是否为某个对象的子集</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> be<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> kit<span class="token operator">:</span> <span class="token punctuation">&#123;</span> am<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'oven'</span><span class="token punctuation">,</span> <span class="token string">'stove'</span><span class="token punctuation">,</span> <span class="token string">'washer'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> area<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> ob <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  kit<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    am<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'oven'</span><span class="token punctuation">,</span> <span class="token string">'stove'</span><span class="token punctuation">,</span> <span class="token string">'washer'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'the  has my desired features'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchObject</span><span class="token punctuation">(</span>ob<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// pase</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><code>toContain(item)</code> 匹配器：判断数组是否包含了某个 <code>item</code>,类似 <code>arr.includes(&#39;xx&#39;)</code>;</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test toContain'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">,</span> <span class="token string">'cc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p>​ <code>判断是否抛出异常</code></p><ul><li><p><code>toThrow()</code> 匹配器：判断<code>expect</code>传入值执行过程中发生异常; 注意 <code>throw 抛出的异常值 要同 toThrow 参数一致</code>。此时 <code>expect 传入的不再是具体的值，而是可执行回调</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test toThrow'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">fn1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">fn2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">fn3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>fn1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>  <span class="token comment">// expect(fn2).toThrow('aa'); // false</span>  <span class="token function">expect</span><span class="token punctuation">(</span>fn3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>  <span class="token comment">// expect(fn3).toThrow('aa'); // false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="让jest-支持-esModule"><a href="#让jest-支持-esModule" class="headerlink" title="让jest 支持 esModule"></a>让<code>jest</code> 支持 <code>esModule</code></h3><h4 id="方案一：添加-babel-转译"><a href="#方案一：添加-babel-转译" class="headerlink" title="方案一：添加 babel 转译"></a>方案一：添加 <code>babel</code> 转译</h4><p>​ <code>jest 运行在 node 环境中，遵循 commonJs 规范，无法识别 EsModule 类似 export/import ... form ...模块导入导出，因此添加 babel 实现转译，将 EsModule 转换为 commonJs 的导入导出规范；</code></p><ul><li><p><code>@babel/core@7.4.5</code> 指定所有的转译都是用本地配置文件 <code>.babelrc or package.json</code>；</p></li><li><p><code>@babel/preset-env@7.4.5</code> 转换器核心，用作语法转换编译；</p><blockquote><p>yarn add @babel&#x2F;<a href="mailto:&#99;&#111;&#x72;&#x65;&#64;&#x37;&#46;&#x34;&#46;&#53;">&#99;&#111;&#x72;&#x65;&#64;&#x37;&#46;&#x34;&#46;&#53;</a> @babel&#x2F;<a href="mailto:&#112;&#x72;&#x65;&#115;&#101;&#116;&#x2d;&#x65;&#x6e;&#118;&#64;&#55;&#46;&#52;&#46;&#x35;">&#112;&#x72;&#x65;&#115;&#101;&#116;&#x2d;&#x65;&#x6e;&#118;&#64;&#55;&#46;&#52;&#46;&#x35;</a> –dev</p></blockquote></li><li><p><code>yarn test</code> 执行 <code>jest</code> 前，<code>jest 的 babel-jest</code> 组件会优先检测是否安装了 <code>babel</code>，检测 <code>.babelrc</code> 配置文件是否存在，然后再根据 <code>babel</code>转译后的结果执行<code>test</code></p></li><li><p>添加 <code>.babelrc</code> 配置文件，指定预设规则；<code>对象：presets 为[&#39;presetName&#39;, options: any][]类型，每个 item 为一个预设</code>，预设：就是提供一个预定的配置项，然后与当前配置做合并；</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span>      <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"targets"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token property">"node"</span><span class="token operator">:</span> <span class="token string">"current"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h4 id="方案二：配置-package-json"><a href="#方案二：配置-package-json" class="headerlink" title="方案二：配置 package.json"></a>方案二：配置 <code>package.json</code></h4><ul><li><p>将 <code>package.json</code> 的 <code>type</code> 字段设置为 <code>module</code></p></li><li><p>每次执行 <code>jest</code> 指定环境变量</p><blockquote><p>&#x2F;&#x2F; package.json</p><p>{</p><p>&#x2F;&#x2F; …,</p><p>“type”: “module”,</p><p>“scripts”: {</p><p>​ <code>&quot;test&quot;: &quot;NODE_OPTIONS=--experimental-vm-modules jest&quot;</code></p><p>}</p><p>}</p></blockquote></li></ul><h3 id="测试-typescript"><a href="#测试-typescript" class="headerlink" title="测试 typescript"></a>测试 <code>typescript</code></h3><h4 id="方案一：仅编译，不做类型检测"><a href="#方案一：仅编译，不做类型检测" class="headerlink" title="方案一：仅编译，不做类型检测"></a>方案一：仅编译，不做类型检测</h4><p><code>通过 @babel/preset-typescript 预设，完成 typescript 的转译</code></p><blockquote><p>yarn add @babel&#x2F;preset-typescript –dev</p><p>&#x2F;&#x2F; 配置 .babelrc 转换器规则</p><p>{ presets: [ [‘@babel&#x2F;preset-typescript’] ] }</p></blockquote><h4 id="方案二：编译并对类型检测"><a href="#方案二：编译并对类型检测" class="headerlink" title="方案二：编译并对类型检测"></a>方案二：编译并对类型检测</h4><p><code>普通的 javascript 测试，使用内置的 babel-jest 组件。那么为 typescript 编写测试用例，则需要安装 ts-jest 组件；与此同时，安装 jest 的类型依赖，用于 .test.ts 中类型的注入。</code></p><blockquote><p>&#x2F;&#x2F; 建议 @types&#x2F;jest 版本同 jest 主次版本一致</p><p>yarn add ts-jest @types&#x2F;jest –dev</p><p>&#x2F;&#x2F; 配置 <code>jest.config.js</code> , 添加 preset: <code>&#39;ts-jest&#39;</code> 预设配置：即为预配置项。由 <code>ts-jest</code> 提供配置项，然后与当前配置做合并，这也是为什么加了预设过后，当前配置文件就不需要再向 <code>moduleFileExtensions</code> 内添加 ts 后缀识别，也不需要添加<code> transform &#123;&#39;^.+\\.tsx?$&#39;: tsJest&#125;</code>；告诉 <code>jest, .tsx 文件通过 require.resolve(&#39;ts-jest&#39;) 编译处理</code></p><p><code>&#123; ...otherOptions, preset: &#39;ts-jest&#39; &#125;</code></p></blockquote><h3 id="测试异步结果"><a href="#测试异步结果" class="headerlink" title="测试异步结果"></a>测试异步结果</h3><p><code>asyncFuntion.ts</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">myRequestFn1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> rej<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> success<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="方案一：接受一个参数-done"><a href="#方案一：接受一个参数-done" class="headerlink" title="方案一：接受一个参数 done"></a>方案一：接受一个参数 <code>done</code></h4><p><code>不管 done 在 test 回调函数内是否有被使用，整个回调都会被判定为异步函数，需要等待 done() 结束执行。有点类似 promise.resolve 结束 promise。等待超时后结果为 false</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 直接在回调内的 promise.then 内写的语句不会被 test 检测，无关 equal 的值，结果都是 pass</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test Done'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">myRequestFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> success<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等待超时，结果异常</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test Done'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">myRequestFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> success<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 正常执行</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test Done'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">myRequestFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> success<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>    <span class="token comment">// expect(data).toEqual(&#123; success: false &#125;); // false</span>    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="方案二：return-返回一个-promise-结果"><a href="#方案二：return-返回一个-promise-结果" class="headerlink" title="方案二：return 返回一个 promise 结果"></a>方案二：<code>return</code> 返回一个 <code>promise</code> 结果</h4><p><code>返回一个 promise 结果，test 代码也可以被正常执行</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test async return'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">myRequestFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> success<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>雷：当 return 返回的 promise 不包含错误时，catch 不会被执行，那么 .catch 内的 expec 始终都会被 pass；此时，通过添加 expect 断言来判断是否覆盖了 catch 测试语句</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test promise.catch return'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 参数为 expect 的执行此时</span>  <span class="token keyword">return</span> <span class="token function">myRequestFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeUndefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="方案三：async-await-推荐"><a href="#方案三：async-await-推荐" class="headerlink" title="方案三：async await (推荐)"></a>方案三：<code>async await</code> (推荐)</h4><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test async await'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">myRequestFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// expect(res).toBeUndefined(); // failed</span>  <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> success<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// pass</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="生命周期钩子函数"><a href="#生命周期钩子函数" class="headerlink" title="生命周期钩子函数"></a>生命周期钩子函数</h3><ul><li><p><code>beforeAll</code> <code>beforeEach</code> <code>afterEach</code> <code>afterAll</code> ：所有测试用例开始之前执行、每个测试用例开始之前执行、每个测试用例结束之后执行、所有测试用例结束之后执行。</p></li><li><p>作用域:</p><blockquote><p>钩子函数在父级分组可作用于子级，类似继承</p><p>钩子函数同级分组作用域互不干扰，各起作用</p><p>先执行外部的钩子函数，再执行内部的钩子函数</p></blockquote><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 分组和钩子函数理解</span><span class="token comment">// 父级分组</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a</span>  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b 这里父级的钩子函数会作用于子分组, 比如 beforeEach 在子分组的每个 test 执行之前会被触发</span>  <span class="token comment">// 子分组</span>  <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'test a'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// c</span>    <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// d</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test a.a'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// e</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test a.b'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// f</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'test b'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// g</span>    <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// h</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test b.a'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test b.b'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// j</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// a -> c -> b -> d -> e -> b -> d -> f -> g -> b -> h -> i -> b -> h -> j</span></code></pre><p><code>简言之，同级从上到下执行，只有执行到该子级后，该子级的周期钩子函数才会被触发，例如 beforeALL；然后当该及的 beforeALL 钩子执行后，开始从最外向内级依次执行 beforeEach ,再从上到下执行该级的 test 用例。注意：after 钩子与 before 相反，after 钩子是由内向外级依次执行。 类似 vue 的父子组件的生命周期执行顺序</code>；</p></li></ul><h3 id="测试用例的分组"><a href="#测试用例的分组" class="headerlink" title="测试用例的分组"></a>测试用例的分组</h3><p>​ <code>当测试用例足够多时，过量的测试用例 不方便管理及查看。此时使用 describe(name, fn) 对测试用例分组；注意：分组后还可以进行子分组，最外层可以理解为一个 describe</code>。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 原:</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test a.a'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test a.b'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test b.a'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test b.b'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 分组后：(将原有的 test 用例拷贝到 describe 回调内即可完成分组)</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'test a'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test a.a'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test a.b'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'test b'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test b.a'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'test b.b'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="其他-API"><a href="#其他-API" class="headerlink" title="其他 API"></a>其他 <code>API</code></h3><ul><li><code>test.only(name, fn)</code> 当存在 <code>test.only</code> 时，其他的测试用例会被 skipped 跳过，只执行当前的测试用例，通常用于 <code>debug</code></li></ul><h3 id="测试-Vue-组件"><a href="#测试-Vue-组件" class="headerlink" title="测试 Vue 组件"></a>测试 <code>Vue</code> 组件</h3><p><code>配合 @vue/test-utils 提供的 api，完成 vue 组件的 TDD(单元) 测试</code></p><ul><li><p>在项目中，能够被正确识别的测试文件，通常被指定在 <code>**/tests/unit/**/*.spec.[jt]s?(x) or **/__tests__/*.[jt]s?(x) </code></p></li><li><p><code>it</code>(断言)，<code>test</code>测试，类似 it。</p></li><li><p>通过 <code>@vue/test-utils 提供的 mount or shadowMount 函数来挂载并渲染 vue</code>。</p></li><li><p>由于 <code>jest</code> 默认配置包含了对 <code>@</code> 符号路径的映射，所以可以直接使用。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// xx.spec.ts</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> mount<span class="token punctuation">,</span> shadowMount <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@vue/test-utils'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token constant">XX</span> <span class="token keyword">from</span> <span class="token string">'@/xxx/Xx.vue'</span><span class="token punctuation">;</span> <span class="token comment">// 由于配置了引用后缀，这里可以不写 .vue</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'测试一个 XX 组件功能'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'测试 A 函数'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shadowMount</span><span class="token punctuation">(</span><span class="token constant">XX</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 断言 add TDD</span>    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatch</span><span class="token punctuation">(</span><span class="token string">'测试'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><code>shadowMount 和 mount</code> 的区别：<a href="https://github.com/holylovelqq/vue-unit-test-with-jest/issues/4">参考</a></p><p><code>渲染区别：</code></p><pre class="language-none"><code class="language-none">mount：踏踏实实的渲染，会将被测试组件中使用到的子子孙孙组件完全渲染。最终结果内肯定不存在自定义组件名作为标签名，包括插件提供的V-btn之类的dom结构，全部不存在，彻底渲染到&lt;div&gt;&lt;span&gt;&lt;p&gt;之类shallowMount：浅渲染，与mount相反，既不会渲染子组件，更不用提孙子辈的组件，仅限测试组件本身。子组件会原原本本的显示子组件的存根，当使用stubs的时候，子组件存根是可以自定义显示内容的，如果未自定义，将会显示子组件名-stub的标签名，如&lt;my-componet-stub&gt;&lt;&#x2F;my-componet-stub&gt;</code></pre><p><code>场景</code>：</p><pre class="language-none"><code class="language-none">mount：多数情况出现在snapshot中使用，而且也只是部分snapshot中必须使用mount。下面将说明何种情况：当被测试组件内包含子组件，且子组件的dom结构通过slot在被测试组件内定义的时候，必须使用mount来测试snapshot。hallowMount：所有必须使用mount的情况以外都使用shallowMount，使用mount将更大的消耗时间和性能，----&gt; 实际上所有测试都可以不使用mount，但是鉴于测试的复杂性，有可能会出现用shallowMount怎么也报错的情况，但是改成mount就能测试通过</code></pre><p><code>基本准则：所有使用 shallowMount 的地方都可以用 mount 替换，但是但凡能使用 shallowMount 的地方坚决不用 mount；</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
          <category> 单元测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Typescript 项目中使用 Eslint 和 Prettier</title>
      <link href="/engineering/eslint-and-prettier-in-ts-project/"/>
      <url>/engineering/eslint-and-prettier-in-ts-project/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="为什么是eslint和prettier？"><a href="#为什么是eslint和prettier？" class="headerlink" title="为什么是eslint和prettier？"></a>为什么是<code>eslint</code>和<code>prettier</code>？</h3><blockquote><p>在<code>ESlint</code>推出<code>--fix</code>参数前<code>ESLint</code>并没有自动化格式代码的功能，要对一些格式问题做批量格式化只能用<code>Prettier</code>这样的工具。并且<code>Prettier</code>在代码风格的检测上比<code>ESlint</code>更全面，所以两者通常是结合在一起使用的。</p></blockquote><blockquote><p>对<code>typescript</code>代码进行<code>linting</code>时，有两个主要的<code>linting</code>工具可供选择：<code>tslint、eslint</code>，<code>tslint</code>是一个只能用于<code>typescript</code>项目的<code>linter</code>，而<code>eslint</code>同时支持<code>typescript、javascript</code>.</p></blockquote><blockquote><p>据<code>typescript</code>核心团队解释：<code>ESLint 具有比 TSLint 更高性能的架构</code>，并且后续在为<code>typescript</code>中<code>linting</code>集成时，<code>只会关注eslint</code>，另外官方自<code>2019</code>起已经弃用<code>tslint</code>，**<a href="https://palantir.github.io/tslint/">TSLint has been deprecated as of 2019</a>**</p></blockquote><span id="more"></span><h3 id="在typescript项目中搭建eslint"><a href="#在typescript项目中搭建eslint" class="headerlink" title="在typescript项目中搭建eslint"></a>在<code>typescript</code>项目中搭建<code>eslint</code></h3><blockquote><p><code>tips</code>：如果是<code>create-react-app</code>创建的项目，<code>eslint</code>已经被作为依赖项集成，无需另外安装.</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># @typescript-eslint/parser 允许 ESLint 对 TypeScript 代码进行 lint 解析</span><span class="token comment"># @typescript-eslint/eslint-plugin 包含一堆特定于 TypeScript 的 ESLint 规则</span><span class="token function">yarn</span> <span class="token function">add</span> -D eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin</code></pre><p><code>then..</code>在项目根目录添加<code>.eslintrc.js</code>的配置文件，<code>eg</code>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">'@typescript-eslint/parser'</span><span class="token punctuation">,</span> <span class="token comment">// Specifies the ESLint parser</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'plugin:@typescript-eslint/recommended'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token number">2020</span><span class="token punctuation">,</span> <span class="token comment">// Allows for the parsing of modern ECMAScript features</span>    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">'module'</span><span class="token punctuation">,</span> <span class="token comment">// Allows for the use of imports</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">'plugin:@typescript-eslint/recommended'</span><span class="token punctuation">,</span> <span class="token comment">// Uses the recommended rules from the @typescript-eslint/eslint-plugin</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Place to specify ESLint rules. Can be used to overwrite rules specified from the extended configs</span>    <span class="token string-property property">'no-console'</span><span class="token operator">:</span>      process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span>        <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">allow</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'warn'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">allow</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">'no-debugger'</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token string">'warn'</span> <span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token comment">// -----</span>    <span class="token comment">// 配置 unused-imports 规则需要单独安装插件 yarn add -D eslint-plugin-unused-imports 然后在最外层添加配置项 plugins: ['unused-imports']</span>    <span class="token comment">// 'unused-imports/no-unused-imports': 'error',</span>    <span class="token comment">// -----</span>    <span class="token comment">// typescript configs e.g.</span>    <span class="token string-property property">'@typescript-eslint/no-unused-vars'</span><span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string-property property">'@typescript-eslint/explicit-function-return-type'</span><span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string-property property">'@typescript-eslint/no-explicit-any'</span><span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string-property property">'@typescript-eslint/consistent-type-imports'</span><span class="token operator">:</span> <span class="token string">'warn'</span><span class="token punctuation">,</span>    <span class="token string-property property">'@typescript-eslint/explicit-module-boundary-types'</span><span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string-property property">'@typescript-eslint/no-empty-function'</span><span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string-property property">'@typescript-eslint/no-non-null-assertion'</span><span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>    <span class="token string-property property">'@typescript-eslint/no-this-alias'</span><span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><blockquote><p>如果在<code>react的ts</code>項目中使用，另外安装 <code>eslint-plugin-react dev</code>依赖项，并在上面配置的<code>.eslintrc</code>中添加配置：</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ... others</span>  <span class="token literal-property property">settings</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">react</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">'detect'</span><span class="token punctuation">,</span> <span class="token comment">// Tells eslint-plugin-react to automatically detect the version of React to use</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ... others</span>    <span class="token literal-property property">ecmaFeatures</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">jsx</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Allows for the parsing of JSX</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// ... others</span>    <span class="token string">'plugin:react/recommended'</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>当然你也可以配置<code>eslint</code>的<code>ignore</code>文件<code>.eslintignore</code>，符合其配置规则（语法同其他的<code>ignore</code>配置，如<code>.gitignore</code>）的文件将忽略<code>lint</code>检测。</p><p>😍😍😍<a href="https://eslint.org/docs/latest/">查看更多的配置项及规则</a> -&gt; <a href="http://eslint.cn/docs/rules/">中文文档</a></p><h3 id="混入prettier配置"><a href="#混入prettier配置" class="headerlink" title="混入prettier配置"></a>混入<code>prettier</code>配置</h3><blockquote><p>混用后，就可以通过 eslint –fix 来自动修复不符合 prettier 规则的代码</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># eslint-config-prettier 禁用可能与 prettier 冲突的 ESLint 规则</span><span class="token comment"># eslint-plugin-prettier 将 prettier 作为 eslint 规则运行</span><span class="token function">yarn</span> <span class="token function">add</span> -D prettier eslint-config-prettier eslint-plugin-prettier</code></pre><p>接下来在项目的根目录下添加一个<code>.prettierrc</code>文件，用以配置<code>prettier</code>，<code>eg:</code></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"trailingComma"</span><span class="token operator">:</span> <span class="token string">"all"</span><span class="token punctuation">,</span>  <span class="token property">"printWidth"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>  <span class="token property">"arrowParens"</span><span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">&#125;</span></code></pre><p>继续…在原有的配置基础上，更新<code>.eslintrc.js</code>配置，用以支持混用：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ... others</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// ... others</span>    <span class="token comment">// 确保添加的 'plugin:prettier/recommended' 在 extends 配置的最后一项</span>    <span class="token string">'plugin:prettier/recommended'</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
          <category> 代码规范约束 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eslint </tag>
            
            <tag> prettier </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript 中的符号集合</title>
      <link href="/share/typescript-mark/"/>
      <url>/share/typescript-mark/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>在 <code>typescript</code> 代码日常编写过程中，会经常性的遇到一些符号，这里对一些符号进行一个汇总。</p><p>例如：<code>?、??、?.、!、_</code>等一系列的符号，其中，除了<code>!</code>，其他都是<code>js</code>提供的，更方便的服务于<code>ts</code>。</p><h3 id="类型查询操作符"><a href="#类型查询操作符" class="headerlink" title="类型查询操作符"></a>类型查询操作符</h3><p><code>typeof T； [类型查询操作符] 结果为 T 上已知的 公共属性类型的 联合。 &#39;XXX&#39; | &#39;YYY&#39;...</code></p><span id="more"></span><h3 id="索引类型查询操作符"><a href="#索引类型查询操作符" class="headerlink" title="索引类型查询操作符"></a>索引类型查询操作符</h3><p><code>keyof T； [索引类型查询操作符] 结果为 T 上已知的 公共属性名的 联合。 &#39;XXX&#39; | &#39;YYY&#39;...</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 例：枚举已知属性的集合</span><span class="token keyword">type</span> <span class="token class-name">Keys</span> <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">|</span> <span class="token string">'B'</span> <span class="token operator">|</span> <span class="token string">'C'</span><span class="token punctuation">;</span>or<span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">KeysProps</span> <span class="token punctuation">&#123;</span>  <span class="token constant">A</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token constant">B</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token constant">C</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">Keys</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> KeysProps<span class="token punctuation">;</span></code></pre><h3 id="索引访问操作符"><a href="#索引访问操作符" class="headerlink" title="索引访问操作符"></a>索引访问操作符</h3><p><code>T[K]; [索引访问操作符] 可以通过索引的方式 取到 T上属性为 K 的 Type</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 例：</span><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span>  b<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  c<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></code></pre><h3 id="映射类型操作符"><a href="#映射类型操作符" class="headerlink" title="映射类型操作符"></a>映射类型操作符</h3><p><code>in T 以及 in keyof T [映射类型]</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 例1  in T   [此时的 T 应该为联合类型] 当需要为指定的 key 集合约束类型时 很有用</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> <span class="token string">'aa'</span> <span class="token operator">|</span> <span class="token string">'bb'</span> <span class="token operator">|</span> <span class="token string">'cc'</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D</span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>k <span class="token keyword">in</span> <span class="token constant">C</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//↓ 得到的结果</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">D</span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  aa<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  bb<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  cc<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 例2 in keyof T [此时的 T 为 interface 对象类型] 在已知 key集合的情况下 重约束 key的类型</span><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span>  aa<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  bb<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  cc<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>k <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">A</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//↓ 得到的结果</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  aa<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  bb<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  cc<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="非空断言操作符"><a href="#非空断言操作符" class="headerlink" title="!非空断言操作符"></a><code>!</code>非空断言操作符</h3><p><code>！断言只是忽略TS检查，实际运行过程中， 该报错还是会报错, 此外 !是放在变量后的，注意非运算符区别</code></p><ul><li>忽略<code>undefined</code>和<code>null</code>类型 （ 比如：<strong>x! 将从 x 值域中排除 null 和 undefined</strong> ）</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>maybeString<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> onlyString<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> maybeString<span class="token punctuation">;</span> <span class="token comment">// Error</span>  <span class="token keyword">const</span> ignoreUndefinedAndNull<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> maybeString<span class="token operator">!</span><span class="token punctuation">;</span> <span class="token comment">// Ok</span><span class="token punctuation">&#125;</span></code></pre><ul><li>调用函数时忽略<code>undefined</code></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">NumGenerator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>numGenerator<span class="token operator">:</span> NumGenerator <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token function">numGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>  <span class="token keyword">const</span> num2 <span class="token operator">=</span> numGenerator<span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//OK</span><span class="token punctuation">&#125;</span></code></pre><h3 id="可选属性"><a href="#可选属性" class="headerlink" title="?:可选属性"></a><code>?:</code>可选属性</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> a<span class="token operator">:</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'张三'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// age 可选</span></code></pre><h3 id="类型运算符-amp-、"><a href="#类型运算符-amp-、" class="headerlink" title="类型运算符&amp;、 |"></a>类型运算符<code>&amp;、 |</code></h3><p><code>用于类型运算： &amp; 将多个类型合并为一个类型， | 取值可以为多种类型中的一种 </code></p><blockquote><p>type A &#x3D; xx &amp; xxx 交叉类型</p></blockquote><blockquote><p>type B &#x3D; xx | xxx 联合类型</p></blockquote><h3 id="数字分隔符"><a href="#数字分隔符" class="headerlink" title="_数字分隔符"></a><code>_</code>数字分隔符</h3><p>你可以把一个下划线作为数字内部的分隔符来分组数字， 比如</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> inhabitantsOfMunich <span class="token operator">=</span> <span class="token number">1_464_301</span><span class="token punctuation">;</span><span class="token keyword">const</span> distanceEarthSunInKm <span class="token operator">=</span> <span class="token number">149_600_000</span><span class="token punctuation">;</span><span class="token keyword">const</span> fileSystemPermission <span class="token operator">=</span> <span class="token number">0b111_111_000</span><span class="token punctuation">;</span><span class="token keyword">const</span> bytes <span class="token operator">=</span> <span class="token number">0b1111_10101011_11110000_00001101</span><span class="token punctuation">;</span></code></pre><p>编译后，会生成以下 ES5 代码：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">var</span> inhabitantsOfMunich <span class="token operator">=</span> <span class="token number">1464301</span><span class="token punctuation">;</span><span class="token keyword">var</span> distanceEarthSunInKm <span class="token operator">=</span> <span class="token number">149600000</span><span class="token punctuation">;</span><span class="token keyword">var</span> fileSystemPermission <span class="token operator">=</span> <span class="token number">504</span><span class="token punctuation">;</span><span class="token keyword">var</span> bytes <span class="token operator">=</span> <span class="token number">262926349</span><span class="token punctuation">;</span></code></pre><p><code>注意： 只能在两个数字之间添加_分割符，不能连续使用多个 </code>_<code>分隔符</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// Numeric separators are not allowed here.(6188)</span>3_<span class="token punctuation">.</span><span class="token number">141592</span> <span class="token comment">// Error</span><span class="token number">3</span><span class="token punctuation">.</span>_141592 <span class="token comment">// Error</span><span class="token comment">// Numeric separators are not allowed here.(6188)</span>1_e10 <span class="token comment">// Error</span>1e_10 <span class="token comment">// Error</span><span class="token comment">// Cannot find name '_126301'.(2304)</span>_126301  <span class="token comment">// Error</span><span class="token comment">// Numeric separators are not allowed here.(6188)</span>126301_ <span class="token comment">// Error</span><span class="token comment">// Cannot find name 'b111111000'.(2304)</span><span class="token comment">// An identifier or keyword cannot immediately follow a numeric literal.(1351)</span>0_b111111000 <span class="token comment">// Error</span><span class="token comment">// Numeric separators are not allowed here.(6188)</span>0b_111111000 <span class="token comment">// Error</span><span class="token comment">// Multiple consecutive numeric separators are not permitted.(6189)</span>123__456 <span class="token comment">// Error</span></code></pre><ul><li>数字分隔符的解析：</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 不能使用 Number() parseInt() parseFloat() 解析</span><span class="token comment">// 自定义转换函数解析出实际数字</span><span class="token comment">// 如  str.replace 方法 替换掉 _</span></code></pre><h3 id="lt-Type-gt-及-as-断言"><a href="#lt-Type-gt-及-as-断言" class="headerlink" title="&lt;Type&gt; 及 as 断言"></a><code>&lt;Type&gt; 及 as</code> 断言</h3><ul><li>尖括号语法(<code>React</code>中不支持)</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> a<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">'asf'</span><span class="token punctuation">;</span><span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span></code></pre><ul><li><code>as</code>语法</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> a<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">'asf'</span><span class="token punctuation">;</span><span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript 高级类型介绍</title>
      <link href="/share/typescript-types/"/>
      <url>/share/typescript-types/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><code>typescript</code>支持与<code>javascript</code>几乎相同的数据类型，此外还提供了其他实用的类型方便我们使用。</p><span id="more"></span><h3 id="基础类型回顾"><a href="#基础类型回顾" class="headerlink" title="基础类型回顾"></a>基础类型回顾</h3><ul><li>数字：<code>number</code>；</li><li>字符串：<code>string</code>；</li><li>布尔类型：<code>boolean</code>；</li><li>数组类型：元素类型后跟 <code>number[]</code>；或者使用数组泛型 <code>Array&lt;number&gt;</code>;</li><li>元组类型： 允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。如：<code>[string, number]</code>;</li><li>枚举类型：用于定义数值集合</li><li><code>any</code>类型：任意类型，可以赋予任意类型的值；</li><li><code>void</code>类型：与<code>any</code>相反，表示没有任何类型；</li><li><code>null</code>和<code>undefined</code>类型：只能指<code>null</code>与<code>undefined</code>元素本身；</li><li><code>never</code>类型：<code>never</code>是其它类型（包括<code>null 和 undefined</code>）的子类型，代表从不会出现的值</li></ul><h3 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h3><p><code>type C = A &amp; B; 类型 C 为同时包含类型 A、B 的新类型</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token punctuation">&#123;</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>  say<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 交叉类型实现方式 1： 继承</span><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 交叉类型实现方式 2： &amp; (正常情况下)</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token operator">&amp;</span> <span class="token constant">B</span><span class="token punctuation">;</span><span class="token comment">// 交叉类型实现方式 3：映射(类似遍历赋值...不推荐)</span></code></pre><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><p><code>type C = A | B; 类型 C 为 A 或 B 其中一种类型</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 定义如上</span><span class="token comment">// ....</span><span class="token comment">// 正常使用：</span><span class="token keyword">const</span> c<span class="token operator">:</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'张三'</span> <span class="token punctuation">&#125;</span> <span class="token keyword">as</span> <span class="token constant">A</span><span class="token punctuation">;</span><span class="token comment">// or</span><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 通过访问 arg.name 属性，隐式判断当前 type 类型。A 中 name 为必选项</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arg<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    arg<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="联合类型之类型保护"><a href="#联合类型之类型保护" class="headerlink" title="联合类型之类型保护"></a>联合类型之类型保护</h3><ul><li>in 关键字</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  date<span class="token operator">:</span> Date<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">UnknownT</span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token operator">|</span> <span class="token constant">B</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">printT</span><span class="token punctuation">(</span>ar<span class="token operator">:</span> UnknownT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Name: '</span> <span class="token operator">+</span> ar<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'age'</span> <span class="token keyword">in</span> ar<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'age: '</span> <span class="token operator">+</span> ar<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'date'</span> <span class="token keyword">in</span> ar<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'date: '</span> <span class="token operator">+</span> ar<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>typeof 关键字</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> arg <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'是类型 number'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> arg <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'是类型 string'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><ul><li>instanceof 关键字</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span>  <span class="token function">gitValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Aa</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> val<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token function">gitValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Ab</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> val<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token function">gitValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Aa</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Aa</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><ul><li>字面量类型保护</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Foo</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  kind<span class="token operator">:</span> <span class="token string">'foo'</span><span class="token punctuation">;</span> <span class="token comment">// 字面量类型</span>  foo<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">Bar</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  kind<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">;</span> <span class="token comment">// 字面量类型</span>  bar<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">doStuff</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> Foo <span class="token operator">|</span> Bar<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arg<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">'foo'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 一定是 Bar</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>自定义类型保护的类型谓词</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">isNumber</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> x <span class="token keyword">is</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="通用类型"><a href="#通用类型" class="headerlink" title="通用类型"></a>通用类型</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 接口通用</span><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>k<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// color 的值只可以是字符串 red、blue、yellow</span><span class="token keyword">type</span> <span class="token class-name">color</span> <span class="token operator">=</span> <span class="token string">'red'</span> <span class="token operator">|</span> <span class="token string">'blue'</span> <span class="token operator">|</span> <span class="token string">'yellow'</span><span class="token punctuation">;</span></code></pre><h3 id="接口数据类型"><a href="#接口数据类型" class="headerlink" title="接口数据类型"></a>接口数据类型</h3><p>任何一个项目都离不开对数据和接口的处理，拼接数据和接口是形成业务逻辑也是前端的主要工作之一，将接口返回的数据定义 TypeScript 类型可以减少很多维护成本和查询 api 的时间 。</p><p><code>API.d.ts</code> <code>d.ts</code> 结尾的文件会被 TypeScript 默认导入到全局 , 无需再手动导出。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 不能使用 import 语法，如果需要引用需要使用三斜杠</span><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token constant">API</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// or</span><span class="token keyword">declare</span> <span class="token keyword">namespace</span> <span class="token constant">CAPI</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">interface</span> <span class="token class-name">CurrentUser</span> <span class="token punctuation">&#123;</span>    avatar<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    title<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用 API.A | API.B |  CAPI.CurrentUser</span></code></pre><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>类型变量<code>T</code> 。通过类型变量来帮助捕获用户传入的类型 ，以此来适配多个类型使用。</p><p>你可以这样：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">uniquefn</span><span class="token punctuation">(</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...   大可不必</span><span class="token punctuation">&#125;</span></code></pre><p>很明显，去重函数的参数可以是任意的类型，使用<code>any</code>类型会导致这个函数可以接收任何类型的<code>arg</code>参数，这样就丢失了一些信息 。因此，我们需要一种方法使返回值的类型与传入参数的类型是相同的。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 举栗 数组去重</span><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">uniquefn</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>args<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用</span><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">uniquefn</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// or 利用了类型推论 —— 即编译器会根据传入的参数自动地帮助我们确定T的类型</span><span class="token function">uniquefn</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="预定义类型"><a href="#预定义类型" class="headerlink" title="预定义类型"></a>预定义类型</h3><p><code>TypeScript 2.8在lib.d.ts里增加了一些预定义的有条件类型：</code></p><ul><li><code>NonNullable&lt;T&gt;</code> – 从 T 中剔除 null 和 undefined。</li><li><code>ReturnType&lt;T&gt;</code> – 获取函数返回值类型。</li><li><code>InstanceType&lt;T&gt;</code> – 获取构造函数类型的实例类型。</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// typescript 标准库内的一些实现</span><span class="token keyword">type</span> <span class="token class-name">Proxy<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>  <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="其他内置类型"><a href="#其他内置类型" class="headerlink" title="其他内置类型"></a>其他内置类型</h3><ul><li><code>Required</code> 。与 <code>Partial</code> 相反</li></ul><p><code>-?</code> 的功能就是把可选属性的 <code>?</code> 去掉，使该属性变成必选项，对应的还有 <code>+?</code> ，作用与 <code>-?</code> 相反，是把属性变为可选项。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">Required<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><ul><li><p>Exclude&lt;T,U&gt;</p><p>从 <code>T</code> 中排除那些可以赋值给 <code>U</code> 的类型。 (T ∩ U) 在 T 的 补集</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// T = 1|2|5</span></code></pre><ul><li><p>Extract&lt;T,U&gt;</p><p>从 <code>T</code> 中提取那些可以赋值给 <code>U</code> 的类型。 类型 T ∩ U</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Extract<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// T = 3|4</span></code></pre><ul><li><p>Pick&lt;T, K&gt;</p><p>从 对象<code>T</code> 中取出一系列 <code>K</code> 的属性</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  sex<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> person<span class="token operator">:</span> Pick<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> <span class="token string">'name'</span> <span class="token operator">|</span> <span class="token string">'age'</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'小王'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><ul><li><p>Record&lt;K, T&gt;</p><p>将 <code>K</code> 中所有的属性的值转化为 <code>T</code> 类型。</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> person<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token keyword">keyof</span> Person<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'小王'</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token string">'12'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><ul><li>更多的内置——&gt; typescript 操作符及元素类型</li></ul><h3 id="Omit-lt-T-K-gt-（没有内置）"><a href="#Omit-lt-T-K-gt-（没有内置）" class="headerlink" title="Omit&lt;T,K&gt;（没有内置）"></a>Omit&lt;T,K&gt;（没有内置）</h3><p>从对象 <code>T</code> 中排除 <code>key</code> 是 <code>K</code> 的属性 。 与 Pick 相反</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">></span></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">>></span><span class="token punctuation">;</span></code></pre><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  sex<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> person<span class="token operator">:</span> Omit<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  age<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  sex<span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>需要了解的 Typescript 知识点</title>
      <link href="/share/typescript-declare/"/>
      <url>/share/typescript-declare/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>前段时间项目忙，加之疫情原因，就没有更新。😊😊😊</p></blockquote><blockquote><p>这篇文章主要是类型声明过程中遇到的需求和问题做的记录。</p></blockquote><blockquote><p>持续更新中…</p></blockquote><span id="more"></span><h3 id="如何编写-d-ts声明文件？"><a href="#如何编写-d-ts声明文件？" class="headerlink" title="如何编写.d.ts声明文件？"></a>如何编写<code>.d.ts</code>声明文件？</h3><p><code>.d.ts</code>文件是在编写<code>typescript</code>项目中必不可少的，它是让我们能在<code>ts</code>中调用的<code>js</code>的声明文件。比如有很多主流的<code>npm库</code>都是基于<code>js</code>编写的，那么在你的<code>ts</code>项目中引用时，会提示你找不到对应包或函数的声明，此时并不需要我们用<code>ts</code>对组件重写，只需在你的项目中编写包含该库类型声明的<code>.d.ts</code>文件即可。</p><p>通常在定制化编写组件时，<code>.d.ts</code>会统一放到<code>@types</code>或者<code>typings</code>文件夹下，当然你也可以不写<code>.d.ts</code>，而通过<code>tsc</code>对<code>ts</code>文件做编译生成对应文件的<code>.d.ts</code>。</p><ul><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#declare-var"><code>declare var</code></a> 声明全局变量</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#declare-function"><code>declare function</code></a> 声明全局方法</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#declare-class"><code>declare class</code></a> 声明全局类</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#declare-enum"><code>declare enum</code></a> 声明全局枚举类型</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#declare-namespace"><code>declare namespace</code></a> 声明（含有子属性的）全局对象</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#interface-%E5%92%8C-type"><code>interface</code> 和 <code>type</code></a> 声明全局类型</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#export"><code>export</code></a> 导出变量</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#export-namespace"><code>export namespace</code></a> 导出（含有子属性的）对象</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#export-default"><code>export default</code></a> ES6 默认导出</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#export-1"><code>export =</code></a> commonjs 导出模块</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#export-as-namespace"><code>export as namespace</code></a> UMD 库声明全局变量</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#declare-global"><code>declare global</code></a> 扩展全局变量</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#declare-module"><code>declare module</code></a> 扩展模块</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#san-xie-xian-zhi-ling"><code>/// </code></a> 三斜线指令</li></ul><p><code>eg. 扩展 axios 模块请求的 config 配置。</code> <del>axios.interceptors.response. errors.config 亦可拿到</del></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">'axios'</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">AxiosRequestConfig</span> <span class="token punctuation">&#123;</span>    metadata<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      start<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">/**     *  用于控制该请求出现错误时， 是否由默认message显示错误信息     *     * @type &#123;boolean&#125;     * @memberof AxiosRequestConfig     */</span>    suppressError<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 用于请求在401状态码时， 是否自动重定向到登陆页。     *     * @type &#123;boolean&#125;     * @memberof AxiosRequestConfig     */</span>    suppressUnauthRedirect<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><div class="warning"><blockquote><p>声明语句中只能定义类型，切勿在声明语句中定义具体的实现</p></blockquote></div><h4 id="三斜线指令"><a href="#三斜线指令" class="headerlink" title="///三斜线指令"></a><code>///</code>三斜线指令</h4><blockquote><p>&#x2F;&#x2F;&#x2F; &lt;reference path&#x3D;”…” /&gt;</p></blockquote><p>三斜线引用告诉编译器在编译过程中要引入的额外的文件。<strong>三斜线指令仅可放在包含它的文件的最顶端。 一个三斜线指令的前面只能出现单行或多行注释。</strong></p><h4 id="declare-namespace详解"><a href="#declare-namespace详解" class="headerlink" title="declare namespace详解"></a><code>declare namespace</code>详解</h4><p><code>namespace</code>中文称命名空间，现在已经不建议再使用<code>ts</code>中的<code>namespace</code>，而推荐使用<code>ES6</code>的模块化方案了，<del>虽然目前仍能使用</del>。</p><p><code>eg. jQuery</code>提供了一个<code>jQuery.ajax</code>方法可以调用，那么我们就应该使用<code>declare namespace jQuery</code>来声明这个拥有多个子属性的全局变量。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">namespace</span> jQuery <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> settings<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> version<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  <span class="token keyword">class</span> <span class="token class-name">Event</span> <span class="token punctuation">&#123;</span>    <span class="token function">blur</span><span class="token punctuation">(</span>eventType<span class="token operator">:</span> EventType<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">enum</span> EventType <span class="token punctuation">&#123;</span>    CustomClick<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>注意，在<code>declare namespace</code>内部，我们直接使用<code>function ajax</code>来声明函数，而不是使用<code>declare function ajax</code>。类似的，也可以使用 <code>const</code>, <code>class</code>, <code>enum</code>等语句&#96;</p><ul><li>嵌套的命名空间</li></ul><p>使用场景： 诸如 jQuery.fn.extend({})</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">namespace</span> jQuery <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> settings<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>  <span class="token keyword">namespace</span> fn <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span>object<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>当然你也可以这样写：</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 这样写有很多局限性， 比如 jQuery不仅仅有 fn属性的时候</span><span class="token keyword">declare</span> <span class="token keyword">namespace</span> jQuery<span class="token punctuation">.</span>fn <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span>object<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="type和interface如何抉择？"><a href="#type和interface如何抉择？" class="headerlink" title="type和interface如何抉择？"></a><code>type</code>和<code>interface</code>如何抉择？</h3><p>推荐任何时候都是用<code>type</code>，<code>type</code>使用起来更像一个变量，与<code>interface</code>相比，<code>type</code>的特点如下：</p><ul><li>表达功能更强大，不局限于<code>object/class/function</code></li><li>要扩展已有<code>type</code>需要创建新<code>type</code>，不可以重名</li><li>支持更复杂的类型操作</li></ul><p>基本上所有用<code>interface</code>表达的类型都有其等价的<code>type</code>表达。</p><h3 id="给函数添加属性申明"><a href="#给函数添加属性申明" class="headerlink" title="给函数添加属性申明"></a>给函数添加属性申明</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">FuncWithAttachment</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">(</span>param<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  someProperty<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> testFunc<span class="token operator">:</span> <span class="token function-variable function">FuncWithAttachment</span> <span class="token operator">=</span> <span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">testFunc</span><span class="token punctuation">(</span><span class="token string">'mike'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 有类型提醒</span>testFunc<span class="token punctuation">.</span>someProperty <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 有类型提醒</span></code></pre><p>等价的<strong>声明合并</strong>写法:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 组合多个声明语句，它们不会产生冲突</span><span class="token keyword">type</span> <span class="token class-name">FuncWithAttachment</span> <span class="token operator">=</span> <span class="token punctuation">(</span>param<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">boolean</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">FuncWithAttachment</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  someProperty<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="枚举类型声明及类型使用"><a href="#枚举类型声明及类型使用" class="headerlink" title="枚举类型声明及类型使用"></a>枚举类型声明及类型使用</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 联合类型</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">|</span> <span class="token string">'b'</span> <span class="token operator">|</span> <span class="token string">'c'</span><span class="token punctuation">;</span><span class="token comment">// 枚举类型</span><span class="token keyword">enum</span> <span class="token constant">A</span> <span class="token punctuation">&#123;</span>  <span class="token string">'a'</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">,</span>  <span class="token string">'b'</span> <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">,</span>  <span class="token string">'c'</span> <span class="token operator">=</span> <span class="token string">'c'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p><strong>注意 (type)A 等价 keyof typeof (enum 的 keys)A，如果想使用 (enum 的 values 的联合类型) 直接使用 A 即可</strong></p></blockquote><h3 id="泛型的其他使用场景"><a href="#泛型的其他使用场景" class="headerlink" title="泛型的其他使用场景"></a>泛型的其他使用场景</h3><p><code>列举除了泛型函数外的一些常见使用场景：</code></p><ul><li>接口返回数据类型约束</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 有这么一个 interface ,显然， 很多接口返回数据都是这种结构，所以这里使用了 泛型约束</span><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>  page<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  size<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  results<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  total<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token generic-function"><span class="token function">request</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">>></span></span></span><span class="token punctuation">(</span><span class="token string">'/api/xx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>Promise</code> 类型</li></ul><p>在做异步操作时我们经常使用 <code>async</code> 函数，函数调用时会 <code>return</code> 一个 <code>Promise</code> 对象，可以使用 <code>then</code> 方法添加回调函数。</p><p><code>Promise</code> 是一个泛型类型，<code>T</code> 泛型变量用于确定使用 <code>then</code> 方法时接收的第一个回调函数（<code>onfulfilled</code>）的参数类型。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 某 props 接收异步处理函数</span>onTaskRequest<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>args<span class="token operator">:</span> <span class="token constant">API</span><span class="token punctuation">.</span><span class="token constant">X</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">API</span><span class="token punctuation">.</span><span class="token constant">X</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre><ul><li><code>event</code> 事件类型</li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// click 使用 React.MouseEvent 加 dom 类型的泛型</span><span class="token comment">// HTMLInputElement 代表 input标签 另外一个常用的是 HTMLDivElement</span><span class="token keyword">const</span> <span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> React<span class="token punctuation">.</span>MouseEvent<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><ul><li>作为组件 <code>Props</code> 及 <code>hooks</code> 参数</li></ul><pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">FnComProps</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> FnCom<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>FnComProps<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>…</p><h3 id="动态更新-Object-的-key"><a href="#动态更新-Object-的-key" class="headerlink" title="动态更新 Object 的 key"></a>动态更新 <code>Object</code> 的 <code>key</code></h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  <span class="token punctuation">[</span>k<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span> <span class="token comment">// 指定 k 可以为任意的 string</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="反向使用-typeof"><a href="#反向使用-typeof" class="headerlink" title="反向使用 typeof"></a>反向使用 typeof</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// NewsCard 组件接收的 props 类型</span><span class="token keyword">interface</span> <span class="token class-name">NewsCardProps</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ficusService.getNews: (params: API.NewsQuery) => Promise&lt;API.PaginationNewsResult&lt;API.News>></span>  <span class="token comment">// 通过 typeof 反向获取类型</span>  provider<span class="token operator">:</span> <span class="token keyword">typeof</span> ficusService<span class="token punctuation">.</span>getNews<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="巧用Partial"><a href="#巧用Partial" class="headerlink" title="巧用Partial"></a>巧用<code>Partial</code></h3><p>使用 <code>Partial</code> 将所有的 <code>props</code> 属性都变为可选值。—— 这对我们在接口定义时很有用</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 在 A 接口中, 我们使用 interface X 完成了对某数据的返回类型定义。</span><span class="token comment">// 在 B 接口中, 我们可能会对 X 中定义的字段的部分字段进行更新， 但在 A 接口 为必选字段， B 接口为可选</span><span class="token keyword">export</span> <span class="token keyword">const</span> conditionService <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">async</span> <span class="token function">query</span><span class="token punctuation">(</span>query<span class="token operator">:</span> Query<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>PageResult<span class="token operator">&lt;</span>ConditionTemp<span class="token operator">>></span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/v1.0/condition</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      params<span class="token operator">:</span> query<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">async</span> <span class="token function">update</span><span class="token punctuation">(</span>data<span class="token operator">:</span> Partial<span class="token operator">&lt;</span>ConditionTemp<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/v1.0/condition</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="为-Window-添加参数"><a href="#为-Window-添加参数" class="headerlink" title="为 Window 添加参数"></a>为 Window 添加参数</h3><p>使用第三方库时（ga）,ga 是全局方法，在使用时会提示” 类型“Window”上不存在属性“ga”</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Window</span> <span class="token punctuation">&#123;</span>  ga<span class="token operator">:</span> <span class="token punctuation">(</span>    command<span class="token operator">:</span> <span class="token string">'send'</span><span class="token punctuation">,</span>    hitType<span class="token operator">:</span> <span class="token string">'event'</span> <span class="token operator">|</span> <span class="token string">'pageview'</span><span class="token punctuation">,</span>    fieldsObject<span class="token operator">:</span> GAFieldsObject <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>  <span class="token function-variable function">reloadAuthorized</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>不想在 Window 中增加，但是想要全局使用，比如通过 define 注入的参数，我们通过 <code>declare</code> 关键字在 <code>/src/typings.d.ts</code> 注入。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">const</span> <span class="token constant">REACT_APP_ENV</span><span class="token operator">:</span> <span class="token string">'test'</span> <span class="token operator">|</span> <span class="token string">'dev'</span> <span class="token operator">|</span> <span class="token string">'pre'</span> <span class="token operator">|</span> <span class="token boolean">false</span><span class="token punctuation">;</span></code></pre><h3 id="装包没有相对应的-types"><a href="#装包没有相对应的-types" class="headerlink" title="装包没有相对应的 @types"></a>装包没有相对应的 <code>@types</code></h3><ul><li><p>安装包对应的<code>@types</code>文件包，如<code>@types/react</code>、<code>@types/react-dom</code></p></li><li><p>自定义其为<code>any</code>。</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">'xxx'</span><span class="token punctuation">;</span> <span class="token comment">// d.ts</span><span class="token keyword">import</span> xxx <span class="token keyword">from</span> <span class="token string">'xxx'</span><span class="token punctuation">;</span> <span class="token comment">// tsx</span></code></pre><h3 id="ts-ignore"><a href="#ts-ignore" class="headerlink" title="@ts-ignore"></a>@ts-ignore</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// @ts-ignore</span>xxx<span class="token punctuation">;</span></code></pre><p>遇到动态性比较强的代码，不妨使用 <code>as unknown as XXX</code></p><h3 id="typescript-其他使用姿势"><a href="#typescript-其他使用姿势" class="headerlink" title="typescript 其他使用姿势"></a><a href="https://ts.xcatliu.com/basics/declaration-files.html">typescript 其他使用姿势</a></h3>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何构建你想要的正则表达式?</title>
      <link href="/share/regular-expression/"/>
      <url>/share/regular-expression/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h3><p>正则表达式<code>(regular expression)</code>描述了一种字符串匹配的模式<code>(pattern)</code>，可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p><blockquote><p>正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为”元字符”）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。</p></blockquote><span id="more"></span><h3 id="正则表达式的创建"><a href="#正则表达式的创建" class="headerlink" title="正则表达式的创建"></a>正则表达式的创建</h3><p>正则表达式是引用数据类型，又称规则表达式。可以通过内置构造函数创建，亦可以通过字面量方式创建。</p><h4 id="字面量方式创建"><a href="#字面量方式创建" class="headerlink" title="字面量方式创建"></a>字面量方式创建</h4><blockquote><p>语法：<code>const reg = /xxx/</code>双斜杠包夹的内容就是正则表达式。</p></blockquote><h4 id="内置构造函数创建"><a href="#内置构造函数创建" class="headerlink" title="内置构造函数创建"></a>内置构造函数创建</h4><blockquote><p>语法：<code>const reg = new RegExp(&#39;xxx&#39;)</code> 通过<code>new</code>关键字创建正则实例。</p></blockquote><p><code>so：</code>如果写一个正则表达式<code>xxx</code>，来先了解正则表达式的一些比较特殊的符号意义所在？</p><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><h4 id="d出现一个数字"><a href="#d出现一个数字" class="headerlink" title="\d出现一个数字"></a><code>\d</code>出现一个数字</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'sdasdna126sdfd6550sad'</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><p>其他字符同理，就不单独写例子了，通过<code>test</code>则返回<code>true</code>.</p><h4 id="D出现一个非数字"><a href="#D出现一个非数字" class="headerlink" title="\D出现一个非数字"></a><code>\D</code>出现一个非数字</h4><h4 id="s出现一个空格"><a href="#s出现一个空格" class="headerlink" title="\s出现一个空格"></a><code>\s</code>出现一个空格</h4><h4 id="S出现一个非空格"><a href="#S出现一个非空格" class="headerlink" title="\S出现一个非空格"></a><code>\S</code>出现一个非空格</h4><h4 id="w出现一个数字字母下划线"><a href="#w出现一个数字字母下划线" class="headerlink" title="\w出现一个数字字母下划线"></a><code>\w</code>出现一个数字字母下划线</h4><h4 id="W出现一个非数字字母下划线"><a href="#W出现一个非数字字母下划线" class="headerlink" title="\W出现一个非数字字母下划线"></a><code>\W</code>出现一个非数字字母下划线</h4><h4 id="出现一个除了换行以外的字符"><a href="#出现一个除了换行以外的字符" class="headerlink" title=".出现一个除了换行以外的字符"></a><code>.</code>出现一个除了换行以外的字符</h4><p>实际使用过程中，称之为任意字符也不为过。</p><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><h4 id=""><a href="#" class="headerlink" title="*"></a><code>*</code></h4><blockquote><p>出现的次数为<code>0 - infinite</code>(正无穷)，<code>eg.</code> <code>/a*/</code>表示出现 0 - 无穷次<del>（因为限定的次数最低可以是 0，所以理解为所有字符亦可）😂😂😂</del></p></blockquote><h4 id="-1"><a href="#-1" class="headerlink" title="+"></a><code>+</code></h4><blockquote><p>出现的次数为<code>1 - infinite</code>(正无穷)，<code>eg.</code> <code>/\d+/</code>表示数字出现一次以上</p></blockquote><h4 id="-2"><a href="#-2" class="headerlink" title="?"></a><code>?</code></h4><blockquote><p>出现的次数为<code>0 - 1</code>，<code>eg:</code> <code>/\d?/</code>可以不出现数字，也可以出现数字（仅匹配出现的第一次）</p></blockquote><h4 id="n-和-n"><a href="#n-和-n" class="headerlink" title="{n} 和 {n,}"></a><code>&#123;n&#125; 和 &#123;n,&#125;</code></h4><blockquote><p>单类型字符连续出现<code>n</code>个，<code>eg.</code> <code>/\d&#123;3&#125;/</code>表示连续三个或三个以上数字在一块 ，只要出现一次即为<code>true</code>.</p></blockquote><h4 id="n-m"><a href="#n-m" class="headerlink" title="{n,m}"></a><code>&#123;n,m&#125;</code></h4><blockquote><p>单类型字符连续出现<strong>至少</strong><code>n - m</code>次（意味着也可以超过），<code>eg.</code></p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'s354ada1sdf22515553sg4d5sf'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d&#123;5,7&#125;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><p>估计有些童鞋已经蒙圈了，既然都是至少这么多次，那它们直接有啥区别？比如<code>&#123;n,&#125; &#123;n,m&#125;</code>，又该怎么使用？，别急来先看<strong>边界符</strong>：</p><h3 id="边界符"><a href="#边界符" class="headerlink" title="边界符"></a>边界符</h3><p>写了边界符后，在使用<code>test</code>检测时，搭配限定符，就可实现区分<code>&#123;n, m&#125; 和 &#123;n, &#125;</code>，前者代表整个长度只能在<code>n - m</code>，后者是长度至少为<code>n</code>.</p><h4 id="以-开头"><a href="#以-开头" class="headerlink" title="^ 以...开头"></a><code>^ 以...开头</code></h4><h4 id="以-结尾"><a href="#以-结尾" class="headerlink" title="$ 以...结尾"></a><code>$ 以...结尾</code></h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reg1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span><span class="token keyword">const</span> str2 <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false（\d只能出现一个）</span><span class="token keyword">const</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\w&#123;4,9&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> str3 <span class="token operator">=</span> <span class="token string">'_as123'</span><span class="token punctuation">;</span><span class="token keyword">const</span> str4 <span class="token operator">=</span> <span class="token string">'_as1234567'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false（指定了\w 出现4-9次 长度  字符串长度不能超过 9，同时 只能是\w字符）</span></code></pre><h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><h4 id="转译符"><a href="#转译符" class="headerlink" title="\转译符"></a><code>\</code>转译符</h4><p>意指把 <strong>原本没有特殊含义的东西 加上 \就没了特殊含义</strong>；<del>把原本就有特殊含义的东西加上<code>\</code>就没有特殊含义了</del></p><h4 id="把一块东西当成整体"><a href="#把一块东西当成整体" class="headerlink" title="()把一块东西当成整体"></a><code>()</code>把一块东西当成整体</h4><h4 id="或"><a href="#或" class="headerlink" title="|或"></a><code>|</code>或</h4><blockquote><p>注意：<code>||</code>逻辑或 <code>|</code>占位或 两者的区别</p></blockquote><p><code>eg.</code> 简版邮箱<code>/^\w&#123;6,12&#125;@(qq|163|sina)\.(com|cn|net)/</code></p><h4 id="取中间任意一个"><a href="#取中间任意一个" class="headerlink" title="[]取中间任意一个"></a><code>[]</code>取中间任意<strong>一个</strong></h4><p>只能取中括号内的一个字符，注意字符长度，<code>eg.</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[abcd]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span class="token keyword">const</span> str2 <span class="token operator">=</span> <span class="token string">'abcd'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></code></pre><h4 id="到-至"><a href="#到-至" class="headerlink" title="-到..至.."></a><code>-</code>到..至..</h4><p><code>eg. </code> 对于正则 <code>/^[a-zA-Z0-9_]$/</code>，字符<code>M</code>就符合.</p><h4 id="非"><a href="#非" class="headerlink" title="[^]非"></a><code>[^]</code>非</h4><p>对<code>[]</code>的正则取非，<code>eg. /^[^a-z]$/</code>，指非<code>a-z</code>的字符，长度为 1.</p><p>再然后要说的就是标识符了，它写在<code>//</code>的后面，具体使用如下：</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p><code>g</code>全局匹配，<code>i</code>忽略大小写，<code>eg.</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">m</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">;</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'MasnonasmsdfMasm'</span><span class="token punctuation">;</span>str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// *asnonas*sdf*as*</span></code></pre><p>当然标识符不仅仅是上面介绍的这两个，<a href="https://regex101.com/">https://regex101.com/</a>可以在这个网站上测试及学习…</p><h3 id="正则表达式原型上的方法"><a href="#正则表达式原型上的方法" class="headerlink" title="正则表达式原型上的方法"></a>正则表达式原型上的方法</h3><p><code>eg.</code>正则表达式<code>reg = /xxx/</code>.</p><h4 id="对字符串进行验证"><a href="#对字符串进行验证" class="headerlink" title="对字符串进行验证"></a>对字符串进行验证</h4><p><code>reg.test(str)</code>. 符合规则就返回<code>true</code>否则返回<code>false</code>.</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'ahsjdhaabbc'</span><span class="token punctuation">;</span><span class="token keyword">const</span> res <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></code></pre><h4 id="捕获字符串里面符合规则的内容"><a href="#捕获字符串里面符合规则的内容" class="headerlink" title="捕获字符串里面符合规则的内容"></a>捕获字符串里面符合规则的内容</h4><p><code>reg.exec(str)</code>第一次是从头开始匹配，如果找到符合规则的字符，那么返回一个数组，数组的第 0 项就是捕获到的符合规则的字符，第二次应该从第一次结束的位置开始捕获，如果找到也是返回一个数组，如果没有找到符合规则的字符，就返回一个<code>null</code>，下次执行又是从头开始重新捕获.<del>（用的很少）</del></p><h4 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h4><p><code>reg.toString()</code>将正则表达式转换为字符串。</p><h3 id="字符串与正则相关方法"><a href="#字符串与正则相关方法" class="headerlink" title="字符串与正则相关方法"></a>字符串与正则相关方法</h3><h4 id="字符串基于正则完成替换"><a href="#字符串基于正则完成替换" class="headerlink" title="字符串基于正则完成替换"></a>字符串基于正则完成替换</h4><p><code>str.replace(regexp|substr, newSubStr|function)</code>. <code>reg：</code>一个<code>RegExp</code>对象或者其字面量，该正则所匹配的内容会被第二个参数的返回值替换掉<del>（该方法的具体参数使用请参阅文档，这里仅介绍正则相关）</del></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">m</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">;</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'MasnonasmsdfMasm'</span><span class="token punctuation">;</span>str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// *asnonas*sdf*as*</span></code></pre><p>和<code>replace</code>相近的还有<code>replaceAll</code>，与前者差别就是后者匹配所有符合正则的子串并替换，而前者则需要通过指定<code>g</code>参数实现。</p><h4 id="提取字符串中符合正则的匹配项"><a href="#提取字符串中符合正则的匹配项" class="headerlink" title="提取字符串中符合正则的匹配项"></a>提取字符串中符合正则的匹配项</h4><p><code>str.match(reg)</code>返回一个数组，将所有符合的子串提取出来。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'Ma123sdf4565dsfsdf789sdf35'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d&#123;2&#125;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ["12", "45", "65", "78", "35"]</span></code></pre><h4 id="查找符合规则的字符串子串"><a href="#查找符合规则的字符串子串" class="headerlink" title="查找符合规则的字符串子串"></a>查找符合规则的字符串子串</h4><p><code>str.search(reg)</code>查找符合规则的字符，返回相对应的下标，如果有多个符合，那么就返回第一个，作用同<code>indexOf</code>，不过后者无法传入<code>reg</code>正则查找.</p><h3 id="贪婪模式和非贪婪模式"><a href="#贪婪模式和非贪婪模式" class="headerlink" title="贪婪模式和非贪婪模式"></a>贪婪模式和非贪婪模式</h3><p>在<code>javascript</code>中的正则表达式的匹配方式默认是贪婪模式。</p><p><code>eg. </code></p><h4 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 指匹配 b 开头，后续出现 0 -任意次数的 a 的子串</span><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ba*</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'baaaabab'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['baaaa', 'ba', 'b']</span></code></pre><p>正是因为贪婪匹配（尽可能多的匹配符号条件的子串），导致了匹配出的第一项是<code>baaaa</code>（从前向后匹配，一直到匹配到的字符串不符合条件时停止）, 而非<code>b</code>.</p><h4 id="非贪婪模式"><a href="#非贪婪模式" class="headerlink" title="非贪婪模式"></a>非贪婪模式</h4><p>当然有贪婪也就有非贪婪，如何指定？</p><blockquote><p>使用字符<code>?</code>标识正则使用非贪婪模式进行匹配(这是<code>?</code>的另外一种用法含义) <del>看你怎么理解</del></p></blockquote><p>对上面例子的正则改造一下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ba*?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'baaaabab'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['b', 'b', 'b']</span></code></pre><p><code>/ba*</code>为原有的正则表达式，在其后添加<code>?</code>指明非贪婪，匹配到的结果自然就是<code>[&#39;b&#39;, &#39;b&#39;, &#39;b&#39;]</code>.</p><p>以为这样就结束了？<code>no no no...</code> 正则在匹配时还有另外一条规则…<strong>比贪婪规则的优先级更高</strong>，<code>so</code>在你使用时,如果不注意…你会怀疑自己的…</p><h4 id="匹配的优先级"><a href="#匹配的优先级" class="headerlink" title="匹配的优先级"></a>匹配的优先级</h4><blockquote><p>最先开始的匹配拥有最高的优先权 —— The match that begins earliest wins。</p></blockquote><p>怎么解释，匹配优先匹配左边的<strong>第一个字符</strong>，然后尽可能少的去匹配后续字符，而不是忽略第一个字符，去找第二个…😋😋😋 <del>匹配结果不会从左侧缩减字符，而只会进行右侧的懒惰匹配</del> <code>eg.</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a*?b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'baaaabab'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['b', 'aaaab', 'ab']</span></code></pre><p>如果你未理解该规则，那么按照非贪婪的理解，打印的结果应该是<code>[&#39;b&#39;, &#39;b&#39;, &#39;b&#39;]</code>，<strong>这是错误的</strong>.</p><p><strong>正确结果</strong>应该是<code>[&#39;b&#39;, &#39;aaaab&#39;, &#39;ab&#39;]</code>.</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>容器嵌入Iframe后的滚动问题记录</title>
      <link href="/bugs/iframe-scroll/"/>
      <url>/bugs/iframe-scroll/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>最初，我做了一个<code>h5</code>的页面，该页面使用<code>iframe</code>内链了一个网页。当我直接在手机浏览器打开时，发现无法正常进行滚动。</p><p>拟解决办法：我给这个<code>iframe</code>添加了一个包裹容器，通过设置该容器的<code>overflow: auto</code>，以及设置<code>iframe height:100%</code>达到预期可滚动的效果。</p><p>新问题：首轮解决办法确实能够让 iframe 滚动，不过页面却出现了两个滚动条，<code>what f?</code>那肯定就是<code>wrapper 和 iframe</code>出现了高度差了。</p><span id="more"></span><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><blockquote><p>分析高度差出现的原因，然后…解决。</p></blockquote><p>从节点本身出发，<code>iframe</code>是内联元素，而内联元素是跟基线<code>baseline</code>对齐的，iframe 的后面有个<code>行内空白节点</code>(该节点产生的原因其实和<code>dom</code>结构有关系，下面贴上源代码：)</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iframe-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iframe<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>可以看到<code>iframe</code>与<code>div</code>之间有个换行符，也可以理解为空白节点，空白节点占据着高度，<code>iframe</code>与空白节点的基线对齐，导致了<code>div</code>被撑开，从而出现滚动条。</p><p>解决方案：</p><pre class="language-none"><code class="language-none">方案一：设置iframe的vertical-align:top方案二：设置父div的font-size:0方案三：改变iframe的内联元素性质，display: block</code></pre><p>通常采用第三种方案，改变<code>iframe</code>的元素性质，贴上部分源码：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.iframe-container</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">-webkit-overflow-scrolling</span><span class="token punctuation">:</span> touch<span class="token punctuation">;</span> // 兼容 ios<span class="token punctuation">&#125;</span><span class="token selector">.iframe-container .iframe</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>至此，<code>iframe</code>的滚动问题得到完美解决。<del>算是踩了个小坑，以后注意就好了</del></p><blockquote><p>试一下，你会比你自己想象中的还要强大</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 踩坑记录 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> iframe滚动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 中的继承方案及其实现</title>
      <link href="/share/javascript-extends/"/>
      <url>/share/javascript-extends/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="继承-extends-导语"><a href="#继承-extends-导语" class="headerlink" title="继承(extends) 导语"></a>继承(extends) 导语</h3><p>任何一门面向对象的语言都有继承，继承简单的说 即为子类继承父类的属性和方法，并且在继承以后可以对这些属性和方法进行操作及使用。</p><p>举个栗子：（你的父亲很富有，你继承你父亲的财产以后，你也就变得和他一样富有。）</p><p><code>js</code>虽然是一门弱类型语言，但是却给我们提供了一种很好的实现继承的方法——基于原型实现 不知道原型的盆友，<a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes">戳这里</a></p><span id="more"></span><h3 id="继承的六种实现"><a href="#继承的六种实现" class="headerlink" title="继承的六种实现"></a>继承的六种实现</h3><p><code>主要对继承熟悉掌握，所以没有单独写测试用例进行测试。</code></p><p>定义基类(父类)<code>Man</code>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Man</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> params<span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'my name is '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 原型上的方法</span><span class="token class-name">Man</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">food</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'正在吃'</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="拷贝继承"><a href="#拷贝继承" class="headerlink" title="拷贝继承"></a>拷贝继承</h4><blockquote><p>实现：枚举父类实例的方法及属性，拷贝到子类的原型上</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> man1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> man1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 需要拷贝基类原型上的属性和方法，所以移除了 hasOwnProperty 判断</span>    <span class="token comment">// if (Object.hasOwnProperty.call(man1, key)) &#123;</span>    <span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> man1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// &#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// test</span><span class="token keyword">const</span> jack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'jack'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jack<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jack</span>jack<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// my name is jack</span>jack<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">'零食'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jack正在吃零食</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jack <span class="token keyword">instanceof</span> <span class="token class-name">Man</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jack <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><blockquote><p>优缺点：</p></blockquote><ul><li><p>支持多继承</p></li><li><p>效率较低，内存占用较高。（因为要拷贝父类的属性）</p></li><li><p>无法获取父类不可枚举的方法。（不可枚举方法，不能使用 <code>for in</code> 访问）</p></li></ul><h4 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h4><blockquote><p>实现：子类的原型指向父类的实例</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> params<span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> params<span class="token punctuation">.</span>age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> params<span class="token punctuation">.</span>sex<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">', my age is '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// test</span><span class="token keyword">const</span> rose <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'rose'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rose<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// rose</span>rose<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// my name is rose</span>rose<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello rose, my age is 18</span></code></pre><blockquote><p>优缺点：</p></blockquote><ul><li><p>非常纯粹的继承关系，实例是子类的实例，也是父类的实例。</p></li><li><p>父类新增原型方法&#x2F;原型属性，子类也能访问到。</p></li><li><p>简单易实现。</p></li><li><p>无法实现多继承，且来自原型上的引用属性所有实例共享！</p></li><li><p>子类需要对自身(非原型)属性重载，因为基类(非原型)属性无法在继承时被实例化-基于原型链继承导致。</p></li></ul><h4 id="构造继承"><a href="#构造继承" class="headerlink" title="构造继承"></a>构造继承</h4><blockquote><p>实现：</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">Man</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// test</span><span class="token keyword">const</span> m1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'mm'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// my name is mm</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1 <span class="token keyword">instanceof</span> <span class="token class-name">Man</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1 <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><blockquote><p>优缺点：</p></blockquote><ul><li><p>解决子类实例共享父类引用属性的问题. 可以实现多继承（<code>call</code>多个父类对象）。</p></li><li><p>实例并不是父类的实例，只是子类的实例。</p></li><li><p>只能继承父类的实例属性和方法，不能继承原型属性&#x2F;方法</p></li><li><p>无法实现函数复用，每个子类都有父类实例函数的副本，影响性能</p></li></ul><h4 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h4><blockquote><p>实现：</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">Man</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Student<span class="token punctuation">;</span><span class="token comment">// test</span><span class="token keyword">let</span> m2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'mm2'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mm2</span>m2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// my name is mm2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2 <span class="token keyword">instanceof</span> <span class="token class-name">Man</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2 <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><blockquote><p>优缺点：</p></blockquote><ul><li><p>可以继承实例属性&#x2F;方法，也可以继承原型属性&#x2F;方法。</p></li><li><p>实例既是父类的实例，也是子类的实例。</p></li><li><p>可实现函数方法的复用</p></li><li><p>调用了两次父类构造函数，生成了两份实例.</p></li></ul><h4 id="寄生继承"><a href="#寄生继承" class="headerlink" title="寄生继承"></a>寄生继承</h4><p><code>比组合多了一个立即执行函数, 消除多余的实例</code></p><blockquote><p>实现：</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">Man</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 创建一个没有实例方法的类</span>  <span class="token keyword">const</span> <span class="token function-variable function">Super</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token class-name">Super</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">Man</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>  <span class="token comment">// 将实例作为子类的原型</span>  <span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>优缺点：</p></blockquote><ul><li>实现相对较复杂一点。</li></ul><h4 id="ES6语法糖"><a href="#ES6语法糖" class="headerlink" title="ES6语法糖"></a><code>ES6</code>语法糖</h4><blockquote><p>实现：</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'my name is '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Man</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// test</span><span class="token keyword">const</span> m3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'mm3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m3<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// my name is mm3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m3 <span class="token keyword">instanceof</span> <span class="token class-name">Man</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m3 <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre><blockquote><p>优缺点：</p></blockquote><ul><li><code>ECMAscript6</code>标准的继承方案</li></ul><p><code>继承能够在一定程度上帮助我们快速便捷的使用父类的属性及方法，在 js 中实现继承的方案大致就这六种，基本都是依托原型建立的继承关系。其中的拷贝继承个人不推荐使用，ES6继承能用则用</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 作用域理解</title>
      <link href="/share/javascript-scope/"/>
      <url>/share/javascript-scope/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="什么是作用域？"><a href="#什么是作用域？" class="headerlink" title="什么是作用域？"></a>什么是作用域？</h3><p>域：范围、区域</p><p>作用域：变量起作用的一个域 –&gt; 变量起作用的一个范围</p><p>那么，在<code>js</code>中的作用域又是怎么设定的呢？直接写在<code>script</code>脚本的最外层和写在函数体内又有啥不同？</p><span id="more"></span><h3 id="作用域分类"><a href="#作用域分类" class="headerlink" title="作用域分类"></a>作用域分类</h3><p>在<code>es5 即 ECMAscript5</code>根据范围的不同，作用域分为了<strong>全局作用域</strong>和<strong>局部作用域</strong>。<strong>这个标准中只有函数拥有局部作用域。</strong></p><p>在<code>es6 中新增了块作用域。</code></p><h4 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h4><p>在全局作用域下声明的变量就是全局变量。而<strong>全局作用域是唯一的，只有一个</strong>。</p><p>你可以理解为： <code>&lt;script&gt;</code>标签下的最外层变量或者函数、以及<strong>所有能够在<code>js</code>代码的任何地方能够访问的对象拥有全局作用域。</strong>，那么不难得知：**<code>window</code>对象拥有全局作用域。**</p><p>例如代码：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'test'</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    c <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> <span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>在这个代码片段中，变量<code>a</code>、函数<code>fn1，d</code>、属性<code>c（为什么是属性？）</code>，均能够在代码的任何地方进行访问（也是‘所谓的’处在最外层），都处在同一个全局作用域中。<code>fn1 中的 c 会不断向上寻址，直到全局作用域，如果没有任何 var 声明，那么它的赋值则会被当做是 window 的外挂属性进行设置并赋值，让使用者产生了一种不用声明的假象。</code></p><h4 id="局部作用域（私有作用域）"><a href="#局部作用域（私有作用域）" class="headerlink" title="局部作用域（私有作用域）"></a>局部作用域（私有作用域）</h4><p><code>es5</code>标准中，只有函数有私有作用域。在函数体内定义的一切变量和函数，影响范围和可访问范围仅在函数体内，如上面代码片段中的变量<code>b 和 f</code>。</p><blockquote><p><strong>每个函数都有一个独立的私有作用域。</strong></p></blockquote><h4 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a><strong>块级作用域</strong></h4><h5 id="why"><a href="#why" class="headerlink" title="why?"></a><strong>why?</strong></h5><p>这个是<code>es6</code>提出的概念，那么为什么需要块作用域？</p><blockquote><p>块作用域的出现，避免了内存泄漏，例如下面代码：用来计数的循环变量泄露为全局变量</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>预解析导致的误判，误判外层变量被覆盖。<del>（这个问题我认为影响还没那么大，毕竟只要写的够规范，就不存在）</del></p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  i <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>大家可以猜一下结果，我先说错误答案：<del><code>10, 20</code></del>，相信有一部分同志已经绕进去了。</p><p>其实细看，在代码运行到<code>fn()</code>时，开始对<code>fn</code>函数体进行预解析，这个过程也可以理解为‘变量提升’，然后再开始执行函数体代码，此时的<code>i *= 10</code>其实是对局部变量的赋值操作。说到这就不难发现，此时的全局变量<code>i</code>值为<code>1</code>。</p><h5 id="定义和规范"><a href="#定义和规范" class="headerlink" title="定义和规范"></a>定义和规范</h5><p>任何<code>&#123;&#125;</code>包裹的代码都可以称之为块，而包裹在内的变量都会受块作用域的影响。而让这个块作用域生效的，正是<code>let 和 const</code>。</p><p>通过<code>let</code>和<code>const</code>声明的变量，无法在块的外部访问。而两者的区别，就是<code>let</code>的值可以被修改，<code>const</code>定义的是常量，无法被修改。</p><p>与<code>var</code>的区别：</p><blockquote><p><strong>let 和 const 定义的变量是会提升的，只是它们提升的时候不会进行默认初始化，使得它们无法被访问（因为这些变量在暂时性死区 TDZ【temporal dead zone】 里）</strong>。</p></blockquote><blockquote><p><strong>let 和 const 声明的变量，仅在‘块作用域’中生效。</strong></p></blockquote><h3 id="作用域变量的访问规则"><a href="#作用域变量的访问规则" class="headerlink" title="作用域变量的访问规则"></a>作用域变量的访问规则</h3><h4 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h4><p>在代码被执行之前，会在当前的作用域内做一次预解析，该过程会将该作用域内 <code>var</code> 和 <code>function</code> 等关键字声明的变量和函数创建并赋值为 <code>undefined</code>，并在 <code>var or function</code> 代码被执行时正式赋值，如果在声明前访问，则会提示为 <code>undefined</code>（<code>let 和 const</code> 除外）。</p><p><strong>只有关键字声明的变量才会被预解析创建</strong>，如下示例，没有通过关键字声明则会抛出异常：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a is not defined</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><h4 id="暂时性死区-TDZ"><a href="#暂时性死区-TDZ" class="headerlink" title="暂时性死区 TDZ"></a>暂时性死区 <code>TDZ</code></h4><p>前面提到，<code>let 和 const</code> 声明的变量，在其作用域内同样会经历预解析的过程，但不同于 <code>var</code>，<code>let 和 const</code> 在其声明语句前的区域该变量不可用，而这块区域，就被称之为暂时性死区（<code>TDZ...temporal dead zone</code>）。</p><p>暂时性死区是 <code>JavaScript</code> 中的一种行为，当使用 <code>let</code> 和 <code>const</code> 关键字声明变量时发生，但不影响 <code>var</code>。在 <code>ECMAScript 6</code> 中，在声明之前（其作用域范围内）访问 <code>let or const</code> 变量会导致 <code>ReferenceError</code>。</p><h4 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h4><p>当我们访问某个变量时，会优先在该作用域内查找（<code>如果在声明之前访问，则结果同上预解析过程和暂时性死区解释</code>），如果当前作用域没有该变量的预解析声明，则继续向上一级作用域查找，依次查找直到全局作用域。找到则使用，未找到则抛出异常 <code>xxx is not defined</code>。</p><p><strong>注意： 变量查找，只能往上查找，不能往下。总结就是：全局不能访问局部，局部可以拿到全局。</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>  m <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span><span class="token punctuation">&#125;</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>n</code>会优先从局部变量读取，<code>m</code>局部没有声明，向上寻址，在全局作用域中找到。</p><h3 id="作用域变量的赋值规则"><a href="#作用域变量的赋值规则" class="headerlink" title="作用域变量的赋值规则"></a>作用域变量的赋值规则</h3><p>注意：<strong>赋值的这个变量的寻址过程需要遵循作用域变量的访问规则</strong>。</p><blockquote><p>如果自己的作用域，有这个变量，那么直接给自己作用域的这个变量赋值。</p></blockquote><blockquote><p>如果自己的作用域没有这个变量，那就往上一级查找，如果找到，那就赋值，如果没有找到，就继续往上一级查找…直到全局作用域，如果找到，那就赋值，找不到就会被当做是 window 的一个属性，并进行赋值。</p></blockquote><p><strong>注意这个寻找的过程，只有 var 变量允许在声明之前赋值，let 不允许。</strong></p><h3 id="作用域变量的生命周期"><a href="#作用域变量的生命周期" class="headerlink" title="作用域变量的生命周期"></a>作用域变量的生命周期</h3><p><code>就是作用域变量在内存之中存活的时间。</code></p><blockquote><p>全局变量：生命周期是和程序同步的， 程序不关闭，变量就一直存在。</p></blockquote><blockquote><p>局部变量：生命周期是和函数执行同步的，函数执行结束变量就被删除了。</p></blockquote><blockquote><p>块作用域变量：仅存活与块代码执行时，执行结束内存就会释放。</p></blockquote><p>综上，全局变量的大量使用会导致程序变得更重。如果代码逻辑写的不够严谨，很容易造成内存泄漏吗（例如：不声明变量直接赋值，会挂载到 window 对象），影响到我们程序的运行效率。<del>如果可能，还是少设计一点全局变量吧！对大家都好…hh</del></p><blockquote><p>建议：任何一个独立的 script 标签下的代码，都应用匿名函数包裹，并自调用。避免污染全局，并造成其他未知的程序错误。</p></blockquote><p>例如：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 或者：这是自调用的几种写法，推荐用上面那种，下面的仅做了解</span><span class="token operator">~</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">!</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 作用域 </tag>
            
            <tag> 预解析 </tag>
            
            <tag> 变量提升 </tag>
            
            <tag> 暂时性死区 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript[ES6] 中的箭头函数学习及 This 指向理解</title>
      <link href="/share/javascript-arrow-function/"/>
      <url>/share/javascript-arrow-function/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="箭头函数是什么？"><a href="#箭头函数是什么？" class="headerlink" title="箭头函数是什么？"></a>箭头函数是什么？</h3><p>简单的说，箭头函数就是对匿名函数的简化。</p><p>作为<code>ES6</code>的一种新规范，箭头函数的优点不仅在于写法上的简化，而且能够根据情况，与匿名函数之间切换使用，使<code>this</code>指向不同的值。</p><p><code>so</code>，箭头函数如何使用呢？</p><span id="more"></span><h3 id="格式用法"><a href="#格式用法" class="headerlink" title="格式用法"></a>格式用法</h3><p>一般形式上的箭头函数长这样<del>（看了案例还是不明白的，可以运行代码看一下结果，或许你就明白了）</del></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="单参数单返回语句"><a href="#单参数单返回语句" class="headerlink" title="单参数单返回语句"></a><strong>单参数单返回语句</strong></h4><blockquote><p>单参数：在箭头函数中参数的括号可以省略，但不建议<del>一般项目规范箭头函数，参数位置必须加括号</del></p></blockquote><blockquote><p>单返回语句：函数体 {} 括号可以省略。（<strong>特殊说明：注意返回对象时的书写格式，避免与函数体的 {} 冲突</strong>，<del>错误示范：y &#x3D;&gt; { y };</del>）</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token parameter">y</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> y <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等价写法：</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token operator">*</span><span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token operator">=></span> y <span class="token operator">=</span> <span class="token punctuation">&#123;</span> y <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// (y) => (y = &#123; y &#125;); // (y) => y = (&#123; y &#125;);</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> y <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token comment">// 等价的匿名函数写法</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> x<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span> y <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>当只有一个执行语句，且无需返回数据时，可以返回可执行代码：<strong>此时返回的执行语句必须用小括号包裹</strong></p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> y<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>y <span class="token operator">=</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等价的匿名函数写法</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  y <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="单参数多执行语句"><a href="#单参数多执行语句" class="headerlink" title="单参数多执行语句"></a><strong>单参数多执行语句</strong></h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token parameter">x</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> flag <span class="token operator">=</span> x <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> flag <span class="token operator">?</span> x <span class="token operator">:</span> x <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 等价写法：</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">?</span> x <span class="token operator">:</span> x <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 等价的匿名函数写法</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">?</span> x <span class="token operator">:</span> x <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="多参数单返回语句"><a href="#多参数单返回语句" class="headerlink" title="多参数单返回语句"></a><strong>多参数单返回语句</strong></h4><p>与单参数单返回语句的<strong>唯一区别</strong>就是参数必须用小括号包裹。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=></span> x<span class="token operator">*</span>y<span class="token punctuation">;</span><span class="token comment">// 等价写法：</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token operator">*</span>y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">// 等价的匿名函数写法</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> x<span class="token operator">*</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="多参数多执行语句"><a href="#多参数多执行语句" class="headerlink" title="多参数多执行语句"></a><strong>多参数多执行语句</strong></h4><p>与单参数多执行语句的<strong>唯一区别</strong>就是参数必须用小括号包裹。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> flag <span class="token operator">=</span> x <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> flag <span class="token operator">?</span> y <span class="token operator">:</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 等价的匿名函数写法</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">?</span> y <span class="token operator">:</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="没有参数"><a href="#没有参数" class="headerlink" title="没有参数"></a><strong>没有参数</strong></h4><p><strong>参数位置必须加括号</strong>，其他单&#x2F;多语句执行的书写格式同上。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token comment">// 等价的匿名函数写法</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a><strong>可变参数</strong></h4><p>利用<code>rest</code>变量取值，可以利用…对个数不明参数的参数进行囊括，得到变量组成的数组。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">...</span>rest</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> sum <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rest<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sum <span class="token operator">+=</span> rest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// sum += 4; sum += 5;sum += 6  4/8/13/19</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 19</span></code></pre><p>看完是不是感觉，原来箭头函数这么简单，对没错…就是如此简单。</p><p>箭头函数在一定形式上与匿名函数没有太大的差异，写法上除了函数头尾部，函数体依旧是逻辑性的代码。</p><hr><h3 id="与普通匿名函数的区别"><a href="#与普通匿名函数的区别" class="headerlink" title="与普通匿名函数的区别"></a>与普通匿名函数的区别</h3><ul><li><p>箭头函数形式上做了改变，简化了函数体。</p></li><li><p>普通函数支持通过<code>arguments</code>获取未知个数的实参，而箭头函数不支持<code>arguments</code>用法，究其原因：箭头函数没有自身的<code>this、arguments</code>，但是…如若它的父级存在，那么在箭头函数内获取的就是其父级对应的<code>this、arguments</code>。如果在箭头函数中有这个获取自身的<code>arguments</code>需求，可以用<code>...rest</code>替代。</p></li><li><p>箭头函数在<code>ES6</code>标准下可使用，普通函数则没有这个限制。</p></li><li><p><code>this</code>指向的修改。箭头函数的<code>this</code>指向外部，常在对类的方法进行构造时使用，使函数体内的<code>this</code>始终指向这个类。如果需要 <code>this</code>指向当前源，建议使用普通函数。</p></li></ul><div class="primary"><blockquote><p>补充说明：</p></blockquote></div><blockquote><p><strong>箭头函数除了没有自身的 this、arguments 外，new.target、super 也没有</strong>。（注意只是自身没有，它会从它的外部获取，就近原则，如果外部还是没有自身的，继续向外…）；另：<strong>不可以使用 yield 命令，因此箭头函数不能用作 Generator 函数</strong>。</p></blockquote><blockquote><p><strong>箭头函数有作用域</strong>（词法作用域），词法作用域简单来讲就是，一切变量（包括 this）都根据作用域链来查找。</p></blockquote><blockquote><p>至于为啥箭头函数自身没有？这玩意儿连 ES6 规范原文里都没写原因（<a href="https://262.ecma-international.org/6.0/#sec-arrow-function-definitions">https://262.ecma-international.org/6.0/#sec-arrow-function-definitions</a>），只要知道是规范标准就行，也可以理解为是箭头函数的特性…</p></blockquote><h3 id="箭头函数中的this"><a href="#箭头函数中的this" class="headerlink" title="箭头函数中的this"></a>箭头函数中的<code>this</code></h3><blockquote><p>请记住：箭头函数自身没有 this，如若你在箭头函数中使用了它，那么它其实是<strong>箭头函数父级</strong>的 this。</p></blockquote><p>怎么理解这个<strong>箭头函数的父级</strong>？可以参考<strong>位置</strong>，它的外层的<code>console.log</code>的<code>this</code>值即为它的<code>this</code>值。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 事件函数中：</span><span class="token comment">// 普通匿名函数中的 this，指向了事件源 ele</span>ele<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ele</span>  <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 普通匿名函数 this，执行了它的调用者 window</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// window</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 下面的箭头函数外部，或者可以理解为其 父级</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ele<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 箭头函数内部</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 与上面那个 log 一致，都是指向的 window</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>又比如：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">parentFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 这是普通匿名函数的内部，它的调用者是 window，所以下面这句 log 就是 window</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这里是箭头函数内部，上面那句 log 就是外部，而外部 this 指向了 window，所以下面这句 log 的值也是 window</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">parentFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// window.parentFn()</span></code></pre><p>结合上面两种方式：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">ele<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 这里是普通匿名函数的内部，this 指向了它的调用者：ele</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这里的 this 取决于外面的 log，同为 ele</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="谈谈我对箭头函数与普通匿名函数的this区分理解"><a href="#谈谈我对箭头函数与普通匿名函数的this区分理解" class="headerlink" title="谈谈我对箭头函数与普通匿名函数的this区分理解"></a>谈谈我对箭头函数与普通匿名函数的<code>this</code>区分理解</h4><p>从上面的代码，我们可以看到一个现象：就是只要有箭头函数存在，那么它的<code>this</code>，始终都是和外面一层打印的<code>this</code>一样。而普通的匿名函数，不管是否处于其他匿名函数&#x2F;箭头函数内部（不管层级多深），它自身的<code>this</code>都只会指向它的调用者。</p><p><strong>普通匿名函数的调用者又是个啥？</strong></p><blockquote><p>通过 fn() 方式调用：函数在通过函数名调用时，调用者就是 window，可以理解为 window.fn()，只不过 window 省略了。</p></blockquote><blockquote><p>通过 obj.fn() 方式调用：此时这个普通匿名函数是对象身上一个方法，对象调用自身的方法，调用者就是这个 obj。</p></blockquote><blockquote><p>如果是事件处理函数，例如 ele.onclick 触发的事件，虽然没有显式的调用者，但是却由 ele 引起，它的调用者可以理解为 ele。</p></blockquote><div class="success"><blockquote><p>总结：箭头函数 this 取决于其函数体的位置（与调用者无关），值始终与其外层的 this 一致。普通匿名函数 this 取决于其调用者（与位置无关），值始终是调用者。</p></blockquote></div>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> ECMAScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 箭头函数 </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 中的事件组成、分类、绑定与监听</title>
      <link href="/share/javascript-event/"/>
      <url>/share/javascript-event/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="What"><a href="#What" class="headerlink" title="What?"></a>What?</h3><p>主要是介绍事件相关知识。涵盖事件的组成部分、常见事件分类、以及当我们为元素绑定事件监听以后，如何阻止事件冒泡（捕获）、阻止默认事件、委派、如何解绑…</p><span id="more"></span><h3 id="事件是由哪些元素构成的？"><a href="#事件是由哪些元素构成的？" class="headerlink" title="事件是由哪些元素构成的？"></a>事件是由哪些元素构成的？</h3><h4 id="事件源"><a href="#事件源" class="headerlink" title="事件源"></a>事件源</h4><p>源：源头，来源。描述事件的产生源头，例如给一个按钮绑定了点击事件，那么这个按钮就是事件源 —— 调用者。</p><blockquote><p>btn.onclick &#x3D; function(){}，btn 即为事件源</p></blockquote><h4 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h4><p>事件类型，比如已知的点击事件、 移入移出事件、表单提交事件、浏览器事件…</p><blockquote><p>注意：类似于 onclick 这种方式的事件绑定，它的类型是 click。on 前缀只是绑定事件的一种方式 onclick 不是类型。</p></blockquote><h4 id="事件处理函数"><a href="#事件处理函数" class="headerlink" title="事件处理函数"></a>事件处理函数</h4><p>事件被触发以后，所执行的函数体，一般情况下是匿名函数。</p><blockquote><p>function(){}</p></blockquote><h3 id="事件对象-e"><a href="#事件对象-e" class="headerlink" title="事件对象 e"></a>事件对象 <code>e</code></h3><h4 id="事件对象获取"><a href="#事件对象获取" class="headerlink" title="事件对象获取"></a>事件对象获取</h4><blockquote><p>window.event 以前只能在 IE 中能使用</p></blockquote><blockquote><p>Chrome 和 Firefox 提供了另一种方法 即 提供一个 参数。（事件处理函数的第一个默认参数）</p></blockquote><p>存在兼容性，兼容处理：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>e<span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="事件目标元素获取"><a href="#事件目标元素获取" class="headerlink" title="事件目标元素获取"></a>事件目标元素获取</h4><p>兼容性处理：</p><blockquote><p>target &#x3D; e.target || e.srcEle (IE)</p></blockquote><h4 id="获取触发事件的鼠标按键"><a href="#获取触发事件的鼠标按键" class="headerlink" title="获取触发事件的鼠标按键"></a>获取触发事件的鼠标按键</h4><p>获取：非<code>IE</code>下为<code>e.button</code>，<code>IE</code>下为<code>e.which</code>。</p><p>对应值：</p><table><thead><tr><th>环境</th><th>鼠标左键</th><th>鼠标滚轮</th><th>鼠标右键</th></tr></thead><tbody><tr><td>IE</td><td>1</td><td>2</td><td>3</td></tr><tr><td>非 IE</td><td>0</td><td>1</td><td>2</td></tr></tbody></table><h4 id="获取光标位置"><a href="#获取光标位置" class="headerlink" title="获取光标位置"></a>获取光标位置</h4><ul><li><code>e.clientX/clientYY</code>获取到的是<strong>触发点</strong>相对浏览器可视区域左上角距离，不随页面滚动而改变。</li><li><code>e.pageX/pageY</code>获取到的是<strong>触发点</strong>相对文档区域左上角距离，会随着页面滚动而改变</li></ul><p><strong>拓展，注意 display 为 none 时， 宽高均为 0，拿数据的时候注意判断</strong>，<code>ele</code>指的元素。</p><ul><li><p><code>ele.offsetX/offsetY</code>获取到是<strong>触发点</strong>相对被触发<code>dom</code>的左上角距离，不过左上角基准点在不同浏览器中有区别，其中在<code>IE</code>中以内容区左上角为基准点不包括边框，如果<strong>触发点</strong>在边框上会返回负值，而<code>chrome</code>中以边框左上角为基准点。</p></li><li><p><code>ele.layerX/layerY</code>获取到的是<strong>触发点</strong>相对被触发<code>dom</code>左上角的距离，数值与<code>offsetX/offsetY</code>相同，这个变量就是<code>firefox</code>用来替代<code>offsetX/offsetY</code>的。（有个前提条件就是，被触发的 dom 需要是有定位的元素，否则会返回相对<code>html</code>文档区域左上角的距离）</p></li><li><p><code>ele.offsetWidth/offsetHeight</code><strong>元素</strong>的宽度&#x2F;高度，包括<code>border</code>。</p></li><li><p><code>ele.offsetLeft/offsetTop</code><strong>元素</strong>到有定位的父元素的左边&#x2F;上边的距离 ，如果父元素都没有定位 ，那就是相对于 body 上边的距离。</p></li><li><p><code>ele.offsetParent</code>拿到有定位的父元素，都没定位，那么拿到的就是<code>body</code>。</p></li><li><p><code>ele.clientWidth/clientHeight</code>元素的宽度&#x2F;高度，不含<code>border</code>。</p></li><li><p><code>ele.clientLeft/clientTop</code>元素的左&#x2F;上边框宽度</p></li></ul><p><strong>火狐以外的所有浏览器使用（兼容 IE）</strong></p><ul><li><p><code>window.screenLeft</code>浏览器窗口相对于显示器(屏幕)左边的距离</p></li><li><p><code>window.screenTop</code>浏览器窗口相对于显示器(屏幕)上边的距离</p></li></ul><p><strong>火狐浏览器使用（不兼容 IE）</strong></p><ul><li><p><code>window.screenX</code>浏览器窗口相对于显示器(屏幕)左边的距离</p></li><li><p><code>window.screenY</code>浏览器窗口相对于显示器(屏幕)上边的距离</p></li></ul><h4 id="键盘事件对象的属性"><a href="#键盘事件对象的属性" class="headerlink" title="键盘事件对象的属性"></a>键盘事件对象的属性</h4><blockquote><p>ctrlkey ctrl 按钮是否被按下，值为 boolean</p></blockquote><blockquote><p>shiftkey shift 按钮是否被按下，值为 boolean</p></blockquote><blockquote><p>altkey alt 按钮是否被按下，值为 boolean</p></blockquote><p>…</p><p><code>keyCode</code>获取触发<code>kayup</code>事件的键盘按钮编号，可以通过<code>keyCode</code>为具体的某一个按键添加对应的功能逻辑。</p><hr><h3 id="常见的几种事件类型"><a href="#常见的几种事件类型" class="headerlink" title="常见的几种事件类型"></a><strong>常见的几种事件类型</strong></h3><h4 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h4><ul><li><code>click</code>—鼠标左键单击。</li><li><code>dblclick</code>—鼠标双击。</li><li><code>contextmenu</code>—鼠标右键点击事件。</li><li><code>mousedown</code>—鼠标按下。</li><li><code>mouseup</code>—鼠标抬起(松开按键)。</li><li><code>mousemove</code>—鼠标移动。</li><li><code>mouseenter</code>—鼠标移入。</li><li><code>mouseover</code>—鼠标移入。</li><li><code>mouseleave</code>—鼠标离开。</li><li><code>mouseout</code>—鼠标离开。</li></ul><h5 id="mouseenter和mouseover的区别："><a href="#mouseenter和mouseover的区别：" class="headerlink" title="mouseenter和mouseover的区别："></a><code>mouseenter</code>和<code>mouseover</code>的区别：</h5><blockquote><p><code>over</code>会给子元素同时绑定有冒泡的行为</p></blockquote><blockquote><p><code>enter</code>没有冒泡，不会给其子元素绑定事件</p></blockquote><h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><ul><li><code>keydown</code>按下键盘键</li><li><code>keyup</code>紧接着<code>keydown</code>事件触发（只有按下字符键时触发）。</li><li><code>keypress</code>释放键盘键。</li></ul><h4 id="浏览器事件"><a href="#浏览器事件" class="headerlink" title="浏览器事件"></a>浏览器事件</h4><ul><li><code>load</code>—页面资源加载结束时执行, 通过这个函数可以使<code>js</code>放在<code>head</code>中不影响正常加载。</li><li><code>scroll</code>—浏览器滚动时执行，与滚轮无关，只和浏览器的滚动条是否滚动有关系。</li><li><code>resize</code>—浏览器的尺寸发生变化时触发执行。<del>（可以用<code>js</code>实现，响应式布局）不咋用</del></li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h4><p><strong><code>touchstart</code>会先于<code>click</code>事件执行，如果不想执行<code>click</code>，可以阻止默认事件。</strong></p><ul><li><code>touchstart</code>手指触摸屏幕时触发，即使已经有手指在屏幕上也会触发。</li><li><code>touchmove</code>手指在屏幕滑动时触发。</li><li><code>touchend</code>手指从屏幕时移开时触发。</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript">ele<span class="token punctuation">.</span><span class="token function-variable function">ontouchstart</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h4><ul><li><code>change</code>—焦点前后比较，发生了改变则触发该函数。</li><li><code>input</code>—只要输入了内容就会触发，一直输入一直触发。</li><li><code>focus</code>—获取焦点。</li><li><code>blur</code>—失去焦点。</li><li><code>submit</code>—提交事件。</li></ul><hr><h3 id="事件绑定与事件解绑"><a href="#事件绑定与事件解绑" class="headerlink" title="事件绑定与事件解绑"></a><strong>事件绑定与事件解绑</strong></h3><h4 id="添加一个事件监听"><a href="#添加一个事件监听" class="headerlink" title="添加一个事件监听"></a>添加一个事件监听</h4><h5 id="addEventListener"><a href="#addEventListener" class="headerlink" title="addEventListener"></a><code>addEventListener</code></h5><p><strong>注意：通过这种方式，可以同时绑定多个同类型事件。</strong></p><ul><li>第一个参数：事件的类型，不需要加<code>on</code>前缀。</li><li>第二个参数：是函数执行的内容。</li><li>第三个参数：冒泡还是捕获<code>false</code>为冒泡，<code>true</code>为捕获，默认为冒泡<code>false</code>。</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript">ele<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是绑定的第一个事件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ele<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是绑定的第二个事件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="attachEvent"><a href="#attachEvent" class="headerlink" title="attachEvent"></a><code>attachEvent</code></h5><ul><li>第一个参数：<code>on</code> + 事件类型。</li><li>第二个参数：是函数，需要执行的代码。</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript">ele<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'onclick'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是绑定的第一个事件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ele<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'onclick'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是绑定的第二个事件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h5><p>存在兼容性的问题，可以自己通过封装函数解决兼容问题。</p><blockquote><p>addEventListener：-ie 8 以上版本的浏览器支持，<strong>顺序绑定 -&gt; 顺序执行</strong></p></blockquote><blockquote><p>attachEvent：**-ie 10 和 ie 9，顺序绑定 顺序执行。-ie 8 及以下是顺序绑定 -&gt; 倒叙执行。**</p></blockquote><h4 id="解绑事件"><a href="#解绑事件" class="headerlink" title="解绑事件"></a>解绑事件</h4><h5 id="removeEvent-‘事件类型’，fn"><a href="#removeEvent-‘事件类型’，fn" class="headerlink" title="removeEvent(‘事件类型’，fn)"></a><code>removeEvent</code>(‘事件类型’，fn)</h5><blockquote><p>addEventListener -&gt; removeEventListener 解绑的时候，事件类型和事件处理函数(<strong>地址</strong>)必须是一样的。</p></blockquote><p><strong>注意：需要解绑的时候，事件处理函数 fn 不能是匿名函数，否则无法正常解绑。fn 在绑定和解绑过程中，书写结构要完全保持一致。</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 注意：由于匿名 fn地址不一样 这种方式 解绑不了</span>ele<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Error</span>document<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ele<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 采用这种方式进行函数解绑</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ele<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ele<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h5 id="detachEvent-‘事件类型’，fn"><a href="#detachEvent-‘事件类型’，fn" class="headerlink" title="detachEvent(‘事件类型’，fn)"></a><code>detachEvent</code>(‘事件类型’，fn)</h5><p>要求同上。</p><blockquote><p>attachEvent -&gt; detachEvent</p></blockquote><hr><h3 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a><strong>阻止默认事件</strong></h3><p>比如<code>a</code>标签有<code>href</code>时，会自动跳转，如果要阻止这个行为：</p><blockquote><p>方式一：e.parentDefault() 非 IE 浏览器</p></blockquote><blockquote><p>方式二：return false; 使用 return false 阻止默认事件，只能将 return false 放在函数的最后面</p></blockquote><blockquote><p>方式三：e.returnValue &#x3D; false；</p></blockquote><h3 id="事件冒泡与事件捕获"><a href="#事件冒泡与事件捕获" class="headerlink" title="事件冒泡与事件捕获"></a><strong>事件冒泡与事件捕获</strong></h3><p><strong>冒泡：从子元素到根元素，从小到大。捕获：从根元素到子元素，从大到小。</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* ​      inner ​        center ​          outer​            body​              html​                documwnt​                  window​    事件执行机制 冒泡 捕获​    */</span></code></pre><h4 id="阻止冒泡（存在低版本兼容）"><a href="#阻止冒泡（存在低版本兼容）" class="headerlink" title="阻止冒泡（存在低版本兼容）"></a>阻止冒泡（存在低版本兼容）</h4><blockquote><p>e.stopPropagation(); or e.cancelBubble &#x3D; true;</p></blockquote><p>只有绑定了同类型事件才会触发冒泡。</p><p>阻止冒泡机制，只针对事件源本身，如果通过事件委派的形式为其子元素添加事件，那么就不能对其子元素实行阻止冒泡</p><hr><h3 id="事件委派"><a href="#事件委派" class="headerlink" title="事件委派"></a><strong>事件委派</strong></h3><p>把这个事件绑定在父元素身上，然后由父元素委派给子元素。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 通过 e.target 去判断 目标源元素是哪一个</span>  <span class="token comment">// console.log(e.target)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>className <span class="token operator">==</span> <span class="token string">'dv'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'点到小的了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 比如这里，设置阻止冒泡就会失效</span>    <span class="token comment">//e.target.stopPropagation()</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 事件冒泡 </tag>
            
            <tag> 事件委派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 中的符号集合</title>
      <link href="/share/javascript-mark/"/>
      <url>/share/javascript-mark/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>逆水行舟，不进则退。</p><p>随着<code>ECMAScript</code>标准的不断更新迭代，你会发现在<code>js</code>代码中，符号越来越多，稍不学习就会不懂其含义，更别谈使用了。</p><p>本文就个人在项目中使用到的符号结合代码进行介绍 😮‍💨😮‍💨😮‍💨<del>当然类似基础运算、幂运算、自增自减、大小比较、三目运算符等等就忽略了</del>…</p><span id="more"></span><h3 id="逻辑位运算-、-amp-、-、-、-lt-lt-、-gt-gt"><a href="#逻辑位运算-、-amp-、-、-、-lt-lt-、-gt-gt" class="headerlink" title="逻辑位运算|、&amp;、~、^、&lt;&lt;、&gt;&gt;"></a>逻辑位运算<code>|、&amp;、~、^、&lt;&lt;、&gt;&gt;</code></h3><p>将需要运算的两个值转为二进制数，进行位<strong>或、与、非、异或、左移、右移</strong>运算。 对应衍生的有<code>~=、&amp;=、|=、^=、&lt;&lt;=、&gt;&gt;=</code>。🙄🙄<br>🙄<del>这个相对来说用的很少，但你必须要了解。</del></p><p><code>eg.</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>a <span class="token operator">&amp;=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// a = a &amp; 3 = 5 &amp; 3 = 1;</span></code></pre><blockquote><p><code>&gt;&gt;</code> 和 <code>&lt;&lt;</code> 右移左移运算，将操作数转为二进制后，返回移动对应位数后的新值，移动过程中，超出部分去除，补充部分补 0</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">//  00000000000000000000000000000101</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//  00000000000000000000000000000010</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">>></span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  00000000000000000000000000000001</span></code></pre><p>除此之外还有无符号右位移 <code>&gt;&gt;&gt;</code>，与右位移 <code>&gt;&gt;</code>的区别就是前者的符号位始终为 0，即正数。</p><h3 id="逗号操作符"><a href="#逗号操作符" class="headerlink" title="逗号操作符"></a>逗号操作符</h3><p>对逗号表达式进行求值，并返回最后一项的值。<del>这个目前也不是特别常见</del></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a = 2</span></code></pre><h3 id="解构赋值运算符"><a href="#解构赋值运算符" class="headerlink" title="解构赋值运算符..."></a>解构赋值运算符<code>...</code></h3><p>比较常见的一个需求，同时在面试的时候也有可能会被问到。<strong>如何对未知 keys 的对象解构，拿到除属性 xx 外的其他属性集合？</strong></p><p>有的童鞋可能马上就想到<code>copy 再 delete obj.xx</code>…<del>当然我不建议这么干</del></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> <span class="token operator">...</span>other <span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; b: 'b', c: false &#125;</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>arr0<span class="token punctuation">,</span> <span class="token operator">...</span>arrOther<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrOther<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3, 4, 5]</span></code></pre><h3 id="可选链操作符"><a href="#可选链操作符" class="headerlink" title="可选链操作符?."></a>可选链操作符<code>?.</code></h3><p><strong>很常用，必须掌握</strong>。允许读取位于连接对象链深处的属性的值，作用类似<code>.</code>区别就是前者<code>?.</code>允许对象为<code>null/undefined</code>，当访问的对象为<code>null/undefined</code>时，不会执行<code>.</code>后面的逻辑，且不会抛出异常（此时返回<code>undefined</code>）。除此外，<code>?.</code>也可作用于数组、函数…<code>eg.</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 假设 obj 存在一个 子属性 hh: &#123; a: 11 &#125; （比如通过接口返回的一个字段属性，可能有值，可能没有）</span><span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 假设这个函数是 undefined，（比如某些通过 props 传递 fn 场景，可能为 undefined）</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>hh<span class="token operator">?.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此处 hh 没有值，返回一个 undefined， 如果不写 ?. 直接 obj.hh.a 会抛异常 a of undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token operator">?.</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 函数调用，fn 为空，返回一个 undefined，（）内传入函数实参 args</span><span class="token comment">// 数组值访问 (数组可能为 null 或 undefined) 同上</span><span class="token comment">// arr?.[index]?.xxx;</span><span class="token comment">// 支持链式操作</span><span class="token comment">// obj?.xx?.xx?.xxx</span></code></pre><h3 id="空值合并运算符"><a href="#空值合并运算符" class="headerlink" title="??空值合并运算符"></a><code>??</code>空值合并运算符</h3><p>当左侧操作数为<code>null</code>或<code>undefined</code>时，其返回右侧的操作数，否则返回左侧的操作数 <strong>(注意<code>&quot;&quot;、0、false、NaN</code>等值会返回左侧值)</strong></p><ul><li>短路运算</li></ul><p>与逻辑或<code>||</code>运算符不同，逻辑或会在左操作数为<code>false</code>值时返回右侧操作数。也就是说，如果你使用<code>||</code>来为某些变量设置默认的值时，你可能会遇到意料之外的行为。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token string">'saasf'</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// saasf</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">??</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span></code></pre><ul><li>与<code>&amp;&amp;</code>或<code>||</code>操作符共用</li></ul><p>若空值合并运算符<code>??</code>直接与 <code>AND（&amp;&amp;）</code>和<code>OR（||）</code>操作符组合使用<code>??</code>是不行的。这种情况下会抛出<code>SyntaxError</code>, 所以在使用时需要显示表明优先级。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">'foo'</span><span class="token punctuation">;</span> <span class="token comment">// 返回 "foo"</span></code></pre><ul><li>与<code>?.</code>联动</li></ul><p>一般用于接口数据使用或者<code>props</code>传递等场景</p><pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">PageAProps</span> <span class="token punctuation">&#123;</span>  title<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">PageA</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token operator">:</span> PageAProps<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>props<span class="token operator">?.</span>title <span class="token operator">??</span> <span class="token string">'页面A'</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// props?.title ?? '页面A' 联动设置默认的值</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vi、vim 编辑器学习</title>
      <link href="/tools/vi-vim/"/>
      <url>/tools/vi-vim/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="Why-study"><a href="#Why-study" class="headerlink" title="Why study?"></a>Why study?</h3><p>在<code>linux</code>系统中，如果需要对文件进行修改编辑，一般可以使用<code>vi/vim</code>编辑器。<code>vim</code>是<code>vi</code>的升级版本，所以同样兼容<code>vi</code>的所有指令，它们都是多模式编辑器。</p><p><code>git-bash</code>工具在<code>windows</code>中实现了该功能，因此可以直接在<code>git-bash</code>中使用<code>vi/vim</code>。</p><p><del>一次偶然的需求，在<code>rancher</code>管理平台里对正在运行的容器日志在线修改，领导随口提了一句用<code>vi</code>，当时的我很懵逼，也很尴尬。🙄🤥😌 然后就查阅了相关资料，自己动手敲了试了一下，感觉还是有必要学习一下。</del></p><span id="more"></span><h3 id="vi-vim模式介绍"><a href="#vi-vim模式介绍" class="headerlink" title="vi/vim模式介绍"></a><code>vi/vim</code>模式介绍</h3><p><code>vi</code>编辑器有两种操作模式：</p><blockquote><p><strong>命令模式</strong>：输入的每个字符都是对正在编辑的文本文件执行某些操作的命令。<strong>部分按键按下会切换命令模式至插入模式</strong>，后面详细介绍。</p></blockquote><blockquote><p><strong>插入模式</strong>：输入的每个字符都会添加到文件中的文本中。<strong>按&lt;Esc&gt; ( Escape ) 键关闭插入模式，同时光标会向前移一位</strong>。</p></blockquote><p><strong><code>注意：UNIX 和vi都区分大小写。确保不要使用大写字母代替小写字母；否则结果可能不会是你所期望的。</code></strong></p><hr><h3 id="编辑器的启动和关闭"><a href="#编辑器的启动和关闭" class="headerlink" title="编辑器的启动和关闭"></a>编辑器的启动和关闭</h3><h4 id="启动vi-vim编辑器（进入vi）"><a href="#启动vi-vim编辑器（进入vi）" class="headerlink" title="启动vi/vim编辑器（进入vi）"></a>启动<code>vi/vim</code>编辑器（进入<code>vi</code>）</h4><blockquote><p>vi 文件名. （说明：如果文件存在，则打开该文件，如果参文件不存在，则会新建该文件。不是立即创建，而是在保存的时候创建）</p></blockquote><p><strong>注意</strong>：如果在<code>vi</code>编辑过程中遇到不可逆的操作导致强制退出的情况，直接输入上面命令会抛异常。当然可以在抛异常后根据提示输入<code>r</code>恢复；也可以直接在<code>vi</code>启动的时候添加<code>-r</code>参数避免这个异常提示。</p><blockquote><p>vi -r 文件名</p></blockquote><p>进入过后，默认是插入模式，可以对文件内容做任意修改。</p><h4 id="关闭vi-vim编辑器"><a href="#关闭vi-vim编辑器" class="headerlink" title="关闭vi/vim编辑器"></a>关闭<code>vi/vim</code>编辑器</h4><p>通常在你想离开<code>vi</code>界面，并且保存你所修改的内容的时候使用。或者不保存直接退出。</p><blockquote><p><strong>只要键入冒号(:)，光标就会移动到底部命令行</strong>。</p></blockquote><blockquote><p>输入 <strong>:wq 或者 :x</strong> 回车即可完成保存并退出；</p></blockquote><blockquote><p>输入 <strong>:q! 或者 :q</strong> 回车即可不保存直接退出；</p></blockquote><hr><h3 id="编辑器中的光标移动"><a href="#编辑器中的光标移动" class="headerlink" title="编辑器中的光标移动"></a>编辑器中的光标移动</h3><p>与其他编辑器不同的是，鼠标无法在<code>vi</code>操作界面移动或者指定光标的位置，只能通过键盘完成这个操作。</p><p>在某些平台上，可以直接使用方向（箭头）键，但是部分不包括箭头键的键盘又该如何使用呢？<code>vi</code>也是考虑过这个问题，可以通过字母键来移动。</p><p>值得一提的是：方向键在两种模式下均可使用，而<strong>代替键仅可在命令模式下使用</strong>。（避免与插入模式下输入的字符冲突）</p><blockquote><p>左：h 或者 ← 键，将光标左移一个字符。</p></blockquote><blockquote><p>右：l 或者 → 键，将光标又以一个字符。</p></blockquote><blockquote><p>上：k 或者 ↑ 键，将光标上移一行。</p></blockquote><blockquote><p>下：j 或者 ↓ 键，将光标下移一行。</p></blockquote><blockquote><p>跳转到首行：gg 或者 :0 或者 :1 键</p></blockquote><blockquote><p>跳转到最后一行：G 键</p></blockquote><blockquote><p>跳转至 n 行：输入 :n 回车，这里 n 代表数字。</p></blockquote><blockquote><p>跳转至当前行行头：0 或者 ^ 键。</p></blockquote><blockquote><p>跳转到当前行行尾：$ 键。</p></blockquote><blockquote><p>跳转到上个单词的开头：b 键。</p></blockquote><blockquote><p>跳转到下个单词的开头：w 键。</p></blockquote><p><strong><code>注意：方向键（左右）只能在当前行的可编辑区域进行移动，不会跨行边界</code></strong></p><hr><h3 id="屏幕操作"><a href="#屏幕操作" class="headerlink" title="屏幕操作"></a>屏幕操作</h3><p>以下命令允许<code>vi</code>编辑器屏幕（或窗口）向上或向下移动几行并进行刷新。</p><blockquote><p>上翻一屏：Ctrl + b（PageUp）。</p></blockquote><blockquote><p>上翻半屏：Ctrl + u。</p></blockquote><blockquote><p>下翻一屏：Ctrl + f（PageDown）。</p></blockquote><blockquote><p>下翻半屏：Ctrl + d。</p></blockquote><hr><h3 id="撤销、删除和复制粘贴"><a href="#撤销、删除和复制粘贴" class="headerlink" title="撤销、删除和复制粘贴"></a>撤销、删除和复制粘贴</h3><h4 id="回退、撤销"><a href="#回退、撤销" class="headerlink" title="回退、撤销"></a>回退、撤销</h4><blockquote><p>Ctrl + u 撤消您刚才所做的一切（而非一步操作）。</p></blockquote><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><blockquote><p>删除整个当前行：dd</p></blockquote><blockquote><p>删除多行：dnd 或者 ndd，n 指的行数</p></blockquote><blockquote><p>删除单个字符：x，类似于 backspace 键效果</p></blockquote><blockquote><p>删除多个字符：nx，n 指的数字，从光标位置开始</p></blockquote><h4 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h4><blockquote><p>粘贴：p，将粘贴内容放到当前行文本之后。</p></blockquote><blockquote><p>复制当前行：yy</p></blockquote><blockquote><p>复制多行：nyy 或者 yny，n 值行数</p></blockquote><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p><del>反正我是没怎么用过这个修改指令，习惯使然，有这个需求的时候我都是先删除再添加，避免出错 🙈🙉🙊</del>详见末尾<strong>其他指令</strong>。</p><blockquote><p>光标位置的字符替换：r 键 + 输入你要替换的字符</p></blockquote><hr><h3 id="模式切换-and-插入操作"><a href="#模式切换-and-插入操作" class="headerlink" title="模式切换 and 插入操作"></a>模式切换 and 插入操作</h3><p>在命令模式下，想要输入文本内容，就需要切换到编辑模式。涉及的键有好几个，分别是<code>a i o s</code>，它们的区别：</p><blockquote><p>a：在光标后追加文本（光标会向后移动一位）</p></blockquote><blockquote><p>i：在光标前插入文本（光标位置不会变化）</p></blockquote><blockquote><p>o：新建并跳转至光标行的下一行</p></blockquote><blockquote><p>s：删除光标后一个字符，并切换至插入模式</p></blockquote><h3 id="文本搜索"><a href="#文本搜索" class="headerlink" title="文本搜索"></a>文本搜索</h3><p><del>光速打脸，刚说修改字符的命令没啥用，这就来了</del></p><p>场景：输入你要搜索的文本，替换为你想要的新内容。</p><blockquote><p>从上到下搜索：&#x2F; + 你要搜索的内容 + 回车</p></blockquote><blockquote><p>从下向上搜索：? + 你要搜索的内容 + 回车。</p></blockquote><blockquote><p>跳转至搜索到的下一个匹配项：n 键，一直按，一直向后匹配</p></blockquote><h3 id="获取行号"><a href="#获取行号" class="headerlink" title="获取行号"></a>获取行号</h3><blockquote><p>获取当前光标所在行的行号：:.&#x3D; 键回车</p></blockquote><blockquote><p>获取文件总行数（末尾行号）：:&#x3D; 键回车</p></blockquote><h3 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a><a href="https://www.cs.colostate.edu/helpdocs/vi.html">其他指令</a></h3>]]></content>
      
      
      <categories>
          
          <category> 工具学习 </category>
          
          <category> Vi/Vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vi </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何发布一个 npm-package?</title>
      <link href="/tools/npm-publish/"/>
      <url>/tools/npm-publish/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="什么是npm-package？"><a href="#什么是npm-package？" class="headerlink" title="什么是npm-package？"></a>什么是<code>npm-package</code>？</h3><p>先说模块，<code>node</code>模块大致可以分为三类：内置模块（由<code>nodeJs</code>原生提供，可直接使用）、自定义模块（<code>module.export/require、export/import</code>）、第三方模块（需要通过<code>npm install</code>下载后才能使用）。</p><p>我这里提到<code>npm-package</code>的发布，自然是指的三方模块。后续如果有使用需求，可以直接<code>install</code>安装使用，大大提高咱的开发效率。</p><blockquote><p>本文主要针对<code>publish</code>做说明。至于<code>package</code>模块如何定义，以及具体如何配置，后续会写另外一篇文章补充。</p></blockquote><span id="more"></span><h3 id="创建一个npm账号"><a href="#创建一个npm账号" class="headerlink" title="创建一个npm账号"></a>创建一个<code>npm</code>账号</h3><p>如果你有相关的账号，请跳过该步骤；如果你没有<code>npm</code>的账号，那就需要先注册。注册有两种方式：官网注册 &#x2F; 命令行创建</p><h4 id="官网注册"><a href="#官网注册" class="headerlink" title="官网注册"></a>官网注册</h4><p>进入<a href="https://www.npmjs.com/signup">https://www.npmjs.com/signup</a>输入用户、密码、邮箱注册。</p><h4 id="命令行创建"><a href="#命令行创建" class="headerlink" title="命令行创建"></a>命令行创建</h4><blockquote><p><strong>如果你通过这种方式创建账号，创建成功过后会默认你已经登录，无需使用登录指令再次登录。</strong></p></blockquote><p>如果你配置过<code>npm-registry</code> <del>（例如你配置了淘宝镜像、或者你所在公司的<code>private-npm</code>）</del>，请记得在发布之前切换到<code>npm</code>的官方源<code>https://registry.npmjs.org</code>。</p><h5 id="重置registry地址"><a href="#重置registry地址" class="headerlink" title="重置registry地址"></a>重置<code>registry</code>地址</h5><p><strong>重置的前提</strong>你这个包是要发布到<code>npmjs</code>，如果你要发布至你所配置的<code>registry</code>，那就不需要操作。</p><blockquote><p>npm config set registry <a href="https://registry.npmjs.org/">https://registry.npmjs.org</a></p></blockquote><p>总有一些懒人不想这么干，毕竟包发布完了过后还要切回原来的<code>registry</code>，觉得麻烦 <del>（不会承认是我）</del>，有没有别的办法咧？</p><blockquote><p>在使用 addUser 指令时，指定当前注册并登录的 registry，覆盖全局配置中的 registry.（不会修改全局配置） 具体用法如下：</p></blockquote><h5 id="开始创建"><a href="#开始创建" class="headerlink" title="开始创建"></a>开始创建</h5><blockquote><p>npm addUser --registry&#x3D;<a href="https://registry.npmjs.org/">https://registry.npmjs.org</a></p></blockquote><p>如果你是通过<code>npm config set registry xx</code>重置的<code>registry</code>：</p><blockquote><p>npm addUser</p></blockquote><p>回车，你会得到一个<code>Username、Password、Email</code>的输入提示，录入你的用户信息（注意<code>password</code>不是明文显示的，会被隐藏）。</p><p>录完回车，得到一个<code>Enter one-time password from your authenticator app</code>的输入提示，录入验证码。<del>这个验证码会发送到你上面填的邮箱里</del></p><p>继续回车，提示<code>Logged in as xxx on https://registry.npmjs.org/.</code>登录成功。</p><hr><h3 id="准备好模块"><a href="#准备好模块" class="headerlink" title="准备好模块"></a>准备好模块</h3><blockquote><p><strong>友情提示：最好为你的模块包添加私有前缀，避免与已经发布的包冲突，导致发布不成功…</strong></p></blockquote><p>初始化一个项目，<code>-y</code>使用默认配置项。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> test-publish-project<span class="token builtin class-name">cd</span> ./test-publish-project<span class="token function">npm</span> init -y</code></pre><p>创建一个<code>index.js</code>的入口文件（同<code>package.json</code>中指定的<code>main</code>字段），随便写点东西… <del>这里只是一个简单演示</del></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是一个测试用的模块入口'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h3 id="登录npm"><a href="#登录npm" class="headerlink" title="登录npm"></a><strong>登录<code>npm</code></strong></h3><p>前面有提到：通过<code>addUser</code>方式创建的账户在创建成功后会默认登录，所以如果你是通过命令行的方式注册的，可以跳过当前步骤…</p><blockquote><p>npm login</p></blockquote><p>同时你也可以登录到指定<code>registry</code>，避免<code>publish</code>过程中抛出<code>401</code>。</p><blockquote><p>npm login --registry&#x3D;xxx</p></blockquote><h3 id="发布（publish）"><a href="#发布（publish）" class="headerlink" title="发布（publish）"></a><strong>发布（<code>publish</code>）</strong></h3><p>如果你不是通过<code>npm config set registry</code>修改的源地址，那么发布的时候同样要指定<code>registry</code>参数 😢😢😢。</p><blockquote><p>npm publish --registry&#x3D;xxx</p></blockquote><p>有没有觉得这个很鸡肋？别急…咱这就解决</p><p>修改<code>package.json</code>，添加<code>publishConfig</code>配置项：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token comment">// other config...</span>  <span class="token property">"publishConfig"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"registry"</span><span class="token operator">:</span> <span class="token string">"https://registry.npmjs.org/"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>好了（意味着，以后只有<code>login or addUser</code>的时候需要指定<code>registry</code>🎉🎉🎉），现在可以愉快的直接使用<code>npm publish</code>。</p><p>发布成功！<del>虽然遇到了一点点小问题，写在下面了</del></p><p>打开 <a href="https://www.npmjs.com/">https://www.npmjs.com</a> 找了一下我的包，纳尼 🤔🤔🤔，居然搜不到。。<del>可能是因为缓存?</del></p><p>通过路径直接搜索：<a href="https://www.npmjs.com/package/your-project-name">https://www.npmjs.com/package/your-project-name</a> 能找到，通过<code>npm install packagename</code>也成功了，说明包实实在在是发布上去了…</p><h3 id="版本更新迭代"><a href="#版本更新迭代" class="headerlink" title="版本更新迭代"></a><strong>版本更新迭代</strong></h3><p>添加&#x2F;修改你的功能，修改完成以后…</p><h4 id="手动修改版本号"><a href="#手动修改版本号" class="headerlink" title="手动修改版本号"></a>手动修改版本号</h4><p>打开<code>package.json</code>文件，修改<code>version</code>字段。</p><h4 id="指令修改版本号"><a href="#指令修改版本号" class="headerlink" title="指令修改版本号"></a>指令修改版本号</h4><p>小版本升级：<code>1.0.0 -&gt; 1.0.1</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果没有预发布号：直接升级小号，去掉预发布号；如果有预发布号：去掉预发布号，其他不动</span><span class="token function">npm</span> version patch<span class="token comment"># 直接升级小号，增加预发布号为 0</span><span class="token function">npm</span> version prepatch</code></pre><p>中版本升级：<code>1.0.0 -&gt; 1.1.0</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果没有预发布号，则升级一位中号，大号不动，小号置为空；如果有预发布号小号为0，则不升级中号，将预发布号去掉</span><span class="token function">npm</span> version minor<span class="token comment"># 直接升级中号，小号置为 0，增加预发布号为 0</span><span class="token function">npm</span> version preminor</code></pre><p>大版本升级：<code>1.0.0 -&gt; 2.0.0</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果没有预发布号，则直接升级一位大号，其他位都置为0；如果有预发布号：中号和小号都为0，则不升级大号，而将预发布号删掉，中号小号存在不为0，则升级大号，清空预发布号。</span><span class="token function">npm</span> version major<span class="token comment"># 直接升级中号，小号置为 0，增加预发布号为 0</span><span class="token function">npm</span> version premajor</code></pre><h5 id="修改版本号的同时添加commit"><a href="#修改版本号的同时添加commit" class="headerlink" title="修改版本号的同时添加commit"></a>修改版本号的同时添加<code>commit</code></h5><blockquote><p>npm version [patch] -m ‘你的 commit 内容’</p></blockquote><h4 id="再次发布"><a href="#再次发布" class="headerlink" title="再次发布"></a>再次发布</h4><p>可以在发布之前确认一下当前登录信息<code>npm whoami --registry=xx</code>，如果没登录，需要重新登录。</p><blockquote><p>npm publish</p></blockquote><h3 id="包卸载"><a href="#包卸载" class="headerlink" title="包卸载"></a><strong>包卸载</strong></h3><p>参考：<a href="https://www.npmjs.cn/cli/unpublish/">https://www.npmjs.cn/cli/unpublish/</a></p><p>注意：<code>npm -f unpublish</code>不允许您取消发布超过<code>24</code>小时的任何内容。</p><blockquote><p>npm -f unpublish</p></blockquote><p><strong>tips：如果这个包不是仅测试使用，建议不要删除…否则，对别的用户而言是极不道德的行为。</strong></p><hr><h3 id="过程中的错误记录"><a href="#过程中的错误记录" class="headerlink" title="过程中的错误记录"></a>过程中的错误记录</h3><h4 id="如何只发布指定文件至npm"><a href="#如何只发布指定文件至npm" class="headerlink" title="如何只发布指定文件至npm?"></a>如何只发布指定文件至<code>npm</code>?</h4><blockquote><p>添加 .npmignore 规则同 .gitignore，添加 .gitignore 也是可以的</p></blockquote><blockquote><p>或者配置当前包的 package.json 的 files 字段指定</p></blockquote><h4 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h4><p><code>The password you have entered was detected on a public list of known compromised passwords. Please enter a different password.</code></p><p>重新设个密码… <del>密码设置简单了，抛了个异常…</del></p><h4 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h4><p><code>You do not have permission to publish &quot;test-publish-project&quot;. Are you logged in as the correct user?</code></p><p><del>what?告诉我没有权限发布…我这不是已经登录了吗，怎么肥四？</del></p><p>赶紧查一下是否登录成功！！！</p><blockquote><p>npm whoami --registry&#x3D;xxx</p></blockquote><p>确实已经登录了 🤣🤣🤣。<del>一万个尼玛心中飘过</del></p><p>查了相关资料，总结可能性：<code>该包已被别的作者发布</code>；<code>邮箱未验证</code><del>（扯淡，邮箱我已经验证了）</del></p><p>那就验证一下是包是否已经存在，去搜了一下（或者直接<code>install</code>），还真有… <del>那好吧，咱改个名</del>，重新改了个包名（<code>package.json</code>中的<code>name</code>值）再次<code>publish</code>，成功!!!</p>]]></content>
      
      
      <categories>
          
          <category> 工具学习 </category>
          
          <category> 包管理器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> npm-publish </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你使用 npm-link 软链</title>
      <link href="/tools/npm-link/"/>
      <url>/tools/npm-link/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="浅谈一下"><a href="#浅谈一下" class="headerlink" title="浅谈一下"></a>浅谈一下</h3><p>前段时间，开发了一个组件，需要在本地<code>debug</code>验证相关功能，有些纠结是用<code>npm link</code>还是<code>npx link</code>，亦或是<code>npm install</code>。。。</p><p>有些忘记了相关用法以及带来的影响…觉得还是有必要写一篇文章记录一下过程，以及新的东西。😮‍💨😮‍💨😮‍💨</p><h3 id="npm-link是干啥的？"><a href="#npm-link是干啥的？" class="headerlink" title="npm link是干啥的？"></a><code>npm link</code>是干啥的？</h3><p><a href="https://docs.npmjs.com/cli/v7/commands/npm-link">npm 文档</a> 也有说明：为了方便你的迭代测试，<code>npm link</code>将在全局的<code>node_modules</code>创建一个指向当前自定义的<code>npm</code>模块的软链接，并在你需要使用的地方通过<code>npm link packagename</code>创建一个从全局安装的<code>package-name</code>到<code>当前文件夹/node_modules</code>的符号链接。你对自定义包的任何改动都将同步到<code>link</code>到的项目中。<del>可以理解为 mklink</del></p><span id="more"></span><h3 id="第一视角带你学习link指令"><a href="#第一视角带你学习link指令" class="headerlink" title="第一视角带你学习link指令"></a>第一视角带你学习<code>link</code>指令</h3><h4 id="准备好预发布包"><a href="#准备好预发布包" class="headerlink" title="准备好预发布包"></a>准备好预发布包</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> my-test-component-zhl<span class="token builtin class-name">cd</span> ./my-test-component-zhl<span class="token function">npm</span> init -y<span class="token comment"># 准备入口文件 index</span><span class="token comment"># (() => &#123;</span><span class="token comment">#   console.log('这是我的组件模块');</span><span class="token comment"># &#125;)();</span></code></pre><h4 id="准备一个用于测试的项目"><a href="#准备一个用于测试的项目" class="headerlink" title="准备一个用于测试的项目*"></a>准备一个用于测试的项目*</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token function">mkdir</span> my-test-project<span class="token builtin class-name">cd</span> ./my-test-project<span class="token function">npm</span> init -y</code></pre><h4 id="为预发布包创建软链接"><a href="#为预发布包创建软链接" class="headerlink" title="为预发布包创建软链接"></a>为预发布包创建软链接</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/my-test-component-zhl<span class="token function">npm</span> <span class="token function">link</span></code></pre><p>结果预览：</p><p><a href="/images/tools/npm-link/p1.png"><img src="/images/tools/npm-link/p1.png" alt="npm-link-p1" loading="lazy"></a></p><p>链接的位置就是你<code>nodejs</code>安装目录下的<code>node_modules</code>目录下，指向了当前的组件。</p><h4 id="在项目中引用这个预发布包"><a href="#在项目中引用这个预发布包" class="headerlink" title="在项目中引用这个预发布包"></a>在项目中引用这个预发布包</h4><p>你会发现，<code>link</code>的包并不会在<code>package.json</code>的<code>dependencies</code>里出现。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/my-test-project<span class="token function">npm</span> <span class="token function">link</span> my-test-component-zhl</code></pre><p>结果预览：</p><p><a href="/images/tools/npm-link/p2.png"><img src="/images/tools/npm-link/p2.png" alt="npm-link-p2" loading="lazy"></a><br><a href="/images/tools/npm-link/p3.png"><img src="/images/tools/npm-link/p3.png" alt="npm-link-p3" loading="lazy"></a></p><p>实际使用调试：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'my-test-component-zhl'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="/images/tools/npm-link/p4.png"><img src="/images/tools/npm-link/p4.png" alt="npm-link-p4" loading="lazy"></a></p><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>修改<code>my-test-component-zhl</code>的内容，会同步更新到当前引用的项目中…很方便。</p><p>效果：</p><p><a href="/images/tools/npm-link/p5.png"><img src="/images/tools/npm-link/p5.png" alt="npm-link-p5" loading="lazy"></a></p><h4 id="解除link"><a href="#解除link" class="headerlink" title="解除link"></a>解除<code>link</code></h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> unlink --no-save packagename <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> <span class="token function">install</span></code></pre><p>查阅了文档，发现<code>unlink</code>其实是<code>uninstall</code>的别名。<a href="https://docs.npmjs.com/cli/v7/commands/npm-uninstall">-&gt; 戳这里</a></p><p>当然，如果你不需要<code>link</code>该组件包进行测试时，建议你同时也卸载掉<code>link</code>到全局的包。如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/my-test-component-zhl<span class="token function">npm</span> unlink <span class="token punctuation">[</span>-g<span class="token punctuation">]</span></code></pre><h3 id="说说npm-link的缺点"><a href="#说说npm-link的缺点" class="headerlink" title="说说npm link的缺点"></a>说说<code>npm link</code>的缺点</h3><p>好用确实是好用，但是也有几个缺点（槽点）：</p><details><summary>建立了 link 过后，跨 node 版本使用容易出错</summary><p>其实这个在我本机上没有遇到，前面测试的时候，细心的伙伴可能也发现了，<code>link</code>的<code>global</code>地址并没有带<code>node</code>版本信息（并不是在<code>nvm/nodeversion/node_modules</code>下，意味着我换一个<code>node</code>的版本，软链接仍然是存在且有效的。😮‍💨😮‍💨😮‍💨 如何做到的？<del>小伙伴可以自己验证一下是否可行</del></p><p>配置<code>npm</code>的全局安装位置：</p><blockquote><p>npm config set prefix xxx</p></blockquote></details><details><summary>link 失败不会报错并且会回退到直接从 npm 仓库进行安装</summary><p>这个确实，如果<code>link</code>本地预发布包失败，<code>npm</code>会全局安装一个你<code>link 的 packagename</code>包，然后再建立软链接，如果<code>npm-registry</code>仓库也没有这个包，才会抛异常。💀💀💀 <del>潜在问题，不容易发现，当然你可以通过为自己模块添加私有前缀避免这一问题</del></p></details><details><summary>会有预期之外的二进制可执行文件安装</summary><p><code>通过 npm uninstall -g packagename</code>可以同时卸载全局包和它的二进制执行文件。那么根据<code>unlink</code>是<code>uninstall</code>的别名，可以很容易推出另外一个等价指令：</p><blockquote><p>npm unlink [-g]</p></blockquote></details><details><summary>不符合预期的软链接删除</summary><p>每一次的<code>npm link</code>，都是一次<strong>重新建立软链接</strong>的过程，这个过程会取消之前已经链接的包。</p><p>如果你想同时保留多个包的软链接，记得同时<code>link</code>多个：</p><blockquote><p>npm link ..&#x2F;packageA ..&#x2F;packageB</p></blockquote></details><p>这么一分析，好像也就不是问题了…😂😂😂 不过还是介绍一下另外的两种方式：</p><h3 id="npm-install替代"><a href="#npm-install替代" class="headerlink" title="npm install替代"></a><code>npm install</code>替代</h3><p>使用安装指令，拼上<code>你自定义的模块的路径地址，可以是相对路径</code>，这种方式同样是建立软链接，并不是真的将资源下载到<code>node_modules</code>，只不过少了个<code>global</code>的中间过程。貌似更加方便一点。</p><blockquote><p>npm install &lt;package-path&gt;</p></blockquote><p>如果你不想写入<code>package.json</code>，可以带上<code>--no-save</code>参数：</p><blockquote><p>npm install –no-save &lt;package-path&gt;</p></blockquote><p>取消的话，可以用<code>uninstall</code>：</p><blockquote><p>npm uninstall package-path</p></blockquote><h3 id="扩展【仅做了解】"><a href="#扩展【仅做了解】" class="headerlink" title="扩展【仅做了解】"></a>扩展【仅做了解】</h3><p>通过<code>link</code>工具避免上面提到的问题。<a href="https://github.com/privatenumber/link">-&gt; 详见</a></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i -g <span class="token function">link</span><span class="token comment"># 方式一</span>npx <span class="token function">link</span> package-path<span class="token comment"># 方式二：项目根目录添加 link.config.json 配置文件，再执行</span>npx <span class="token function">link</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具学习 </category>
          
          <category> 包管理器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> npm-link </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm 以及 yarn 的指令使用</title>
      <link href="/tools/npm-and-yarn/"/>
      <url>/tools/npm-and-yarn/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><h3 id="npm，npx概念及指令简单介绍"><a href="#npm，npx概念及指令简单介绍" class="headerlink" title="npm，npx概念及指令简单介绍"></a><code>npm，npx</code>概念及指令简单介绍</h3></blockquote><p><code>tips：相关配置指令在环境配置章节</code></p><p><code>npm</code>是随<code>node</code>一起安装的包管理器。主要作用是用于发布和下载程序包的<code>CLI(命令行)</code>工具，以及托管<code>javascript程序包的在线存储库</code>。</p><p>不同于<code>npm</code>，<code>npx</code>的<code>x</code>可理解为<code>eXecute</code>，主要作为命令行的寻址等辅助功能。<code>npx xxx</code>时，<code>npx</code>会先看<code>xxx</code>在<code>$PATH</code>是否存在，如果没有，则会找当前目录的<code>node_modules</code>，如果还是没有，那么会先下载安装这个<code>xxx</code>再执行。</p><span id="more"></span><h4 id="常用安装指令说明"><a href="#常用安装指令说明" class="headerlink" title="常用安装指令说明"></a>常用安装指令说明</h4><p>安装使用 i or install。<code>卸载时使用 uni or uninstall，就不另外说明了</code>。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 npm 包 i 为 install 简写</span><span class="token comment"># 不带任何参数：临时安装到 node_modules，不会添加到 devDependencies 和 dependencies</span><span class="token function">npm</span> i <span class="token punctuation">[</span>package<span class="token punctuation">]</span><span class="token comment"># 安装指定版本or tag的包</span><span class="token function">npm</span> <span class="token function">install</span> package@version<span class="token function">npm</span> i package@tag<span class="token comment"># 安装最新版本的包</span><span class="token function">npm</span> i package@latest<span class="token comment"># 安装时的一些参数说明：</span><span class="token comment"># --save-dev or -D or --dev or -S-D 表示安装依赖到 devDependencies</span><span class="token function">npm</span> i package -D<span class="token comment"># -S or --save 表示安装依赖到 dependencies</span><span class="token function">npm</span> i package --save<span class="token comment"># 全局安装</span><span class="token function">npm</span> i --global package</code></pre><h4 id="其他指令及附带配置说明："><a href="#其他指令及附带配置说明：" class="headerlink" title="其他指令及附带配置说明："></a>其他指令及附带配置说明：</h4><blockquote><p>npm help 查看全部指令</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 清除缓存</span><span class="token function">npm</span> cache clean --force<span class="token comment"># config 别名 c</span><span class="token comment"># 设置全局安装位置</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> prefix <span class="token string">'C:\Users\xx\AppData\Roaming\npm'</span><span class="token comment"># 设置缓存路径，默认在 c 盘</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> cache <span class="token string">"C:\Users\xx\AppData\Roaming<span class="token entity" title="\n">\n</span>pm_cache"</span><span class="token comment"># 其他 npm 配置，格式均同上，set 设置，get 读取，delete删除，例如：</span><span class="token function">npm</span> config get registry<span class="token comment"># 当然可以添加限制参数，表示是本地配置、全局配置、用户配置</span><span class="token function">npm</span> config --global <span class="token builtin class-name">set</span> registry xxx<span class="token comment"># 查看配置</span><span class="token function">npm</span> config <span class="token function">ls</span> -l<span class="token comment"># 版本号 -v or --version</span><span class="token function">npm</span> -v<span class="token comment"># 项目初始化 -y 参数可选</span><span class="token function">npm</span> init -y<span class="token comment"># 执行某个某个脚本命令 例如(package.json 的 scripts)</span><span class="token function">npm</span> run <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token comment"># 登录到 npm，可以添加登录参数,如下登录到xxx npm仓库，一般用于公司内部npm私服</span><span class="token function">npm</span> login<span class="token function">npm</span> login --registry<span class="token operator">=</span>xxx<span class="token comment"># 没有账号，添加账号登录。同理可设置 registry</span><span class="token function">npm</span> adduser<span class="token comment"># 查看当前登录信息</span><span class="token function">npm</span> <span class="token function">whoami</span><span class="token comment"># 查看一个 npm 包的最新版本/所有版本</span><span class="token function">npm</span> view package version/versions</code></pre><p>补充： <code>npm link</code>详见：<a href="/share/npm-link">手把手教你使用 npm-link 软链</a>，<code>npm publish</code>详见：<a href="/share/npm-publish">如何发布一个 npm-package?</a></p><p>其他指令：<a href="https://docs.npmjs.com/cli/v7/commands/npm-install">-&gt; 详见 v7</a></p><blockquote><p>tips: npm config 读取的内容是有优先级的，项目下的 <code>.npmrc</code> -&gt; 用户级<code>~/.npmrc</code> -&gt; 全局<code>安装目录/etc/.npmrc</code>（稍不注意就会存在你配置的 global registry 不生效…）</p></blockquote><blockquote><h3 id="yarn常用指令介绍"><a href="#yarn常用指令介绍" class="headerlink" title="yarn常用指令介绍"></a><code>yarn</code>常用指令介绍</h3></blockquote><blockquote><p>yarn help 查看全部指令</p></blockquote><p>大部分指令与<code>npm</code>大同小异，主要介绍一些项目常用的：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#初始化项目 (避免使用Git bash)</span><span class="token function">yarn</span> init<span class="token comment"># 安装依赖</span><span class="token comment"># add 参数说明 --dev or -D 安装到 devDependencies，不加参数则安装到 dependencies</span><span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span><span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>version<span class="token punctuation">]</span><span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span> --dev<span class="token comment"># 升级依赖的包版本</span><span class="token function">yarn</span> upgrade <span class="token punctuation">[</span>package<span class="token punctuation">]</span><span class="token function">yarn</span> upgrade <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>version<span class="token punctuation">]</span><span class="token function">yarn</span> upgrade <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment"># 安装指定包的最新版本</span><span class="token comment"># eg. yarn add ioredis@latest</span><span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>packageName<span class="token punctuation">]</span>@latest<span class="token comment"># 全局安装</span><span class="token function">yarn</span> global <span class="token function">add</span> xx<span class="token comment"># 移除依赖</span><span class="token function">yarn</span> remove <span class="token punctuation">[</span>package<span class="token punctuation">]</span><span class="token comment"># 执行某个脚本命令 run 可以省略</span><span class="token function">yarn</span> run <span class="token punctuation">[</span>scriptName<span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具学习 </category>
          
          <category> 包管理器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> yarn </tag>
            
            <tag> npx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github 上如何为开源项目提交 pr?</title>
      <link href="/posts/github-create-pr/"/>
      <url>/posts/github-create-pr/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>本文主要是根据自己在摸索提交<code>pr (pull-request)</code>过程程的一些总结。</p><p>为了方便描述，约定本文需要<code>fork</code>的项目为<code>test-project</code>，源仓库地址<code>regionUser/test-project</code>，你（提<code>pr</code>的用户）的用户名为<code>userA</code>。</p><span id="more"></span><h3 id="fork原项目"><a href="#fork原项目" class="headerlink" title="fork原项目"></a><code>fork</code>原项目</h3><p>登入自己的<code>github</code>账号，进入你需要提<code>pr</code>的那个项目下，点击左上角的<code>fork</code>。</p><p>然后进入你的<code>Repositories</code>列表，你会发现名为<code>test-project</code>仓库。</p><h3 id="clone-这个-fork项目"><a href="#clone-这个-fork项目" class="headerlink" title="clone 这个 fork项目"></a><code>clone 这个 fork</code>项目</h3><p>打开<code>userA/test-project</code>（即你<code>fork</code>的项目下），<code>clone</code>到本地。</p><blockquote><p>git clone <a href="https://github.com/userA/test-project.git">https://github.com/userA/test-project.git</a></p></blockquote><h3 id="建立upstream上游链接"><a href="#建立upstream上游链接" class="headerlink" title="建立upstream上游链接"></a>建立<code>upstream</code>上游链接</h3><p>这里上游指的是一开始<code>fork</code>的那个项目源。</p><blockquote><p>git remote add upstream <a href="https://github.com/regionUser/test-project.git">https://github.com/regionUser/test-project.git</a></p></blockquote><p>查看远程仓库信息：</p><blockquote><p>git remote -v</p></blockquote><div class="error"><blockquote><p>一定确定<code>origin</code>是你自己的地址，<code>upstream</code>是远程的地址。</p></blockquote></div><h3 id="新增、提交变动"><a href="#新增、提交变动" class="headerlink" title="新增、提交变动"></a>新增、提交变动</h3><p>这里修改的是你<code>clone</code>下来的项目，列举了两种方式。</p><h4 id="在main分支修改"><a href="#在main分支修改" class="headerlink" title="在main分支修改"></a>在<code>main</code>分支修改</h4><p>我这里为了测试，选择就在<code>main</code>上修改，且模拟了源项目<code>main</code>变更，以及<code>userA</code>的多次提交。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">'userA的第一次提交'</span><span class="token function">git</span> commit -m <span class="token string">'userA的第二次提交'</span><span class="token function">git</span> push origin main</code></pre><h4 id="基于新的分支"><a href="#基于新的分支" class="headerlink" title="基于新的分支"></a>基于新的分支</h4><p>创建了一个新的<code>fix/fs-fix</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b fix/fs-fix<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">'userA的第一次提交'</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">'userA的第二次提交'</span><span class="token function">git</span> push origin fix/fs-fix</code></pre><p>写完后合并到主分支<code>main</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge fix/fs-fix<span class="token function">git</span> push origin main</code></pre><h3 id="新建pull-request"><a href="#新建pull-request" class="headerlink" title="新建pull-request"></a>新建<code>pull-request</code></h3><p>在<code>github</code>打开你<code>fork</code>的项目。<code>userA/test-project</code>，点击<code>Pull requests</code> -&gt; <code>New pul request</code>新建<code>pr</code>，会自动跳转至<code>regionUser/test-project</code>下的<code>compare</code>，出现下面界面：</p><p><a href="/images/posts/github-create-pr/p1.png"><img src="/images/posts/github-create-pr/p1.png" alt="github-create-pr-p1" loading="lazy"></a></p><blockquote><p><code>base repositories</code>源项目仓库，<code>head repositories</code>是<code>fork</code>的项目仓库(<code>userA</code>).</p></blockquote><p>我这里创建的时候出现<code>check</code>不通过的提示（如果你没有遇到，就跳过）：</p><blockquote><p>Can’t automatically merge. Don’t worry, you can still create the pull request.</p></blockquote><p>可以预料到，因为原项目的作者在我们之前<code>fork</code>以后，又新增了功能提交。 <del>虽然仍然可以创建成功，但不建议，也不一定会被采纳</del></p><p>此时，需要我们对<code>fork</code>的项目源码做代码同步。如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 拉取 upstream 最新代码</span><span class="token function">git</span> fetch upstream<span class="token comment"># (这里不一定是使用 rebase，merge 同样可以，只是一个同步最新代码的一个方式而已)</span><span class="token comment"># 再 rebase，main 是分支名，我这偷了个懒</span><span class="token comment"># 此过程可能会遇到冲突，解决冲突</span><span class="token function">git</span> rebase upstream/main<span class="token comment"># 当然直接使用 git pull upstream branch 也是可以的 === fetch + merge</span><span class="token comment"># 此过程可能会遇到冲突，解决冲突再次 rebase</span><span class="token function">git</span> status<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> rebase --continue<span class="token comment"># rebase （变基）是合并的另外一种方式，不同于merge的是，不会产生旁支和冗余的提交记录。</span><span class="token comment"># 执行后会在 terminal 中打开编辑器交互，完成变基操作（不知道怎么在这个界面操作的，可以看我的另外一篇文章'vi 编辑器学习'）</span><span class="token comment"># 在界面上方列出了需要编辑的所有提交，在每个commit id前的是指令类型(pick)，在Commands中有相关的指令说明。</span><span class="token comment"># p, pick = 保留该commit</span><span class="token comment"># r, reword = 保留该commit，但修改它的提交信息</span><span class="token comment"># e, edit = 保留该commit，在合并该请求时暂停</span><span class="token comment"># s, squash = 保留该commit，合并到前一个提交中</span><span class="token comment"># f, fixup = 类似于squash，但抛弃提交它的提交信息</span><span class="token comment"># x, exec = 执行shell命令</span><span class="token comment"># d, drop = 丢弃该commit</span><span class="token comment"># 解决掉所有冲突 推送此次合并，添加 -f 强制推送</span><span class="token function">git</span> push -f origin main</code></pre><p>按上面流程操作完了以后，重新创建<code>pull-request</code>，<code>check</code>错误已经消失：</p><p><a href="/images/posts/github-create-pr/p2.png"><img src="/images/posts/github-create-pr/p2.png" alt="github-create-pr-p2" loading="lazy"></a></p><p><code>填写pull-request 的 title，你也可以添加 comment</code>，完成后，你可以在<code>regionUser/test-project</code>的<code>Pull requests</code>下看到你新提交的<code>pr</code>.效果如下：</p><p><a href="/images/posts/github-create-pr/p3.png"><img src="/images/posts/github-create-pr/p3.png" alt="github-create-pr-p3" loading="lazy"></a></p><p>至此，<code>pr</code>创建就完成了，等待原项目作者审核后合并。</p><h3 id="原仓库作者视角"><a href="#原仓库作者视角" class="headerlink" title="原仓库作者视角"></a>原仓库作者视角</h3><p><a href="/images/posts/github-create-pr/p4.png"><img src="/images/posts/github-create-pr/p4.png" alt="github-create-pr-p4" loading="lazy"></a></p><p>选择合并的方式，再次点击确认即可完成合并。</p><h3 id="更新fork项目"><a href="#更新fork项目" class="headerlink" title="更新fork项目"></a>更新<code>fork</code>项目</h3><p>当你的提交被采纳以后，原项目<code>regionUser/test-project</code>会新增一个合并的提交记录，为了保持一致，需要在<code>fork</code>的本地仓库进行更新：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull --rebase upstream <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment"># 或者</span><span class="token function">git</span> fetch upstream<span class="token function">git</span> merge upstream/main<span class="token comment"># 更新推送至远程</span><span class="token function">git</span> push origin main</code></pre><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><h4 id="如何再次提交pr"><a href="#如何再次提交pr" class="headerlink" title="如何再次提交pr?"></a>如何再次提交<code>pr</code>?</h4><p><code>answer</code>：重复上面新建<code>pull-request</code>的流程，值得注意的是：记得先同步主分支代码，保证与<code>fork</code>的原项目代码一致，否则你会继续遇到冲突。</p><h4 id="提交pr后，我fork的仓库可以删除吗"><a href="#提交pr后，我fork的仓库可以删除吗" class="headerlink" title="提交pr后，我fork的仓库可以删除吗?"></a>提交<code>pr</code>后，我<code>fork</code>的仓库可以删除吗?</h4><p><code>answer</code>：在<code>pr</code>被采纳前，不能删除，否则该<code>pr</code>会自动关闭；在采纳后是可以删除掉的，因为代码已经被合并至主项目里了（存在于主仓库的<code>Pull requests</code>记录也会被删除）。</p><div class="success"><blockquote><p>世事千帆过，前方终会是温柔和月光。</p></blockquote></div>]]></content>
      
      
      <categories>
          
          <category> 收藏安利 </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在浏览器上更轻松的阅读 Github 源码</title>
      <link href="/posts/github-code-read/"/>
      <url>/posts/github-code-read/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>号称只需要<code>1s</code>，就可以在浏览器上使用<code>vscode</code>阅读<code>Github</code>代码. <del>当然<code>vscode</code>的快捷键也是支持的.</del></p></blockquote><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><a href="/images/posts/github-code-read/p1.png"><img src="/images/posts/github-code-read/p1.png" alt="github-code-read-p1" loading="lazy"></a></p><span id="more"></span><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><h4 id="在github-com的github后添加1s，然后回车"><a href="#在github-com的github后添加1s，然后回车" class="headerlink" title="在github.com的github后添加1s，然后回车"></a>在<code>github.com</code>的<code>github</code>后添加<code>1s</code>，然后回车</h4><p><code>eg. https://github1s.com/conwnet/github1s/blob/HEAD/extensions/vlang-web/snippets/snippets.json</code></p><p>项目源码地址：<a href="https://github.com/conwnet/github1s">https://github.com/conwnet/github1s</a></p><h4 id="将github-com的com改为dev，然后回车"><a href="#将github-com的com改为dev，然后回车" class="headerlink" title="将github.com的com改为dev，然后回车"></a>将<code>github.com</code>的<code>com</code>改为<code>dev</code>，然后回车</h4><blockquote><p>或者你可以直接使用快捷键 . 完成替换并打开 <code>eg. https://github.dev/vuejs/vue</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 收藏安利 </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Husky 和 Commitlint 实现 Git 提交规范校验</title>
      <link href="/engineering/git-precommit-and-commitmsg-hooks/"/>
      <url>/engineering/git-precommit-and-commitmsg-hooks/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="Before…"><a href="#Before…" class="headerlink" title="Before…"></a>Before…</h3><p><code>husky</code>在前端工程化的过程中可以说是必不可少，<code>why?</code> 它可以让我们在项目中更加方便的去使用<code>git hooks</code>，而非传统意义上的<code>.git/hooks</code>下编辑修改。</p><p><code>git hooks</code>则是<code>git</code>在触发某个重要操作时自动执行的脚本，本文主要围绕<code>commit-msg and pre-commit</code>介绍。<a href="https://git-scm.com/docs/githooks">了解更多</a></p><span id="more"></span><h3 id="husky-6↑工作原理"><a href="#husky-6↑工作原理" class="headerlink" title="husky@6↑工作原理"></a><code>husky@6↑</code>工作原理</h3><blockquote><p><code>husky@6</code>放弃了原有的配置方式（创建所有类型的<code>git hooks</code>，方便用户设置任何类型钩子都能正常工作）。新版本放弃了使用默认的<code>.git/hooks</code>，而是根据<code>git@2.9</code>提供的新特性<code>core.hooksPath</code>指定了<code>hooks</code>所在的目录<code>.husky/</code>，实现只添加用户想要的<code>hooks</code></p></blockquote><blockquote><p><del>既然知道了新版本的破坏性变更，以及其原理，那肯定选择用新版本。目前最新版已经到<code>8.0.1</code>了.</del></p></blockquote><h3 id="新版husky使用"><a href="#新版husky使用" class="headerlink" title="新版husky使用"></a><strong>新版<code>husky</code>使用</strong></h3><h4 id="安装husky"><a href="#安装husky" class="headerlink" title="安装husky"></a>安装<code>husky</code></h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> -D husky</code></pre><h4 id="卸载husky"><a href="#卸载husky" class="headerlink" title="卸载husky"></a>卸载<code>husky</code></h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> remove husky<span class="token function">git</span> config --unset core.hooksPath</code></pre><h4 id="初始化husky"><a href="#初始化husky" class="headerlink" title="初始化husky"></a>初始化<code>husky</code></h4><pre class="language-bash" data-language="bash"><code class="language-bash">npx husky <span class="token function">install</span><span class="token comment"># 或者添加 prepare 脚本命令</span><span class="token function">npm</span> set-script prepare <span class="token string">"husky install"</span><span class="token function">yarn</span> prepare<span class="token comment"># install 到指定的目录</span>npx husky <span class="token function">install</span> .config/husky</code></pre><h4 id="创建hooks"><a href="#创建hooks" class="headerlink" title="创建hooks"></a>创建<code>hooks</code></h4><blockquote><p>语法：<code>husky add &lt;file&gt; [cmd]</code></p></blockquote><p><code>eg.</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">husky <span class="token function">add</span> .husky/pre-commit <span class="token string">'eslint'</span></code></pre><h4 id="绕过钩子"><a href="#绕过钩子" class="headerlink" title="绕过钩子"></a>绕过钩子</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加 --no-verify eg.</span><span class="token function">git</span> commit -m <span class="token string">"test"</span> --no-verify</code></pre><h4 id="简单举例"><a href="#简单举例" class="headerlink" title="简单举例"></a>简单举例</h4><h5 id="添加pre-commit钩子："><a href="#添加pre-commit钩子：" class="headerlink" title="添加pre-commit钩子："></a>添加<code>pre-commit</code>钩子：</h5><p>通过<code>husky add</code>钩子添加的<code>cmd</code>在创建后作为初始的脚本命令，你可以对其做任何修改。<del>意味着创建的时候可以不加 😊😊😊</del></p><p><code>eg.</code>当触发<code>pre-commit</code>的时候，对代码执行<code>lint</code>脚本检查：</p><pre class="language-bash" data-language="bash"><code class="language-bash">npx husky <span class="token function">add</span> .husky/pre-commit <span class="token string">'npm run lint'</span><span class="token comment"># or 如果你的项目使用了脚手架的 lint，例如 vue-cli-service...</span><span class="token function">npm</span> set-script lint <span class="token string">"vue-cli-service lint"</span></code></pre><blockquote><p>钩子里配置的<code>npm run lint</code>，请确认你的项目已经包含了<code>lint</code>校验配置，并自行安装<code>devDependencies</code>。<del>只是个栗子，不一定就是做<code>lint</code>校验 ❤❤❤</del> 效果图如下：</p></blockquote><p><a href="/images/engineering/git-precommit-and-commitmsg-hooks/p1.png"><img src="/images/engineering/git-precommit-and-commitmsg-hooks/p1.png" alt="git-precommit-and-commitmsg-hooks-p1" loading="lazy"></a><br><a href="/images/engineering/git-precommit-and-commitmsg-hooks/p2.png"><img src="/images/engineering/git-precommit-and-commitmsg-hooks/p2.png" alt="git-precommit-and-commitmsg-hooks-p2" loading="lazy"></a></p><h3 id="pre-commit搭配lint-staged"><a href="#pre-commit搭配lint-staged" class="headerlink" title="pre-commit搭配lint-staged"></a><code>pre-commit</code>搭配<code>lint-staged</code></h3><p>上面只是举了一个栗子…<code>pre-commit</code>的时候，还可以做得到事情有很多，例如执行测试脚本…</p><p><strong>But…每次触发 pre-commit 都对所有的文件执行 lint，属实是有一点点恶趣味了，这里使用 lint-staged 工具做一点优化.</strong> <del>如果你不介意…可以跳过下面的<code>lint-staged</code>😢😢😢</del></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> -D lint-staged</code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在项目的<code>package.json</code>中添加：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token comment">// 配置是一个对象，其中每个值都是要运行的命令，其键要用于此命令的 glob 模式，值（cmd）可以是数组，如果是数组，则按顺序运行命令。</span>  <span class="token comment">// 甚至支持配置成函数：(filenames: string[]) => string | string[] | Promise&lt;string | string[]></span>  <span class="token comment">// eg. '**/*.js?(x)': filenames => filenames.map(filename => `prettier --write '$&#123;filename&#125;'`)</span>  <span class="token property">"lint-staged"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 例如此配置：通过 eslint 工具检测 修复提交的 .js .vue .ts 的错误项，然后添加到暂存区</span>    <span class="token property">"**/*.&#123;js,vue,ts&#125;"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"eslint --fix"</span><span class="token punctuation">,</span> <span class="token string">"git add ."</span><span class="token punctuation">]</span>    <span class="token comment">// 你也可以只是提交前检测</span>    <span class="token comment">// "**/*.&#123;js,vue,ts&#125;": "eslint"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>提交前会自动顺序执行<code>cmd</code>。例如上面配置，会先<code>eslint --fix</code>尝试修复，修复成功执行<code>add</code>操作，修复失败抛出异常，此时需要手动修复，然后再提交。</p></blockquote><p>修改<code>.husky/pre-commit</code>钩子，改用<code>lint-staged</code>：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 打开 .husky/pre-commit 文件，修改之前生成的 cmd</span>npx lint-staged<span class="token comment"># or 配置 lint-staged 脚本</span><span class="token function">npm</span> run lint-staged<span class="token comment"># &#123;</span><span class="token comment">#   "scripts": &#123;</span><span class="token comment">#     "lint-staged": "lint-staged"</span><span class="token comment">#   &#125;</span><span class="token comment"># &#125;</span></code></pre><p><a href="https://github.com/okonet/lint-staged">了解更多<code>lint-staged</code></a></p><p>除了在<code>commit</code>之前添加代码校验外，我们也可以对提交的<code>message(-m)</code>作规范约束。如何做？往下看 ↓</p><h3 id="commit-msg搭配commitlint"><a href="#commit-msg搭配commitlint" class="headerlink" title="commit-msg搭配commitlint"></a><code>commit-msg</code>搭配<code>commitlint</code></h3><p><code>commit-msg</code>是<code>git</code>提交时校验提交信息的钩子（此时由<code>husky</code>来指定），当触发时便会使用<code>commitlit</code>来校验。安装配置完成后，想通过<code>git commit</code>或者其它第三方工具提交时，只要提交信息（<code>-m</code>指定的<code>message</code>）不符合规范就无法提交，并提示。</p><blockquote><p>约定格式： git commit -m &lt;type&gt;[optional scope]: &lt;description&gt;</p></blockquote><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> -D @commitlint/cli @commitlint/config-conventional</code></pre><h4 id="配置commmitlint"><a href="#配置commmitlint" class="headerlink" title="配置commmitlint"></a>配置<code>commmitlint</code></h4><p><a href="https://github.com/conventional-changelog/commitlint/blob/master/%40commitlint/config-conventional/index.js">更多配置项参考</a></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// commmitlint.config.js or .commmitlintrc.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'@commitlint/config-conventional'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// rules：kv组成的对象，eg. 'name:[0, 'always', 72]'</span>  <span class="token comment">// 数组中第一位为 level，可选0,1,2，0为disable，1为warning，2为error</span>  <span class="token comment">// 第二位为应用与否，可选 always|never</span>  <span class="token comment">// 第三位该 rule 的值</span>  <span class="token comment">// rules: &#123;&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>然后添加<code>husky</code>的<code>commit-msg</code>钩子：</p><pre class="language-bash" data-language="bash"><code class="language-bash">npx husky <span class="token function">add</span> .husky/commit-msg <span class="token string">'npx --no-install commitlint -e'</span></code></pre><p>貌似已经很完美了，<code>emmm~~</code>但开始对规范使用不熟悉的童鞋，可能不太友好…我下面添加了<code>commitizen</code>优化方案使用，不需要可以跳过 😌😌😌</p><h4 id="配置commitizen"><a href="#配置commitizen" class="headerlink" title="配置commitizen"></a>配置<code>commitizen</code></h4><p><code>commitizen</code>可以让用户通过界面化问答的方式完成提交信息的录入，并由用户决定是否推送（这个过程仅相当于命令<code>git commit -m &#39;xxx&#39;</code>）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> -D commitizen cz-conventional-changelog</code></pre><p>配置<code>commitizen</code>并添加<code>commit</code>为<code>npm script</code>：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// cz 本质就是 commitizen 一段短命令，代替 git commit 生成专业的 commit-message</span>    <span class="token property">"commit"</span><span class="token operator">:</span> <span class="token string">"git-cz"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"config"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"commitizen"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"cz-conventional-changelog"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>后续<code>commit</code>，就可以使用<code>yarn commit</code>进行<code>commit</code>，其会自动做出如下提示：</p><p><a href="/images/engineering/git-precommit-and-commitmsg-hooks/p3.png"><img src="/images/engineering/git-precommit-and-commitmsg-hooks/p3.png" alt="git-precommit-and-commitmsg-hooks-p3" loading="lazy"></a></p><div class="warning"><blockquote><p>因为你，我的心脏总是忙个不停</p></blockquote></div>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
          <category> 代码规范约束 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> husky </tag>
            
            <tag> git-hooks </tag>
            
            <tag> commitlint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-commit 添加 emoji 的 message 显示</title>
      <link href="/posts/git-commit-emoji/"/>
      <url>/posts/git-commit-emoji/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="先看效果"><a href="#先看效果" class="headerlink" title="先看效果"></a>先看效果</h3><p><a href="/images/posts/git-commit-emoji/p1.png"><img src="/images/posts/git-commit-emoji/p1.png" alt="git-commit-emoji-p1" loading="lazy"></a></p><span id="more"></span><blockquote><p>在执行<code>git commit</code>的时候，为这次内容提交打上标记（仅 emoji 显示）,凸显此次提交的内容主体类型，也使得在整个历史提交中易于区分查找。</p></blockquote><blockquote><p>当然，这种<code>emoji</code>的代码并不强制使用 <del>可以不用，但不能不知道</del></p></blockquote><h3 id="格式规范"><a href="#格式规范" class="headerlink" title="格式规范"></a>格式规范</h3><p><code>:code:</code><strong>注意这里的冒号是英文，且与 code 之间没有空格</strong>.</p><p><code>eg.</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">':bug: 修复了xxx功能'</span><span class="token function">git</span> commit -m <span class="token string">':xxx: :xxx: 完成了一系列功能'</span></code></pre><h3 id="emoji代码"><a href="#emoji代码" class="headerlink" title="emoji代码"></a><code>emoji</code>代码</h3><table><thead><tr><th>emoji</th><th>emoji 代码</th><th>说明</th></tr></thead><tbody><tr><td><code>:art:</code> (调色板)</td><td><code>:art:</code></td><td>改进代码结构&#x2F;代码格式</td></tr><tr><td><code>:zap:</code> (闪电) <code>:racehorse:</code> (赛马)</td><td><code>:zap :racehorse:</code></td><td>提升性能</td></tr><tr><td><code>:fire:</code> (火焰)</td><td><code>:fire:</code></td><td>移除代码或文件</td></tr><tr><td><code>:bug:</code> (bug)</td><td><code>:bug:</code></td><td>修复 bug</td></tr><tr><td><code>:ambulance:</code> (急救车)</td><td><code>:ambulance:</code></td><td>重要补丁</td></tr><tr><td><code>:sparkles:</code> (火花)</td><td><code>:sparkles:</code></td><td>引入新功能</td></tr><tr><td><code>:memo:</code> (备忘录)</td><td><code>:memo:</code></td><td>撰写文档</td></tr><tr><td><code>:rocket:</code> (火箭)</td><td><code>:rocket:</code></td><td>部署功能</td></tr><tr><td><code>:lipstick:</code> (口红)</td><td><code>:lipstick:</code></td><td>更新 UI 和样式文件</td></tr><tr><td><code>:tada:</code> (庆祝)</td><td><code>:tada:</code></td><td>初次提交</td></tr><tr><td><code>:white_check_mark:</code> (白色复选框)</td><td><code>:white_check_mark:</code></td><td>增加测试</td></tr><tr><td><code>:lock:</code> (锁)</td><td><code>:lock:</code></td><td>修复安全问题</td></tr><tr><td><code>:apple:</code> (苹果)</td><td><code>:apple:</code></td><td>修复 macOS 下的问题</td></tr><tr><td><code>:penguin:</code> (企鹅)</td><td><code>:penguin:</code></td><td>修复 Linux 下的问题</td></tr><tr><td><code>:checkered_flag:</code> (旗帜)</td><td><code>:checked_flag:</code></td><td>修复 Windows 下的问题</td></tr><tr><td><code>:bookmark:</code> (书签)</td><td><code>:bookmark:</code></td><td>发行&#x2F;版本标签</td></tr><tr><td><code>:rotating_light:</code> (警车灯)</td><td><code>:rotating_light:</code></td><td>移除 linter 警告</td></tr><tr><td><code>:construction:</code> (施工)</td><td><code>:construction:</code></td><td>工作进行中</td></tr><tr><td><code>:green_heart:</code> (绿心)</td><td><code>:green_heart:</code></td><td>修复 CI 构建问题</td></tr><tr><td><code>:arrow_down:</code> (下降箭头)</td><td><code>:arrow_down:</code></td><td>降级依赖</td></tr><tr><td><code>:arrow_up:</code> (上升箭头)</td><td><code>:arrow_up:</code></td><td>升级依赖</td></tr><tr><td><code>:construction_worker:</code> (工人)</td><td><code>:construction_worker:</code></td><td>添加 CI 构建系统</td></tr><tr><td><code>:chart_with_upwards_trend:</code> (上升趋势图)</td><td><code>:chart_with_upwards_trend:</code></td><td>添加分析或跟踪代码</td></tr><tr><td><code>:hammer:</code> (锤子)</td><td><code>:hammer:</code></td><td>重大重构</td></tr><tr><td><code>:heavy_minus_sign:</code> (减号)</td><td><code>:heavy_minus_sign:</code></td><td>减少一个依赖</td></tr><tr><td><code>:heavy_plus_sign:</code> (加号)</td><td><code>:heavy_plug_sign:</code></td><td>增加一个依赖</td></tr><tr><td><code>:whale:</code> (鲸鱼)</td><td><code>:whale:</code></td><td>Docker 相关工作</td></tr><tr><td><code>:wrench:</code> (扳手)</td><td><code>:wrench:</code></td><td>修改配置文件</td></tr><tr><td><code>:globe_with_meridians:</code> (地球)</td><td><code>:globe_with_meridians:</code></td><td>国际化与本地化</td></tr><tr><td><code>:pencil2:</code> (铅笔)</td><td><code>:pencil2:</code></td><td>修复 typo</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 收藏安利 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emoji </tag>
            
            <tag> git-commit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 使用过程中的踩坑记录</title>
      <link href="/bugs/git-errors/"/>
      <url>/bugs/git-errors/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>用于记录由于<code>git</code>的不规范使用<code>or</code>其他问题导致的<strong>错误和奇怪现象</strong>，及其实际解决方案汇总。</p></blockquote><span id="more"></span><h3 id="分支信息不同步"><a href="#分支信息不同步" class="headerlink" title="分支信息不同步"></a>分支信息不同步</h3><blockquote><p>用户<code>A</code>删除了本地及远程的某分支<code>fz</code>后，用户<code>B</code>执行<code>git branch -a</code>依旧能够看到该分支.</p></blockquote><p>尽管用户<code>B</code>执行<code>git pull</code>拉取并合并修改，用户<code>B</code>仍然能够看到被删除<code>origin/fz</code>分支.那么此时应该怎么解决？</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 执行下面命令 --- 删除远程不存在，但本地通过指令仍能看到的某 origin/xxx 分支</span><span class="token function">git</span> remote prune origin<span class="token comment"># 如果用户 B 显示本地也还存在 fz 分支，需要再删除本地的 fz（先切到另外一个非 fz 分支，当然不删除也不影响）</span><span class="token function">git</span> branch -d fz</code></pre><h3 id="拒绝合并不相关的历史"><a href="#拒绝合并不相关的历史" class="headerlink" title="拒绝合并不相关的历史"></a>拒绝合并不相关的历史</h3><p><code>refusing to merge unrelated histories: </code>出现这个问题的最主要原因还是在于本地仓库和远程仓库实际上是独立的两个仓库。（例如你在本地初始化了一个仓库，并提交了一些东西，然后与远程仓库建立关联，此时推送就会抛这个异常）直接<code>clone</code>的方式在本地建立起远程<code>github</code>仓库的克隆本地仓库就不会有这个问题。解决办法：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin master --allow-unrelated-histories</code></pre><h3 id="新建分支首次提交错误"><a href="#新建分支首次提交错误" class="headerlink" title="新建分支首次提交错误"></a>新建分支首次提交错误</h3><p><code>There is no tracking information for the current branch</code>，此时需要在推送的时候建立关联，根据提示完成即可：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># (分支名称)，建立关联关系即可</span><span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/xxx</code></pre><h3 id="推送被拒绝"><a href="#推送被拒绝" class="headerlink" title="推送被拒绝"></a>推送被拒绝</h3><p><code>Updates were rejected because a pushed branch tip is behind its remote.</code>推送的分支提示位于其远程提交的后面。比如别人提交了，你并没有拉取最新代码，直接<code>push</code>就会存在该提示。</p><blockquote><p>建议：每次<code>push</code>之前最好先<code>pull</code>拉取并合并代码，如果有冲突就解决冲突，然后再执行<code>push</code>，可以避免很多问题。</p></blockquote><blockquote><p>解决办法：先<code>pull</code>拉取最新代码合并，然后再提交。<strong>或者</strong>: 添加 <code>-f</code> 参数强制推送。</p></blockquote><h3 id="文件名大小写不敏感"><a href="#文件名大小写不敏感" class="headerlink" title="文件名大小写不敏感"></a>文件名大小写不敏感</h3><p>这个在另外一篇<code>git指令使用</code>中也提到过，<code>windows</code>环境下<code>git</code>对大小写识别不敏感，解决办法：</p><blockquote><p>方案一：重命名为另外一个名字，然后提交（一定要提交），然后再改回你要修改的大、小写名称。（不仅麻烦，而且还会多产生一条无关的提交）</p></blockquote><blockquote><p>方案二：使用<code>git mv [file] [newfile]</code>指令修改。</p></blockquote><h3 id="行尾结束符统一"><a href="#行尾结束符统一" class="headerlink" title="行尾结束符统一"></a>行尾结束符统一</h3><p>问题描述及解决方案详见<a href="/envConstruct/git-install-and-terminal-config">-&gt; git 环境搭建</a></p><h3 id="HttpRequestException-encountered"><a href="#HttpRequestException-encountered" class="headerlink" title="HttpRequestException encountered"></a>HttpRequestException encountered</h3><p>使用<code>Git</code>下载或者更新代码时出现<code>fatal：HttpRequestException encountered</code>提示信息，但是它又不会影响 Git 的正常使用</p><blockquote><p>解决办法：更新<code>Windows</code>的<code>git</code>凭证管理器，打开链接，下载安装即可 <a href="https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/tag/v1.14.0">https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/tag/v1.14.0</a></p></blockquote><h3 id="持续更新中…"><a href="#持续更新中…" class="headerlink" title="持续更新中…"></a>持续更新中…</h3>]]></content>
      
      
      <categories>
          
          <category> 踩坑记录 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 的基本使用</title>
      <link href="/tools/git/"/>
      <url>/tools/git/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>Git is a free and open source distributed version control system</p></blockquote><h3 id="Git是用来做什么的"><a href="#Git是用来做什么的" class="headerlink" title="Git是用来做什么的?"></a><code>Git</code>是用来做什么的?</h3><ul><li><p>托管代码到远程，分布式托管，避免本机磁盘损坏造成不可挽回的局面。</p></li><li><p>版本控制，可以发布多个版本并且实现在各个版本之间来回穿梭（实现原理：文件快照，每个版本都会有一个文件快照，比直接备份文件快速便捷。因此，Git 仓库又被称为版本库）。</p></li><li><p>团队协作，强大的分支功能，可以快速实现团队协作</p></li></ul><span id="more"></span><p>环境搭建：<a href="/envConstruct/git-install-and-terminal-config">-&gt; 戳这里</a></p><hr><h3 id="指令使用"><a href="#指令使用" class="headerlink" title="指令使用"></a>指令使用</h3><h4 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token operator">&lt;</span>scope<span class="token operator">></span> <span class="token operator">&lt;</span>key<span class="token operator">></span> <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token comment"># 列出用户级的所有配置信息</span><span class="token function">git</span> config --global -l<span class="token comment"># 增加配置项 默认是获取local配置中内容</span><span class="token function">git</span> config <span class="token punctuation">[</span>--local<span class="token operator">|</span>--global<span class="token operator">|</span>--system<span class="token punctuation">]</span> --get section.key<span class="token comment"># 获取一个配置项</span><span class="token function">git</span> config <span class="token punctuation">[</span>--local<span class="token operator">|</span>--global<span class="token operator">|</span>--system<span class="token punctuation">]</span> --get section.key<span class="token comment"># 删除一个配置项</span><span class="token function">git</span> config <span class="token punctuation">[</span>--local<span class="token operator">|</span>--global<span class="token operator">|</span>--system<span class="token punctuation">]</span> --unset section.key</code></pre><p><code>git</code>的配置级别主要有三类，按优先级顺序分为：<code>local(仓库级)、global(用户级)、system(系统级)</code>：</p><blockquote><p><code>local</code>(仓库级)：对应的配置文件是当前仓库下的<code>.git/config</code> （默认是隐藏的）</p></blockquote><blockquote><p><code>global</code>(用户级)：对应的配置文件是用户宿主目录下的<code>~/.gitconfig</code></p></blockquote><blockquote><p><code>system</code>(系统级)：对应的配置文件是<code>git</code>安装目录下的<code>/etc/gitconfig</code></p></blockquote><h4 id="初始化项目仓库"><a href="#初始化项目仓库" class="headerlink" title="初始化项目仓库"></a>初始化项目仓库</h4><p>区别于克隆，初始化仓库通常是在新建项目时使用。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 第一步：初始化仓库</span><span class="token function">git</span> init<span class="token comment"># 第二步：建立本地仓库与远程仓库的关联</span><span class="token function">git</span> remote <span class="token function">add</span> origin <span class="token punctuation">[</span>线上仓库地址<span class="token punctuation">]</span><span class="token comment"># 如果此命令抛出 fatal: remote origin already exists. 异常，那么继续执行：</span><span class="token function">git</span> remote <span class="token function">rm</span> origin<span class="token function">git</span> remote <span class="token function">add</span> origin <span class="token punctuation">[</span>线上仓库的SSH地址<span class="token punctuation">]</span></code></pre><p><code>注意：.git 文件不能嵌套（仓库不能嵌套）</code></p><h4 id="克隆一个项目"><a href="#克隆一个项目" class="headerlink" title="克隆一个项目"></a>克隆一个项目</h4><p>克隆一个已经存在的项目到本地。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token punctuation">[</span>url<span class="token punctuation">]</span></code></pre><h4 id="一次提交流程"><a href="#一次提交流程" class="headerlink" title="一次提交流程"></a>一次提交流程</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先拉取目标分支的最新代码，拉取之后直接合并。可以简写为 git pull</span><span class="token function">git</span> pull origin <span class="token punctuation">[</span>分支名<span class="token punctuation">]</span><span class="token comment"># git pull = git fetch + git merge</span><span class="token comment"># git fetch origin [分支名] ：先拉取目标分支的最新代码，拉取之后由用户决定是否合并</span><span class="token comment"># 将改动的代码文件添加至暂存区</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token comment"># 也可以 git add [文件名] 来单独添加某一个文件</span><span class="token function">git</span> <span class="token function">add</span> -A<span class="token comment"># 将暂存区的文件提交至本地仓库</span><span class="token function">git</span> commit -m <span class="token string">'这次提交的描述信息'</span><span class="token comment"># 将代码推送到远程 如果不是该分支的第一次推送，可以简写为 git push</span><span class="token function">git</span> push origin <span class="token punctuation">[</span>分支名<span class="token punctuation">]</span><span class="token comment"># 当然这个过程你也可以查看当前仓库的状态</span><span class="token function">git</span> status</code></pre><p>如图：</p><p><a href="/images/tools/git/p1.png"><img src="/images/tools/git/p1.png" alt="git-p1" loading="lazy"></a></p><h4 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log</code></pre><h4 id="移动、重命名文件"><a href="#移动、重命名文件" class="headerlink" title="移动、重命名文件"></a><strong>移动、重命名文件</strong></h4><div class="success"><blockquote><p><code>git mv</code>命令用于移动或重命名一个文件、目录或软连接，可以解决<code>windows</code>环境下<code>git</code>对文件及文件夹大小写不敏感问题。（<del>当然删除再提交，重新添加再提交也是可以滴 😂😂😂</del>）</p></blockquote></div><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先 cd 到你要重命名的文件夹，然后执行下面命令</span><span class="token function">git</span> <span class="token function">mv</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span> <span class="token punctuation">[</span>newfile<span class="token punctuation">]</span><span class="token comment"># eg. root/static/images -> root/static/image</span><span class="token builtin class-name">cd</span> ./static<span class="token function">git</span> <span class="token function">mv</span> images image<span class="token comment"># 重命名的文件夹 已存在，此时的 mv 就是移动指令指--移动到--   如果想移动到 上一级：</span><span class="token function">git</span> <span class="token function">mv</span> files <span class="token punctuation">..</span><span class="token comment"># 对于文件而言，如果已存在，添加 -f 强制修改</span><span class="token function">git</span> <span class="token function">mv</span> -f <span class="token punctuation">[</span>file<span class="token punctuation">]</span> <span class="token punctuation">[</span>newfile<span class="token punctuation">]</span></code></pre><h4 id="存储文件改动"><a href="#存储文件改动" class="headerlink" title="存储文件改动"></a>存储文件改动</h4><p>场景：当前工作区被污染，内容未完成，不想直接提交， 需要切到指定分支版本紧急解决其他需求。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 存储当前工作区的改动（不存储新文件及 ignore 的文件</span><span class="token function">git</span> stash<span class="token comment"># 存储所有改动</span><span class="token function">git</span> stash -a<span class="token comment"># 指定版本 test 并存储</span><span class="token function">git</span> stash save <span class="token string">'test'</span><span class="token comment"># 查看当前存储的所有版本</span><span class="token function">git</span> stash list<span class="token comment"># 弹出最新的存储内容至工作区 并删除存储对应的版本的存储</span><span class="token function">git</span> stash pop<span class="token comment"># 应用指定版本的存储内容至工作区 不删除存储 version 对应存储的版本号 0、1、、</span><span class="token function">git</span> stash apply stash@<span class="token punctuation">&#123;</span>version<span class="token punctuation">&#125;</span><span class="token comment"># 删除指定的存储版本内容 0 为版本号</span><span class="token function">git</span> stash drop stash@<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token comment"># 删除所有的存储</span><span class="token function">git</span> stash <span class="token function">clear</span><span class="token comment"># ...</span></code></pre><h4 id="将某次提交合并至当前分支"><a href="#将某次提交合并至当前分支" class="headerlink" title="将某次提交合并至当前分支"></a>将某次提交合并至当前分支</h4><p>场景：在某个功能分支<code>A</code>上新增了一个功能提交，想在另外一个分支<code>B</code>使用，但又不想让另外这个分支<code>B</code>合并<code>A</code>的其他功能，此时，可以通过<code>cherry-pick</code>将<code>A</code>的某次提交合并到<code>B</code>。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换到分支 B</span><span class="token function">git</span> checkout B<span class="token comment"># 将分支 A 提交的 asgasgasgnajsgank 内容合并当当前的 B 分支</span><span class="token function">git</span> cherry-pick asgasgasgnajsgank<span class="token comment"># 遇到冲突</span><span class="token comment"># 解决冲突 先打开编辑器解决冲突</span><span class="token comment"># -- 工作区是干净的</span><span class="token function">git</span> cherry-pick --continue<span class="token comment"># -- 工作区不干净</span><span class="token function">git</span> <span class="token function">add</span> xxx<span class="token function">git</span> commit -m <span class="token string">''</span><span class="token function">git</span> push 或 <span class="token function">git</span> push origin B<span class="token comment"># 不解决冲突</span><span class="token comment"># -- 退回到 cherry-pick 之前的状态</span><span class="token function">git</span> cherry-pick --abort<span class="token comment"># -- 退出 cherry-pick 但不回到之前的状态</span><span class="token function">git</span> cherry-pick --quit</code></pre><h4 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h4><p>回退到指定版本后，指定版本的后续版本将被删除</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看版本号</span><span class="token function">git</span> log<span class="token comment"># 版本回退至 asgasjgajsga</span><span class="token function">git</span> reset --hard asgasjgajsga<span class="token comment"># 推送更改</span><span class="token comment"># 直接 git push 会报错，因为此时本地的 HEAD 指向版本和远程不一样</span><span class="token function">git</span> push origin A  <span class="token operator">||</span> <span class="token function">git</span> push -f</code></pre><h4 id="还原某一次提交"><a href="#还原某一次提交" class="headerlink" title="还原某一次提交"></a>还原某一次提交</h4><p>场景：用于回退之前的错误提交或者取消某一次的内容提交，不影响其他的提交内容</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 取消 asgasgasgjaj 这次提交</span><span class="token function">git</span> revert -n asgasgasgjaj<span class="token comment"># 遇到冲突先解决</span><span class="token comment"># 提交这次 revert</span><span class="token function">git</span> commit -m <span class="token string">'Revert: 取消 asgasgasgjaj 的提交内容'</span><span class="token comment"># 推送</span><span class="token function">git</span> push</code></pre><h4 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a><strong>分支管理</strong></h4><h5 id="分支查看"><a href="#分支查看" class="headerlink" title="分支查看"></a>分支查看</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看本地分支列表</span><span class="token function">git</span> branch 或 <span class="token function">git</span> branch -a<span class="token comment"># 查看所有分支</span><span class="token function">git</span> branch -l</code></pre><h5 id="分支创建"><a href="#分支创建" class="headerlink" title="分支创建"></a>分支创建</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建分支 A</span><span class="token function">git</span> branch A<span class="token comment"># 指定以 asgasgl 这次提交的内容 创建的分支名 A</span><span class="token function">git</span> branch A asgasgl<span class="token comment"># 创建并切换至分支 B</span><span class="token function">git</span> checkout -b B</code></pre><h5 id="重命名分支"><a href="#重命名分支" class="headerlink" title="重命名分支"></a>重命名分支</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 重命名当前分支为 B</span><span class="token function">git</span> branch -M B</code></pre><h5 id="分支切换"><a href="#分支切换" class="headerlink" title="分支切换"></a>分支切换</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换至分支 B</span><span class="token function">git</span> checkout B</code></pre><h5 id="分支更新"><a href="#分支更新" class="headerlink" title="分支更新"></a>分支更新</h5><p>场景：远程分支被删除，但自己本地显示远程分支存在</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更新远程分支</span><span class="token function">git</span> remote update origin --prune<span class="token comment"># 查看需要清理的本地分支</span><span class="token function">git</span> remote prune origin --dry-run<span class="token comment"># 删除本地存在，但远程不存在的分支</span><span class="token function">git</span> remote prune origin -n</code></pre><h5 id="分支删除"><a href="#分支删除" class="headerlink" title="分支删除"></a>分支删除</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除本地分支 B, 需要先切到一个非 B 的分支 A</span><span class="token function">git</span> checkout A<span class="token function">git</span> branch -d B<span class="token comment"># 删除远程分支 B</span><span class="token function">git</span> push origin --delete B</code></pre><h5 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 功能分支的代码推送至远端</span><span class="token function">git</span> push origin feature/xxx<span class="token comment"># 推送代码并与分支建立关联关系 --- 建立关系后 后续提交可以直接 git push</span><span class="token function">git</span> push -u origin feature/xxx<span class="token comment"># 切换至主分支</span><span class="token function">git</span> checkout develop<span class="token comment"># 拉取主分支最新代码</span><span class="token function">git</span> pull origin develop <span class="token operator">||</span> <span class="token function">git</span> pull<span class="token comment"># 合并功能分支至 develop</span><span class="token function">git</span> merge feature/xxx<span class="token comment"># 遇到冲突 --- 丢弃 不合并了</span><span class="token function">git</span> merge --abort<span class="token comment"># 另外一种变基合并</span><span class="token function">git</span> rebase branch</code></pre><h4 id="为某次提交打标签"><a href="#为某次提交打标签" class="headerlink" title="为某次提交打标签"></a>为某次提交打标签</h4><p>标签分为<strong>轻量标签（<code>lightweight</code>）</strong>与附注标签 <strong>（<code>annotated</code>）</strong></p><h5 id="标签查看"><a href="#标签查看" class="headerlink" title="标签查看"></a>标签查看</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出所有标签</span><span class="token function">git</span> tag<span class="token comment"># 按照通配符列出标签需要 -l 或 --list 选项（下面通配符指 v1.0.0 开头的所有标签）</span><span class="token function">git</span> tag -l <span class="token string">'v1.0.0*'</span><span class="token comment"># 查看具体某一个标签（v1.0.0）信息和与之对应的提交信息</span><span class="token function">git</span> show v1.0.0</code></pre><h5 id="标签创建"><a href="#标签创建" class="headerlink" title="标签创建"></a>标签创建</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -a 创建附注标签（v1.0.0） -m 指定了一条将会存储在标签中的信息</span><span class="token function">git</span> tag -a v1.0.0 -m <span class="token string">"my version 1.4"</span><span class="token comment"># 创建轻量标签（v1.0.0），不包含任何其他信息</span><span class="token function">git</span> tag v1.0.0<span class="token comment"># 针对历史提交记录的某一次的提交，创建标签（v1.0.0）</span><span class="token function">git</span> tag -a v1.0.0 9fceb02xxx</code></pre><h5 id="标签共享（推送远程）"><a href="#标签共享（推送远程）" class="headerlink" title="标签共享（推送远程）"></a>标签共享（推送远程）</h5><p>注意需要显式的推送，不能简写为<code>git push</code>.</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将标签 v1.0.0 推送到远程，方便其他人共享</span><span class="token function">git</span> push origin v1.0.0<span class="token comment"># 将所有标签推送至远程</span><span class="token function">git</span> push origin --tags</code></pre><h5 id="标签删除"><a href="#标签删除" class="headerlink" title="标签删除"></a>标签删除</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除本地标签 v1.0.0</span><span class="token function">git</span> tag -d v1.0.0<span class="token comment"># 删除远程的一个标签 git push &lt;remote> :refs/tags/&lt;tagname></span><span class="token function">git</span> push origin :refs/tags/v1.0.0<span class="token comment"># 或者</span><span class="token function">git</span> push origin --delete v1.0.0</code></pre><h5 id="检出标签"><a href="#检出标签" class="headerlink" title="检出标签"></a>检出标签</h5><p>在标签创建完成后，你在上线之前又做过多次修改。这时你可以检出你之前那个准备发布的版本（打标签的版本）进行部署。</p><p><code>Git</code>中不能真的检出一个标签，因为他们并不能像分支一样来回移动。如果你切换到某个标签后又提交了新东西，那么这些新的提交将不属于任何分支，并且无法访问，除非通过确切的提交哈希才能访问。</p><p>那么<strong>如果真的需要在某一个标签版本修复一些内容：那么推荐的做法是基于这个标签版本创建一个新的分支。</strong>如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># git checkout -b [分支名] [标签名]</span><span class="token function">git</span> checkout -b version1 v1.0.0</code></pre><div class="success"><blockquote><p>说了这么多指令，不用刻意去记，孰能生巧。另外：安利 vscode 的插件 Git Graph、GitLens — Git supercharged，所有的<code>git</code>指令都能通过界面操作。可以看一下我另外一篇文章： <a href="/posts/vscode-setting-and-plugins">vscode 的使用，设置分享以及插件推荐</a></p></blockquote></div><h3 id="代码提交规范"><a href="#代码提交规范" class="headerlink" title="代码提交规范"></a>代码提交规范</h3><p>每一次提交代码时都会写 <code>commit message</code>，如果书写风格不统一，十分不利于阅读和维护。推荐格式：</p><blockquote><p>type(scope) : subject</p></blockquote><p><code>type</code>：指<code>commit</code>的类别，此项必填。</p><ul><li><p><code>feat</code>: <code>new feature for the user, not a new feature for build script</code></p></li><li><p><code>fix</code>: <code>bug fix for the user, not a fix to a build script</code></p></li><li><p><code>docs</code>: <code>changes to the documentation</code></p></li><li><p><code>style</code>: <code>formatting, missing semi colons, etc; no production code change</code></p></li><li><p><code>refactor</code>: <code>refactoring production code, eg. renaming a variable</code></p></li><li><p><code>perf</code>: <code>code or performance optimization</code></p></li><li><p><code>test</code>: <code>adding missing tests, refactoring tests; no production code change</code></p></li><li><p><code>build</code>: <code>change the build tool such as grunt to npm</code></p></li><li><p><code>revert</code>: <code>undo the last commit</code></p></li><li><p><code>chore</code>: <code>updating grunt tasks etc; no production code change</code></p></li></ul><p><code>scope</code>：说明 <code>commit</code> 影响的范围，此项选题</p><p><code>subject</code>：<code>commit</code> 的简短描述，不超过 <code>50</code> 个字符</p><blockquote><p><code>tips</code>：仅作为一个推荐的规范格式，并不会对你的 <code>commit-message</code> 做任何校验，自觉遵守即可；另外如果你的团队有自己的提交规范，请优先以团队提交规范为主。</p></blockquote><blockquote><p>参考：<a href="https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716">Semantic Commit Messages</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具学习 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> git指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode 的使用，设置分享以及插件推荐</title>
      <link href="/posts/vscode-setting-and-plugins/"/>
      <url>/posts/vscode-setting-and-plugins/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>工欲善其事，必先利其器</p></blockquote><p>前端开发工具有很多，类似<code>HBuilder、WebStorm、Visual Studio Code...</code>等，其中<code>vscode</code>以其轻量且强大的代码编辑功能和丰富的插件生态系统，独受前端工师的青睐。</p><span id="more"></span><h3 id="编辑器汉化"><a href="#编辑器汉化" class="headerlink" title="编辑器汉化"></a>编辑器汉化</h3><ul><li><p>方式一：<code>Ctrl+Shift+P</code>，输入<code>configure language</code>回车，在打开的语言配置文件中将<code>en-us</code>修改为<code>zh-cn</code>，<code>Ctrl+S</code>保存设置，重启生效。</p></li><li><p>方式二：插件安装。打开扩展搜索<code>Chinese (Simplified) (简体中文) Language Pack</code>安装，重启生效。</p></li></ul><hr><h3 id="vscode-推荐的用户设置"><a href="#vscode-推荐的用户设置" class="headerlink" title="vscode 推荐的用户设置"></a>vscode 推荐的用户设置</h3><p>左下角设置图标，点击，选择设置，搜索设置，设置以下内容(推荐)。或者直接<code>Ctrl+Shift+P</code>搜索<code>setting.json</code>，直接在文件中编辑修改，界面化操作的设置最终也会同步到该文件中。</p><h4 id="关闭vscode的自动更新"><a href="#关闭vscode的自动更新" class="headerlink" title="关闭vscode的自动更新"></a>关闭<code>vscode</code>的自动更新</h4><p>配置是否接收自动更新，更改后需要重新启动。</p><blockquote><p>update mode:none</p></blockquote><h4 id="默认行尾字符"><a href="#默认行尾字符" class="headerlink" title="默认行尾字符"></a>默认行尾字符</h4><p><code>windows</code>系统环境下的换行方式默认为<code>CRLF: \r\n</code>，<code>linux</code>系统环境下的换行方式默认为<code>LF: \n</code>。配置行位字符为<code>\n</code>。</p><blockquote><p>Eol: \n</p></blockquote><h4 id="自动保存"><a href="#自动保存" class="headerlink" title="自动保存"></a>自动保存</h4><p>避免一些不可逆的异常关闭导致数据丢失。<code>onFocusChange</code>-文件焦点变化时自动保存。</p><blockquote><p>autoSave: onFocusChange</p></blockquote><h4 id="tab相关"><a href="#tab相关" class="headerlink" title="tab相关"></a><code>tab</code>相关</h4><p>配置一个制表符等于的空格数以及是否启用<code>tab</code>补全。</p><blockquote><p>Tab Size: 2</p></blockquote><blockquote><p>Tab Completion: on</p></blockquote><h4 id="‘括号对’着色和匹配"><a href="#‘括号对’着色和匹配" class="headerlink" title="‘括号对’着色和匹配"></a>‘括号对’着色和匹配</h4><p><code>Bracket Pair Colorization</code>插件弃用，插件功能已经被<code>vscode</code>内置。直接设置就可以控制每个括号类型是否具有自己的独立颜色池。</p><blockquote><p>Bracket Pair Colorization: Enabled</p></blockquote><blockquote><p>Bracket Pair Colorzation: Independent Color Pool Per Bracket Type</p></blockquote><blockquote><p>Bracket Pairs: active</p></blockquote><h4 id="其他配置项"><a href="#其他配置项" class="headerlink" title="其他配置项"></a>其他配置项</h4><p>设置字体大小</p><blockquote><p>Font Size: 14</p></blockquote><p>控制在删除括号或者引号时编辑器是否应删除相邻的右引号或右方括号。</p><blockquote><p>Auto Closing Delete: always</p></blockquote><p>在保存文件时自动运行<code>ESLint</code>的自动修复命令<code>eslint --fix</code>，修改<code>setting.json</code></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"editor.codeActionsOnSave"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"source.fixAll.eslint"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 尝试自动修复代码中的 Eslint 问题</span>    <span class="token property">"eslint.autoFixOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 保存时自动应用 Eslint 的修复建议</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>超出显示范围，自动换行（只是显示效果上，并没有真正换行）</p><blockquote><p>word Wrap: on</p></blockquote><p>在<code>Word Wrap</code>为<code>wordWrapColumn</code>或<code>bounded</code>时，控制编辑器的折行列。（与<code>word Wrap: on</code>相悖，根据自己喜好设置）</p><blockquote><p>Word Wrap Column: 100</p></blockquote><p>差异编辑器是否忽略前导空格或尾随空格中的更改。</p><blockquote><p>Ignore Trim Whitespace: false</p></blockquote><hr><h3 id="插件-plugins-推荐"><a href="#插件-plugins-推荐" class="headerlink" title="插件(plugins)推荐"></a>插件(<code>plugins</code>)推荐</h3><h4 id="Guides"><a href="#Guides" class="headerlink" title="Guides"></a><a href="https://marketplace.visualstudio.com/items?itemName=spywhere.guides"><code>Guides</code></a></h4><p>带色竖线提示所属区域块，效果如下：</p><p><a href="/images/posts/vscode-setting-and-plugins/p1.png"><img src="/images/posts/vscode-setting-and-plugins/p1.png" alt="vscode-setting-and-plugins-p1" loading="lazy"></a></p><h4 id="ESLint-代码语法规范校验"><a href="#ESLint-代码语法规范校验" class="headerlink" title="ESLint-代码语法规范校验"></a><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"><code>ESLint</code></a>-代码语法规范校验</h4><p>该扩展使用安装在打开的工作区文件夹中的<code>ESLint</code>库。如果该文件夹没有提供一个，则扩展程序会查找全局安装版本。(需要先安装-一般安装在项目的<code>devDependenice</code>)</p><p>配置文件：添加<code>.eslintrc</code>，或者终端<code>Create ESLint configuration</code>，如果你在全局安装了<code>ESLint</code>，执行<code>eslint --init</code>。</p><h4 id="Prettier-Code-formatter-代码风格格式化"><a href="#Prettier-Code-formatter-代码风格格式化" class="headerlink" title="Prettier - Code formatter-代码风格格式化"></a><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"><code>Prettier - Code formatter</code></a>-代码风格格式化</h4><p>为不同文件配置默认的格式化程序。</p><ul><li><p>可通过界面操作（右键 -&gt; 使用…格式化文档 -&gt; 配置默认格式化程序 -&gt; 选择<code>prettier</code>）</p></li><li><p>在<code>setting.json</code>文件中添加字段配置。</p></li></ul><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token comment">// ... 其他配置</span>  <span class="token property">"[javascript]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><code>prettier</code>相关配置项，可通过下面两种方式设置。</p><ul><li>方式一，添加全局用户配置（<code>vscode</code>设置）</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用单引号。</span>singleQuote: <span class="token boolean">true</span><span class="token comment"># 尽可能控制尾随逗号的输出。</span>trailingComma: all<span class="token comment"># 指定每行代码的最佳长度，如果超出长度则换行。</span>printWidth: <span class="token number">100</span><span class="token comment"># 当箭头函数仅有一个参数时加上括号。</span>arrowParens: always</code></pre><ul><li>方式二：项目的<code>package.json</code>种添加<code>prettier</code>字段配置。</li></ul><h4 id="Document-This-js-ts-注释生成"><a href="#Document-This-js-ts-注释生成" class="headerlink" title="Document This-js/ts-注释生成"></a><a href="https://marketplace.visualstudio.com/items?itemName=oouo-diogo-perdigao.docthis"><code>Document This</code></a>-<code>js/ts</code>-注释生成</h4><p>可以自动为<code>TypeScript</code>和<code>JavaScript</code>文件生成详细的<code>JSDoc</code>注释。使用：</p><ul><li><p>方式一：，光标指中需要注释的函数体，按两次<code>Ctrl + Alt + d</code>即可。</p></li><li><p>方式二：打开命令行方式<code>Ctrl + Shift + p</code>输入<code>document this</code>。</p></li></ul><h4 id="TODO-Highlight-高亮提示"><a href="#TODO-Highlight-高亮提示" class="headerlink" title="TODO Highlight-高亮提示"></a><a href="https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight"><code>TODO Highlight</code></a>-高亮提示</h4><p>代码行添加<code>TODO</code>字样，高亮效果提示。突出尚未完成的功能或者事情。</p><h4 id="GitLens-—-Git-supercharged和Git-Graph"><a href="#GitLens-—-Git-supercharged和Git-Graph" class="headerlink" title="GitLens — Git supercharged和Git Graph"></a><a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"><code>GitLens — Git supercharged</code></a>和<a href="https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph"><code>Git Graph</code></a></h4><p>前者：</p><ul><li>查看单个文件的提交记录</li><li>代码行尾浅色的<code>commit-message</code></li><li>鼠标覆盖到代码块上，可以查看更详细的提交信息和<code>commit-id</code>，更甚至能跳转到当次记录查看详细提交</li><li><code>git</code>命令界面化操作</li><li>其他的侧边栏视图和功能</li></ul><p>后者：</p><ul><li>图形化展示所有分支及结构，可选择性过滤分支再查看</li><li>可直接选择某一次的提交节点右键执行某些操作（<code>revert/cherryPick/createBranch/drop?/checkOut/addTag</code>等）</li><li>点击节点，查看当次提交的详细文件修改，进行代码审查</li><li>单击一个提交，<code>CTRL/CMD</code>单击另一个提交比较任何两个提交</li><li>其他功能</li></ul><h4 id="Search-node-modules-node-modules文件搜索"><a href="#Search-node-modules-node-modules文件搜索" class="headerlink" title="Search node_modules-node_modules文件搜索"></a><a href="https://marketplace.visualstudio.com/items?itemName=jasonnutter.search-node-modules"><code>Search node_modules</code></a>-<code>node_modules</code>文件搜索</h4><p><code>Ctrl + Shift + p</code>，或者<code>Ctrl + p 输入 &gt;</code> 或者按下 <code>F1</code>。在打开的面板中输入或者选择<code>Search node_modules</code>。点击查询出来的<code>Search node_modules</code>后，会根据当前的工作区文件夹查找<code>node_modules</code>并打开，支持<strong>类似</strong><code>Ctrl + f</code>对路径的文件夹或者文件进行搜索。</p><h4 id="DotENV-env文件代码高亮"><a href="#DotENV-env文件代码高亮" class="headerlink" title="DotENV-.env文件代码高亮"></a><a href="https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv"><code>DotENV</code></a>-<code>.env</code>文件代码高亮</h4><h4 id="Import-Cost-内联显示导入的包文件大小"><a href="#Import-Cost-内联显示导入的包文件大小" class="headerlink" title="Import Cost-内联显示导入的包文件大小"></a><a href="https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost"><code>Import Cost</code></a>-内联显示导入的包文件大小</h4><h4 id="Template-String-Converter-字符串与模板字符串的自动转换"><a href="#Template-String-Converter-字符串与模板字符串的自动转换" class="headerlink" title="Template String Converter-字符串与模板字符串的自动转换"></a><a href="https://marketplace.visualstudio.com/items?itemName=meganrogge.template-string-converter"><code>Template String Converter</code></a>-字符串与模板字符串的自动转换</h4><h4 id="TypeScript-Barrel-Generator-ts文件导出到index"><a href="#TypeScript-Barrel-Generator-ts文件导出到index" class="headerlink" title="TypeScript Barrel Generator-ts文件导出到index"></a><a href="https://marketplace.visualstudio.com/items?itemName=eliostruyf.vscode-typescript-exportallmodules"><code>TypeScript Barrel Generator</code></a>-<code>ts</code>文件导出到<code>index</code></h4><p>允许通过或者自动导出某个文件夹（模块）的所有<code>export</code>至<code>index.ts</code>，使用时直接引入<code>index</code>即可。</p><p>使用：</p><ul><li><p>方式一：右键文件夹，选择<code>Typescript: export all modules</code></p></li><li><p>方式二：手动创建<code>index.ts</code>，如下：</p></li></ul><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 例如 folder/a、folder/b 都 export 了一些变量或者函数</span><span class="token comment">// 创建 folder/index.ts</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'./a'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'./b'</span><span class="token punctuation">;</span></code></pre><h4 id="Code-Runner-代码运行器"><a href="#Code-Runner-代码运行器" class="headerlink" title="Code Runner-代码运行器"></a><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner"><code>Code Runner</code></a>-代码运行器</h4><p>点击编辑器右上角类似 |&gt; 的按钮，即可执行当前文件代码片段，并在编辑器内输出结果。</p><h4 id="Path-Intellisense-路径感知"><a href="#Path-Intellisense-路径感知" class="headerlink" title="Path Intellisense-路径感知"></a><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense"><code>Path Intellisense</code></a>-路径感知</h4><p>输入路径时，智能提示，帮助自动完成文件名填充。</p><h4 id="Better-Comments-注释美化"><a href="#Better-Comments-注释美化" class="headerlink" title="Better Comments-注释美化"></a><code>Better Comments</code>-注释美化</h4><p>根据特殊字符前缀标识不同类型的注释。</p><h4 id="Auto-Rename-Tag和Auto-Close-Tag"><a href="#Auto-Rename-Tag和Auto-Close-Tag" class="headerlink" title="Auto Rename Tag和Auto Close Tag"></a><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"><code>Auto Rename Tag</code></a>和<a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag"><code>Auto Close Tag</code></a></h4><p>前者：标签重命名时，成对的另外一半标签会自动重命名。</p><p>后者：输入前半个标签<code>&lt;div&gt;</code>，会自动生成另外一半用于关闭的标签<code>&lt;/div&gt;</code></p><h4 id="Error-Lens"><a href="#Error-Lens" class="headerlink" title="Error Lens"></a><a href="https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens"><code>Error Lens</code></a></h4><p>通过使诊断更加突出来增强语言诊断功能，突出显示语言生成的诊断的整行，并内联打印消息。</p><h4 id="Pretty-TypeScript-Errors"><a href="#Pretty-TypeScript-Errors" class="headerlink" title="Pretty TypeScript Errors"></a><a href="https://marketplace.visualstudio.com/items?itemName=yoavbls.pretty-ts-errors"><code>Pretty TypeScript Errors</code></a></h4><p>使 <code>VSCode</code> 中的 <code>TypeScript</code> 错误更加美观且易于阅读。</p><h4 id="Markdown-All-in-One-Markdown-所有功能支持"><a href="#Markdown-All-in-One-Markdown-所有功能支持" class="headerlink" title="Markdown All in One-Markdown 所有功能支持"></a><a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one"><code>Markdown All in One</code></a>-<code>Markdown 所有功能支持</code></h4><p>在<code>typora</code>开始收费后，发现的一款<code>markdown</code>插件。<code>.md</code>文件的右上角类似窗口扩展的查看图标，点击后会在右侧窗口打开<code>Markdown</code>的预览效果页面。</p><h4 id="open-in-browser-浏览器打开文件"><a href="#open-in-browser-浏览器打开文件" class="headerlink" title="open in browser-浏览器打开文件"></a><a href="https://marketplace.visualstudio.com/items?itemName=techer.open-in-browser"><code>open in browser</code></a>-浏览器打开文件</h4><p>在写<code>html</code>文件的时候，方便快速在浏览器打开该文件。<code>Alt + b</code>快捷键打开，或者右键 <code>open in browser</code>。对应还有一个插件<code>View In Browser</code>，不过作者已经不再维护了。</p><h4 id="Color-Highlight-颜色代码效果实时预览"><a href="#Color-Highlight-颜色代码效果实时预览" class="headerlink" title="Color Highlight-颜色代码效果实时预览"></a><a href="https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight"><code>Color Highlight</code></a>-颜色代码效果实时预览</h4><p>如果你不仅仅是想预览颜色，而是需要类似<code>picker</code>的颜色选择器来对已有的颜色进行修改，可以安装另外一个插件<code>Flutter Color</code>，又或者你可以两者一起使用。</p><h4 id="Code-Spell-Checker-单词拼写检测"><a href="#Code-Spell-Checker-单词拼写检测" class="headerlink" title="Code Spell Checker-单词拼写检测"></a><a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker"><code>Code Spell Checker</code></a>-单词拼写检测</h4><p>自动捕获常见的（单词）拼写错误，同时降低误报，适用于驼峰式代码。</p><h4 id="filesize-实时观测文件bundle"><a href="#filesize-实时观测文件bundle" class="headerlink" title="filesize-实时观测文件bundle"></a><a href="https://marketplace.visualstudio.com/items?itemName=mkxml.vscode-filesize"><code>filesize</code></a>-实时观测文件<code>bundle</code></h4><p>在状态栏中显示当前文件大小，点击状态栏中的文件大小时，会在<code>OUTPUT</code>中输出<code>Gzip</code>大小。</p><h4 id="json2ts-将剪贴板内容转为ts-interface"><a href="#json2ts-将剪贴板内容转为ts-interface" class="headerlink" title="json2ts-将剪贴板内容转为ts-interface"></a><a href="https://marketplace.visualstudio.com/items?itemName=GregorBiswanger.json2ts"><code>json2ts</code></a>-将剪贴板内容转为<code>ts-interface</code></h4><p>简直<code>yyds...</code>，实际开发过程中，如果你使用到了<code>ts</code>，可以为你省去很多定义类型的时间。~~比如：将接口返回的数据转为 interface ~~</p><p>除了这个插件以外，你也可以到 <a href="http://json2ts.com/">http://json2ts.com/</a> 实现更完整的转换（因为插件只会提取<code>json</code>内容进行转换）</p><h4 id="koroFileHeader-or-fileheader-在文件头生成作者信息"><a href="#koroFileHeader-or-fileheader-在文件头生成作者信息" class="headerlink" title="[koroFileHeader or fileheader]-在文件头生成作者信息"></a>[<code>koroFileHeader</code> or <code>fileheader</code>]-在文件头生成作者信息</h4><p>感觉很鸡肋的一个功能 <del>git 的 文件变更记录同样可以查看，且更加强大</del> …目前没怎么用到，不排除别的项目组有这种爱好…</p><h4 id="vscode-pdf-预览pdf"><a href="#vscode-pdf-预览pdf" class="headerlink" title="vscode-pdf-预览pdf"></a><a href="https://marketplace.visualstudio.com/items?itemName=tomoki1207.pdf">vscode-pdf</a>-预览<code>pdf</code></h4><h4 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a><a href="https://marketplace.visualstudio.com/items?itemName=LeetCode.vscode-leetcode"><code>LeetCode</code></a></h4><p>LeetCode 在 VS Code 中刷题。<del>（如果你觉得有必要）</del></p><h4 id="CodeGeeX-代码自动补全"><a href="#CodeGeeX-代码自动补全" class="headerlink" title="CodeGeeX-代码自动补全"></a><a href="https://marketplace.visualstudio.com/items?itemName=aminer.codegeex"><code>CodeGeeX</code></a>-代码自动补全</h4><p>功能没有 <code>github Copilot</code> 强大，但胜在免费，可以白嫖…</p><h4 id="GitHub-Repositories-在-vscode-中打开-github-项目"><a href="#GitHub-Repositories-在-vscode-中打开-github-项目" class="headerlink" title="GitHub Repositories-在 vscode 中打开 github 项目"></a><a href="https://marketplace.visualstudio.com/items?itemName=GitHub.remotehub"><code>GitHub Repositories</code></a>-在 <code>vscode</code> 中打开 <code>github</code> 项目</h4><p>方便查阅库源码…</p><h4 id="Jest-Jest-测试工具"><a href="#Jest-Jest-测试工具" class="headerlink" title="Jest-Jest 测试工具"></a><a href="https://marketplace.visualstudio.com/items?itemName=Orta.vscode-jest"><code>Jest</code></a>-<code>Jest</code> 测试工具</h4><p>此扩展支持 <code>vscode</code> 环境中的完整 <code>jest</code> 功能，使测试更加直观和有趣。如果扩展程序可以找到 <code>jest</code> 命令，默认情况下它将在启动时自动运行并监视监视模式下的所有测试，并且您应该在 <code>TestExplorer</code> 和编辑器中看到测试、状态、错误、覆盖率（如果启用）</p><div class="success"><blockquote><p>框架相关</p></blockquote></div><h4 id="ES7-React-Redux-React-Native-snippets-React代码片段"><a href="#ES7-React-Redux-React-Native-snippets-React代码片段" class="headerlink" title="ES7+ React/Redux/React-Native snippets-React代码片段"></a><a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets"><code>ES7+ React/Redux/React-Native snippets</code></a>-<code>React</code>代码片段</h4><p>集成了<code>ES7</code>标准及一下的语法片段…意味着例如<code>JavaScript (ES6) code snippets</code>提供的片段，也是支持的…</p><h4 id="Vue-3-Snippets-Vue代码片段"><a href="#Vue-3-Snippets-Vue代码片段" class="headerlink" title="Vue 3 Snippets-Vue代码片段"></a><a href="https://marketplace.visualstudio.com/items?itemName=hollowtree.vue-snippets"><code>Vue 3 Snippets</code></a>-<code>Vue</code>代码片段</h4><p>基于<code>Vue 2 Snippets</code>开发的兼容适配<code>Vue 3</code>的插件。另外一个片段插件<code>VueHelper</code>。</p><h4 id="TypeScript-Vue-Plugin-Volar-Ts-Vue-插件"><a href="#TypeScript-Vue-Plugin-Volar-Ts-Vue-插件" class="headerlink" title="TypeScript Vue Plugin (Volar)-Ts-Vue 插件"></a><a href="https://marketplace.visualstudio.com/items?itemName=Vue.vscode-typescript-vue-plugin"><code>TypeScript Vue Plugin (Volar)</code></a>-<code>Ts-Vue</code> 插件</h4><p>用于让 <code>TS</code> 服务器识别 <code>*.vue</code> 文件。</p><ul><li>在 <code>*.ts</code> 文件中查找引用时，您还可以从 <code>*.vue</code> 文件中获取结果</li><li>在 <code>*.ts</code> 文件中重命名时，对 <code>*.vue</code> 文件的引用也会进行调整</li><li>当输入 <code>import</code> 语句时，<code>*.vue</code> 文件也会出现以进行自动补全</li></ul><h4 id="Vue-Language-Features-Volar-Vue-语言扩展"><a href="#Vue-Language-Features-Volar-Vue-语言扩展" class="headerlink" title="Vue Language Features (Volar)-Vue 语言扩展"></a><a href="https://marketplace.visualstudio.com/items?itemName=Vue.volar"><code>Vue Language Features (Volar)</code></a>-<code>Vue 语言扩展</code></h4><p>为<code>Vue template</code>提供原生的<code>TypeScript</code>语言服务。<strong>推荐在<code>Vue3</code>项目中开启。</strong></p><h4 id="Vetur-Vue2相关支持"><a href="#Vetur-Vue2相关支持" class="headerlink" title="Vetur-Vue2相关支持"></a><a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur"><code>Vetur</code></a>-<code>Vue2相关支持</code></h4><p><strong>推荐在<code>Vue2</code>项目中使用，<code>Vue3</code>项目请禁用。</strong></p><ul><li>语法、语义高亮</li><li><code>Vue</code>代码片段</li><li>格式化相关代码</li><li>智能感知及<code>debug</code></li><li>错误检测</li><li>其他功能</li></ul><div class="success"><blockquote><p>主题相关</p></blockquote></div><h4 id="One-Dark-Pro和Material-Theme-vscode主题"><a href="#One-Dark-Pro和Material-Theme-vscode主题" class="headerlink" title="One Dark Pro和Material Theme-vscode主题"></a><a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme"><code>One Dark Pro</code></a>和<a href="https://marketplace.visualstudio.com/items?itemName=Equinusocio.vsc-material-theme"><code>Material Theme</code></a>-<code>vscode主题</code></h4><h4 id="Material-Icon-Theme-vscode文件图标主题"><a href="#Material-Icon-Theme-vscode文件图标主题" class="headerlink" title="Material Icon Theme-vscode文件图标主题"></a><a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme"><code>Material Icon Theme</code></a>-<code>vscode文件图标主题</code></h4><hr><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><p>以下组合键 <code>+</code> 代表组合的意思…</p><h4 id="缩放视口"><a href="#缩放视口" class="headerlink" title="缩放视口"></a>缩放视口</h4><p><code>Ctrl + +</code> or <code>Ctrl + -</code> 分别表示放大&#x2F;缩小</p><h4 id="跳转到代码行"><a href="#跳转到代码行" class="headerlink" title="跳转到代码行"></a>跳转到代码行</h4><p><code>Ctrl + g</code>或者<code>Ctrl + p</code>输入<code>:</code>，再输入行号回车，即可完成行跳转</p><h4 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h4><p><code>Ctrl + p</code>输入文件名，回车。文件內搜索<code>Ctrl + f</code></p><h4 id="打开最近工作区或者文件（夹）"><a href="#打开最近工作区或者文件（夹）" class="headerlink" title="打开最近工作区或者文件（夹）"></a>打开最近工作区或者文件（夹）</h4><p><code>Ctrl + r</code> 选择你的工作区，按住<code>Ctrl</code>点击打开，会新开一个<code>vscode</code>打开。不加<code>Ctrl</code>会在当前窗口替换并打开。</p><h4 id="新建文件和新开vscode"><a href="#新建文件和新开vscode" class="headerlink" title="新建文件和新开vscode"></a>新建文件和新开<code>vscode</code></h4><p><code>Ctrl + n</code>新建文件，<code>Ctrl + Shift + n</code>新开<code>vscode</code>。</p><h4 id="新键行"><a href="#新键行" class="headerlink" title="新键行"></a>新键行</h4><p><code>Ctrl + 回车</code>，效果类似在行尾按下回车。带来的便捷就是不需要先将光标移动到行尾。</p><h4 id="打开文件Ctrl-o，打开、关闭终端Ctrl"><a href="#打开文件Ctrl-o，打开、关闭终端Ctrl" class="headerlink" title="打开文件Ctrl + o，打开、关闭终端Ctrl + ~"></a>打开文件<code>Ctrl + o</code>，打开、关闭终端<code>Ctrl + ~</code></h4><h4 id="代码行快速复制、剪贴"><a href="#代码行快速复制、剪贴" class="headerlink" title="代码行快速复制、剪贴"></a>代码行快速复制、剪贴</h4><p>当需要对整行代码操作时，无需选中直接<code>Ctrl + c</code>即可复制，<code>Ctrl + x</code>即可剪贴。</p><p>同时按住<code>Shift + Alt + 方向键（上/下）</code>，可实现基于当前行的向上向下复制粘贴。</p><h4 id="缩进调整"><a href="#缩进调整" class="headerlink" title="缩进调整"></a>缩进调整</h4><p><code>Tab</code>向后缩进，<code>Shift + Tab</code>向前缩进。</p><h4 id="批量选中"><a href="#批量选中" class="headerlink" title="批量选中"></a>批量选中</h4><p>按住<code>Shift</code>，鼠标左键点击开头结尾（或者方向键），即可选中。<code>Ctrl + a</code>选中所有。选中变量<code>or</code>函数后<code>Ctrl + d</code>持续使用即可<strong>批量查找</strong>该函数或变量。</p><h4 id="修改引用"><a href="#修改引用" class="headerlink" title="修改引用"></a>修改引用</h4><p>鼠标点击变量或者函数，按下<code>F2</code>，输入你要更改的名称，回车即可<strong>同步修改</strong>所有用到该变量的名称。</p><h4 id="添加注释"><a href="#添加注释" class="headerlink" title="添加注释"></a>添加注释</h4><p>单行注释<code>Ctrl + /</code>，多行注释<code>Shift + Alt + a</code>。</p><h4 id="多光标"><a href="#多光标" class="headerlink" title="多光标"></a>多光标</h4><p>按住<code>Alt</code>键，鼠标左键每次点击都会生成一个新的光标。或者<code>Ctrl + Alt + 方向键</code>创建多个光标。</p><h4 id="窗口拆分"><a href="#窗口拆分" class="headerlink" title="窗口拆分"></a>窗口拆分</h4><p><code>Ctrl + \</code>，在右侧开一个编辑器。</p><h4 id="窗口视图移动（滚轮效果）"><a href="#窗口视图移动（滚轮效果）" class="headerlink" title="窗口视图移动（滚轮效果）"></a>窗口视图移动（滚轮效果）</h4><p>按住<code>Ctrl</code>，点击方向键上下，即可实现滚动。</p><h4 id="代码行移动"><a href="#代码行移动" class="headerlink" title="代码行移动"></a>代码行移动</h4><p>按住<code>Alt</code>，点击方向键上下，即可完成光标代码行的移动，如行 11 移动到行 19。</p><h4 id="代码debug"><a href="#代码debug" class="headerlink" title="代码debug"></a>代码<code>debug</code></h4><ul><li><p>方式一：可以选择侧边栏的调试按钮，选择配置进行调试。</p></li><li><p>方式二：<code>F5</code>运行调试。</p></li></ul><h4 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h4><blockquote><p>(Code 快捷键 Shift + Alt + F) 格式化工具使用 prettier</p></blockquote><blockquote><p>(Code 快捷键 Shift + Alt + O) 整理 import 引用</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 收藏安利 </category>
          
          <category> VScode插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> plugins </tag>
            
            <tag> 设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows 环境的 git-bash 终端美化</title>
      <link href="/posts/git-bash-prettify/"/>
      <url>/posts/git-bash-prettify/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="Before-this"><a href="#Before-this" class="headerlink" title="Before this"></a>Before this</h3><p>最开始是想着直接安装<code>zsh</code>，但是或多或少还是存在问题。</p><p>比如：安装完了过后，除去<code>vscode</code>的其他运行方式和环境都很<code>ok</code>，在<code>vscode</code>的<code>terminal</code>中，如果使用<code>git-bash</code>并且安装了<code>zsh</code>，那么只要<code>terminal</code>的窗口视图发生变化（新建、拆分终端，又或者改变<code>terminal</code>的高度），都会导致命令行无法正常输入，就像卡死了一般。其他的运行方式，比如直接右键在文件中使用<code>git-bash</code>，又或者是在<code>windows-terminal</code>中使用，都是没得问题的。如果有想要了解的伙伴，可以参考这篇文章。<a href="https://zhuanlan.zhihu.com/p/455925403">一文搞定<code>Windows Terminal</code>设置与<code>zsh</code>安装【非<code>WSL</code>】</a></p><p>当然，如果<strong>只是想美化</strong>，做到类似<code>zsh</code>的显示效果，有没有办法咧？<del>💀💀💀</del></p><span id="more"></span><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>找到文件<code>git-prompt.sh</code>，在安装目录下的<code>Git/etc/profile.d/git-prompt.sh</code>。右键在<code>vscode</code>中打开，或者终端输入<code>code git-prompt.sh(绝对路径，或者相对路径都可以)</code>。</p><p>替换为下面代码。实际只修改了<code>$PS1</code>的值：</p><blockquote><p>注意：\w 表示的详细路径，如果只想展示当前工作区，设置为 \W</p></blockquote><blockquote><p>类似于 [\033[32m] 这样的值，是命令行的颜色色值，具体可参考：<a href="https://gist.github.com/vratiu/9780109">.bash_aliases</a></p></blockquote><pre class="language-sh" data-language="sh"><code class="language-sh">if test -f &#x2F;etc&#x2F;profile.d&#x2F;git-sdk.shthen    TITLEPREFIX&#x3D;SDK-$&#123;MSYSTEM#MINGW&#125;else    TITLEPREFIX&#x3D;$MSYSTEMfiif test -f ~&#x2F;.config&#x2F;git&#x2F;git-prompt.shthen    . ~&#x2F;.config&#x2F;git&#x2F;git-prompt.shelse    PS1&#x3D;&#39;\[\033]0;Bash\007\]&#39;      # 窗口标题    # PS1&#x3D;&quot;$PS1&quot;&#39;\n&#39;               # 换行    PS1&#x3D;&quot;$PS1&quot;&#39;\[\033[32m\]&#39;     # 高亮绿色    PS1&#x3D;&quot;$PS1&quot;&#39;➜ &#39;               # 右箭头    PS1&#x3D;&quot;$PS1&quot;&#39;\[\033[33m\]&#39;     # 高亮黄色    PS1&#x3D;&quot;$PS1&quot;&#39;[\w]&#39;                 # 当前目录    if test -z &quot;$WINELOADERNOEXEC&quot;    then        GIT_EXEC_PATH&#x3D;&quot;$(git --exec-path 2&gt;&#x2F;dev&#x2F;null)&quot;        COMPLETION_PATH&#x3D;&quot;$&#123;GIT_EXEC_PATH%&#x2F;libexec&#x2F;git-core&#125;&quot;        COMPLETION_PATH&#x3D;&quot;$&#123;COMPLETION_PATH%&#x2F;lib&#x2F;git-core&#125;&quot;        COMPLETION_PATH&#x3D;&quot;$COMPLETION_PATH&#x2F;share&#x2F;git&#x2F;completion&quot;        if test -f &quot;$COMPLETION_PATH&#x2F;git-prompt.sh&quot;        then            . &quot;$COMPLETION_PATH&#x2F;git-completion.bash&quot;            . &quot;$COMPLETION_PATH&#x2F;git-prompt.sh&quot;            PS1&#x3D;&quot;$PS1&quot;&#39;\[\033[31m\]&#39;   # 红色            PS1&#x3D;&quot;$PS1&quot;&#39;&#96;__git_ps1&#96;&#39;    # git 插件        fi    fi    PS1&#x3D;&quot;$PS1&quot;&#39;\[\033[0;36m\] &#39;      # 青色fiMSYS2_PS1&#x3D;&quot;$PS1&quot;</code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><a href="/images/posts/git-bash-prettify/p1.png"><img src="/images/posts/git-bash-prettify/p1.png" alt="&#39;git-bash-preview&#39;" loading="lazy"></a></p><div class="primary"><blockquote><p>把你的脸迎向阳光，那就不会有阴影</p></blockquote></div>]]></content>
      
      
      <categories>
          
          <category> 收藏安利 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git-bash </tag>
            
            <tag> terminal </tag>
            
            <tag> 终端美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vscode 配置 GitBash 作为默认的 Terminal</title>
      <link href="/envConstruct/vscode-terminal-config/"/>
      <url>/envConstruct/vscode-terminal-config/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>将 <code>Git Bash</code>设置为 <code>VSCode</code> 的默认终端，能够为我们开发带来很多好处：</p><ul><li><p>一致性: 如果你在命令行中已经熟悉使用 <code>Git Bash</code> 或类似的 <code>Unix-like</code> 命令行工具，将其设置为 <code>VSCode</code> 的默认终端可以保持工作环境的一致性，无需切换不同的终端。</p></li><li><p>强大的命令行支持: <code>Git Bash</code> 提供了强大的命令行支持，可以执行各种 <code>Git</code> 命令和其他命令行任务，无需离开 <code>VSCode</code> 界面。</p></li><li><p>集成 <code>Git:</code> 使用 <code>Git Bash</code> 作为默认终端可以确保与 <code>Git</code> 版本控制工作流的紧密集成。你可以轻松地提交、推送、拉取和解决冲突，同时观察 <code>Git</code> 操作的输出。</p></li><li><p>自定义性: <code>Git Bash</code> 和 <code>VSCode</code> 都支持丰富的自定义选项。你可以根据自己的偏好配置终端的外观和行为。</p></li></ul><p>…</p><span id="more"></span><h3 id="VsCode-Terminal配置为默认git-bash"><a href="#VsCode-Terminal配置为默认git-bash" class="headerlink" title="VsCode Terminal配置为默认git-bash"></a><code>VsCode Terminal</code>配置为默认<code>git-bash</code></h3><ul><li><p>找到<code>Terminal &gt; Integrated &gt; Profiles: Windows</code>，选择在<code>settings.json</code>中编辑。</p></li><li><p>添加<code>GItBash</code>子项（注意首字母大写，我配置的时候小写没有生效，不知道是不是版本问题导致的）修改<code>path</code>，如下图。</p></li><li><p>配置默认的<code>terminal</code>为<code>GitBash</code>, 方式一：设置中搜索<code>Default Profile: Windows</code>，选择<code>GitBash</code>，方式二：直接在<code>settings</code>中添加下面配置。</p></li></ul><p><a href="/images/envConstruct/vscode-terminal-config/p1.png"><img src="/images/envConstruct/vscode-terminal-config/p1.png" alt="&#39;vscode-terminal&#39;" loading="lazy"></a></p><h3 id="配置指令的alias"><a href="#配置指令的alias" class="headerlink" title="配置指令的alias"></a>配置指令的<code>alias</code></h3><p>打开文件<code>bash.bashrc</code>，在安装目录下的<code>Git/etc/bash.bashrc</code>。</p><p>末尾添加：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">blog</span><span class="token operator">=</span><span class="token string">'cd /e/flynn/flynna.github.io'</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">serve</span><span class="token operator">=</span><span class="token string">'yarn serve'</span><span class="token comment"># ...</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
          <category> Vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Windows 中安装和使用 WSL</title>
      <link href="/envConstruct/wsl-ubuntu/"/>
      <url>/envConstruct/wsl-ubuntu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a><code>Overview</code></h3><p><code>WSL（Windows Subsystem for Linux，全称 Microsoft-Windows-Subsystem-Linux）</code>是一种由微软开发的在 <code>Windows</code> 操作系统上运行 <code>Linux</code> 应用程序的兼容性层（模拟 <code>Linux</code> 运行环境 | 轻型虚拟机）。</p><p><code>WSL</code> 支持多个 <code>Linux</code> 发行版，包括 <code>Ubuntu</code>、<code>Debian</code>、<code>Kali Linux</code>（操作系统）。</p><p><strong>注意：在 <code>WSL</code> 中，只有一个默认的 <code>Linux</code> 发行版版本，即 <code>Ubuntu</code>。其他的操作系统可以通过应用商店安装，<code>WSL</code> 提供了兼容性支持。</strong></p><span id="more"></span><h3 id="安装-WSL"><a href="#安装-WSL" class="headerlink" title="安装 WSL"></a>安装 <code>WSL</code></h3><p>打开 <code>Windows PowerShell</code>，执行以下命令：</p><ul><li>安装 <code>WSL2</code>(推荐)：</li></ul><pre class="language-css" data-language="css"><code class="language-css"><span class="token comment">/* 这个指令默认会设置 WSL 版本为 2 */</span>wsl --install</code></pre><ul><li>安装 <code>WSL1</code>(旧版<code>Windows</code>)：</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /online 指定在当前正在运行的操作系统中执行操作</span><span class="token comment"># /enable-feature 启用一个或多个 Windows 功能</span><span class="token comment"># /featurename:Microsoft-Windows-Subsystem-Linux 指定要启用的特定功能，即 WSL</span><span class="token comment"># /all 启用所有依赖于指定功能的子功能</span><span class="token comment"># /norestart 在完成操作后不要重新启动计算机</span><span class="token comment"># 启用 Linux 子系统</span>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart<span class="token comment"># 启用虚拟机</span>dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart<span class="token comment"># 下载 Linux 内核更新包 ---> 安装 ---> 设置 WSL 版本号</span><span class="token comment"># 下载子操作系统 （可以在应用商店里下载安装）</span><span class="token comment"># 设置账户密码</span></code></pre><blockquote><p><code>dism.exe</code> 是 <code>Windows</code> 操作系统中的一个命令行工具，全称为 <code>Deployment Image Servicing and Management (DISM)</code>。它用于管理和维护 <code>Windows</code> 映像文件（如 <code>Windows</code> 安装文件和映像文件）以及 <code>Windows</code> 组件、驱动程序和软件包。</p></blockquote><h3 id="切换-WSL-版本"><a href="#切换-WSL-版本" class="headerlink" title="切换 WSL 版本"></a>切换 <code>WSL</code> 版本</h3><h4 id="查看-Linux-分发版本"><a href="#查看-Linux-分发版本" class="headerlink" title="查看 Linux 分发版本"></a>查看 <code>Linux</code> 分发版本</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入 wsl</span>wsl<span class="token comment"># 查看</span>lsb_release -a</code></pre><h4 id="查看已下载的版本"><a href="#查看已下载的版本" class="headerlink" title="查看已下载的版本"></a>查看已下载的版本</h4><pre class="language-bash" data-language="bash"><code class="language-bash">wsl -l -v<span class="token comment"># eg. Ubuntu Running 2 安装的 Ubuntu 使用的是 WSL 2</span></code></pre><h4 id="设置切换版本"><a href="#设置切换版本" class="headerlink" title="设置切换版本"></a>设置切换版本</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 默认使用 WSL2</span>wsl --set-default-version <span class="token number">2</span><span class="token comment"># 切换版本 使用 Ubuntu-20.04 的 WSL 1 版本</span>wsl --set-version Ubuntu-20.04 <span class="token number">1</span></code></pre><h3 id="安装-WSL-的操作系统-Ubuntu"><a href="#安装-WSL-的操作系统-Ubuntu" class="headerlink" title="安装 WSL 的操作系统 Ubuntu"></a>安装 <code>WSL</code> 的操作系统 <code>Ubuntu</code></h3><ul><li><p>应用商店安装<code>Ubuntu</code></p><p>下载安装后启动，设置用户名密码，设置完成后会启动 <code>Ubuntu</code>，然后执行 <code>Linux</code> 程序和命令</p></li><li><p>命令行安装</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># or wsl --install -d Ubuntu-20.04 [这个过程可能需要管理员权限]</span>wsl --install -d Ubuntu</code></pre><h3 id="启动-x2F-退出-WSL"><a href="#启动-x2F-退出-WSL" class="headerlink" title="启动&#x2F;退出 WSL"></a>启动&#x2F;退出 <code>WSL</code></h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动</span>wsl<span class="token comment"># 退出 关闭终端 | 关机 直接退出 or (↓推荐 exit)</span><span class="token builtin class-name">exit</span><span class="token comment"># or 关闭所有正在运行的 WSL 会话 [在非 Ubuntu 环境下执行 wsl 命令, 比如新建窗口]</span>wsl --shutdown</code></pre><blockquote><p>首次启动会提示输入用户名和密码</p></blockquote><h4 id="忘记账户密码"><a href="#忘记账户密码" class="headerlink" title="忘记账户密码"></a>忘记账户密码</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入默认的 WSL 系统</span>wsl -u root<span class="token comment"># 进入指定系统 &lt;名称> ---> Ubuntu</span>wsl -d <span class="token operator">&lt;</span>名称<span class="token operator">></span> -u root<span class="token comment"># 修改密码 &lt;username> 对应忘记密码的账户名</span><span class="token function">passwd</span> <span class="token operator">&lt;</span>username<span class="token operator">></span><span class="token comment"># 修改成功 退出</span><span class="token builtin class-name">exit</span></code></pre><h3 id="包管理器sudo"><a href="#包管理器sudo" class="headerlink" title="包管理器sudo"></a>包管理器<code>sudo</code></h3><p><code>sudo</code> 是 <code>Linux</code> 和 <code>Unix</code> 操作系统中用于暂时获取管理员权限的命令。它允许用户使用根级别权限执行命令，是发行版的首选包管理器。</p><h4 id="更新软件包"><a href="#更新软件包" class="headerlink" title="更新软件包"></a>更新软件包</h4><blockquote><p><code>sudo</code> 是在 <code>Unix、Linux</code> 和类似系统中用于以超级用户或管理员权限执行命令的指令</p></blockquote><blockquote><p>例如 <code>sudo -u john ls /home/john</code> 这会以 <code>john</code> 用户身份执行 <code>ls /home/john</code> 命令，而不是当前用户的身份。</p></blockquote><p>建议<strong>定期更新和升级包</strong>。以管理员权限更新 <code>Ubuntu</code> 操作系统的软件包列表:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动并进入 Ubuntu</span>wsl<span class="token comment"># 更新、升级软件包</span><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> upgrade</code></pre><h4 id="安装-x2F-删除软件包"><a href="#安装-x2F-删除软件包" class="headerlink" title="安装&#x2F;删除软件包"></a>安装&#x2F;删除软件包</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 以管理员身份安装软件包</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token punctuation">[</span>package-name<span class="token punctuation">]</span><span class="token comment"># 删除包</span><span class="token function">sudo</span> <span class="token function">apt</span> remove <span class="token punctuation">[</span>package-name<span class="token punctuation">]</span></code></pre><h3 id="文件存储和内存占用"><a href="#文件存储和内存占用" class="headerlink" title="文件存储和内存占用"></a>文件存储和内存占用</h3><p>既然 <code>WSL</code> 提供了虚拟机环境，那么在 <code>Ubuntu</code> 安装的文件又去了哪里，内存又是怎么分配的？</p><blockquote><p><code>Ubuntu</code> 文件大小可能会随着使用情况而变化，因此建议定期检查并管理 <code>Ubuntu</code> 的文件占用空间，以确保磁盘空间充足。</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入 wsl 启动 Ubuntu</span>wsl<span class="token comment"># du [选项] [目录或文件] 查看文件内存占用 du -s[总计]-h[可读性] [目录未指定时统计当前目录]</span><span class="token function">du</span> -sh<span class="token comment">#  只统计 /path 前两层子目录的磁盘占用</span><span class="token function">du</span> -h --max-depth<span class="token operator">=</span><span class="token number">2</span> /path</code></pre><ul><li><p><code>Ubuntu</code> 文件存储在 <code>Windows</code> 文件系统的虚拟磁盘文件（通常为 VHD 或 VHDX 格式 <code>\\wsl$\Ubuntu\</code>）。<code>\\wsl$</code> 是一个特殊的 <code>UNC (Uniform Naming Convention)</code> 路径，可用于访问 <code>WSL</code> 的文件系统。</p><p>默认情况下存储在 <code>Windows</code> 用户目录下的隐藏目录中，具体路径为 <code>%LOCALAPPDATA%\Packages\&lt;DistroName&gt;\LocalState\</code> <del>不建议去动它，避免造成不可预知的错误</del></p></li><li><p><code>WSL</code> 会将文件映射到 <code>Ubuntu</code> 文件系统中，使得 <code>Ubuntu</code> 中也可以访问和操作这些文件。<code>据我自己测试，是在 /mnt 文件夹下，eg. /mnt/c/...</code></p></li></ul><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><table><thead><tr><th>name</th><th align="left">含义</th></tr></thead><tbody><tr><td><code>/bin</code></td><td align="left">包含了可执行的二进制文件，用于存放系统和用户级的基本命令和工具。</td></tr><tr><td><code>/boot</code></td><td align="left">包含了系统引导相关的文件，如内核文件、引导加载程序和引导配置文件等。</td></tr><tr><td><code>/dev</code></td><td align="left">包含了设备文件，用于与系统中的设备进行交互，如硬盘、终端、USB 设备等。</td></tr><tr><td><code>/etc</code></td><td align="left">包含了系统级的配置文件，如网络配置、用户账户配置、服务配置等。</td></tr><tr><td><code>/home</code></td><td align="left">包含了用户的个人目录，每个用户都有一个对应的目录，用于存放用户的个人文件、配置文件和设置。</td></tr><tr><td><code>/lib</code> 和 <code>/lib64</code></td><td align="left">分别包含了系统和用户级的共享库文件，用于支持程序运行时的依赖关系。</td></tr><tr><td><code>/media</code></td><td align="left">用于挂载可移动介质，如光盘、USB 设备等。</td></tr><tr><td><code>/opt</code></td><td align="left">用于安装第三方软件的目录，通常由用户自行安装的软件会被安装到该目录下。</td></tr><tr><td><code>/proc</code></td><td align="left">包含了内核和进程相关的虚拟文件系统，用于查看系统运行时的信息和状态。</td></tr><tr><td><code>/root</code></td><td align="left">超级用户（root）的个人目录，通常只有超级用户才有权限访问。</td></tr><tr><td><code>/sbin</code></td><td align="left">包含了系统级的可执行二进制文件，用于存放系统管理和维护的工具。</td></tr><tr><td><code>/srv</code></td><td align="left">用于存放系统服务相关的数据文件，如网站的数据文件、FTP 服务器的文件等。</td></tr><tr><td><code>/tmp</code></td><td align="left">用于存放临时文件和目录，通常在系统重启时会被清空。</td></tr><tr><td><code>/usr</code></td><td align="left">用于存放用户级的应用程序、库文件、头文件、文档等。</td></tr><tr><td><code>/var</code></td><td align="left">包含了系统运行时产生的变化的文件，如日志文件、数据库文件、缓存文件等。</td></tr></tbody></table><blockquote><p>如果需要查看文件内容</p></blockquote><h3 id="文件操作指令"><a href="#文件操作指令" class="headerlink" title="文件操作指令"></a>文件操作指令</h3><p>一些常用的文件操作指令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建文件夹</span><span class="token function">mkdir</span> <span class="token punctuation">[</span>文件夹名称<span class="token punctuation">]</span><span class="token comment"># 创建空文件 touch test.txt</span><span class="token function">touch</span> <span class="token punctuation">[</span>文件名<span class="token punctuation">]</span><span class="token comment"># 删除文件 -r[删除所有文件] -f[强制删除，不提示]   rm -rf *</span><span class="token function">rm</span> <span class="token punctuation">[</span>文件名<span class="token punctuation">]</span><span class="token comment"># 移动 | 重命名文件 文件 -> 文件夹 || 文件夹 -> 文件夹[已存在]，为移动，否则就是重命名</span><span class="token function">mv</span> <span class="token punctuation">[</span>旧文件<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件 <span class="token operator">|</span> 文件夹路径<span class="token punctuation">]</span><span class="token comment"># 复制文件 同上解释</span><span class="token function">cp</span> <span class="token punctuation">[</span>旧文件<span class="token punctuation">]</span> <span class="token punctuation">[</span>新文件名 <span class="token operator">|</span> 路径<span class="token punctuation">]</span><span class="token comment"># 创建并写入内容到文件</span><span class="token builtin class-name">echo</span> <span class="token string">"Hello, World!"</span> <span class="token operator">></span> file.txt<span class="token comment"># 查看文件内容</span><span class="token function">cat</span> <span class="token punctuation">[</span>文件名<span class="token punctuation">]</span><span class="token comment"># 分页查看内容</span><span class="token function">less</span> <span class="token punctuation">[</span>文件名<span class="token punctuation">]</span><span class="token function">more</span> <span class="token punctuation">[</span>文件名<span class="token punctuation">]</span><span class="token comment"># 使用文本编辑器编辑文件 --- 详细可见另外一篇文章 【vi、vim 编辑器学习】</span>vi/vim <span class="token punctuation">[</span>文件名<span class="token punctuation">]</span><span class="token function">nano</span> <span class="token punctuation">[</span>文件名<span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
          <category> WSL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> terminal </tag>
            
            <tag> wsl </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 常用 alias 别名配置</title>
      <link href="/posts/git-alias/"/>
      <url>/posts/git-alias/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="点亮你的技巧点"><a href="#点亮你的技巧点" class="headerlink" title="点亮你的技巧点"></a>点亮你的技巧点</h3><p>通过更加简洁易记的单词或者短语来标记常用的指令–别名<code>alias</code>。它的另外一个不容忽视的好处就是可以尽可能的避免指令输出错误~~</p><span id="more"></span><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><code>eg.</code>配置<code>git status</code>的<code>status</code>别名为<code>st</code>：</p><blockquote><p>git config –global alias.st status</p></blockquote><p>添加<code>--global</code>针对用户级起作用，如果不加，则只会在当前仓库起作用</p><p>除了通过指令进行设置以外，你可以打开<code>~/.globalConfig</code>文件，然后编辑录入你想要的<code>alias</code>…语法如下：</p><pre class="language-none"><code class="language-none">[alias]  st &#x3D; status  xx &#x3D; xxxx</code></pre><p>这样就配置好了，例如上面配置的<code>status</code>，当你从<code>terminal</code>录入<code>git s</code>的指令时，会自动使用<code>git status</code>来替换当前指令。</p><p>有的童鞋要说了，那都这样了 我<code>git</code>也想简写，行否？当然是可以滴~~😋😋😋</p><p>例如我平时提交代码的<code>terminal</code>是<code>git bash</code>，我们可以为<code>git bash</code>添加<code>alias</code>的配置项，辅助识别指令：找到<code>~/.bash_profile</code>或者是<code>prefix/etc/bash.bashrc</code>，末尾追加：</p><blockquote><p><code>alias g=&#39;git&#39;</code></p></blockquote><p>现在<code>g st</code>就等价<code>git status</code>…有木有感觉很爽？既然知道了怎么配，大家根据自己的日常习惯和需要，进行配置即可…</p><p>写下我常用的一些<code>alias</code>配置，其中有一部分也是官方推荐的配置项： -&gt; <a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-Git-%E5%88%AB%E5%90%8D">这里</a></p><table><thead><tr><th align="center">别名<code>alias</code></th><th align="left">原指</th></tr></thead><tbody><tr><td align="center"><code>a</code></td><td align="left"><code>add .</code></td></tr><tr><td align="center"><code>cm</code></td><td align="left"><code>commit -m</code></td></tr><tr><td align="center"><code>st</code></td><td align="left"><code>status</code></td></tr><tr><td align="center"><code>co</code></td><td align="left"><code>checkout</code></td></tr><tr><td align="center"><code>ci</code></td><td align="left"><code>commit</code></td></tr><tr><td align="center"><code>rci</code></td><td align="left"><code>commit --amend --no-edit</code></td></tr><tr><td align="center"><code>br</code></td><td align="left"><code>branch</code></td></tr><tr><td align="center"><code>unstage</code></td><td align="left"><code>reset HEAD</code></td></tr><tr><td align="center"><code>last</code></td><td align="left"><code> log -1</code></td></tr><tr><td align="center"><code>lg</code></td><td align="left"><code>log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit</code></td></tr><tr><td align="center"><code>pr</code></td><td align="left"><code>pull --rebase</code></td></tr><tr><td align="center"><code>pl</code></td><td align="left"><code>pull</code></td></tr></tbody></table><p>例如：<code>g last</code> 可以查看最近一条的<code>git</code>提交记录，<code>g rci</code>可以将暂存区内的文件改动合并至上一次提交，且不生成新的提交记录 <del>有时候修改了内容提交了才发现，可能忘记 format ？ 或者是变量名拼写错误？等等需要重新编辑提交的，但又不想在日志中再生成一条提交记录，就可以使用 rci 并入提交</del>，<code>g unstage</code>可以取消<code>add</code>到暂存区的文件，<code>lg</code>可以查看<code>git</code>提交日志。</p>]]></content>
      
      
      <categories>
          
          <category> 收藏安利 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git-alias </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 环境搭建</title>
      <link href="/envConstruct/git-install/"/>
      <url>/envConstruct/git-install/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p><code>Git</code> 是一个分布式版本控制系统，用于跟踪文件和代码的变化，协作开发以及管理项目的版本。<strong>是支持版本管理、多人协作、分支管理、轻量级、开源，并拥有丰富的生态系统</strong></p></blockquote><span id="more"></span><h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p><code>傻瓜式安装，选择盘符- 注意安装过程中会提示是否将bash加入右键菜单，勾选</code></p><p><a href="https://git-scm.com/download/win">windows 下载</a></p><p><a href="https://git-scm.com/download/mac">mac 下载</a></p><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><h4 id="配置当前git用户信息"><a href="#配置当前git用户信息" class="headerlink" title="配置当前git用户信息"></a>配置当前<code>git</code>用户信息</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token punctuation">[</span>git提交显示的用户名<span class="token punctuation">]</span><span class="token function">git</span> config --global user.email <span class="token punctuation">[</span>git提交用户所属邮箱<span class="token punctuation">]</span><span class="token comment"># 查看系统配置</span><span class="token function">git</span> config --system --list <span class="token operator">||</span> <span class="token function">git</span> config --system -l<span class="token comment"># 查看用户全局配置</span><span class="token function">git</span> config --global --list <span class="token operator">||</span> <span class="token function">git</span> config --global -l<span class="token comment"># 查看当前仓库配置</span><span class="token function">git</span> config --local --list <span class="token operator">||</span> <span class="token function">git</span> config --local -l</code></pre><h4 id="配置git规范"><a href="#配置git规范" class="headerlink" title="配置git规范"></a>配置<code>git</code>规范</h4><div class="primary"><blockquote><p>换行符约束（问题记录）</p></blockquote></div><p>多人协作项目，如果其他人用的时<code>linux</code>，你用的<code>windows</code>，会存在行尾结束符问题扰乱协作，因为<code>windows</code>使用回车和换行两个字符来结束一行。</p><p>配置<code>core.autocrlf</code>可以避免这个问题。</p><p>参数说明：</p><blockquote><p>true：默认值，拉取（签出）代码的时候，LF 会被转换成 CRLF。大家也应该发现了，如果源代码中是 LF，那么提交的时候肯定会遇到错误冲突 LF would be replaced by CRLF.</p></blockquote><blockquote><p>input：提交（签入）时把 CRLF 转换成 LF。同理，当远程仓库源代码使用的是 CRLF，那么提交也会遇到错误冲突 CRLF would be replaced by LF.</p></blockquote><blockquote><p>false：取消此功能，即签入签出代码时，不做任何处理。源代码是 LF，那么提交就是 LF，源代码是 CRLF，那么提交也就是 CRLF。所以，当遇到上面两种错误冲突时，设置为 false 通常可以避免。</p></blockquote><p>如果项目中没有对源文件的换行符作出规定，**源代码使用的是 LF，设置<code>autocrlf=input</code>, 源代码使用的是 CRLF，设置<code>autocrlf=true</code>**。</p><p>当我用<code>windows</code>电脑<code>git clone</code>代码的时候，若我的<code>autocrlf</code>(在<code>windows</code>下安装<code>git</code>，该选项默认为<code>true</code>)为<code>true</code>，那么文件每行会被自动转成以<code>CRLF</code>结尾，若对文件不做任何修改，<code>pre-commit</code>执行<code>eslint</code>的时候就会提示你删除<code>CR</code>。</p><p>项目仓库中一般是<code>Linux</code>环境下提交的代码，文件换行符默认是以<code>LF</code>结尾的(工程化需要，统一标准)，如果你是<code>windows</code>用户，设置为<code>false</code>最稳妥。<del>毕竟不可能每个项目都去配一次，而不同的项目完全有可能是不同的环境和换行符，设置为 false 可以避免这个问题</del></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global core.autocrlf <span class="token boolean">false</span></code></pre><h4 id="配置密钥对"><a href="#配置密钥对" class="headerlink" title="配置密钥对"></a>配置密钥对</h4><p>生成公钥和私钥，用于上传代码时的安全验证</p><pre class="language-none"><code class="language-none">在git bash里执行命令ssh-keygen 一路回车，就可以生成密钥对，默认密钥对是存放在(&#x2F;c&#x2F;Users&#x2F;[主机用户名]&#x2F;.ssh&#x2F;) 。这个目录下有两个文件， .pub就是公钥，另外一个是私钥到线上（gitlab或其他平台）打开设置-&gt;安全设置-&gt;ssh公钥，把本地的公钥文件全选复制进来，输入登录密码，就配置成功了。</code></pre><h4 id="配置https-proxy代理"><a href="#配置https-proxy代理" class="headerlink" title="配置https.proxy代理"></a>配置<code>https.proxy</code>代理</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global https.proxy http:<span class="token punctuation">\</span><span class="token number">127.0</span>.0.1:xxx</code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> git-bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nvm 安装及 Node 环境搭建</title>
      <link href="/envConstruct/nvm-and-node-install/"/>
      <url>/envConstruct/nvm-and-node-install/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p><code>NVM（Node Version Manager）</code> 是一个用于管理和切换 <code>Node.js</code> 版本的开发工具。</p><p>它允许开发者在同一台计算机上安装和管理多个 <code>Node.js</code> 版本，以便在不同的项目中使用不同的 <code>Node.js</code> 版本，或者在同一项目中切换到特定版本以确保兼容性。</p><span id="more"></span><blockquote><h3 id="nvm下载及安装"><a href="#nvm下载及安装" class="headerlink" title="nvm下载及安装"></a><code>nvm</code>下载及安装</h3></blockquote><p>下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases">链接</a></p><p><code>下载exe的package文件，选择自定义的安装盘符，傻瓜式安装即可，环境变量会自动添加。</code></p><p>安装完成后，配置<code>node</code>及<code>nvm</code>的<code>mirror</code>地址 (不配置会导致下载<code>node</code>后，在下载<code>npm</code>过程中可能会发生错误，需要手动下载安装<code>npm</code>)。配置如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 方式一：手动添加到配置文件中：nvm安装目录/settings.txt 末尾追加</span>node_mirror: https://npm.taobao.org/mirrors/node/npm_mirror: https://npm.taobao.org/mirrors/npm/<span class="token comment"># 方式二：通过指令修改</span>nvm node_mirror <span class="token punctuation">[</span>url<span class="token punctuation">]</span>nvm npm_mirror <span class="token punctuation">[</span>url<span class="token punctuation">]</span></code></pre><blockquote><h3 id="安装node以及npm"><a href="#安装node以及npm" class="headerlink" title="安装node以及npm"></a>安装<code>node</code>以及<code>npm</code></h3></blockquote><p><code>打开windows terminal，并以管理员身份运行(避免权限问题导致安装过程抛出异常)</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示所有可以下载的 NodeJs 版本：</span>nvm list available<span class="token comment"># 安装指定版本的 NodeJs (选择版本号安装) 你可以安装多个版本</span>nvm <span class="token function">install</span> <span class="token number">14.5</span>.0<span class="token comment"># or 直接安装最新版(不建议)</span>nvm <span class="token function">install</span> latest<span class="token comment"># 列出你以及安装的 NodeJs 版本，下面一行指令同 nvm list</span>nvm list installed<span class="token comment"># 使用某个版本号的 NodeJs (从你安装的版本中选择)</span>nvm use <span class="token number">14.5</span>.0</code></pre><p>检测<code>node及npm</code>是否成功安装：出现版本号代表安装成功</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> -v<span class="token function">npm</span> -v</code></pre><p>如果<code>nvm</code>没有配置<code>mirror</code>，或者其他原因导致你的<code>npm</code>不能正常下载安装。可以通过上面配置的方式，重新安装<code>node</code>，会自动匹配对应的<code>npm</code>下载安装。当然你想手动安装并配置<code>npm</code>，也是 ok 的，如下介绍手动配置方式：(正常安装请跳过)</p><ul><li><p>根据<code>nvm</code>下载安装<code>node</code>时，抛出的异常信息得知<code>npm</code>的下载地址：<a href="https://github.com/npm/cli/releases/tag/v6.14.11">下载 npm</a></p></li><li><p>将<code>npm</code>解压到<code>nvm/v指定版本/node_modules/</code>下，将<code>npm</code>解压文件夹重命名为<code>npm</code></p></li><li><p>将<code>npm/bin/</code>文件下的<code>npm</code>及<code>npx</code>相关文件拷贝到<code>nvm/v指定版本/</code>下</p></li><li><p>在当前目录打开终端，输入<code>npm -v</code>，出现版本号表示安装成功，如果换了文件夹后提示指令不存在，可在环境变量<code>path</code>内添加当前路径</p></li></ul><blockquote><h3 id="nrm的安装及切换镜像源"><a href="#nrm的安装及切换镜像源" class="headerlink" title="nrm的安装及切换镜像源"></a><code>nrm</code>的安装及切换镜像源</h3></blockquote><p><code>nrm</code>提供了快速切换镜像源的方案，如果通过<code>npm</code>指令配置，则无需安装</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 全局安装</span><span class="token function">npm</span> i<span class="token punctuation">(</span>install<span class="token punctuation">)</span> nrm -g<span class="token comment"># 检测是否安装成功</span>nrm --version<span class="token comment"># 列出可用的镜像源</span>nrm <span class="token function">ls</span><span class="token comment"># 测试镜像地址速度</span>nrm <span class="token builtin class-name">test</span><span class="token comment"># 切换到指定镜像</span>nrm use <span class="token punctuation">[</span>镜像名称<span class="token punctuation">]</span></code></pre><blockquote><h3 id="npm全局配置及yarn安装"><a href="#npm全局配置及yarn安装" class="headerlink" title="npm全局配置及yarn安装"></a><code>npm</code>全局配置及<code>yarn</code>安装</h3></blockquote><ul><li>安装<code>yarn</code></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># [下载镜像安装](https://classic.yarnpkg.com/en/docs/install#windows-stable)</span><span class="token comment"># npm 安装</span><span class="token function">npm</span> <span class="token function">install</span> --global <span class="token function">yarn</span><span class="token comment"># [2.x 安装使用](https://yarnpkg.com/getting-started/install)</span></code></pre><ul><li>配置<code>npm</code>及<code>yarn</code>的<code>registry</code>：</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 默认源</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmjs.org<span class="token function">yarn</span> config <span class="token builtin class-name">set</span> registry https://registry.yarnpkg.com<span class="token comment"># 配置到内网环境</span><span class="token function">npm</span> config --global <span class="token builtin class-name">set</span> registry http://172.xxx/repository/npm/<span class="token comment"># 配置淘宝镜像</span><span class="token comment"># (截止22-5-31)</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span class="token function">yarn</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span class="token comment"># new</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmmirror.com<span class="token comment"># 配置源，且同步安装使用 cnpm</span><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npmmirror.com<span class="token comment"># 如果命令行修改失败 - 手动修改配置 c:/用户/user/.npmrc 文件</span><span class="token assign-left variable">registry</span><span class="token operator">=</span>http://172.xxx/repository/npm/<span class="token comment"># 其他镜像</span><span class="token assign-left variable">CHROMEDRIVER_CDNURL</span><span class="token operator">=</span><span class="token string">"https://registry.npmmirror.com/-/binary/chromedriver"</span><span class="token assign-left variable">SASS_BINARY_SITE</span><span class="token operator">=</span><span class="token string">"https://registry.npmmirror.com/-/binary/node-sass"</span><span class="token assign-left variable">PUPPETEER_DOWNLOAD_HOST</span><span class="token operator">=</span><span class="token string">"https://registry.npmmirror.com/-/binary"</span><span class="token assign-left variable">NODEJS_ORG_MIRROR</span><span class="token operator">=</span><span class="token string">"https://registry.npmmirror.com/-/binary/node"</span><span class="token assign-left variable">NVM_NODEJS_ORG_MIRROR</span><span class="token operator">=</span><span class="token string">"https://registry.npmmirror.com/-/binary/node"</span></code></pre><ul><li>设置全局安装及缓存路径</li></ul><p><code>配置使用 set，查看使用 get。除了指令设置配置项外，也可手动添加配置，文件位置：~/.npmrc ~/.yarnrc</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 清除缓存</span><span class="token function">npm</span> cache clean --force<span class="token function">yarn</span> cache clean<span class="token comment"># 设置全局安装位置</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> prefix <span class="token string">'C:\Users\xx\AppData\Roaming\npm'</span><span class="token function">yarn</span> config <span class="token builtin class-name">set</span> global-folder <span class="token string">"D:\yarn\yarnDate"</span><span class="token comment"># 设置缓存路径，默认在 c 盘</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> cache <span class="token string">"C:\Users\xx\AppData\Roaming<span class="token entity" title="\n">\n</span>pm_cache"</span><span class="token function">yarn</span> config <span class="token builtin class-name">set</span> cache-folder e:<span class="token punctuation">\</span>YarnCache<span class="token comment"># 查看配置信息 --global or -l</span><span class="token function">npm</span> config <span class="token function">ls</span><span class="token function">yarn</span> config list</code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nvm </tag>
            
            <tag> node </tag>
            
            <tag> nrm </tag>
            
            <tag> npm </tag>
            
            <tag> yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Gitalk 评论模块的自动化创建</title>
      <link href="/posts/hexo-gitalk-auto-init/"/>
      <url>/posts/hexo-gitalk-auto-init/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>目前几乎所有的 <code>hexo</code> 框架都为大家集成了 <code>comment</code> 评论模块，本文主要面向的是这部分已集成 <code>Gitalk</code> 评论的博客。<del>当然，你也可以通过插件集成到没有提供 comment 的 hexo 也是可以的 😊😊😊</del></p><p>在该框架基础上，完成 <code>写文章 -&gt; 文章发布 -&gt; issue 初始化 -&gt; 可评论</code> 这个自动化流程。</p><p>避免打开新发布的博客文章后，<strong>底部提示 <code>未找到相关的 Issues 进行评论 请联系\***\***\* 初始化创建</code>，需要登陆 <code>github</code>，完成初始化后才能使用</strong>。</p><p>​ 咱总不能新写一篇文章就去仓库手动初始化 <code>issue</code> 吧….有点阔怕 🤐🤐🤐</p><span id="more"></span><h3 id="自动化创建-issues-评论仓库"><a href="#自动化创建-issues-评论仓库" class="headerlink" title="自动化创建 issues 评论仓库"></a>自动化创建 <code>issues</code> 评论仓库</h3><h4 id="sitemap-站点地图"><a href="#sitemap-站点地图" class="headerlink" title="sitemap 站点地图"></a><code>sitemap</code> 站点地图</h4><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知 <code>Google</code> 和其他搜索引擎。搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站 。</p><p>​ 简言之，就是通过 <code>sitemap</code>，记录下当前博客的所有地址链接(包括所有的文章)，用于后期自动化创建。</p><ul><li>通过插件生成 <code>sitemap</code> ( 在你 <code>hexo</code> 的根目录，执行下面两个命令来安装针对 <code>google</code> 和百度的插件 )：</li></ul><blockquote><p><code>npm i hexo-generator-sitemap hexo-generator-baidu-sitemap --save</code></p></blockquote><ul><li>根目录下的 <code>_config.yml</code> 配置 <code>sitemap</code> 映射</li></ul><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># hexo sitemap网站地图</span><span class="token key atrule">sitemap</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> sitemap.xml<span class="token key atrule">baidusitemap</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> baidusitemap.xml</code></pre><ul><li>执行 <code>hexo generate</code> , <code>public</code> 文件夹下面，就会生成 <code>sitemap.xml</code>和<code>baidusitemap.xml </code></li></ul><h4 id="access-token-获取"><a href="#access-token-获取" class="headerlink" title="access token 获取"></a><code>access token</code> 获取</h4><p>​ 有了 <code>sitemap</code> 后， 我们需要调用 <code>github</code> 的相关接口，<code>token</code> 必不可少，<code>token</code> 怎么获取呢？ 创建一个就是了</p><ul><li><a href="https://github.com/settings/tokens/new">创建一个 <code>access token</code></a></li><li><code>access token</code> 配置项： <code>Note</code> 描述(随便写), <code>Select scopes / repo</code> 勾选 <code>repo:status repo_deployment public_repo</code></li><li>将生成的 <code>token</code> 记录下来，方便自动化时使用</li></ul><h4 id="添加脚本文件"><a href="#添加脚本文件" class="headerlink" title="添加脚本文件"></a>添加脚本文件</h4><ul><li>安装脚本文件依赖包</li></ul><blockquote><p><code>npm i request xml-parser yamljs cheerio --save</code></p></blockquote><ul><li>添加 <code>comment.js</code> 脚本代码（部分代码需要结合自身情况修改）</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> xmlParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'xml-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">YAML</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'yamljs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cheerio'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据自己的情况进行配置</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">'GitHub 用户名'</span><span class="token punctuation">,</span> <span class="token comment">// GitHub 用户名</span>  <span class="token literal-property property">token</span><span class="token operator">:</span> <span class="token string">'GitHub Token'</span><span class="token punctuation">,</span> <span class="token comment">// GitHub Token</span>  <span class="token literal-property property">repo</span><span class="token operator">:</span> <span class="token string">'xxx.github.io'</span><span class="token punctuation">,</span> <span class="token comment">// 存放 issues的git仓库</span>  <span class="token comment">// sitemap.xml的路径，commit.js放置在根目录下，无需修改，其他情况自行处理</span>  <span class="token literal-property property">sitemapUrl</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./public/sitemap.xml'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">kind</span><span class="token operator">:</span> <span class="token string">'Gitalk'</span><span class="token punctuation">,</span> <span class="token comment">// "Gitalk" or "Gitment"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> issuesUrl <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://api.github.com/repos/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>config<span class="token punctuation">.</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>config<span class="token punctuation">.</span>repo<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/issues?access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>config<span class="token punctuation">.</span>token<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token keyword">let</span> requestGetOpt <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>issuesUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;page=1&amp;per_page=1000</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  <span class="token literal-property property">json</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">'User-Agent'</span><span class="token operator">:</span> <span class="token string">'github-user'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> requestPostOpt <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span>requestGetOpt<span class="token punctuation">,</span>  <span class="token literal-property property">url</span><span class="token operator">:</span> issuesUrl<span class="token punctuation">,</span>  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>  <span class="token literal-property property">form</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'开始初始化评论...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'开始检索链接，请稍等...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> websiteConfig <span class="token operator">=</span> <span class="token constant">YAML</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>      fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./_config.yml'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> urls <span class="token operator">=</span> <span class="token function">sitemapXmlReader</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>sitemapUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">共检索到</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>urls<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">个链接</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'开始获取已经初始化的issues:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> issues <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">send</span><span class="token punctuation">(</span>requestGetOpt<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">已经存在</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>issues<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">个issues</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> notInitIssueLinks <span class="token operator">=</span> urls<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">link</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token operator">!</span>issues<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        link <span class="token operator">=</span> <span class="token function">removeProtocol</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> item<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>notInitIssueLinks<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">本次有</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>notInitIssueLinks<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">个链接需要初始化issue：</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>notInitIssueLinks<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'开始提交初始化请求, 大约需要40秒...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**       * 部署好网站后，直接执行start，新增文章并不会生成评论       * 经测试，最少需要等待40秒，才可以正确生成， 怀疑跟github的api有关系，没有找到实锤       */</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> initRet <span class="token operator">=</span> <span class="token keyword">await</span> notInitIssueLinks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>requestGetOpt<span class="token punctuation">,</span> <span class="token literal-property property">url</span><span class="token operator">:</span> item <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> title <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> pathLabel <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span>path<span class="token punctuation">;</span>          <span class="token keyword">let</span> body <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;br>&lt;br></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>websiteConfig<span class="token punctuation">.</span>description<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>          <span class="token keyword">let</span> form <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> body<span class="token punctuation">,</span> <span class="token literal-property property">labels</span><span class="token operator">:</span> <span class="token punctuation">[</span>config<span class="token punctuation">.</span>kind<span class="token punctuation">,</span> pathLabel<span class="token punctuation">]</span><span class="token punctuation">,</span> title <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>requestPostOpt<span class="token punctuation">,</span> form <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">已完成</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>initRet<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">个！</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'可以愉快的发表评论了！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">40000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'本次发布无新增页面，无需初始化issue!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">初始化issue出错，错误如下：</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">sitemapXmlReader</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> sitemap <span class="token operator">=</span> <span class="token function">xmlParser</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> sitemap<span class="token punctuation">.</span>root<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> loc <span class="token operator">=</span> url<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> item<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'loc'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> loc<span class="token punctuation">.</span>content<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">removeProtocol</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> url<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">request</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>修改代码中 <code>config</code> 部分 <code>username</code>、 <code>token</code>、<code> repo</code> (存放 <code>issues</code> 的仓库名称)</li></ul><h4 id="脚本执行"><a href="#脚本执行" class="headerlink" title="脚本执行"></a>脚本执行</h4><ul><li>执行下面的命令，就可以部署站点，并初始化所有的评论了。</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo generatehexo deploy<span class="token function">node</span> ./comment.js</code></pre><ul><li>也可以通过在站点根目录的 <code>package.json</code> 文件中，新建 <code>npm</code> 脚本</li></ul><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"talk"</span><span class="token operator">:</span> <span class="token string">"hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy &amp;&amp; node ./comment.js"</span><span class="token punctuation">&#125;</span></code></pre><ul><li>执行 <code>yarn talk</code> 即可一键完成所有操作</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>​ 第一步中的 <code>sitemap</code> 插件会生成的 <code>sitemap.xml</code> 会包含<strong>全部的界面</strong>，包括标签页、关于页等，执行上面的代码也会对这些页面生成评论框(也就是 <code>issue</code>) ，我在原作者的基础上添加了文章的过滤逻辑：</p><ul><li>过滤 <code>sitemap</code> 中非文章的链接</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// comment.js 42 行</span><span class="token keyword">const</span> oUrls <span class="token operator">=</span> <span class="token function">sitemapXmlReader</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>sitemapUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// oUrls 即为分析出的网站链接 字符串数组 --- 添加自身的过滤逻辑</span><span class="token comment">// 我这里，访问每个文章时，链接上都有时间信息，即 2021/xx/xx 按照时间格式过滤掉非md文档的链接</span><span class="token keyword">const</span> urls <span class="token operator">=</span> oUrls<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">l</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\/(\d&#123;4&#125;)\/(\d&#123;2&#125;)\/(\d&#123;2&#125;)\/</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>id</code> 规则不一样导致的 <code>issues-lable</code> 与文章不匹配</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在生成 gitalk时，每一篇文章有一个独立的 id， 规则是不同主题自己定的 即： new Gitalk 传入的 id 规则</span><span class="token comment">// 调整 comment.js 66 行(3-hexo 主题 文章id 通过 decodeURI解过码)</span></code></pre><pre class="language-diff" data-language="diff"><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> let pathLabel = url.parse(item).path;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> let pathLabel = decodeURI(url.parse(item).pathname);</span></span></code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://daihaoxin.github.io/post/322747ae.html"><code>nodejs</code> 版本的 <code>Gitalk/Gitment</code> 评论自动初始化</a></p>]]></content>
      
      
      <categories>
          
          <category> 收藏安利 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> gitalk </tag>
            
            <tag> issue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Gitalk 实现评论功能</title>
      <link href="/posts/hexo-gitalk-generate/"/>
      <url>/posts/hexo-gitalk-generate/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="关于-gitalk"><a href="#关于-gitalk" class="headerlink" title="关于 gitalk"></a>关于 gitalk</h3><p><a href="https://github.com/gitalk/gitalk">Gitalk</a> 是一个基于 <code>GitHub Issue</code> 和 <code>Preact</code> 开发的评论插件。 <a href="https://gitalk.github.io/"> https://gitalk.github.io/ </a></p><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul><li>使用 <code>GitHub</code> 登录</li><li>支持多语言 <code>[en, zh-CN, zh-TW, es-ES, fr, ru, de, pl, ko, fa, ja]</code></li><li>支持个人或组织</li><li>无干扰模式（设置 <code>distractionFreeMode</code> 为 <code>true</code> 开启）</li><li>快捷键提交评论 （<code>cmd|ctrl + enter</code>）</li></ul><span id="more"></span><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li><code>cdn</code> 方式直接引入</li></ul><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- or --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/gitalk/dist/gitalk.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/gitalk/dist/gitalk.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li><code>npm</code> 方式安装</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save gitalk</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">import</span> <span class="token string">'gitalk/dist/gitalk.css'</span><span class="token function">import</span> Gitalk from <span class="token string">'gitalk'</span></code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li>通过 <code>javascript</code> 代码生成插件</li></ul><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 添加容器 用于显示评论 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gitalk-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 代码生成 gitalk 插件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">var</span> gitalk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gitalk</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">clientID</span><span class="token operator">:</span> <span class="token string">'GitHub Application Client ID'</span><span class="token punctuation">,</span>    <span class="token literal-property property">clientSecret</span><span class="token operator">:</span> <span class="token string">'GitHub Application Client Secret'</span><span class="token punctuation">,</span>    <span class="token literal-property property">repo</span><span class="token operator">:</span> <span class="token string">'GitHub repo'</span><span class="token punctuation">,</span>    <span class="token literal-property property">owner</span><span class="token operator">:</span> <span class="token string">'GitHub repo owner'</span><span class="token punctuation">,</span>    <span class="token literal-property property">admin</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'GitHub repo owner and collaborators, only these guys can initialize github issues'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> location<span class="token punctuation">.</span>pathname<span class="token punctuation">,</span> <span class="token comment">// Ensure uniqueness and length less than 50</span>    <span class="token literal-property property">distractionFreeMode</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// Facebook-like distraction free mode</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 实例方法： render 初始化渲染并挂载插件。</span>  gitalk<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'gitalk-container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>通过组件方式使用</li></ul><pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> GitalkComponent <span class="token keyword">from</span> <span class="token string">'gitalk/dist/gitalk-component'</span><span class="token punctuation">;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">GitalkComponent</span></span>  <span class="token attr-name">options</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>    clientID<span class="token operator">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span>    <span class="token comment">// ...</span>    <span class="token comment">// 设置项</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">/></span></span><span class="token punctuation">;</span></code></pre><h4 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h4><p><code>非必须项均存在默认值。</code> <a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md">了解更多</a></p><table><thead><tr><th>key</th><th>type</th><th>required</th><th>description</th></tr></thead><tbody><tr><td><strong>clientID</strong></td><td>String</td><td><strong>必须</strong></td><td>GitHub Application Client ID.</td></tr><tr><td><strong>clientSecret</strong></td><td>String</td><td><strong>必须</strong></td><td>GitHub Application Client Secret.</td></tr><tr><td><strong>repo</strong></td><td>String</td><td><strong>必须</strong></td><td>GitHub repository.</td></tr><tr><td><strong>owner</strong></td><td>String</td><td><strong>必须</strong></td><td>GitHub repository 所有者，可以是个人或者组织。</td></tr><tr><td><strong>admin</strong></td><td>Array</td><td><strong>必须</strong></td><td>GitHub repository 的所有者和合作者 (对这个 repository 有写权限的用户)。</td></tr><tr><td><strong>id</strong></td><td>String</td><td>非必须</td><td>页面的唯一标识。长度必须小于 50，Default: <code>location.href</code>.</td></tr><tr><td><strong>number</strong></td><td>Number</td><td>非必须</td><td>页面的 issue ID 标识，若未定义<code>number</code>属性则会用<code>id</code>定位。</td></tr><tr><td><strong>labels</strong></td><td>Array</td><td>非必须</td><td>GitHub issue 的标签。</td></tr><tr><td><strong>title</strong></td><td>String</td><td>非必须</td><td>GitHub issue 的标题。</td></tr><tr><td><strong>body</strong></td><td>String</td><td>非必须</td><td>GitHub issue 的内容。</td></tr><tr><td><strong>language</strong></td><td>String</td><td>非必须</td><td>语言支持 [en, zh-CN, zh-TW, es-ES, fr, ru, de, pl, ko, fa, ja]。</td></tr><tr><td><strong>perPage</strong></td><td>Number</td><td>非必须</td><td>每次加载的数据大小，最多 100。</td></tr><tr><td><strong>distractionFreeMode</strong></td><td>Boolean</td><td>非必须</td><td>类似 Facebook 评论框的全屏遮罩效果</td></tr><tr><td><strong>pagerDirection</strong></td><td>String</td><td>非必须</td><td>评论排序 <code>last</code>为按评论创建时间倒序，<code>first</code>正序。</td></tr><tr><td><strong>createIssueManually</strong></td><td>Boolean</td><td>非必须</td><td>如果当前页面没有相应的 isssue 且登录的用户属于 admin，则会自动创建 issue。如果设置为 <code>true</code>，则显示一个初始化页面，创建 issue 需要点击 <code>init</code> 按钮。</td></tr><tr><td><strong>proxy</strong></td><td>String</td><td>非必须</td><td>GitHub oauth 请求到反向代理，为了支持 CORS。</td></tr><tr><td><strong>flipMoveOptions</strong></td><td>Object</td><td>非必须</td><td>评论列表的动画</td></tr><tr><td><strong>enableHotKey</strong></td><td>Boolean</td><td>非必须</td><td>启用快捷键(cmd|ctrl + enter) 提交评论</td></tr></tbody></table><p><code>repo: github 仓库的名称(注意不是地址) ...</code></p><p><code>必须项 clientID、clientSecret 是通过 Github App、OAuth App 创建生成的，怎么创建呢?</code></p><h3 id="关于-Github-App、OAuth-App"><a href="#关于-Github-App、OAuth-App" class="headerlink" title="关于 Github App、OAuth App"></a>关于 <code>Github App、OAuth App</code></h3><p>官方的说法：</p><blockquote><p><code>GitHub Apps are first-class actors within GitHub. A GitHub App acts on its own behalf, taking actions via the API directly using its own identity, which means you don&#39;t need to maintain a bot or service account as a separate user.</code></p></blockquote><p>简言之就是： 通过 <code>Github</code> 提供的认证信息去调用 <code>Github API</code>。</p><ul><li>两者异同点：</li></ul><p>​ <code>OAuth App</code> 使用方式和 <code>Github App</code> 非常类似，最大的不同点是 <code>OAuth App</code> 所获取的权限都是<strong>固定</strong>且<strong>只读</strong>的，用户只能读取固定的数据而不能修改数据；而 <code>Github App</code> 几乎可以获取<strong>Github</strong>提供的所有功能权限，且所获取的权限可以被设定为“只读”，“可读可写”和“禁止访问”，对于权限的授权粒度会更细。</p><h3 id="第三方登录的原理"><a href="#第三方登录的原理" class="headerlink" title="第三方登录的原理"></a>第三方登录的原理</h3><p><code>Github App</code> 可以免去用户在第三方页面输入账号密码或者 <code>Token</code> 的操作而完成授权，原理：</p><ul><li><p><code>A</code> 网站跳转到 <code>Github</code> 的授权页面。</p></li><li><p><code>Github</code> 授权页面询问用户：“是否允许 <code>A</code> 网站获取下列权限”，用户点击“允许”，取得授权码。</p></li><li><p><code>Github</code> 授权页面重定向回 <code>A</code> 网站，同时在 <code>URL</code> 上带上授权码。</p></li><li><p><code>A</code> 网站通过 <code>URL</code> 上的授权码往 <code>Github</code> 取回 <code>Token</code>。</p></li><li><p><code>A</code> 网站使用这个 <code>Token</code> 去调用 <code>Github API</code>。</p></li></ul><p>要完成上述的流程，首先必须先注册一个 <code>Github App</code>。</p><h3 id="添加-gitalk-评论"><a href="#添加-gitalk-评论" class="headerlink" title="添加 gitalk 评论"></a>添加 <code>gitalk</code> 评论</h3><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><p><code>gitalk 是基于 Github 的 Issue的，需要指定仓库来承载评论， 当然这个仓库可以是你现有的 blog 仓库，也可以单独创建。</code></p><h4 id="创建-OAuth-App"><a href="#创建-OAuth-App" class="headerlink" title="创建 OAuth App"></a>创建 <code>OAuth App</code></h4><p><code>创建成功后生成 clientID、clientSecret 凭证，供 hexo 获取用于调用 github-api 的 token.</code></p><ul><li><strong>登录</strong> -&gt; 点击头像进入 <strong>Settings</strong> -&gt; 点击进入 <strong>Developer settings</strong> -&gt; 点击左侧 <strong>OAuth App</strong>面板 -&gt; 点击 <strong>New OAuth App</strong></li><li>or <a href="https://github.com/settings/applications/new">链接</a></li></ul><p><a href="/images/posts/hexo-gitalk-generate/p1.png"><img src="/images/posts/hexo-gitalk-generate/p1.png" alt="hexo-gitalk-generate-p1" loading="lazy"></a></p><h4 id="集成插件"><a href="#集成插件" class="headerlink" title="集成插件"></a>集成插件</h4><p><em>部分 <code>hexo</code> 框架已经集成了 <code>gitalk</code> 插件资源，只需要开启配置就可以了，如果是用于别的系统或博客，可以通过上面的“<code>gitalk</code> 安装使用” 完成集成</em>.</p><h3 id="过程问题记录"><a href="#过程问题记录" class="headerlink" title="过程问题记录"></a>过程问题记录</h3><p>按着流程，一步一步小心翼翼的完成所有配置，遇到了一些坑，有因为自己 sb 导致的问题，也有因为版本导致的问题.</p><ul><li><code>Error: Not Found.</code></li></ul><p>出现这个现象，打开调试模式发现：<code>issues</code> 报错（找不到配置中填写的仓库），验证： 浏览器打开 <code>https://github.com/用户名/你配置的仓库名称</code>, 观察是否能够访问</p><ul><li>打开即显示：未找到相关的 <code>Issues</code> 进行评论 请联系<strong>***</strong> 初始化创建(同时接口报错)</li></ul><p>​ 开始我以为是真的没有初始化创建导致的，点击授权后，<code>redirect</code> 回来 评论这个地方一直 <code>loading</code> 然后报错 <code>403</code>。</p><p>​ 打开调试模式： <code>issues</code> 接口正常，数据为空(现在还没有评论数据，正常),说明仓库没有问题，是创建好的，继续观察有没有接口报错: <code>user</code> 接口报错，说明配置的 <code>github</code> 账号在登录过程中出了问题，没有登录成功， <code>access_token</code> 报错 <code>403</code>。</p><p>​ 通过查阅，最后发现了这个：</p><blockquote><p><code>PSA: Public demo server (cors-anywhere.herokuapp.com) will be very limited by January 2021, 31st</code></p><p><code>The demo server of CORS Anywhere (cors-anywhere.herokuapp.com) is meant to be a demo of this project. But abuse has become so common that the platform where the demo is hosted (Heroku) has asked me to shut down the server, despite efforts to counter the abuse (rate limits in [#45](https://github.com/Rob--W/cors-anywhere/issues/45) and [#164](https://github.com/Rob--W/cors-anywhere/issues/164), and blocking other forms of requests). Downtime becomes increasingly frequent (e.g. recently [#300](https://github.com/Rob--W/cors-anywhere/issues/300), [#299](https://github.com/Rob--W/cors-anywhere/issues/299), [#295](https://github.com/Rob--W/cors-anywhere/issues/295), [#294](https://github.com/Rob--W/cors-anywhere/issues/294), [#287](https://github.com/Rob--W/cors-anywhere/issues/287)) due to abuse and its popularity.</code></p><p><code>To counter this, I will make the following changes:</code></p><p><code>1. The rate limit will decrease from 200 ([#164](https://github.com/Rob--W/cors-anywhere/issues/164)) per hour to 50 per hour.</code> &gt; <code>2. By January 31st, 2021, cors-anywhere.herokuapp.com will stop serving as an open proxy.</code> &gt; <code>3. From February 1st. 2021, cors-anywhere.herokuapp.com will only serve requests after the visitor has completed a challenge: The user (developer) must visit a page at cors-anywhere.herokuapp.com to temporarily unlock the demo for their browser. This allows developers to try out the functionality, to help with deciding on self-hosting or looking for alternatives.</code></p></blockquote><p>​ 因为 <code>gitalk</code> 是基于 <code>cors-anywhere.herokuapp.com</code> 实现的反向代理。<code>cors-anywhere</code> 禁用了， <code>gitalk</code> 没有拿到 <code>github</code> 的授权，导致问题出现。问题原因找到了，那我们怎么解决呢？白嫖公共的 <code>CORS proxy</code> ？ 自己部署？有没有师兄同样遇到了这个问题，怎么解决的？</p><p>白嫖公共的 <code>CORS proxy</code>，得需要改 <code>gitalk.js</code> 的源码，局限性高，并不太好。想着 <code>gitalk</code> 也用到了这个，于是在翻了文档后发现：</p><blockquote><p>在 <code>1.7.2</code> 版本的 <code>gitalk.min.js</code> 中，<code>proxy</code> 已经换成了<br><code>https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</code></p></blockquote><p>更新版本到 <code>1.7.2</code> – 修改 <code>cdn</code> 引用即可</p><pre class="language-diff" data-language="diff"><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> gitalk_js:</span><span class="token prefix deleted">-</span><span class="token line"> gitalk_css:</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> gitalk_js: //cdn.jsdelivr.net/npm/gitalk@1.7.2/dist/gitalk.min.js</span><span class="token prefix inserted">+</span><span class="token line"> gitalk_css: //cdn.jsdelivr.net/npm/gitalk@1.7.2/dist/gitalk.css</span></span></code></pre><p>​ 除此之外，在另外一篇文章里我介绍了添加自动化创建 <code>Issues</code> 的过程。详见 【<a href="/posts/hexo-gitalk-auto-init">Hexo-Gitalk 评论模块的自动化创建</a>】</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://github.com/gitalk/gitalk/issues/429">在授权 gitalk 后出现 403 错误</a></li><li><a href="https://cuiqingcai.com/30010.html">Gitalk 评论登录 403 问题解决</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 收藏安利 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> gitalk </tag>
            
            <tag> issue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>emoji 表情收藏分享</title>
      <link href="/posts/emoji-collect/"/>
      <url>/posts/emoji-collect/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>收集一些常用的 emoji，用他们来表达自己的情绪 😂。Emoji 虽然是文字，但是无法书写，必须使用其他方法插入文档 ，比如 CTRL C + CTRL V，此外也可以通过快捷键的方式插入，比如 windows 下的 win + 。</p></blockquote><span id="more"></span><h3 id="人脸情感类"><a href="#人脸情感类" class="headerlink" title="人脸情感类"></a>人脸情感类</h3><hr><p>😀😃😄😁😆😅🤣😂🙂🙃😉😊😇🥰😍🤩😘😗😚😙😋😛😜🤪😝🤑🤗🤭🤫🤔🤐🤨😐😑😶😏😒🙄😬🤥😌😔😪🤤😴😷🤒🤕🤢🤮🤧🥵🥶🥴😵🤯🤠🥳😎🤓🧐😕😟🙁😮😯😲😳🥺😦😧😨😰😥😢😭😱😖😣😞😓😩😫😤😠<br>😡🤬😈👿💀💩🤡👹👺👻👽👾🤖😺😸😹😻😼😽🙀😿😾💋<br>👋🤚🖐✋🖖👌✌🤞🤟🤘🤙👈👉👆🖕👇☝👍👎✊👊🤛🤜👏🙌👐🤲🤝🙏✍💅🤳💪🦵🦶👂👃🧠🦷🦴👀👁👅👄<br>👶🧒👦👧🧑👱👨🧔👨‍🦰👨‍🦱👨‍🦳👨‍🦲👩👩‍🦰👩‍🦱👩‍🦳👩‍🦲👱‍♀️👱‍♂️🧓👴👵🙍🙍‍♂️🙍‍♀️🙎🙎‍♂️🙎‍♀️🙅🙅‍♂️🙅‍♀️🙆🙆‍♂️🙆‍♀️💁💁‍♂️💁‍♀️🙋🙋‍♂️🙋‍♀️🙇🙇‍♂️🙇‍♀️🤦🤦‍♂️🤦‍♀️🤷🤷‍♂️🤷‍♀️👨‍⚕️👩‍⚕️👨‍🎓👩‍🎓👨‍🏫👩‍🏫👨‍⚖️👩‍⚖️👨‍🌾👩‍🌾👨‍🍳👩‍🍳👨‍🔧👩‍🔧👨‍🏭👩‍🏭👨‍💼👩‍💼👨‍🔬👩‍🔬👨‍💻👩‍💻👨‍🎤👩‍🎤👨‍🎨👩‍🎨👨‍✈️👩‍✈️👨‍🚀👩‍🚀👨‍🚒👩‍🚒👮👮‍♂️👮‍♀️🕵🕵️‍♂️🕵️‍♀️💂💂‍♂️💂‍♀️👷👷‍♂️👷‍♀️🤴👸👳👳‍♂️👳‍♀️👲🧕🤵👰🤰🤱👼🎅🤶🦸🦸‍♂️🦸‍♀️🦹🦹‍♂️🦹‍♀️🧙🧙‍♂️🧙‍♀️🧚🧚‍♂️🧚‍♀️🧛🧛‍♂️🧛‍♀️🧜🧜‍♂️🧜‍♀️🧝🧝‍♂️🧝‍♀️🧞🧞‍♂️🧞‍♀️🧟🧟‍♂️🧟‍♀️💆💆‍♂️💆‍♀️💇💇‍♂️💇‍♀️<br>🚶🚶‍♂️🚶‍♀️🏃🏃‍♂️🏃‍♀️💃🕺🕴👯👯‍♂️👯‍♀️🧖🧖‍♂️🧖‍♀️🧘👭👫👬💏👨‍❤️‍💋‍👨👩‍❤️‍💋‍👩💑👨‍❤️‍👨👩‍❤️‍👩👪👨‍👩‍👦👨‍👩‍👧👨‍👩‍👧‍👦👨‍👩‍👦‍👦👨‍👩‍👧‍👧👨‍👨‍👦👨‍👨‍👧👨‍👨‍👧‍👦👨‍👨‍👦‍👦👨‍👨‍👧‍👧👩‍👩‍👦👩‍👩‍👧👩‍👩‍👧‍👦👩‍👩‍👦‍👦👩‍👩‍👧‍👧👨‍👦👨‍👦‍👦👨‍👧👨‍👧‍👦👨‍👧‍👧👩‍👦👩‍👦‍👦👩‍👧👩‍👧‍👦👩‍👧‍👧🗣<br>👤👥👣🧳🌂☂🧵🧶👓🕶🥽🥼👔👕👖🧣🧤🧥🧦👗👘👙👚👛👜👝🎒👞👟🥾🥿👠👡👢👑👒🎩🎓🧢⛑💄💍💼</p><h3 id="动物与自然类"><a href="#动物与自然类" class="headerlink" title="动物与自然类"></a>动物与自然类</h3><hr><p>🙈🙉🙊💥💫💦💨🐵🐒🦍🐶🐕🐩🐺🦊🦝🐱🐈🦁🐯🐅🐆🐴🐎🦄🦓🦌🐮🐂🐃🐄🐷🐖🐗🐽🐏🐑🐐🐪🐫🦙🦒🐘🦏🦛🐭🐁🐀🐹🐰🐇🐿🦔🦇🐻🐨🐼🦘🦡🐾🦃🐔🐓🐣🐤🐥🐦🐧🕊🦅🦆🦢🦉🦚🦜🐸🐊🐢🦎🐍🐲🐉🦕🦖🐳🐋🐬🐟🐠🐡🦈🐙🐚🐌🦋🐛🐜🐝🐞🦗🕷🕸🦂🦟🦠<br>💐🌸💮🏵🌹🥀🌺🌻🌼🌷🌱🌲🌳🌴🌵🌾🌿☘🍀🍁🍂🍃🍄🌰🦀🦞🦐🦑<br>🌍🌎🌏🌐🌑🌒🌓🌔🌕🌖🌗🌘🌙🌚🌛🌜☀🌝🌞⭐🌟🌠☁⛅⛈🌤🌥🌦🌧🌨🌩🌪🌫🌬🌈<br>☂☔⚡❄☃⛄☄🔥💧🌊🎄✨🎋🎍</p><h3 id="食物类"><a href="#食物类" class="headerlink" title="食物类"></a>食物类</h3><hr><p>🍇🍈🍉🍊🍋🍌🍍🥭🍎🍏🍐🍑🍒🍓🥝🍅🥥🥑🍆🥔🥕🌽🌶🥒🥬🥦🍄🥜🌰🍞🥐🥖🥨🥯🥞🧀🍖🍗🥩🥓🍔🍟🍕🌭🥪🌮🌯🥙🍳🥘🍲🥣🥗🍿🧂🥫🍱🍘🍙🍚🍛🍜🍝🍠🍢🍣🍤🍥🥮🍡🥟🥠🥡🍦🍧🍨🍩🍪🎂🍰🧁🥧🍫🍬🍭🍮🍯🍼🥛☕🍵🍶🍾🍷🍸🍹🍺🍻🥂🥃🥤🥢🍽🍴🥄</p><h3 id="活动类"><a href="#活动类" class="headerlink" title="活动类"></a>活动类</h3><hr><p>🕴🧗🧗‍♂️🧗‍♀️🏇⛷🏂🏌🏌️‍♂️🏌️‍♀️🏄🏄‍♂️🏄‍♀️🚣🚣‍♂️🚣‍♀️🏊🏊‍♂️🏊‍♀️⛹⛹️‍♂️⛹️‍♀️🏋🏋️‍♂️🏋️‍♀️🚴🚴‍♂️🚴‍♀️🚵🚵‍♂️🚵‍♀️🤸🤸‍♂️🤸‍♀️🤼🤼‍♂️🤼‍♀️🤽🤽‍♂️🤽‍♀️🤾🤾‍♂️🤾‍♀️🤹🤹‍♂️🤹‍♀️🧘🧘‍♂️🧘‍♀️🎪🛹🎗🎟🎫🎖🏆🏅🥇🥈🥉⚽⚾🥎🏀🏐🏈🏉🎾🥏🎳🏏🏑🏒🥍🏓🏸🥊🥋⛳⛸🎣🎽🎿🛷🥌🎯🎱🎮🎰🎲🧩♟🎭🎨🧵🧶🎼🎤🎧🎷🎸🎹🎺🎻🥁🎬🏹</p><h3 id="交通与地点类"><a href="#交通与地点类" class="headerlink" title="交通与地点类"></a>交通与地点类</h3><hr><p>🚣🗾🏔⛰🌋🗻🏕🏖🏜🏝🏞🏟🏛🏗🏘🏚🏠🏡🏢🏣🏤🏥🏦🏨🏩🏪🏫🏬🏭🏯🏰💒🗼🗽⛪🕌🕍⛩🕋⛲⛺🌁🌃🏙🌄🌅🌆🌇🌉🎠🎡🎢🚂🚃🚄🚅🚆🚇🚈🚉🚊🚝🚞🚋🚌🚍🚎🚐🚑🚒🚓🚔🚕🚖🚗🚘🚚🚛🚜🏎🏍🛵🚲🛴🚏🛤⛽🚨🚥🚦🚧⚓⛵🚤🛳⛴🛥🚢✈🛩🛫🛬💺🚁🚟🚠🚡🛰🚀🛸🌠🌌⛱🎆🎇🎑💴💵💶💷🗿🛂🛃🛄🛅</p><h3 id="常见事物类"><a href="#常见事物类" class="headerlink" title="常见事物类"></a>常见事物类</h3><hr><p>💌🕳💣🛀🛌🔪🏺🗺🧭🧱💈🛢🛎🧳⌛⏳⌚⏰⏱⏲🕰🌡⛱🧨🎈🎉🎊🎎🎏🎐🧧🎀🎁🔮🧿🕹🧸🖼🧵🧶🛍📿💎📯🎙🎚🎛📻📱📲☎📞📟📠🔋🔌💻🖥🖨⌨🖱🖲💽💾💿📀🧮🎥🎞📽📺📷📸📹📼🔍🔎🕯💡🔦🏮📔📕📖📗📘📙📚📓📃📜📄📰🗞📑🔖🏷💰💴💵💶💷💸💳🧾✉📧📨📩📤📥📦📫📪📬📭📮🗳✏✒🖋🖊🖌🖍📝📁📂🗂📅📆🗒🗓📇📈📉📊📋📌📍📎🖇📏📐✂🗃🗄🗑🔒🔓🔏🔐🔑🗝🔨⛏⚒🛠🗡⚔🔫🛡🔧🔩⚙🗜⚖🔗⛓🧰🧲⚗🧪🧫🧬🔬🔭📡💉💊🚪🛏🛋🚽🚿🛁🧴🧷🧹🧺🧻🧼🧽🧯🚬⚰⚱🗿🚰</p><h3 id="标志类"><a href="#标志类" class="headerlink" title="标志类"></a>标志类</h3><hr><p>💘💝💖💗💓💞💕💟❣💔❤🧡💛💚💙💜🖤💯💢💬👁️‍🗨️🗯💭💤💮♨💈🛑<br>🕛🕧🕐🕜🕑🕝🕒🕞🕓🕟🕔🕠🕕🕡🕖🕢🕗🕣🕘🕤🕙🕥🕚🕦<br>🌀♠♥♦♣🃏🀄🎴🔇🔈🔉🔊📢📣📯🔔🔕🎵🎶🏧🚮🚰♿🚹🚺🚻🚼🚾⚠🚸⛔🚫🚳🚭🚯🚱🚷🔞<br>☢☣⬆↗➡↘⬇↙⬅↖↕↔↩↪⤴⤵🔃🔄🔙🔚🔛🔜🔝🛐⚛🕉✡☸☯✝☦☪☮<br>🕎🔯♈♉♊♋♌♍♎♏♐♑♒♓⛎🔀🔁🔂▶⏩◀⏪🔼⏫🔽⏬⏹⏏🎦<br>🔅🔆📶📳📴♾♻🔱📛🔰⭕✅☑✔✖❌❎➕➖➗➰➿〽✳✴❇‼⁉❓❔❕❗©®™</p><p>️🔟🔠🔡🔢🔣🔤🅰🆎🅱🆑🆒🆓ℹ🆔Ⓜ🆕🆖🅾🆗🅿🆘🆙🆚🈁</p><p>🈂🈷🈶🈯 🉐 🈹🈚🈲 🉑 🈸🈴🈳 ㊗㊙ 🈺🈵<br>🔴🔵⚫⚪⬛⬜◼◻◾◽▪▫🔶🔷🔸🔹🔺🔻💠🔳🔲</p><h3 id="旗帜类"><a href="#旗帜类" class="headerlink" title="旗帜类"></a>旗帜类</h3><hr><p>🏁🚩🎌🏴🏳🏳️‍🌈🏳️‍⚧️🏴‍☠️🏴󠁧󠁢󠁥󠁮󠁧󠁿🏴󠁧󠁢󠁳󠁣󠁴󠁿🏴󠁧󠁢󠁷󠁬󠁳󠁿🏴󠁵󠁳󠁴󠁸󠁿</p>]]></content>
      
      
      <categories>
          
          <category> 收藏安利 </category>
          
          <category> Emoji </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emoji </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜狗输入法自定义时间代码片段</title>
      <link href="/posts/keyboard-input-snippet/"/>
      <url>/posts/keyboard-input-snippet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="浅谈"><a href="#浅谈" class="headerlink" title="浅谈"></a>浅谈</h3><p>什么是输入法片段？旨在通过特殊的字符串来输出自定义好的文本，达到便捷输出的目的。<a href="https://pinyin.sogou.com/help.php?list=1&q=9">https://pinyin.sogou.com/help.php?list=1&q=9</a></p><p>当然除了自己定义外，还有一些内置的短语片段，例如<code>sj</code>会输出时间，<code>xq</code>会输出星期内容，<code>rq</code>会输出具体日期..如图：</p><p><a href="/images/posts/keyboard-input-snippet/p1.png"><img src="/images/posts/keyboard-input-snippet/p1.png" alt="keyboard-input-snippet-p1" loading="lazy"></a></p><p>然后来说说怎么自定义，就拿时间举例…<del>因为我觉得内置的<code>sj</code>短语不太能满足我的格式需求</del></p><span id="more"></span><h3 id="添加时间短语"><a href="#添加时间短语" class="headerlink" title="添加时间短语"></a>添加时间短语</h3><blockquote><p>输入法-&gt; 属性设置 -&gt; 高级 -&gt; 候选扩展 -&gt; 自定义短语设置 -&gt; 添加新短语</p></blockquote><p>短语除了固定性的内容以外，还可以是模板… <code>#开头</code>形如<code>#xxxxxx</code>,了解模板的关键字函数：</p><h3 id="函数公式"><a href="#函数公式" class="headerlink" title="函数公式"></a>函数公式</h3><table><thead><tr><th align="left">函数</th><th align="center">含义</th><th align="right">举例</th></tr></thead><tbody><tr><td align="left">$year</td><td align="center">年(4 位)</td><td align="right">2006、2008</td></tr><tr><td align="left">$year_yy</td><td align="center">年(2 位)</td><td align="right">06、08</td></tr><tr><td align="left">$month</td><td align="center">月</td><td align="right">12、8、3</td></tr><tr><td align="left">$month_mm</td><td align="center">月</td><td align="right">12、08、03 此函数在输入法 3.1 版之后（含）有效</td></tr><tr><td align="left">$day</td><td align="center">日</td><td align="right">3、13、22</td></tr><tr><td align="left">$day_dd</td><td align="center">日</td><td align="right">03、13、22 此函数在输入法 3.1 版之后（含）有效</td></tr><tr><td align="left">$weekday</td><td align="center">星期</td><td align="right">0、1、2、5、6</td></tr><tr><td align="left">$fullhour</td><td align="center">时(24 小时制)</td><td align="right">02、08、13、23</td></tr><tr><td align="left">$halfhour</td><td align="center">(12 小时制)</td><td align="right">02、08、01、11</td></tr><tr><td align="left">$ampm</td><td align="center">AM、PM(英)</td><td align="right">AM、PM（大写）</td></tr><tr><td align="left">$minute</td><td align="center">分</td><td align="right">02、08、15、28</td></tr><tr><td align="left">$second</td><td align="center">秒</td><td align="right">02、08、15、28</td></tr><tr><td align="left">$year_cn</td><td align="center">年(中文 4 位)</td><td align="right">二〇〇六</td></tr><tr><td align="left">$year_yy_cn</td><td align="center">年(中文 2 位)</td><td align="right">〇六</td></tr><tr><td align="left">$month_cn</td><td align="center">月(中文)</td><td align="right">十二、八、三</td></tr><tr><td align="left">$day_cn</td><td align="center">日(中文)</td><td align="right">三、十三、二十二</td></tr><tr><td align="left">$weekday_cn</td><td align="center">星期(中文)</td><td align="right">日、一、二、五、六</td></tr><tr><td align="left">$fullhour_cn</td><td align="center">时(中文 24 时制)</td><td align="right">二、八、十三、二十三</td></tr><tr><td align="left">$halfhour_cn</td><td align="center">时(中文 12 时制)</td><td align="right">二、八、一、十一</td></tr><tr><td align="left">$ampm_cn</td><td align="center">上午下午(中文)</td><td align="right">上午、下午</td></tr><tr><td align="left">$minute_cn</td><td align="center">分(中文)</td><td align="right">零二、零八、十五、二十八</td></tr><tr><td align="left">$second_cn</td><td align="center">秒(中文)</td><td align="right">零二、零八、十五、二十八</td></tr></tbody></table><p><code>eg.</code>设置形如<code>2022-08-17 11:31:14</code>格式的短语：</p><blockquote><p><code>#$year-$month_mm-$day_dd $fullhour:$minute:$second</code></p></blockquote><p>效果如下：</p><p><a href="/images/posts/keyboard-input-snippet/p2.png"><img src="/images/posts/keyboard-input-snippet/p2.png" alt="keyboard-input-snippet-p2" loading="lazy"></a></p>]]></content>
      
      
      <categories>
          
          <category> 收藏安利 </category>
          
          <category> 代码片段 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 输入法 </tag>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 的服务搭建和简单使用</title>
      <link href="/tools/hexo/"/>
      <url>/tools/hexo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="What-is-Hexo"><a href="#What-is-Hexo" class="headerlink" title="What is Hexo?"></a>What is Hexo?</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<a href="https://hexo.io/docs/">详见文档</a></p><span id="more"></span><h3 id="开始搭建你的Hexo服务"><a href="#开始搭建你的Hexo服务" class="headerlink" title="开始搭建你的Hexo服务"></a>开始搭建你的<code>Hexo</code>服务</h3><h4 id="安装脚手架"><a href="#安装脚手架" class="headerlink" title="安装脚手架"></a>安装脚手架</h4><blockquote><p>npm install -g hexo-cli</p></blockquote><p>仅局部安装：</p><blockquote><p>npm install hexo</p></blockquote><h4 id="初始化你的博客项目"><a href="#初始化你的博客项目" class="headerlink" title="初始化你的博客项目"></a>初始化你的博客项目</h4><blockquote><p>hexo init <blogName><br>cd blogName<br>yarn or npm i</p></blockquote><h4 id="配置你的博客信息"><a href="#配置你的博客信息" class="headerlink" title="配置你的博客信息"></a>配置你的博客信息</h4><p><code>_config.yml</code>即为博客的配置信息文件，详见<a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 。</p><h4 id="主要文件夹说明"><a href="#主要文件夹说明" class="headerlink" title="主要文件夹说明"></a>主要文件夹说明</h4><p><code>scaffolds</code>文件夹可以配置你的文章模板，即每次 hexo 新建文章都会根据此文件夹配置建立文件。</p><p><code>source</code>就是你的文章相关的资源文件。</p><p><code>themes</code>主题文件夹，根据主题来生成对应静态页面。</p><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p>在<code>package.json</code>中可以发现程序的启动指令。</p><blockquote><p>hexo server [hexo s] [yarn server]</p></blockquote><p>在<code>terminal</code>中找到服务地址，默认<code>http://localhost:4000/</code>,打开浏览器即可浏览你的博客</p><h3 id="根据你的口味配置想要的主题模板"><a href="#根据你的口味配置想要的主题模板" class="headerlink" title="根据你的口味配置想要的主题模板"></a>根据你的口味配置想要的主题模板</h3><ul><li><p>打开<code>github</code>，搜索<code>hexo-theme</code>，根据<code>star</code>的数量排个序，挨个去看效果，选择自己心仪的主题</p></li><li><p><code>cd themes &amp;&amp; git clone xxx</code>，将找到的主题文件资源克隆到<code>themes</code>文件夹下</p></li><li><p>根据主题的相关配置项提示进行配置，重启服务即可看到效果。(每个主题可能配置方式不一样，大同小异)</p></li></ul><h3 id="开启你的博客之路"><a href="#开启你的博客之路" class="headerlink" title="开启你的博客之路"></a>开启你的博客之路</h3><blockquote><p>新建文章，<code>layout</code>对应<code>draft、post、page(草稿source/_drafts、文章source/_posts、页面source)</code></p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span></code></pre><p>其他辅助参数：</p><pre class="language-none"><code class="language-none">-p, --path自定义新文章的路径-r, --replace如果存在同名文章，将其替换-s, --slug文章的 Slug，作为新文章的文件名和发布后的 URL</code></pre><p><code>eg</code>. 我想在<code>_posts/share</code>文件夹下创建一片<code>a.md</code>的文章，且文章的页面<code>title</code>为‘这是 A’</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new post -p share/a <span class="token string">'这是A'</span><span class="token comment"># 创建一篇草稿</span>hexo new draft <span class="token punctuation">..</span>.<span class="token comment"># 发布</span>hexo publish <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span></code></pre><blockquote><p>其他常用指令说明：</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成静态文件，在 public 文件夹下</span>hexo generatehexo g<span class="token comment"># 清除缓存文件 (db.json) 和已生成的静态文件 (public)</span>hexo clean<span class="token comment"># 部署网站 -g, --generate部署之前预先生成静态文件</span>hexo deploy<span class="token comment"># 草稿发表，移动到 source/_posts 文件夹</span>hexo publish <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>filename<span class="token operator">></span></code></pre><h3 id="将Hexo部署到GitHub-Pages"><a href="#将Hexo部署到GitHub-Pages" class="headerlink" title="将Hexo部署到GitHub Pages"></a><a href="https://hexo.io/zh-cn/docs/github-pages">将<code>Hexo</code>部署到<code>GitHub Pages</code></a></h3>]]></content>
      
      
      <categories>
          
          <category> 工具学习 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> hexo-cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 装机后的个人使用优化</title>
      <link href="/envConstruct/system-optimization-setting/"/>
      <url>/envConstruct/system-optimization-setting/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><div class="warning"><blockquote><p>前提：完成系统安装</p><p>本文仅针对 Windows 11 系统，其他系统请自行探索。</p><p>其次内容主要<strong>为个人(自己)重装系统</strong>后的优化配置，通过记录方便以后重装时恢复设置，并非面向大众(仅供参考)。</p></blockquote></div><p>在完成 <code>windows</code> 安装的系列指引后（包括但不限于账户登录创建，开机 <code>PIN</code> 码等等），磁盘分区一般分三个区【<code>C（系统）</code>、<code>D（软件程序）</code>、<code>E（文件）</code>，按自己习惯为主】，开始下面操作：</p><span id="more"></span><h3 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h3><p>第一件事当然是安装驱动了…否则电脑能否稳定运行都还是两回事…又特别是显卡驱动，毕竟有些主板是没有带核显的。</p><p>一些比较重要的驱动，优先去官网下载，例如英伟达的显卡驱动，选择你的显卡对应版本下载并安装：<a href="https://www.nvidia.cn/geforce/drivers/">NVIDIA GeForce 驱动程序 - N 卡驱动 | NVIDIA</a>，推荐优先下载 <code>GeForce Experience</code> 自动更新驱动程序。<del>补充说明：Studio 是稳定版，Game Ready 可以看做是针对游戏优化的先行版</del></p><h4 id="驱动软件"><a href="#驱动软件" class="headerlink" title="驱动软件"></a>驱动软件</h4><p>除开重要的一些驱动，通过驱动软件安装可以提供很多便利，推荐使用：待补充…</p><h3 id="win11-专业版系统激活"><a href="#win11-专业版系统激活" class="headerlink" title="win11 专业版系统激活"></a><code>win11</code> 专业版系统激活</h3><p>参考激活码及评论区激活方案：<a href="https://zhuanlan.zhihu.com/p/637930518">win11 专业版激活密钥</a> <del>😫😫😫 有个前置条件是你有 windows 许可证书，没有就看下面：</del></p><h4 id="数字证书（产品密钥）"><a href="#数字证书（产品密钥）" class="headerlink" title="数字证书（产品密钥）"></a>数字证书（产品密钥）</h4><p>笔记本和整装主机一般出厂时就自带，即时你以后重装，也会自动认证，通过上面操作激活就可以了。</p><p>系统盘是微软官方下载制作的，然后自己买的配件组装的主机，没有带 <code>windows</code> 产品密钥，导致无法激活。</p><p>最后…还是去某宝上花几块钱买了个…😥😥😥</p><hr><h3 id="配置-host-和-vpn"><a href="#配置-host-和-vpn" class="headerlink" title="配置 host 和 vpn"></a>配置 <code>host</code> 和 <code>vpn</code></h3><p><code>vpn</code> 这里不做介绍。修改常用 <code>host</code> 映射：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># C:\Windows\System32\drivers\etc\hosts</span><span class="token number">199.232</span>.68.133 raw.githubusercontent.com<span class="token number">127.0</span>.0.1       activate.navicat.com<span class="token number">203.208</span>.40.98 translate.googleapis.com</code></pre><h3 id="system-设置"><a href="#system-设置" class="headerlink" title="system 设置"></a><code>system</code> 设置</h3><h4 id="打开存储感知"><a href="#打开存储感知" class="headerlink" title="打开存储感知"></a>打开存储感知</h4><p>设置 –&gt; 系统 –&gt; 存储 –&gt; 打开存储感知（设置文件清理周期和回收站文件删除周期…）</p><h4 id="修改文件保存位置"><a href="#修改文件保存位置" class="headerlink" title="修改文件保存位置"></a>修改文件保存位置</h4><p>设置 –&gt; 系统 –&gt; 存储 –&gt; 更改新内容的保存位置（将常用文件保存位置改为非系统盘）</p><h4 id="取消部分通知"><a href="#取消部分通知" class="headerlink" title="取消部分通知"></a>取消部分通知</h4><p>设置 –&gt; 系统 –&gt; 通知 –&gt; 取消勾选底部（更新后显示“欢迎 xxx….”，提供关于如何设置设备的建议，使用 <code>windows</code> 时获取提示和建议）</p><h4 id="保存系统剪贴板"><a href="#保存系统剪贴板" class="headerlink" title="保存系统剪贴板"></a>保存系统剪贴板</h4><p>设置 –&gt; 系统 –&gt; 剪贴板 –&gt; 剪贴板历史记录（开启后，<code>win + v</code> 显示多组记录）</p><h4 id="重命名电脑"><a href="#重命名电脑" class="headerlink" title="重命名电脑"></a>重命名电脑</h4><h4 id="开启鼠标键盘睡眠唤醒"><a href="#开启鼠标键盘睡眠唤醒" class="headerlink" title="开启鼠标键盘睡眠唤醒"></a>开启鼠标键盘睡眠唤醒</h4><p>控制面板 –&gt; 硬件和声音 –&gt; 设备管理器 –&gt; 找到键盘和鼠标栏 –&gt; 点击下属驱动并右键属性（或者双击） –&gt; 电源管理 –&gt; 允许此设备唤醒计算机</p><p>如果不生效，则需要进 <code>bios</code> 设置</p><h4 id="添加本地用户"><a href="#添加本地用户" class="headerlink" title="添加本地用户"></a>添加本地用户</h4><p><code>由于我主账号昵称的原因，在文件共享时无法正常访问，通过修改名称无法正常使用共享，后面就添加了个本地账户：</code></p><p>设置 –&gt; 账户 –&gt; 家庭和其他用户 –&gt; 添加其他用户（添加用户后，设置密码，默认权限为普通用户非管理员）</p><p>修改权限和密码，可以通过：控制面板 –&gt; 用户账户 –&gt; 更改账户类型实现</p><h4 id="修改鼠标光标"><a href="#修改鼠标光标" class="headerlink" title="修改鼠标光标"></a>修改鼠标光标</h4><p>设置 –&gt; 蓝牙和其他设备 –&gt; 鼠标 –&gt; 其他鼠标设置 –&gt; 指针 –&gt; <code>windows 反转（系统方案）</code></p><p>设置 –&gt; 辅助功能 –&gt; 鼠标指针和触控 –&gt; 文本光标 –&gt; 开启指示器</p><h4 id="设置-Internet-专用网络"><a href="#设置-Internet-专用网络" class="headerlink" title="设置 Internet 专用网络"></a>设置 <code>Internet</code> 专用网络</h4><p>设置 –&gt; 网络和 <code>Internet</code> –&gt; 以太网 –&gt; 切换到专用（文件共享时需要）</p><h4 id="关闭快速访问中的历史记录显示"><a href="#关闭快速访问中的历史记录显示" class="headerlink" title="关闭快速访问中的历史记录显示"></a>关闭快速访问中的历史记录显示</h4><p>快速访问文件夹右键 –&gt; 选项 –&gt; 常规隐私 –&gt; 取消勾选 “快速访问中显示最近使用的文件&#x2F;文件夹”</p><h4 id="关闭活动记录"><a href="#关闭活动记录" class="headerlink" title="关闭活动记录"></a>关闭活动记录</h4><p>设置 –&gt; 隐私和安全性 –&gt; 活动历史记录 –&gt; 取消勾选 “在此设备上存储我的活动历史记录”</p><h4 id="关闭搜索要点"><a href="#关闭搜索要点" class="headerlink" title="关闭搜索要点"></a>关闭搜索要点</h4><p>设置 –&gt; 隐私和安全性 –&gt; 搜索权限 –&gt; 更多设置（取消勾选 “在搜索栏和搜索主页中查看内容建议”）</p><h4 id="关闭诊断反馈、个性化广告、设备使用情况"><a href="#关闭诊断反馈、个性化广告、设备使用情况" class="headerlink" title="关闭诊断反馈、个性化广告、设备使用情况"></a>关闭诊断反馈、个性化广告、设备使用情况</h4><h4 id="关闭最近打开的项目"><a href="#关闭最近打开的项目" class="headerlink" title="关闭最近打开的项目"></a>关闭最近打开的项目</h4><p>设置 –&gt; 个性化 –&gt; 开始 –&gt; 关闭 “在开始，跳转列表，文件资源管理器中显示” 最近打开的项目</p><h4 id="修改屏幕截图和游戏剪辑文件保存位置"><a href="#修改屏幕截图和游戏剪辑文件保存位置" class="headerlink" title="修改屏幕截图和游戏剪辑文件保存位置"></a>修改屏幕截图和游戏剪辑文件保存位置</h4><p>设置 –&gt; 游戏 –&gt; 摄像（摄像位置） –&gt; 屏幕截图和游戏剪辑保存至 xxx —&gt; 打开文件夹（打开后返回上一级，直接将文件夹剪贴到任意其他你想保存的位置） —&gt; 查看设置里 保存位置已自动修改</p><h4 id="底部任务栏优化"><a href="#底部任务栏优化" class="headerlink" title="底部任务栏优化"></a>底部任务栏优化</h4><p>关闭任务视图、聊天视图、小组件，搜索栏改成 “仅搜索” 图标。</p><p>开启自带的半透明（默认）：设置 –&gt; 个性化 –&gt; 颜色 –&gt; 开启透明选项</p><p>全透明：微软商店 –&gt; 下载 <code>TranslucentTB</code> 安装即可（默认开机自启动）。</p><h4 id="设置桌面壁纸和锁屏"><a href="#设置桌面壁纸和锁屏" class="headerlink" title="设置桌面壁纸和锁屏"></a>设置桌面壁纸和锁屏</h4><h4 id="设置鼠标右键风格"><a href="#设置鼠标右键风格" class="headerlink" title="设置鼠标右键风格"></a>设置鼠标右键风格</h4><p>参考：<a href="https://blog.51cto.com/knifeedge/5340751">Win11–将右键菜单改回 Win10(展开菜单）</a></p><h4 id="显卡设置"><a href="#显卡设置" class="headerlink" title="显卡设置"></a>显卡设置</h4><p>调整视频图像设置 –&gt; 开启 <code>RTX</code> 视觉增强（<code>edge/chrome</code> 浏览器上可实现超原分辨率播放，档数越大越清晰）</p><p>更改分辨率 –&gt; 开启 <code>10bpc</code> 色深（色彩更加丰富，修改后系统设置 高级显示器设置里可以看到位深度变为了 10）</p><h4 id="超分辨率播放（PotPlayer）"><a href="#超分辨率播放（PotPlayer）" class="headerlink" title="超分辨率播放（PotPlayer）"></a>超分辨率播放（<code>PotPlayer</code>）</h4><p>参考：<a href="https://www.163.com/dy/article/HV5VD0UV0552IHUJ.html">1080 秒变 4K，让 PotPlayer 开启“超分辨率”播放视频文件</a></p><p>基本的电脑方面的设置就完成了，下面记录常用软件安装和开发环境搭建…</p><h4 id="浏览器下载"><a href="#浏览器下载" class="headerlink" title="浏览器下载"></a>浏览器下载</h4><p><code>浏览器在使用时登录账号并开启同步功能，方便在重装或者别的电脑上使用时恢复（书签和填充密码等）。</code></p><p>更改文件下载位置，更改搜索引擎为 <code>Google</code>（科学上网）</p><h5 id="chrome、firefox"><a href="#chrome、firefox" class="headerlink" title="chrome、firefox"></a><code>chrome</code>、<code>firefox</code></h5><p>另外两款热门浏览器，因为从事开发的原因，也就装上了。下面主要是记录将 <code>chrome</code> 安装到非系统盘的方法：</p><p>参考：<a href="https://www.cnblogs.com/litstar/p/12763157.html">Chrome 谷歌浏览器如何安装到其他盘</a></p><h4 id="office-全套安装以及破解"><a href="#office-全套安装以及破解" class="headerlink" title="office 全套安装以及破解"></a><code>office</code> 全套安装以及破解</h4><p>安装包以及破解参考：<a href="https://www.nruan.com/office2021.html">https://www.nruan.com/office2021.html</a></p><p>不一定使用 <code>kms</code> 激活，某宝买一个激活码也就几块钱…</p><h4 id="常用软件和环境安装"><a href="#常用软件和环境安装" class="headerlink" title="常用软件和环境安装"></a>常用软件和环境安装</h4><p>…</p><hr><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><div class="info"><blockquote><p>养成良好习惯，浏览器和常用软件下载安装在非系统盘，在安装后，第一件事是修改软件内设置：与文件夹位置相关的配置。</p><p>在常用软件安装完成后，关闭部分不需要开机自启的项目和服务。</p></blockquote></div>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
